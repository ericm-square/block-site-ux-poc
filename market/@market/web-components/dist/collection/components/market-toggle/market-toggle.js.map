{"version":3,"file":"market-toggle.js","sourceRoot":"","sources":["../../../../src/components/market-toggle/market-toggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Prop, Element, Event, EventEmitter, Method } from '@stencil/core';\nimport { getControlInputAriaLabel } from '../../utils/aria';\n\n@Component({\n  tag: 'market-toggle',\n  styleUrl: 'market-toggle.css',\n  shadow: true,\n})\nexport class MarketToggle {\n  @Element() el: HTMLMarketToggleElement;\n\n  /**\n   * Whether the toggle is checked or not.\n   * If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.\n   */\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\n\n  /**\n   * Whether the toggle is disabled.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * Whether the toggle is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * Whether the toggle is hovered or not.\n   */\n  @Prop({ mutable: true, reflect: true }) hovered: boolean = false;\n\n  /**\n   * Whether the toggle is active or not.\n   */\n  @Prop({ mutable: true, reflect: true }) active: boolean = false;\n\n  /**\n   * Fired whenever \"checked\" prop value changes.\n   */\n  @Event() marketToggleChange: EventEmitter<{ current: boolean; previous: boolean }>;\n\n  innerInput: HTMLInputElement;\n\n  /**\n   * Toggles `checked` prop, and emits a change event accordingly.\n   * Used by `market-row` to sync its selected state w/ slotted toggles.\n   */\n  @Method()\n  setSelection(newValue: boolean, { silent = false } = {}) {\n    const { marketToggleChange, checked: prevValue, innerInput } = this;\n\n    if (typeof newValue !== 'boolean') return Promise.resolve();\n    if (prevValue === newValue) return Promise.resolve();\n\n    if (!silent) {\n      const { defaultPrevented } = marketToggleChange.emit({\n        current: newValue,\n        previous: prevValue,\n      });\n      if (defaultPrevented) {\n        return Promise.resolve();\n      }\n    }\n\n    this.checked = newValue;\n    // When using the non-lazy output target, this method sometimes gets called\n    // from market-row's watcher after innerInput is removed, hence this check.\n    if (innerInput) {\n      innerInput.checked = newValue;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).\n   */\n  @Method()\n  setValue(newValue: boolean) {\n    /* eslint-disable-next-line no-console */\n    console.warn(\"market-toggle's setValue() method has been deprecated. Use setSelection() instead.\", this.el);\n    this.setSelection(newValue);\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `active` state. Allows external elements to programmatically\n   * trigger active styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setActive(value: boolean) {\n    this.active = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `hovered` state. Allows external elements to programmatically\n   * trigger hover styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setHover(value: boolean) {\n    this.hovered = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `disabled` state. Allows external elements to programmatically\n   * trigger disabled styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setDisabled(value: boolean) {\n    this.disabled = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `focused` state, except when disabled.\n   * Allows external consumers to programmatically\n   * trigger focused styling.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    // We don't want to set focus to true if the toggle is disabled,\n    // but we do want to allow setting focus to false when disabled,\n    // since disabling the toggle causes it to lose browser focus,\n    // triggering the onBlur event and calling this method.\n    if (this.disabled && value) {\n      return Promise.resolve();\n    }\n    this.focused = value;\n    return Promise.resolve();\n  }\n\n  handleClick(event: MouseEvent) {\n    // Always prevent default so we can manually control the selection\n    event.preventDefault();\n\n    if (this.disabled) {\n      return;\n    }\n\n    this.setFocus();\n    this.setSelection(!this.checked);\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-toggle\"\n        onBlur={() => {\n          this.setFocus(false);\n        }}\n        onClick={this.handleClick}\n        onFocus={() => {\n          this.setFocus();\n        }}\n      >\n        <input\n          ref={(el) => (this.innerInput = el)}\n          type=\"checkbox\"\n          role=\"switch\"\n          aria-label={getControlInputAriaLabel(this.el)}\n          checked={this.checked}\n          disabled={this.disabled}\n        />\n        {/* SVG for toggle button */}\n        {\n          <svg\n            width=\"40\"\n            height=\"24\"\n            viewBox=\"0 0 40 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            aria-hidden=\"true\"\n          >\n            <rect x=\"1\" y=\"1\" width=\"38\" height=\"22\" rx=\"11\" stroke-width=\"2\" />\n            <circle cx=\"12\" cy=\"12\" r=\"7\" />\n          </svg>\n        }\n      </Host>\n    );\n  }\n}\n"]}