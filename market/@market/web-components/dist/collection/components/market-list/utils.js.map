{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/components/market-list/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAClF,OAAO,EAAE,sBAAsB,EAA2D,MAAM,SAAS,CAAC;AAE1G;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,KAAc;IACzC,yFAAyF;IACzF,OAAO,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;AAC/G,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,OAAgB;;IAC7C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,OAAO,GAAG,MAAC,OAAuB,CAAC,OAAO,0CAAE,iBAAiB,EAAE,CAAC;IACtE,MAAM,gBAAgB,GAAG;QACvB,mBAAmB,CAAC,iBAAiB,CAAC,CAAC,iBAAiB,EAAE;QAC1D,mBAAmB,CAAC,cAAc,CAAC,CAAC,iBAAiB,EAAE;QACvD,mBAAmB,CAAC,eAAe,CAAC,CAAC,iBAAiB,EAAE;KAC7C,CAAC;IACd,OAAO,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC5C,CAAC;AAED,SAAS,oBAAoB,CAAC,GAAyB;IACrD,IAAI,CAAC,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,OAAO,KAAK,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;QAC3G,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,cAAc,GAAG,GAAG,CAAC,aAAa,CAAC,kBAAkB,CAA2C,CAAC;IAEvG,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,OAAO,sBAAsB,CAAC,0BAA0B,CAAC;IAC3D,CAAC;IACD,IAAI,oBAAoB,CAAC,cAAc,EAAE,iBAAiB,CAAC,EAAE,CAAC;QAC5D,OAAO,sBAAsB,CAAC,QAAQ,CAAC;IACzC,CAAC;IACD,IAAI,oBAAoB,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC;QACzD,OAAO,sBAAsB,CAAC,KAAK,CAAC;IACtC,CAAC;IACD,IAAI,oBAAoB,CAAC,cAAc,EAAE,eAAe,CAAC,EAAE,CAAC;QAC1D,OAAO,sBAAsB,CAAC,MAAM,CAAC;IACvC,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,qBAAqB,CAAC,IAAqB;IACzD,IAAI,oBAAoB,CAAC,IAAI,EAAE,oBAAoB,CAAC,EAAE,CAAC;QACrD,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC;QACvE,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;QACD,OAAO,sBAAsB,CAAC,0BAA0B,CAAC;IAC3D,CAAC;IAED,IAAI,oBAAoB,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,CAAC;QAC7C,OAAO,oBAAoB,CAAC,IAA4B,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { getNamespacedTagFor, isElementWithTagName } from '../../utils/namespace';\nimport { ListItemSelectableType, TMarketListItem, TMarketListValidControlRowInputElement } from './types';\n\n/**\n * Check if the value is considered empty\n * @param {unknown} value\n */\nexport function isValueEmpty(value: unknown): boolean {\n  // Note: we don't check for 0 here because it's a valid value, so _.isEmpty() is not used\n  return value === '' || value === null || value === undefined || (Array.isArray(value) && value.length === 0);\n}\n\n/**\n * Check if the slotted control in <market-row slot=\"control-row> is a valid control row input\n * @param {unknown} control\n */\nexport function isValidControl(control: unknown): control is TMarketListValidControlRowInputElement {\n  if (!control) {\n    return false;\n  }\n  const tagName = (control as HTMLElement).tagName?.toLocaleLowerCase();\n  const validControlTags = [\n    getNamespacedTagFor('market-checkbox').toLocaleLowerCase(),\n    getNamespacedTagFor('market-radio').toLocaleLowerCase(),\n    getNamespacedTagFor('market-toggle').toLocaleLowerCase(),\n  ] as string[];\n  return validControlTags.includes(tagName);\n}\n\nfunction getRowSelectableType(row: HTMLMarketRowElement): ListItemSelectableType | undefined {\n  if (!row.interactive || row.variant === 'drill' || Boolean(row.href) || (row.interactive && row.transient)) {\n    return undefined;\n  }\n\n  const slottedControl = row.querySelector('[slot=\"control\"]') as TMarketListValidControlRowInputElement;\n\n  if (!slottedControl) {\n    return ListItemSelectableType.SELECTABLE_WITHOUT_CONTROL;\n  }\n  if (isElementWithTagName(slottedControl, 'market-checkbox')) {\n    return ListItemSelectableType.CHECKBOX;\n  }\n  if (isElementWithTagName(slottedControl, 'market-radio')) {\n    return ListItemSelectableType.RADIO;\n  }\n  if (isElementWithTagName(slottedControl, 'market-toggle')) {\n    return ListItemSelectableType.SWITCH;\n  }\n  return undefined;\n}\n\n/**\n * Get the selectable type (radio, checkbox, etc.) from a list item, which is either a market-row or market-action-card\n * @param {TMarketListItem} item\n */\nexport function getItemSelectableType(item: TMarketListItem): ListItemSelectableType | undefined {\n  if (isElementWithTagName(item, 'market-action-card')) {\n    const innerRow = item.querySelector(getNamespacedTagFor('market-row'));\n    if (innerRow) {\n      return getRowSelectableType(innerRow);\n    }\n    return ListItemSelectableType.SELECTABLE_WITHOUT_CONTROL;\n  }\n\n  if (isElementWithTagName(item, 'market-row')) {\n    return getRowSelectableType(item as HTMLMarketRowElement);\n  }\n\n  return undefined;\n}\n"]}