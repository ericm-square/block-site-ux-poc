{"version":3,"file":"market-list.js","sourceRoot":"","sources":["../../../../src/components/market-list/market-list.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Listen, Element, Prop, EventEmitter, Event, Host, State, h, Watch, Method } from '@stencil/core';\nimport { uniqBy } from 'lodash-es';\n\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { asyncRequestAnimationFrame } from '../../utils/raf';\nimport { TMarketInputSearchValueChangeEventDetail } from '../market-input-search/events';\n\nimport { Reorderable, TMarketReorderableOptions, TMarketReorderEventDetail } from '../../utils/reorderable';\nimport { isDraggable, TMarketDragEventDetail } from '../../utils/draggable';\n\nimport { TMarketListItemsFilteredEventDetail, TMarketListSelectionsDidChangeEventDetail } from './events';\nimport {\n  ListItemSelectableType,\n  TMarketListFilterStrategyPropTypes,\n  TMarketListItem,\n  TMarketListValidControlRowInputElement,\n} from './types';\nimport { getItemSelectableType, isValidControl, isValueEmpty } from './utils';\n\n/* If Stencil supported extending built-in elements, I would much prefer to extend the <li>\nelement instead of creating a completely different one here, but unlike buttons and anchors,\nthe default <li> tag doesn't provide a whole lot over a custom element aside from semantics */\n\n/**\n * @slot control-row - Intended for use with interactive multiselect lists. When used with a\n * `<market-row>` containing a slotted control (such as `<market-checkbox>`), toggling this row\n * will select/deselect all list options.\n * @slot search - Intended for use with `<market-input-search>`\n * @slot empty-state - Intended for use with `<market-empty-state>`; shown when filtering items\n * via `<market-input-search>` and there are no search results.\n * @slot - Intended for use with `<market-row>` or `<market-action-card>`.\n */\n@Component({\n  tag: 'market-list',\n  shadow: true,\n  styleUrl: 'market-list.css',\n})\nexport class MarketList {\n  @Element() el: HTMLMarketListElement;\n  inputSearchEl: HTMLMarketInputSearchElement;\n  controlRow: HTMLMarketRowElement;\n  observers: {\n    itemDisabledAttribute?: MutationObserver;\n  } = {};\n\n  /**\n   * A string specifying a value for the list. To select multiple values,\n   * separate **unique** values with a comma (e.g. `'orange,pear'`).\n   * Setting to empty string (`''`) will clear all current selections.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string | Array<any> = '';\n\n  /**\n   * Whether or not the list is interactive. Results in list items receiving hover\n   * and active styling when hovered/clicked.<br>\n   *\n   * _NOTE:_ Lists slotted into `market-popover`, or any of the components that use it\n   * internally such as `market-select`, `market-dropdown`, and `market-button-dropdown`,\n   * will automatically have their `interactive` property set to `true`.\n   */\n  @Prop({ mutable: true }) interactive: boolean = false;\n\n  /**\n   * When set to `true`, rows/cards will not persist selected state on click. Only takes effect when `interactive` is true.\n   */\n  @Prop() readonly transient: boolean = false;\n\n  /**\n   * Whether or not the list can allow for multiple selections (currently not\n   * reflected in the `value` prop)\n   */\n  @Prop({ reflect: true }) readonly multiselect: boolean = false;\n\n  /**\n   * String value used for the `aria-labelledby` attribute.\n   */\n  @Prop() readonly name: string;\n\n  /**\n   * Filter strategy\n   *\n   * - `\"textcontent\"` (default, case-insensitive): This strategy searches through each of the row’s `.textContent`. This means it would also search through a row’s subtext, accessories, and other slots.\n   * - `\"label\"` (case-insensitive): This strategy searches through the slotted `<label>` elements of rows. Note that if a `<label>` is not slotted in a row, this default filter strategy will not work.\n   * - `\"value\"` (case-sensitive): This strategy searches through the rows’ `value` attribute. Values are usually case-sensitive so they are treated the same way when searching for them.\n   * - `Function`: This strategy works similarly to `Array.prototype.filter()` where the function’s `boolean` output determines if the item will be kept or filtered out. For your convenience, you are provided with 5 parameters:\n   *   - `item`: `TMarketListItem`\n   *   - `label`: the `<label>`’s `.textContent`\n   *   - `query`: `value` of `<market-input-search>`\n   *   - `textContent`: the item’s `.textContent`\n   *   - `value`: `value` of the item\n   */\n  @Prop() readonly filterStrategy: TMarketListFilterStrategyPropTypes = 'textcontent';\n\n  /**\n   * Whether the list is reorderable or not.\n   * Setting to `internal` enables reordering rows internally\n   * while `external` also allows dragging to & from other lists.\n   */\n  @Prop({ reflect: true }) readonly reorderable: TMarketReorderableOptions = 'off';\n\n  /**\n   * When set to `framework`, the list will move the reordered row back to its original position\n   * before the `marketListItemsReordered` event is fired. This is useful when the list\n   * is rendered within a framework like Ember or React.\n   */\n  @Prop() readonly reorderMode: 'default' | 'framework' = 'default';\n\n  /**\n   * Whether a count of selectable items rendered within the control row will be hidden\n   */\n  @Prop({ reflect: true }) readonly hideSelectableCount: boolean = false;\n\n  /**\n   * Used to indicate if the list has a search input\n   */\n  @State() hasSearch: boolean = false;\n\n  /**\n   * All items\n   */\n  @State() items: Array<TMarketListItem>;\n\n  /**\n   * Current itemselections\n   */\n  @State() selections: Set<TMarketListItem> = new Set();\n\n  /**\n   * Filtered items by `market-input-search`\n   */\n  @State() filteredItems: {\n    visible: Array<TMarketListItem>;\n    hidden: Array<TMarketListItem>;\n    visibleSelected: Array<TMarketListItem>;\n    selected: Array<TMarketListItem>;\n  };\n\n  @Watch('reorderable')\n  reorderableWatcher() {\n    this.setReorderable();\n  }\n\n  /**\n   * Fired whenever an item is selected or deselected.\n   *\n   * @property {TMarketListItem} newSelection\n   * - the row or card that has been selected\n   * @property {string} newSelectionValue - the value of the new selection\n   * @property {TMarketListItem} newDeselection\n   * - the row or card that has been deselected\n   * @property {string} newDeselectionValue - the value of the new deselection\n   * @property {Array<TMarketListItem>} currentSelections\n   * - an array of the currently selected rows or cards (excludes slotted control row, if any)\n   * @property {string[]} currentSelectionValues - an array of the currently selected values\n   * (excludes slotted control row, if any)\n   * @property {string[]} prevSelectionValues - an array of the previously selected values\n   * (excludes slotted control row, if any)\n   */\n  @Event({ bubbles: true, composed: true })\n  marketListSelectionsDidChange: EventEmitter<TMarketListSelectionsDidChangeEventDetail>;\n\n  /**\n   * Fired when the slotchange event happens on the list. Allows parent components (like `market-select`)\n   * to update when slotted list items change.\n   */\n  @Event({ bubbles: true, composed: true }) marketListSlotChange: EventEmitter;\n\n  /**\n   * Fired when the list items are reordered.\n   * If an item was dropped into this list from an external list, `oldIndex` is `-1`.\n   * If an item was removed from this list and dropped into an external list, `newIndex` is `-1`.\n   */\n  @Event({ bubbles: false, composed: true }) marketListItemsReordered: EventEmitter<TMarketReorderEventDetail>;\n\n  /**\n   * Fired when items are filtered using `market-input-search`\n   */\n  @Event({ bubbles: true, composed: true }) marketListItemsFiltered: EventEmitter<TMarketListItemsFilteredEventDetail>;\n\n  @Watch('value')\n  valueWatcher() {\n    this.setSelectionsFromValue();\n  }\n\n  @Watch('hideSelectableCount')\n  hideSelectableCountWatcher() {\n    this.injectCountOnControlRow();\n  }\n\n  /* Listen for the marketRowSelected event which is emitted by slotted market-row elements\n  when they are clicked */\n  @Listen('marketRowSelected')\n  rowSelectedEventHandler(e: CustomEvent) {\n    this.handleItemSelectedEvent(e.target as HTMLMarketRowElement);\n  }\n\n  /* Listen for the marketRowDeselected event which is emitted by slotted market-row elements\n  when they are clicked */\n  @Listen('marketRowDeselected')\n  rowDeselectedEventHandler(e: CustomEvent) {\n    this.handleItemDeselectedEvent(e.target as HTMLMarketRowElement);\n  }\n\n  /* Listen for the marketCardSelected event which is emitted by slotted market-action-card elements\n  when they are clicked */\n  @Listen('marketCardSelected')\n  cardSelectedEventHandler(e: CustomEvent) {\n    this.handleItemSelectedEvent(e.target as HTMLMarketActionCardElement);\n  }\n\n  /* Listen for the marketCardDeselected event which is emitted by slotted market-action-card elements\n  when they are clicked */\n  @Listen('marketCardDeselected')\n  cardDeselectedEventHandler(e: CustomEvent) {\n    this.handleItemDeselectedEvent(e.target as HTMLMarketActionCardElement);\n  }\n\n  /**\n   * Listen for `marketInputSearchValueChange` which is emitted by the slotted `market-input-search`\n   */\n  @Listen('marketInputSearchValueChange')\n  marketInputSearchValueChangeEventHander({ detail }: CustomEvent<TMarketInputSearchValueChangeEventDetail>) {\n    this.filterItems(detail.value);\n  }\n\n  getEventSelectionDetails() {\n    const prevSelectionValues = (() => {\n      if (typeof this.value === 'string') {\n        return this.value ? this.value.split(',').filter((value) => !isValueEmpty(value)) : [];\n      } else if (Array.isArray(this.value)) {\n        return this.value.filter((value) => !isValueEmpty(value));\n      }\n      return this.value;\n    })();\n    const currentSelections = uniqBy(\n      [...this.selections].filter((item) => item !== this.controlRow),\n      (item) => item.value, // ensure uniqueness by value\n    );\n    const currentSelectionValues = currentSelections.reduce((items, item) => {\n      if (!isValueEmpty(item.value)) {\n        items.push(item.value);\n      }\n      return items;\n    }, [] as TMarketListItem['value'][]);\n    return { currentSelections, currentSelectionValues, prevSelectionValues };\n  }\n\n  handleItemSelectedEvent(selectedItem: TMarketListItem) {\n    if (selectedItem === this.controlRow) {\n      this.selectAllItems();\n    } else {\n      this.selectItem(selectedItem);\n    }\n\n    const { currentSelections, currentSelectionValues, prevSelectionValues } = this.getEventSelectionDetails();\n    this.value = currentSelectionValues.join(','); // reflect to DOM\n\n    this.marketListSelectionsDidChange.emit({\n      newSelection: selectedItem,\n      newSelectionValue: selectedItem.value,\n      newDeselection: null,\n      newDeselectionValue: null,\n      currentSelections,\n      currentSelectionValues,\n      prevSelectionValues,\n    });\n  }\n\n  handleItemDeselectedEvent(deselectedItem: TMarketListItem) {\n    // We check to see if the element is in our selections, since we may have\n    // already manually deselected it due to another element being clicked.\n    // We only want the code in the block to fire when `marketRowDeselected` is being\n    // emitted due to a merchant actually clicking to deselect an element.\n    if (!this.selections.has(deselectedItem)) {\n      return;\n    }\n\n    if (deselectedItem === this.controlRow) {\n      /**\n       * special case: when the only remaining selected items are disabled,\n       * the control row's checkbox will be indeterminate (expected UI behavior).\n       * when normally, clicking a row with an indeterminate checkbox selects all,\n       * in this case, we want it to select all (non-disabled items) instead.\n       */\n      const shouldSelectAll = (() => {\n        const items = (this.filteredItems?.visible ?? this.items).filter((item) => item !== this.controlRow);\n        const nonDisabledItems = items.filter((item) => !item.disabled);\n        return nonDisabledItems.every((item) => !item.selected);\n      })();\n      if (shouldSelectAll) {\n        this.selectAllItems();\n      } else {\n        this.deselectAllItems();\n      }\n    } else {\n      this.deselectItem(deselectedItem);\n    }\n\n    const { currentSelections, currentSelectionValues, prevSelectionValues } = this.getEventSelectionDetails();\n    this.value = currentSelectionValues.join(','); // reflect to DOM\n\n    this.marketListSelectionsDidChange.emit({\n      newSelection: null,\n      newSelectionValue: null,\n      newDeselection: deselectedItem,\n      newDeselectionValue: deselectedItem.value,\n      currentSelections,\n      currentSelectionValues,\n      prevSelectionValues,\n    });\n  }\n\n  /**\n   * Selects a given option from the list. Also handles deselecting\n   * all other elements when not in multiselect mode.\n   */\n  selectItem(selectedItem: TMarketListItem) {\n    /* Only if this list is interactive and *doesn't* allow multiple selections,\n    deselect all the options except the one that was just selected */\n    if (this.interactive) {\n      if (!this.multiselect) {\n        this.deselectItems([selectedItem]);\n        this.selections = new Set([selectedItem]);\n      } else {\n        this.selections.add(selectedItem);\n      }\n    }\n  }\n\n  /**\n   * Selects all multiselect list options.\n   */\n  selectAllItems() {\n    if (!this.items || !this.interactive || !this.multiselect) {\n      return;\n    }\n\n    // if items are being filtered, \"Select all\" only applies to visible items\n    // and then filter all non-disabled items to already selected items (might include disabled items)\n    const selectableItems = (this.filteredItems?.visible || this.items).filter((item) => !item.disabled);\n    this.selections = new Set([...this.selections.values(), ...selectableItems]);\n  }\n\n  /**\n   * Deselects a given option from the list.\n   */\n  deselectItem(deselectedItem: TMarketListItem) {\n    this.selections.delete(deselectedItem);\n  }\n\n  /**\n   * Deselects all other items other than the ones that were just selected.\n   */\n  deselectItems(selectedItems: Array<TMarketListItem>) {\n    if (!this.items) {\n      return;\n    }\n\n    this.items.forEach((item) => {\n      /* Check to make sure the item isn't in the list of\n        selected items (likely only the one that was just\n        selected and triggered the callback) */\n      if (!selectedItems.includes(item) && item.selected) {\n        item.deselect();\n      }\n    });\n  }\n\n  /**\n   * Deselects all list options.\n   */\n  deselectAllItems() {\n    if (!this.selections || !this.interactive) {\n      return;\n    }\n\n    /**\n     * If items are being filtered, only deselect visible items.\n     * Disabled items will not be deselected.\n     */\n    const visibleItemsSet = new Set(this.filteredItems?.visible ?? this.items);\n    const selectedItemsToKeep = [...this.selections].filter((selectedItem) => {\n      return selectedItem.disabled || !visibleItemsSet.has(selectedItem);\n    });\n    this.selections = new Set(selectedItemsToKeep);\n  }\n\n  /**\n   * If passed or updates interactive, ensure list itself is set to interactive mode.\n   */\n  syncListInteractiveWithItems() {\n    if (\n      this.items.length > 0 &&\n      (this.items[0].tagName === getNamespacedTagFor('market-action-card').toUpperCase() ||\n        (this.items[0].tagName === getNamespacedTagFor('market-row').toUpperCase() &&\n          (this.items[0] as HTMLMarketRowElement).interactive === true)) &&\n      !this.interactive\n    ) {\n      // force list to be interactive if items are interactive rows\n      // (i.e. when they contain slotted controls), or\n      // items are action cards (which are always interactive)\n      this.interactive = true;\n    }\n  }\n\n  /**\n   * Processes interactive, transient, and multiselect props and propagates these props\n   * to children components whenever these props are updated.\n   */\n  processItems() {\n    this.items.forEach((item) => {\n      if (item.tagName === getNamespacedTagFor('market-action-card').toUpperCase()) {\n        item.transient = this.transient;\n\n        const cardRow = item.querySelector<HTMLMarketRowElement>(getNamespacedTagFor('market-row'));\n        if (cardRow) {\n          this.setRowProperties(cardRow);\n        }\n      } else {\n        this.setRowProperties(item as HTMLMarketRowElement);\n      }\n    });\n  }\n\n  getCurrentSelectionValues(): Set<string> {\n    if (Array.isArray(this.value)) {\n      return new Set(this.value);\n    }\n    return new Set(this.multiselect ? this.value.split(',') : [this.value]);\n  }\n\n  setRowProperties(row: HTMLMarketRowElement) {\n    row.interactive = this.interactive;\n    row.transient = this.transient;\n\n    // We don't want subsequent clicks to deselect rows for single select lists\n    row.togglable = this.multiselect;\n  }\n\n  /**\n   * Select item that corresponds to passed value, or clear all values if value is empty string.\n   */\n  setSelectionsFromValue() {\n    if (this.value || this.value === '') {\n      const values = this.getCurrentSelectionValues();\n      this.items?.forEach((item) => {\n        if (item === this.controlRow) {\n          // control row selection happens in syncControlRowWithSelections\n          return;\n        }\n        if (!isValueEmpty(this.value) && values.has(item.value)) {\n          item.silentlySelect();\n          this.selectItem(item);\n        } else {\n          // value is '', so deselect all items\n          item.silentlyDeselect();\n          this.deselectItem(item);\n        }\n      });\n    }\n  }\n\n  /**\n   * Find any list items with the `selected` property and add to `selections`.\n   */\n  setSelectionsFromRowAttributes() {\n    const initialSelections: Set<TMarketListItem> = new Set();\n    this.items.forEach((item) => {\n      if (item.selected) {\n        /* TODO: Maybe figure out how to handle the case where the\n         * list is not multiselect, but more than one market-row has the\n         * [selected] attribute */\n        initialSelections.add(item);\n      }\n    });\n\n    this.selections = initialSelections;\n  }\n\n  setListAndItemsRoles() {\n    const itemSelectableTypes = this.items.map((item) => getItemSelectableType(item));\n    const allItemsHaveSameSelectableType =\n      itemSelectableTypes.every((type) => type === ListItemSelectableType.CHECKBOX) ||\n      itemSelectableTypes.every((type) => type === ListItemSelectableType.RADIO) ||\n      itemSelectableTypes.every((type) => type === ListItemSelectableType.SWITCH) ||\n      itemSelectableTypes.every((type) => type === ListItemSelectableType.SELECTABLE_WITHOUT_CONTROL);\n\n    if (allItemsHaveSameSelectableType) {\n      this.el.setAttribute('role', 'listbox');\n      this.items.forEach((item) => {\n        item.setAttribute('role', 'option');\n      });\n      this.el.setAttribute('aria-multiselectable', this.multiselect ? 'true' : 'false');\n    } else {\n      this.el.setAttribute('role', 'list');\n      this.items.forEach((item) => {\n        item.setAttribute('role', 'listitem');\n      });\n    }\n\n    if (this.value) {\n      this.setSelectionsFromValue();\n    } else {\n      this.setSelectionsFromRowAttributes();\n    }\n  }\n\n  /**\n   * Sets the initial state of the list by updating and propagating props and setting\n   * default value.\n   */\n  setInternalState() {\n    this.items = [\n      ...this.el.querySelectorAll<TMarketListItem>(\n        `:scope > ${getNamespacedTagFor('market-row')}, :scope > ${getNamespacedTagFor('market-action-card')}`,\n      ),\n    ];\n\n    if (this.items.length === 0) {\n      return;\n    }\n\n    this.syncListInteractiveWithItems();\n    this.processItems();\n    this.setListAndItemsRoles();\n\n    if (this.value) {\n      this.setSelectionsFromValue();\n    } else {\n      this.setSelectionsFromRowAttributes();\n    }\n  }\n\n  /**\n   * Syncs the state of the slotted control row with list selections (e.g. all selected, none\n   * selected, some selected).\n   */\n  async syncControlRowWithSelections() {\n    if (!this.controlRow) {\n      return;\n    }\n\n    const slottedControl = this.controlRow.querySelector('[slot=\"control\"]') as TMarketListValidControlRowInputElement;\n    const isCheckbox = slottedControl.tagName.toLowerCase() === getNamespacedTagFor('market-checkbox');\n\n    const items = (this.filteredItems?.visible ?? this.items).filter((item) => item !== this.controlRow);\n    const controlRowStatus = (() => {\n      if (items.every((item) => item.selected)) {\n        // all non-disabled items are selected\n        return 'checked';\n      } else if (items.some((item) => item.selected)) {\n        // at least one is selected (regardless if it's disabled or not)\n        return 'indeterminate';\n      } else {\n        return 'unchecked';\n      }\n    })();\n\n    switch (controlRowStatus) {\n      case 'unchecked':\n        // no options selected, deselect control row\n        this.deselectItem(this.controlRow);\n        await this.controlRow.silentlyDeselect();\n        await asyncRequestAnimationFrame(); // prevents flash where it goes from indeterminate -> checked -> unchecked\n        slottedControl.removeAttribute('indeterminate');\n        break;\n      case 'checked':\n        // all options selected, select control row\n        await this.controlRow.silentlySelect();\n        this.selectItem(this.controlRow);\n        slottedControl.removeAttribute('indeterminate');\n        break;\n      case 'indeterminate':\n        // some options selected\n        if (isCheckbox) {\n          // control row gets selected, checkbox set to indeterminate\n          await this.controlRow.silentlySelect();\n          this.selectItem(this.controlRow);\n          await asyncRequestAnimationFrame(); // prevents bug where checkbox becomes checked but not indeterminate\n          slottedControl.setAttribute('indeterminate', '');\n        } else {\n          // control row gets deselected\n          await this.controlRow.silentlyDeselect();\n          this.deselectItem(this.controlRow);\n        }\n        break;\n      default:\n        break;\n    }\n\n    this.injectCountOnControlRow();\n  }\n\n  /**\n   * Injects an accessory to the control row that displays the number of items;\n   * or edit that accessory's text content if the element already exists.\n   *\n   * Disabled items are not included in the count.\n   *\n   * Count is only rendered when `hideSelectableCount` is `false`, which it is by default.\n   */\n  injectCountOnControlRow() {\n    if (!this.controlRow) {\n      return;\n    }\n    const countAccessoryEl = this.controlRow.querySelector('.count[slot=\"trailing-accessory\"]');\n    if (this.hideSelectableCount) {\n      if (countAccessoryEl) {\n        this.controlRow.removeChild(countAccessoryEl);\n      }\n      return;\n    }\n\n    const count = this.filteredItems.visible.filter((item) => !item.disabled).length;\n    if (countAccessoryEl) {\n      countAccessoryEl.textContent = `${count}`;\n    } else {\n      const newEl = document.createElement('span');\n      newEl.classList.add('count');\n      newEl.setAttribute('slot', 'trailing-accessory');\n      newEl.textContent = `${count}`;\n      this.controlRow.appendChild(newEl);\n    }\n  }\n\n  /**\n   * Filters items based on search query inputted in slotted `market-input-search`\n   */\n  filterItems(query: string) {\n    const filteredItems: typeof this.filteredItems = this.items.reduce(\n      (filteredItems, item) => {\n        if (item.getAttribute('slot') === 'control-row') {\n          // filteredItems will not contain the control row as it isn't needed for logic purposes\n          return filteredItems;\n        } else if (!query) {\n          // if there's no search query, all items are visible\n          filteredItems.visible.push(item);\n          return filteredItems;\n        } else if (typeof this.filterStrategy === 'function') {\n          // attempts to call the provided function\n          const callbackResult = this.filterStrategy({\n            item,\n            label: item.querySelector('[slot=\"label\"]')?.textContent,\n            query,\n            textContent: item.textContent,\n            value: item.value,\n          });\n          if (callbackResult) {\n            filteredItems.visible.push(item);\n            return filteredItems;\n          }\n        } else if (this.filterStrategy?.toLocaleLowerCase?.() === 'textcontent') {\n          // search through the entire item's textContent\n          const isFound = item?.textContent?.search(new RegExp(query, 'i')) >= 0;\n          if (isFound) {\n            filteredItems.visible.push(item);\n            return filteredItems;\n          }\n        } else if (this.filterStrategy?.toLocaleLowerCase?.() === 'label') {\n          // only works if there's a slotted label\n          const labelEl = item.querySelector('[slot=\"label\"]');\n          const isFound = labelEl?.textContent?.search(new RegExp(query, 'i')) >= 0;\n          if (isFound) {\n            filteredItems.visible.push(item);\n            return filteredItems;\n          }\n        } else if (this.filterStrategy?.toLocaleLowerCase?.() === 'value') {\n          // if the item's value isn't a string, it may not work well UX-wise\n          const value = String(item.value);\n          const isFound = value.search(new RegExp(query)) >= 0;\n          if (isFound) {\n            filteredItems.visible.push(item);\n            return filteredItems;\n          }\n        }\n        // item didn't pass any of the conditions / filter strategies above\n        filteredItems.hidden.push(item);\n        return filteredItems;\n      },\n      {\n        visible: [],\n        hidden: [],\n        visibleSelected: [],\n        selected: [],\n      },\n    );\n\n    // DOM manipulation\n    requestAnimationFrame(() => {\n      // make sure that visible items are visible, hidden items are hidden\n      filteredItems.visible.forEach((item) => item.classList.remove('hidden'));\n      filteredItems.hidden.forEach((item) => item.classList.add('hidden'));\n\n      // hide last visible item's bottom border\n      this.items.forEach((item) => item.classList.remove('hide-bottom-border'));\n      if (filteredItems.visible.length > 0) {\n        const lastVisibleItem = filteredItems.visible[filteredItems.visible.length - 1];\n        lastVisibleItem.classList.add('hide-bottom-border');\n      }\n\n      // hide control row if there are no search results\n      this.controlRow?.classList.toggle('hidden', filteredItems.visible.length === 0);\n    });\n\n    // will not emit when the list is initially rendered without a search query\n    if (this.filteredItems || (!this.filteredItems && query)) {\n      this.marketListItemsFiltered.emit({\n        items: filteredItems.visible,\n        prevItems: this.filteredItems?.visible,\n      });\n    }\n\n    // this triggers a re-render since `this.filteredItems` is a `@State`\n    this.filteredItems = filteredItems;\n    this.updateSelectedItemsInFilteredItems();\n  }\n\n  updateSelectedItemsInFilteredItems() {\n    if (!this.filteredItems) {\n      return;\n    }\n    this.filteredItems.selected = this.items.filter(\n      (item) => item.getAttribute('slot') !== 'control-row' && item.selected,\n    );\n    this.filteredItems.visibleSelected = this.filteredItems.visible.filter(\n      (item) => item.getAttribute('slot') !== 'control-row' && item.selected,\n    );\n  }\n\n  /* SLOTCHANGE HANDLERS */\n\n  handleSearchSlotchange() {\n    this.inputSearchEl = this.el.querySelector('[slot=\"search\"]');\n    this.hasSearch = Boolean(this.inputSearchEl);\n    this.filterItems(this.inputSearchEl?.value);\n  }\n\n  defaultSlotchangeHandler() {\n    this.setInternalState();\n    this.filterItems(this.inputSearchEl?.value);\n    this.setReorderable();\n    this.marketListSlotChange.emit();\n  }\n\n  /**\n   * Rows slotted into the \"control-row\" slot only function as such if the list is interactive and\n   * multiselect and the row contains a valid slotted control (checkbox or toggle).\n   */\n  controlRowSlotchangeHandler() {\n    if (!this.interactive || !this.multiselect) {\n      return;\n    }\n\n    const slottedRow = this.el.querySelector('[slot=\"control-row\"]') as HTMLMarketRowElement;\n    const slottedControl = slottedRow?.querySelector('[slot=\"control\"]');\n    this.controlRow = isValidControl(slottedControl) ? slottedRow : undefined;\n  }\n\n  /**\n   * Show empty state if:\n   * - list isn't empty, but\n   * - there is a search query, and\n   * - there are no search results\n   */\n  setEmptyStateVisibility() {\n    const emptyStateEl =\n      this.el.querySelector('[slot=\"empty-state\"]') ||\n      this.el.shadowRoot.querySelector(getNamespacedTagFor('market-empty-state'));\n    const willShowEmptyState = this.inputSearchEl?.value && !this.filteredItems?.visible.length;\n    emptyStateEl?.classList.toggle('hidden', !willShowEmptyState);\n  }\n\n  /**\n   * Updates the count that is injected to the control row\n   * when there’s a change on an item’s `disabled` attribute.\n   */\n  initItemDisabledAttributeObserver() {\n    if (this.observers.itemDisabledAttribute) {\n      return;\n    }\n    this.observers.itemDisabledAttribute = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        if (\n          mutation.target.parentElement === this.el &&\n          mutation.type === 'attributes' &&\n          mutation.attributeName === 'disabled'\n        ) {\n          this.injectCountOnControlRow();\n        }\n      }\n    });\n    this.observers.itemDisabledAttribute.observe(this.el, {\n      attributes: true,\n      attributeFilter: ['disabled'],\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /* LIFECYCLE EVENTS */\n  connectedCallback() {\n    this.syncControlRowWithSelections();\n  }\n\n  componentWillLoad() {\n    this.setInternalState();\n    this.filterItems(this.inputSearchEl?.value);\n  }\n\n  componentWillRender() {\n    this.syncListInteractiveWithItems();\n    this.processItems();\n    this.setListAndItemsRoles();\n    this.updateSelectedItemsInFilteredItems();\n    this.controlRowSlotchangeHandler();\n    this.syncControlRowWithSelections();\n    this.setEmptyStateVisibility();\n  }\n\n  componentDidLoad() {\n    this.initItemDisabledAttributeObserver();\n  }\n\n  disconnectedCallback() {\n    this.observers.itemDisabledAttribute?.disconnect();\n  }\n\n  /*\n    KEYBOARD ACCESSIBILITY\n\n    tabbing goes through rows (and slotted controls, if any) once before moving\n    on to rest of page content\n\n    once list has focus, up/down arrows can move focus up/down, stopping at end\n    of list rather than cycling through (similar to native html <select>)\n    - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\n\n    if slotted row contents have focus, up/down arrows do nothing\n  */\n  handleKeydown(e: KeyboardEvent) {\n    switch (e.key) {\n      case 'ArrowDown':\n        this.handleArrowDown(e);\n        break;\n      case 'ArrowUp':\n        this.handleArrowUp(e);\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleArrowDown(e) {\n    const focused = this.el.querySelector(':focus');\n    const prevFocusedRowIndex = [...this.items].indexOf(focused as TMarketListItem);\n\n    // return if no rows are focused\n    if (prevFocusedRowIndex === -1) {\n      return;\n    }\n\n    // focus next enabled row\n    for (let i = prevFocusedRowIndex + 1; i < this.items.length; i++) {\n      if (!this.items[i].disabled) {\n        this.items[i].focus();\n        break;\n      }\n    }\n    e.preventDefault(); // down arrow should not scroll page\n  }\n\n  handleArrowUp(e) {\n    const focused = this.el.querySelector(':focus');\n    const prevFocusedRowIndex = [...this.items].indexOf(focused as TMarketListItem);\n\n    // return if no rows are focused\n    if (prevFocusedRowIndex === -1) {\n      return;\n    }\n\n    // focus last enabled row\n    for (let i = prevFocusedRowIndex - 1; i >= 0; i--) {\n      if (!this.items[i].disabled) {\n        this.items[i].focus();\n        break;\n      }\n    }\n    e.preventDefault(); // up arrow should not scroll page\n  }\n\n  /**\n   * Focuses the row at the given index.\n   * @param index - The index of the row to focus.\n   * @returns A promise that resolves when the row is focused.\n   */\n  @Method()\n  async focusRowAtIndex(index: number) {\n    const row = this.items[index];\n    if (row) {\n      row.focus();\n      return Promise.resolve();\n    } else {\n      return Promise.reject(new Error(`Row at index ${index} not found`));\n    }\n  }\n\n  // market reorder utils\n  reorder: Reorderable;\n\n  setReorderable() {\n    const { el, items, controlRow, reorderable, reorderMode, reorder, marketListItemsReordered } = this;\n\n    if (reorderable === 'off') {\n      reorder?.destroy();\n      this.reorder = null;\n    } else if (!reorder) {\n      this.reorder = new Reorderable({\n        el,\n        accepts: [`${getNamespacedTagFor('market-row')}:not([slot=\"control\"])`],\n        event: marketListItemsReordered,\n        mode: reorderMode,\n      });\n    }\n\n    items?.forEach((item) => {\n      if (!isDraggable(item)) return;\n      if (item === controlRow) return; // control row is not reorderable\n      item.dragEnabled = reorderable !== 'off';\n    });\n  }\n\n  onDragMove(e: CustomEvent<TMarketDragEventDetail>) {\n    this.reorder?.dragMove(e);\n  }\n  onDragLeave() {\n    this.reorder?.dragLeave();\n  }\n  onDragEnd(e: CustomEvent<TMarketDragEventDetail>) {\n    this.reorder?.dragEnd(e);\n  }\n  onDragDrop(e: CustomEvent<TMarketDragEventDetail>) {\n    this.reorder?.dragDrop(e);\n  }\n\n  componentDidRender() {\n    this.setReorderable();\n  }\n\n  render() {\n    const MarketEmptyState = getNamespacedTagFor('market-empty-state');\n\n    return (\n      <Host\n        class=\"market-list\"\n        aria-labelledby={this.name}\n        has-search={this.hasSearch}\n        onKeydown={(e: KeyboardEvent) => this.handleKeydown(e)}\n        onMarketDragMove={(e: CustomEvent<TMarketDragEventDetail>) => this.onDragMove(e)}\n        onMarketDragLeave={() => this.onDragLeave()}\n        onMarketDragEnd={(e: CustomEvent<TMarketDragEventDetail>) => this.onDragEnd(e)}\n        onMarketDragDrop={(e: CustomEvent<TMarketDragEventDetail>) => this.onDragDrop(e)}\n      >\n        <slot name=\"search\" onSlotchange={() => this.handleSearchSlotchange()}></slot>\n        <slot name=\"control-row\" onSlotchange={() => this.controlRowSlotchangeHandler()}></slot>\n        <slot onSlotchange={() => this.defaultSlotchangeHandler()}></slot>\n        <slot name=\"empty-state\">\n          <MarketEmptyState class=\"hidden\">\n            <svg height=\"40\" slot=\"media\" viewBox=\"0 0 40 40\" width=\"40\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path\n                d=\"M34.4667 17.2L28.1 10.8333H26.6667C26.6667 9.45 25.55 8.33333 24.1667 8.33333C22.7834 8.33333 21.6667 9.45 21.6667 10.8333H18.3334C18.3334 9.45 17.2167 8.33333 15.8334 8.33333C14.45 8.33333 13.3334 9.45 13.3334 10.8333H11.9L5.53337 17.2C4.11671 18.6167 3.33337 20.5 3.33337 22.5C3.33337 26.6333 6.70004 30 10.8334 30C14.8 30 18.0167 26.9 18.2834 23.0167C18.8167 23.2167 19.4 23.3333 20 23.3333C20.6 23.3333 21.1834 23.2167 21.7167 23.0167C21.9834 26.9 25.2 30 29.1667 30C33.3 30 36.6667 26.6333 36.6667 22.5C36.6667 20.5 35.8834 18.6167 34.4667 17.2ZM10.8334 26.6667C8.53337 26.6667 6.66671 24.8 6.66671 22.5C6.66671 21.3833 7.10004 20.3333 7.88337 19.55C8.66671 18.7667 9.71671 18.3333 10.8334 18.3333C13.1334 18.3333 15 20.2 15 22.5C15 24.8 13.1334 26.6667 10.8334 26.6667ZM15.35 16.55C14.4667 15.8833 13.4334 15.3833 12.3 15.15L13.2667 14.1667H17.2334C16.3834 14.7333 15.7167 15.5667 15.35 16.55ZM20 20C19.0834 20 18.3334 19.25 18.3334 18.3333C18.3334 17.4167 19.0834 16.6667 20 16.6667C20.9167 16.6667 21.6667 17.4167 21.6667 18.3333C21.6667 19.25 20.9167 20 20 20ZM22.75 14.1667H26.7167L27.7 15.15C26.5667 15.3833 25.5334 15.8833 24.65 16.55C24.2834 15.5667 23.6167 14.7333 22.75 14.1667ZM29.1667 26.6667C26.8667 26.6667 25 24.8 25 22.5C25 20.2 26.8667 18.3333 29.1667 18.3333C30.2834 18.3333 31.3334 18.7667 32.1167 19.55C32.9 20.3333 33.3334 21.3833 33.3334 22.5C33.3334 24.8 31.4667 26.6667 29.1667 26.6667Z\"\n                fill=\"var(--core-text-10-color)\"\n                fill-opacity=\"0.9\"\n              />\n            </svg>\n            <h3 slot=\"primary-text\">\n              <slot name=\"empty-state-primary-text\">No search results for “{this.inputSearchEl?.value}”</slot>\n            </h3>\n            <p slot=\"secondary-text\">\n              <slot name=\"empty-state-secondary-text\">Try a different search.</slot>\n            </p>\n          </MarketEmptyState>\n        </slot>\n      </Host>\n    );\n  }\n}\n"]}