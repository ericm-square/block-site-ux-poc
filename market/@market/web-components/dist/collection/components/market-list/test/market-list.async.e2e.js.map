{"version":3,"file":"market-list.async.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-list/test/market-list.async.e2e.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAuB,MAAM,uBAAuB,CAAC;AAExE,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,IAAa,CAAC;IAClB,IAAI,IAAkB,CAAC;IAEvB,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,IAAI,GAAG,MAAM,UAAU,EAAE,CAAC;QAC1B,MAAM,IAAI,CAAC,UAAU,CAAC;;;;;;;;;;;KAWrB,CAAC,CAAC;QACH,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAExC,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAE/C,aAAa;QACb,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAE5C,iCAAiC;QACjC,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;YAChD,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAC1D,CAAC,QAAQ,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAClD,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;gBACnD,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACnC,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAChD,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBACtC,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;gBAC5B,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;gBACvD,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;gBACxC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAC3B,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;QAEtD,mBAAmB;QACnB,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAE/C,mEAAmE;QACnE,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAEvD,mBAAmB;QACnB,MAAM,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QAC7B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAEnD,eAAe;QACf,MAAM,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QAC7B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newE2EPage, E2EPage, E2EElement } from '@stencil/core/testing';\n\ndescribe('market-list: async', () => {\n  let page: E2EPage;\n  let rows: E2EElement[];\n\n  it('should update control row count when more rows are added later', async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-list interactive multiselect>\n        <market-row slot=\"control-row\">\n          <label slot=\"label\">Select all</label>\n          <market-radio slot=\"control\"></market-radio>\n        </market-row>\n        <market-row value=\"apple\">\n          <label slot=\"label\">Apple</label>\n          <market-radio slot=\"control\"></market-radio>\n        </market-row>\n      </market-list>\n    `);\n    rows = await page.findAll('market-row');\n\n    let countEl = await rows[0].find('.count');\n    expect(countEl.textContent).toStrictEqual('1');\n\n    // select all\n    await rows[0].click();\n    expect(rows[0]).toHaveAttribute('selected');\n    expect(rows[1]).toHaveAttribute('selected');\n\n    // add 3 new rows after 2 seconds\n    await page.$eval('.market-list', async (listEl) => {\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n      ['banana', 'mango', 'watermelon'].forEach((fruit) => {\n        const rowEl = document.createElement('market-row');\n        rowEl.setAttribute('value', fruit);\n        const labelEl = document.createElement('label');\n        labelEl.setAttribute('slot', 'label');\n        labelEl.textContent = fruit;\n        const radioEl = document.createElement('market-radio');\n        radioEl.setAttribute('slot', 'control');\n        rowEl.appendChild(labelEl);\n        rowEl.appendChild(radioEl);\n        listEl.appendChild(rowEl);\n      });\n    });\n    await page.waitForSelector('market-row:nth-child(5)');\n\n    // count is updated\n    countEl = await rows[0].find('.count');\n    expect(countEl.textContent).toStrictEqual('4');\n\n    // \"Select all\" should not be selected, and as well as the new rows\n    const updatedRows = await page.findAll('market-row');\n    expect(updatedRows[0]).not.toHaveAttribute('selected');\n    expect(updatedRows[1]).toHaveAttribute('selected');\n    expect(updatedRows[2]).not.toHaveAttribute('selected');\n    expect(updatedRows[3]).not.toHaveAttribute('selected');\n    expect(updatedRows[4]).not.toHaveAttribute('selected');\n\n    // select all again\n    await updatedRows[0].click();\n    expect(updatedRows[0]).toHaveAttribute('selected');\n    expect(updatedRows[1]).toHaveAttribute('selected');\n    expect(updatedRows[2]).toHaveAttribute('selected');\n    expect(updatedRows[3]).toHaveAttribute('selected');\n    expect(updatedRows[4]).toHaveAttribute('selected');\n\n    // unselect all\n    await updatedRows[0].click();\n    expect(updatedRows[0]).not.toHaveAttribute('selected');\n    expect(updatedRows[1]).not.toHaveAttribute('selected');\n    expect(updatedRows[2]).not.toHaveAttribute('selected');\n    expect(updatedRows[3]).not.toHaveAttribute('selected');\n    expect(updatedRows[4]).not.toHaveAttribute('selected');\n  });\n});\n"]}