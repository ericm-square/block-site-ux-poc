{"version":3,"file":"market-list.search.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-list/test/market-list.search.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage, E2EPage, E2EElement, EventSpy } from '@stencil/core/testing';\n\ndescribe('market-list: with search', () => {\n  let page: E2EPage;\n  let el: E2EElement;\n  let searchEl: E2EElement;\n  let clearButtonEl: E2EElement;\n  let appleRowEl: E2EElement;\n  let bananaRowEl: E2EElement;\n  let blueberryRowEl: E2EElement;\n  let eventSpy: EventSpy;\n\n  describe('render', () => {\n    it('renders search bar and rows', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\"></market-input-search>\n          <market-row value=\"apple\">\n            <label slot=\"label\">Apple</label>\n          </market-row>\n          <market-row value=\"banana\">\n            <label slot=\"label\">Banana</label>\n          </market-row>\n          <market-row value=\"blueberry\">\n            <label slot=\"label\">Blueberry</label>\n          </market-row>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n      searchEl = await el.find('market-input-search');\n      appleRowEl = await el.find('pierce/market-row[value=\"apple\"]');\n      bananaRowEl = await el.find('pierce/market-row[value=\"banana\"]');\n      blueberryRowEl = await el.find('pierce/market-row[value=\"blueberry\"]');\n\n      expect(el).toHaveAttribute('has-search');\n      expect(await searchEl.isVisible()).toStrictEqual(true);\n      expect(await appleRowEl.isVisible()).toStrictEqual(true);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(true);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(true);\n    });\n\n    it('shows clear button only when there’s a query', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\"></market-input-search>\n          <market-row value=\"apple\">\n            <label slot=\"label\">Apple</label>\n          </market-row>\n          <market-row value=\"banana\">\n            <label slot=\"label\">Banana</label>\n          </market-row>\n          <market-row value=\"blueberry\">\n            <label slot=\"label\">Blueberry</label>\n          </market-row>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n      searchEl = await el.find('market-input-search');\n      clearButtonEl = await searchEl.find('pierce/.clear-button');\n\n      expect(await clearButtonEl.isVisible()).toStrictEqual(false);\n\n      await searchEl.click();\n      await page.keyboard.type('boop');\n      await page.waitForChanges();\n      expect(await clearButtonEl.isVisible()).toStrictEqual(true);\n\n      await clearButtonEl.click();\n      await page.waitForChanges();\n      expect(await clearButtonEl.isVisible()).toStrictEqual(false);\n    });\n\n    it('filters on initial render when market-input-search has value', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\" value=\"nana\"></market-input-search>\n          <market-row value=\"apple\">\n            <label slot=\"label\">Apple</label>\n          </market-row>\n          <market-row value=\"banana\">\n            <label slot=\"label\">Banana</label>\n          </market-row>\n          <market-row value=\"blueberry\">\n            <label slot=\"label\">Blueberry</label>\n          </market-row>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n      appleRowEl = await el.find('pierce/market-row[value=\"apple\"]');\n      bananaRowEl = await el.find('pierce/market-row[value=\"banana\"]');\n      blueberryRowEl = await el.find('pierce/market-row[value=\"blueberry\"]');\n\n      expect(await appleRowEl.isVisible()).toStrictEqual(false);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(true);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(false);\n    });\n  });\n\n  describe('filter strategies', () => {\n    beforeEach(async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\"></market-input-search>\n          <market-row value=\"apple\">\n            <label slot=\"label\">Apple</label>\n            <p slot=\"subtext\">Red</p>\n          </market-row>\n          <market-row value=\"banana\">\n            <label slot=\"label\">Banana</label>\n            <p slot=\"subtext\">yellow</p>\n          </market-row>\n          <market-row value=\"blueberry\">\n            <label slot=\"label\">Blueberry</label>\n            <p slot=\"subtext\">blue</p>\n          </market-row>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n      searchEl = await el.find('market-input-search');\n      clearButtonEl = await searchEl.find('pierce/.clear-button');\n      appleRowEl = await el.find('pierce/market-row[value=\"apple\"]');\n      bananaRowEl = await el.find('pierce/market-row[value=\"banana\"]');\n      blueberryRowEl = await el.find('pierce/market-row[value=\"blueberry\"]');\n    });\n\n    it('uses default “textcontent” filter strategy', async () => {\n      expect(await clearButtonEl.isVisible()).toStrictEqual(false);\n\n      await searchEl.click();\n      await page.keyboard.type('b');\n      await page.waitForChanges();\n      expect(await clearButtonEl.isVisible()).toStrictEqual(true);\n      expect(await appleRowEl.isVisible()).toStrictEqual(false);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(true);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(true);\n\n      await page.keyboard.press('Backspace');\n      await page.waitForChanges();\n      expect(await clearButtonEl.isVisible()).toStrictEqual(false);\n      expect(await appleRowEl.isVisible()).toStrictEqual(true);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(true);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(true);\n\n      await page.keyboard.type('boop');\n      await page.waitForChanges();\n      expect(await clearButtonEl.isVisible()).toStrictEqual(true);\n      expect(await appleRowEl.isVisible()).toStrictEqual(false);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(false);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(false);\n\n      await clearButtonEl.click();\n      await page.waitForChanges();\n      expect(await clearButtonEl.isVisible()).toStrictEqual(false);\n      expect(await appleRowEl.isVisible()).toStrictEqual(true);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(true);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(true);\n    });\n\n    it('uses “label” strategy', async () => {\n      el.setAttribute('filter-strategy', 'label');\n      await searchEl.click();\n      await page.keyboard.type('nana');\n      await page.waitForChanges();\n      expect(await appleRowEl.isVisible()).toStrictEqual(false);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(true);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(false);\n\n      await clearButtonEl.click();\n      await page.waitForChanges();\n\n      // \"Banana\" row has a \"Yellow\" subtext but we're only searching through labels\n      await page.keyboard.type('yellow');\n      await page.waitForChanges();\n      expect(await appleRowEl.isVisible()).toStrictEqual(false);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(false);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(false);\n    });\n\n    it('uses “value” strategy', async () => {\n      el.setAttribute('filter-strategy', 'value');\n      await searchEl.click();\n      await page.keyboard.type('berry');\n      await page.waitForChanges();\n      expect(await appleRowEl.isVisible()).toStrictEqual(false);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(false);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(true);\n\n      await clearButtonEl.click();\n      await page.waitForChanges();\n\n      // \"Blueberry\" row's value is \"blue\" but value search is case-sensitive\n      await page.keyboard.type('BlUe');\n      await page.waitForChanges();\n      expect(await appleRowEl.isVisible()).toStrictEqual(false);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(false);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(false);\n    });\n\n    it('uses custom function strategy', async () => {\n      // same callback as in the storybook docs where '!' prefix negates the search results\n      await page.$eval('.market-list', (listEl: HTMLMarketListElement) => {\n        listEl.filterStrategy = ({ label, query }) => {\n          const isNot = query.startsWith('!');\n          const q = isNot ? query.slice(1) : query;\n          if (!q) return true;\n          const match = Boolean(new RegExp(q, 'i').test(label));\n          return isNot ? !match : match;\n        };\n      });\n\n      // search for rows except \"blue\"\n      await searchEl.click();\n      await page.keyboard.type('!blue');\n      await page.waitForChanges();\n      expect(await appleRowEl.isVisible()).toStrictEqual(true);\n      expect(await bananaRowEl.isVisible()).toStrictEqual(true);\n      expect(await blueberryRowEl.isVisible()).toStrictEqual(false);\n    });\n\n    it('emits marketListItemsFiltered', async () => {\n      eventSpy = await page.spyOnEvent('marketListItemsFiltered');\n\n      await searchEl.click();\n      await page.keyboard.type('b');\n      expect(eventSpy).toHaveReceivedEventTimes(1);\n      expect(eventSpy.lastEvent.detail.prevItems.length).toStrictEqual(3);\n      expect(eventSpy.lastEvent.detail.items.length).toStrictEqual(2);\n\n      await page.keyboard.type('a');\n      expect(eventSpy).toHaveReceivedEventTimes(2);\n      expect(eventSpy.lastEvent.detail.prevItems.length).toStrictEqual(2);\n      expect(eventSpy.lastEvent.detail.items.length).toStrictEqual(1);\n\n      await page.keyboard.type('x');\n      expect(eventSpy).toHaveReceivedEventTimes(3);\n      expect(eventSpy.lastEvent.detail.prevItems.length).toStrictEqual(1);\n      expect(eventSpy.lastEvent.detail.items.length).toStrictEqual(0);\n\n      await clearButtonEl.click();\n      expect(eventSpy).toHaveReceivedEventTimes(4);\n      expect(eventSpy.lastEvent.detail.prevItems.length).toStrictEqual(0);\n      expect(eventSpy.lastEvent.detail.items.length).toStrictEqual(3);\n    });\n  });\n\n  describe('empty state', () => {\n    it('shows default empty state when there are no search results', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\"></market-input-search>\n          <market-row value=\"apple\">\n            <label slot=\"label\">Apple</label>\n            <p slot=\"subtext\">Red</p>\n          </market-row>\n          <market-row value=\"banana\">\n            <label slot=\"label\">Banana</label>\n            <p slot=\"subtext\">yellow</p>\n          </market-row>\n          <market-row value=\"blueberry\">\n            <label slot=\"label\">Blueberry</label>\n            <p slot=\"subtext\">blue</p>\n          </market-row>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n      searchEl = await el.find('market-input-search');\n\n      await searchEl.click();\n      await page.keyboard.type('fudge');\n\n      const emptyStateEl = await el.find('pierce/.market-empty-state');\n      expect(await emptyStateEl.isVisible()).toStrictEqual(true);\n\n      const primaryTextEl = await emptyStateEl.find('h3');\n      const secondaryTextEl = await emptyStateEl.find('p');\n      expect(primaryTextEl.textContent).toStrictEqual('No search results for “fudge”');\n      expect(secondaryTextEl.textContent).toStrictEqual('Try a different search.');\n    });\n\n    it('can have a slotted primary and secondary text for empty state', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\"></market-input-search>\n          <market-row value=\"apple\"><label slot=\"label\">Apple</label></market-row>\n          <span slot=\"empty-state-primary-text\">fudge not found</span>\n          <span slot=\"empty-state-secondary-text\">nice try</span>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n      searchEl = await el.find('market-input-search');\n      await searchEl.click();\n      await page.keyboard.type('fudge');\n      await page.waitForChanges();\n\n      const emptyStateEl = await el.find('pierce/.market-empty-state');\n      expect(await emptyStateEl.isVisible()).toStrictEqual(true);\n\n      const primaryTextSlot = await page.$eval('.market-list', (listEl) => {\n        const slot: HTMLSlotElement = listEl.shadowRoot.querySelector('slot[name=\"empty-state-primary-text\"]');\n        return slot.assignedNodes()[0].textContent.trim();\n      });\n      const secondaryTextSlot = await page.$eval('.market-list', (listEl) => {\n        const slot: HTMLSlotElement = listEl.shadowRoot.querySelector('slot[name=\"empty-state-secondary-text\"]');\n        return slot.assignedNodes()[0].textContent.trim();\n      });\n      expect(primaryTextSlot).toStrictEqual('fudge not found');\n      expect(secondaryTextSlot).toStrictEqual('nice try');\n    });\n\n    it('can have a slotted empty state', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\"></market-input-search>\n          <market-row value=\"apple\"><label slot=\"label\">Apple</label></market-row>\n          <market-empty-state class=\"custom-empty-state\" slot=\"empty-state\">\n            <h3 slot=\"primary-text\">fudge not found</h3>\n            <p slot=\"secondary-text\">nice try</p>\n          </market-empty-state>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n      searchEl = await el.find('market-input-search');\n      await searchEl.click();\n      await page.keyboard.type('fudge');\n      await page.waitForChanges();\n\n      const emptyStateEl = await el.find('pierce/.custom-empty-state');\n      expect(await emptyStateEl.isVisible()).toStrictEqual(true);\n\n      const primaryTextEl = await emptyStateEl.find('h3');\n      const secondaryTextEl = await emptyStateEl.find('p');\n      expect(primaryTextEl.textContent).toStrictEqual('fudge not found');\n      expect(secondaryTextEl.textContent).toStrictEqual('nice try');\n    });\n\n    it('shows empty state if there is a search query but there are no slotted rows', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\"></market-input-search>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n      searchEl = await el.find('market-input-search');\n      await searchEl.click();\n      await page.keyboard.type('fudge');\n      await page.waitForChanges();\n\n      const emptyStateEl = await el.find('pierce/.market-empty-state');\n      expect(await emptyStateEl.isVisible()).toStrictEqual(true);\n    });\n\n    it('does not show empty state if there’s no search query and there are no slotted rows', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-list>\n          <market-input-search slot=\"search\"></market-input-search>\n        </market-list>\n      `);\n      el = await page.find('market-list');\n\n      const emptyStateEl = await el.find('pierce/.market-empty-state');\n      expect(await emptyStateEl.isVisible()).toStrictEqual(false);\n    });\n  });\n});\n"]}