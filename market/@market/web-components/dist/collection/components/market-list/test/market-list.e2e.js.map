{"version":3,"file":"market-list.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-list/test/market-list.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["/* Write tests for:\n- using rows with and without values\n- lists with no passed value don't have a value attribute (since we removed the '' default)\n*/\n\nimport { newE2EPage, E2EPage, E2EElement } from '@stencil/core/testing';\n\ndescribe('market-list', () => {\n  describe('with rows', () => {\n    let page;\n    let el;\n\n    describe('dynamically updating default template values', () => {\n      describe('default configuration', () => {\n        beforeEach(async () => {\n          page = await newE2EPage();\n          await page.setContent(`\n          <market-list name=\"my-list\">\n            <market-row>Apple</market-row>\n            <market-row>Orange</market-row>\n            <market-row>Pear</market-row>\n          </market-list>\n        `);\n\n          el = await page.find('market-list');\n        });\n\n        it('should render with expected attributes', async () => {\n          expect(el).not.toBeNull();\n          expect(el).not.toHaveAttribute('multiselect');\n          expect(el).not.toHaveAttribute('has-search');\n          expect(el).toEqualAttribute('value', '');\n          expect(el).toEqualAttribute('name', 'my-list');\n          expect(el).toEqualAttribute('role', 'list');\n          expect(el).toEqualAttribute('aria-labelledby', 'my-list');\n          expect(el).not.toHaveAttribute('aria-multiselect');\n\n          const rows = await page.findAll('market-row');\n\n          expect(rows.length).toEqual(3);\n        });\n\n        it('should make rows interactive when interactive is set to true', async () => {\n          const rows = await el.findAll('market-row');\n\n          rows.forEach((row) => {\n            expect(row).toEqualAttribute('role', 'listitem');\n          });\n\n          el.setAttribute('interactive', true);\n          await page.waitForChanges();\n\n          rows.forEach((row) => {\n            expect(row).toEqualAttribute('role', 'option');\n          });\n        });\n      });\n\n      describe('when interactive', () => {\n        let page: E2EPage;\n        let el: E2EElement;\n        let orangeRow: E2EElement;\n        let appleRow: E2EElement;\n        let pearRow: E2EElement;\n\n        beforeEach(async () => {\n          page = await newE2EPage();\n          await page.setContent(`\n            <market-list interactive>\n              <market-row value=\"apple\">Apple</market-row>\n              <market-row value=\"orange\">Orange</market-row>\n              <market-row value=\"pear\">Pear</market-row>\n            </market-list>\n          `);\n          el = await page.find('market-list');\n          expect(el).toEqualAttribute('role', 'listbox');\n          orangeRow = await el.find('market-row[value=\"orange\"]');\n          appleRow = await el.find('market-row[value=\"apple\"]');\n          pearRow = await el.find('market-row[value=\"pear\"]');\n        });\n\n        it('should pass interactive to child rows', async () => {\n          const rows = await el.findAll('market-row');\n\n          rows.forEach((row) => {\n            expect(row).toEqualAttribute('role', 'option');\n          });\n        });\n\n        it('should set the default selection if a value attribute is passed', async () => {\n          const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n          el.setAttribute('value', 'orange');\n          await page.waitForChanges();\n\n          expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n          expect(orangeRow).toHaveAttribute('selected');\n          expect(appleRow).not.toHaveAttribute('selected');\n          expect(pearRow).not.toHaveAttribute('selected');\n        });\n\n        describe('not multiselect', () => {\n          it('should deselect all other items when a new child row is selected', async () => {\n            appleRow.setAttribute('selected', true);\n            await page.waitForChanges();\n\n            expect(orangeRow).not.toHaveAttribute('selected');\n            expect(appleRow).toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n\n            await orangeRow.click();\n\n            expect(orangeRow).toHaveAttribute('selected');\n            expect(appleRow).not.toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n          });\n\n          it('does not allow items to be deselected', async () => {\n            const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n            await appleRow.click();\n\n            expect(orangeRow).not.toHaveAttribute('selected');\n            expect(appleRow).toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n\n            // marketListSelectionsDidChange is emitted once on initial row selection\n            expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelectionValue).toEqual('apple');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual(['apple']);\n\n            await appleRow.click();\n\n            expect(orangeRow).not.toHaveAttribute('selected');\n            expect(appleRow).toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n\n            // re-clicking selected option doesn't trigger marketListSelectionsDidChange\n            expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n          });\n\n          it('should emit an event when the selection changes', async () => {\n            const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n            await orangeRow.click();\n\n            expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelection).not.toBeFalsy();\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newDeselection).toBeFalsy();\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelectionValue).toEqual('orange');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual(['orange']);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.prevSelectionValues).toEqual([]);\n          });\n\n          it('should have an empty value if selected rows have empty values too', async () => {\n            orangeRow.setAttribute('value', '');\n            appleRow.setAttribute('value', '');\n            pearRow.setAttribute('value', '');\n            await page.waitForChanges();\n\n            const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n            await orangeRow.click();\n            expect(el).toEqualAttribute('value', '');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual([]);\n\n            await appleRow.click();\n            expect(el).toEqualAttribute('value', '');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual([]);\n\n            await pearRow.click();\n            expect(el).toEqualAttribute('value', '');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual([]);\n          });\n        });\n\n        describe('when multiselect', () => {\n          beforeEach(async () => {\n            page = await newE2EPage();\n            await page.setContent(`\n              <market-list interactive multiselect>\n                <market-row value=\"apple\">Apple</market-row>\n                <market-row value=\"orange\">Orange</market-row>\n                <market-row value=\"pear\">Pear</market-row>\n              </market-list>\n            `);\n            el = await page.find('market-list');\n            appleRow = await el.find('market-row[value=\"apple\"]');\n            orangeRow = await el.find('market-row[value=\"orange\"]');\n            pearRow = await el.find('market-row[value=\"pear\"]');\n          });\n\n          it('adds to selections when a new child row is selected and removes when deselected', async () => {\n            const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n            await appleRow.click();\n\n            expect(el).toEqualAttribute('value', 'apple');\n            expect(appleRow).toHaveAttribute('selected');\n            expect(orangeRow).not.toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n            expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelectionValue).toEqual('apple');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual(['apple']);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.prevSelectionValues).toEqual([]);\n\n            await orangeRow.click();\n\n            expect(el).toEqualAttribute('value', 'apple,orange');\n            expect(appleRow).toHaveAttribute('selected');\n            expect(orangeRow).toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n            expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(2);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelectionValue).toEqual('orange');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual([\n              'apple',\n              'orange',\n            ]);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.prevSelectionValues).toEqual(['apple']);\n\n            await orangeRow.click();\n\n            expect(el).toEqualAttribute('value', 'apple');\n            expect(appleRow).toHaveAttribute('selected');\n            expect(orangeRow).not.toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n            expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(3);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelection).toBeFalsy();\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newDeselection).not.toBeFalsy();\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newDeselectionValue).toEqual('orange');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual(['apple']);\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.prevSelectionValues).toEqual(['apple', 'orange']);\n          });\n\n          // fix for https://github.com/squareup/market/issues/4565\n          it('properly deselects rows when value is set programmatically', async () => {\n            // select a row\n            await appleRow.click();\n            await page.waitForChanges();\n            expect(appleRow).toHaveAttribute('selected');\n            expect(orangeRow).not.toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n\n            // programmatically change value that deselects the row\n            el.setProperty('value', '');\n            await page.waitForChanges();\n            expect(appleRow).not.toHaveAttribute('selected');\n            expect(orangeRow).not.toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n\n            // select a different row\n            await pearRow.click();\n            await page.waitForChanges();\n            expect(appleRow).not.toHaveAttribute('selected');\n            expect(orangeRow).not.toHaveAttribute('selected');\n            expect(pearRow).toHaveAttribute('selected');\n          });\n\n          it('propagates multiple values', async () => {\n            el.setAttribute('value', 'apple,orange');\n            await page.waitForChanges();\n\n            expect(el).toEqualAttribute('value', 'apple,orange');\n            expect(appleRow).toHaveAttribute('selected');\n            expect(orangeRow).toHaveAttribute('selected');\n            expect(pearRow).not.toHaveAttribute('selected');\n          });\n\n          it('should have an empty value if selected rows have empty values too', async () => {\n            orangeRow.setAttribute('value', '');\n            appleRow.setAttribute('value', '');\n            pearRow.setAttribute('value', '');\n            await page.waitForChanges();\n\n            const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n            await orangeRow.click();\n            expect(el).toEqualAttribute('value', '');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual([]);\n\n            await appleRow.click();\n            expect(el).toEqualAttribute('value', '');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual([]);\n\n            await pearRow.click();\n            expect(el).toEqualAttribute('value', '');\n            expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual([]);\n          });\n        });\n      });\n    });\n\n    describe('initial render', () => {\n      it('with selection set on row, sets list value to value of selected row', async () => {\n        const page = await newE2EPage();\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        await page.setContent(`\n          <market-list>\n            <market-row value=\"apple\">Apple</market-row>\n            <market-row value=\"orange\" selected>Orange</market-row>\n            <market-row value=\"pear\">Pear</market-row>\n          </market-list>\n        `);\n\n        const el = await page.find('market-list');\n        const orangeRow = await el.find('market-row[value=\"orange\"]');\n        const appleRow = await el.find('market-row[value=\"apple\"]');\n        const pearRow = await el.find('market-row[value=\"pear\"]');\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(orangeRow).toHaveAttribute('selected');\n        expect(appleRow).not.toHaveAttribute('selected');\n        expect(pearRow).not.toHaveAttribute('selected');\n      });\n\n      // broken\n      it.skip('with multiple selection set on rows, sets list value to value of selected rows', async () => {\n        const page = await newE2EPage();\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        await page.setContent(`\n          <market-list>\n            <market-row value=\"apple\">Apple</market-row>\n            <market-row value=\"orange\" selected>Orange</market-row>\n            <market-row value=\"pear\" selected>Pear</market-row>\n          </market-list>\n        `);\n\n        const el = await page.find('market-list');\n        const orangeRow = await el.find('market-row[value=\"orange\"]');\n        const appleRow = await el.find('market-row[value=\"apple\"]');\n        const pearRow = await el.find('market-row[value=\"pear\"]');\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(appleRow).not.toHaveAttribute('selected');\n        expect(orangeRow).toHaveAttribute('selected');\n        expect(pearRow).toHaveAttribute('selected');\n        expect(el).toEqualAttribute('value', 'apple,pear');\n      });\n\n      it('sets interactive on list if interactive rows are slotted', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n          <market-list>\n            <market-row interactive>Apple</market-row>\n            <market-row interactive>Orange</market-row>\n            <market-row interactive>Pear</market-row>\n          </market-list>\n        `);\n\n        const el = await page.find('market-list');\n        const rows = await el.findAll('market-row');\n\n        expect(el).toEqualAttribute('role', 'listbox');\n        rows.forEach((row) => {\n          expect(row).toEqualAttribute('role', 'option');\n        });\n      });\n\n      it('sets interactive on rows if list is interactive', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n          <market-list interactive>\n            <market-row>Apple</market-row>\n            <market-row>Orange</market-row>\n            <market-row>Pear</market-row>\n          </market-list>\n        `);\n\n        const el = await page.find('market-list');\n        const rows = await el.findAll('market-row');\n\n        expect(el).toEqualAttribute('role', 'listbox');\n        rows.forEach((row) => {\n          expect(row).toEqualAttribute('role', 'option');\n        });\n      });\n\n      it('displays static list and rows if nothing is interactive', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n          <market-list>\n            <market-row>Apple</market-row>\n            <market-row>Orange</market-row>\n            <market-row>Pear</market-row>\n          </market-list>\n        `);\n\n        const el = await page.find('market-list');\n        const rows = await el.findAll('market-row');\n\n        expect(el).toEqualAttribute('role', 'list');\n        rows.forEach((row) => {\n          expect(row).toEqualAttribute('role', 'listitem');\n        });\n      });\n\n      it('passes transient down to rows, and does not select on click', async () => {\n        const page = await newE2EPage();\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        await page.setContent(`\n          <market-list interactive transient>\n            <market-row value=\"apple\">Apple</market-row>\n            <market-row value=\"orange\">Orange</market-row>\n            <market-row value=\"pear\">Pear</market-row>\n          </market-list>\n        `);\n\n        const firstRow = await page.find('market-row');\n\n        expect(await firstRow.getProperty('transient')).toEqual(true);\n\n        await firstRow.click();\n        page.waitForChanges();\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(firstRow).not.toHaveAttribute('selected');\n      });\n\n      it('handles incremental adding of rows correctly', async () => {\n        const page = await newE2EPage({ failOnConsoleError: true });\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        await page.setContent(`\n          <market-list value=\"strawberry\">\n          </market-list>\n\n          <div class=\"first-group\">\n            <market-row value=\"apple\">Apple</market-row>\n            <market-row value=\"orange\">Orange</market-row>\n            <market-row value=\"pear\">Pear</market-row>\n          </div>\n\n          <div class=\"second-group\">\n            <market-row value=\"strawberry\">Strawberry</market-row>\n            <market-row value=\"blueberry\">Blueberry</market-row>\n          </div>\n        `);\n\n        const el = await page.find('market-list');\n        expect(el).not.toBeNull();\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n\n        const firstGroup = await page.find('.first-group');\n        el.innerHTML = firstGroup.innerHTML;\n        await page.waitForChanges();\n\n        const orangeRow = await el.find('market-row[value=\"orange\"]');\n        const appleRow = await el.find('market-row[value=\"apple\"]');\n        const pearRow = await el.find('market-row[value=\"pear\"]');\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(orangeRow).not.toHaveAttribute('selected');\n        expect(appleRow).not.toHaveAttribute('selected');\n        expect(pearRow).not.toHaveAttribute('selected');\n\n        const secondGroup = await page.find('.second-group');\n        el.innerHTML += secondGroup.innerHTML;\n        await page.waitForChanges();\n\n        const strawberryRow = await el.find('market-row[value=\"strawberry\"]');\n        const blueberryRow = await el.find('market-row[value=\"blueberry\"]');\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(orangeRow).not.toHaveAttribute('selected');\n        expect(appleRow).not.toHaveAttribute('selected');\n        expect(pearRow).not.toHaveAttribute('selected');\n        expect(strawberryRow).toHaveAttribute('selected');\n        expect(blueberryRow).not.toHaveAttribute('selected');\n      });\n    });\n  });\n\n  describe('interactive with action cards containing rows', () => {\n    let page: E2EPage;\n    let el: E2EElement;\n    let orangeCard: E2EElement;\n    let appleCard: E2EElement;\n    let pearCard: E2EElement;\n    let orangeRow: E2EElement;\n    let appleRow: E2EElement;\n    let pearRow: E2EElement;\n\n    describe('dynamically updating default template values', () => {\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n          <market-list name=\"my-list\">\n            <market-action-card value=\"apple\">\n              <market-row>Apple</market-row>\n            </market-action-card>\n            <market-action-card value=\"orange\">\n              <market-row>Orange</market-row>\n            </market-action-card>\n            <market-action-card value=\"pear\">\n              <market-row>Pear</market-row>\n            </market-action-card>\n          </market-list>\n        `);\n        el = await page.find('market-list');\n        orangeCard = await el.find('market-action-card[value=\"orange\"]');\n        appleCard = await el.find('market-action-card[value=\"apple\"]');\n        pearCard = await el.find('market-action-card[value=\"pear\"]');\n\n        orangeRow = await orangeCard.find('market-row');\n        appleRow = await appleCard.find('market-row');\n        pearRow = await pearCard.find('market-row');\n      });\n\n      it('should render with correct default attributes', () => {\n        expect(el).not.toBeNull();\n        expect(el).not.toHaveAttribute('multiselect');\n        expect(el).toEqualAttribute('value', '');\n        expect(el).toEqualAttribute('name', 'my-list');\n        expect(el).toEqualAttribute('role', 'listbox');\n        expect(el).toEqualAttribute('aria-labelledby', 'my-list');\n        expect(el).not.toHaveAttribute('aria-multiselect');\n      });\n\n      it('should set the default selection if a value attribute is passed, and clear if blanked out', async () => {\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        el.setAttribute('value', 'orange');\n        await page.waitForChanges();\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(orangeCard).toHaveAttribute('selected');\n        expect(appleCard).not.toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n\n        el.setAttribute('value', '');\n        await page.waitForChanges();\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(orangeCard).not.toHaveAttribute('selected');\n        expect(appleCard).not.toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n      });\n\n      it('should deselect all other items when a new child row is selected', async () => {\n        appleCard.setAttribute('selected', true);\n        await page.waitForChanges();\n\n        expect(orangeCard).not.toHaveAttribute('selected');\n        expect(appleCard).toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n\n        await orangeCard.click();\n\n        expect(orangeCard).toHaveAttribute('selected');\n        expect(appleCard).not.toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n      });\n\n      it('does not allow items to be deselected', async () => {\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n        await appleCard.click();\n\n        expect(orangeCard).not.toHaveAttribute('selected');\n        expect(appleCard).toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n\n        // marketListSelectionsDidChange is emitted once on initial row selection\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelectionValue).toEqual('apple');\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual(['apple']);\n\n        await appleCard.click();\n\n        expect(orangeCard).not.toHaveAttribute('selected');\n        expect(appleCard).toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n\n        // re-clicking selected option doesn't trigger marketListSelectionsDidChange\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n      });\n\n      it('should emit an event when the selection changes', async () => {\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n        await orangeCard.click();\n\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelection).not.toBeFalsy();\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newDeselection).toBeFalsy();\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelectionValue).toEqual('orange');\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual(['orange']);\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.prevSelectionValues).toEqual([]);\n      });\n\n      it('should propagate prop changes to children for transient and multiselect', async () => {\n        expect(el).not.toHaveAttribute('transient');\n        expect(el).not.toHaveAttribute('multiselect');\n\n        expect(orangeCard).not.toHaveAttribute('transient');\n        expect(appleCard).not.toHaveAttribute('transient');\n        expect(pearCard).not.toHaveAttribute('transient');\n\n        // Multiselect passes down 'togglable' to associated rows\n        expect(await orangeRow.getProperty('togglable')).toEqual(false);\n        expect(await appleRow.getProperty('togglable')).toEqual(false);\n        expect(await pearRow.getProperty('togglable')).toEqual(false);\n\n        el.setAttribute('multiselect', true);\n        el.setAttribute('transient', true);\n        await page.waitForChanges();\n\n        expect(el).toHaveAttribute('transient');\n        expect(el).toHaveAttribute('multiselect');\n\n        expect(await orangeCard.getProperty('transient')).toEqual(true);\n        expect(await appleCard.getProperty('transient')).toEqual(true);\n        expect(await pearCard.getProperty('transient')).toEqual(true);\n\n        expect(await orangeRow.getProperty('togglable')).toEqual(true);\n        expect(await appleRow.getProperty('togglable')).toEqual(true);\n        expect(await pearRow.getProperty('togglable')).toEqual(true);\n      });\n    });\n\n    describe('initial render', () => {\n      it('with selection set on row within card, sets list value to value of selected row', async () => {\n        const page = await newE2EPage();\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        await page.setContent(`\n          <market-list>\n            <market-action-card value=\"apple\">\n              <market-row>Apple</market-row>\n            </market-action-card>\n            <market-action-card value=\"orange\" selected>\n              <market-row>Orange</market-row>\n            </market-action-card>\n            <market-action-card value=\"pear\">\n              <market-row>Pear</market-row>\n            </market-action-card>\n          </market-list>\n        `);\n\n        const el = await page.find('market-list');\n        const orangeCard = await el.find('market-action-card[value=\"orange\"]');\n        const appleCard = await el.find('market-action-card[value=\"apple\"]');\n        const pearCard = await el.find('market-action-card[value=\"pear\"]');\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(orangeCard).toHaveAttribute('selected');\n        expect(appleCard).not.toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n      });\n\n      it('sets interactive on list if action cards containing rows are slotted', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n          <market-list>\n            <market-action-card value=\"apple\">\n              <market-row>Apple</market-row>\n            </market-action-card>\n            <market-action-card value=\"orange\" selected>\n              <market-row>Orange</market-row>\n            </market-action-card>\n            <market-action-card value=\"pear\">\n              <market-row>Pear</market-row>\n            </market-action-card>\n          </market-list>\n        `);\n\n        const el = await page.find('market-list');\n\n        expect(el).toEqualAttribute('role', 'listbox');\n      });\n\n      it('passes transient down to cards and rows, and does not select on click', async () => {\n        const page = await newE2EPage();\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        await page.setContent(`\n          <market-list transient>\n            <market-action-card value=\"apple\">\n              <market-row>Apple</market-row>\n            </market-action-card>\n            <market-action-card value=\"orange\">\n              <market-row>Orange</market-row>\n            </market-action-card>\n            <market-action-card value=\"pear\">\n              <market-row>Pear</market-row>\n            </market-action-card>\n          </market-list>\n        `);\n\n        const firstCard = await page.find('market-action-card');\n        const firstRow = await firstCard.find('market-row');\n\n        expect(await firstCard.getProperty('transient')).toEqual(true);\n        expect(await firstRow.getProperty('transient')).toEqual(true);\n\n        await firstRow.click();\n        page.waitForChanges();\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(firstCard).not.toHaveAttribute('selected');\n        expect(firstRow).not.toHaveAttribute('selected');\n      });\n    });\n  });\n\n  describe('interactive with action cards that do not contain rows', () => {\n    describe('dynamically updating default template values', () => {\n      let page: E2EPage;\n      let el: E2EElement;\n      let orangeCard: E2EElement;\n      let appleCard: E2EElement;\n      let pearCard: E2EElement;\n\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n          <market-list name=\"my-list\" interactive>\n            <market-action-card value=\"apple\">Apple</market-action-card>\n            <market-action-card value=\"orange\">Orange</market-action-card>\n            <market-action-card value=\"pear\">Pear</market-action-card>\n          </market-list>\n        `);\n        el = await page.find('market-list');\n        orangeCard = await el.find('market-action-card[value=\"orange\"]');\n        appleCard = await el.find('market-action-card[value=\"apple\"]');\n        pearCard = await el.find('market-action-card[value=\"pear\"]');\n      });\n\n      it('should render with correct default attributes', () => {\n        expect(el).not.toBeNull();\n        expect(el).not.toHaveAttribute('multiselect');\n        expect(el).toEqualAttribute('value', '');\n        expect(el).toEqualAttribute('name', 'my-list');\n        expect(el).toEqualAttribute('role', 'listbox');\n        expect(el).toEqualAttribute('aria-labelledby', 'my-list');\n        expect(el).not.toHaveAttribute('aria-multiselect');\n      });\n\n      it('should set the default selection if a value attribute is passed', async () => {\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        el.setAttribute('value', 'orange');\n        await page.waitForChanges();\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(orangeCard).toHaveAttribute('selected');\n        expect(appleCard).not.toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n      });\n\n      it('should deselect all other items when a new child card is selected', async () => {\n        appleCard.setAttribute('selected', true);\n        await page.waitForChanges();\n\n        expect(orangeCard).not.toHaveAttribute('selected');\n        expect(appleCard).toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n\n        await orangeCard.click();\n\n        expect(orangeCard).toHaveAttribute('selected');\n        expect(appleCard).not.toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n      });\n\n      it('does allow items to be deselected', async () => {\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n        await appleCard.click();\n\n        expect(orangeCard).not.toHaveAttribute('selected');\n        expect(appleCard).toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n\n        // marketListSelectionsDidChange is emitted once on initial Card selection\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelectionValue).toEqual('apple');\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual(['apple']);\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.prevSelectionValues).toEqual([]);\n\n        await appleCard.click();\n\n        expect(orangeCard).not.toHaveAttribute('selected');\n        expect(appleCard).not.toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n\n        // re-clicking selected option does trigger marketListSelectionsDidChange\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(2);\n      });\n\n      it('should emit an event when the selection changes', async () => {\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n        await orangeCard.click();\n\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelection).not.toBeFalsy();\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newDeselection).toBeFalsy();\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.newSelectionValue).toEqual('orange');\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.currentSelectionValues).toEqual(['orange']);\n        expect(marketListSelectionsDidChangeSpy.lastEvent.detail.prevSelectionValues).toEqual([]);\n      });\n    });\n\n    describe('initial render', () => {\n      it('with selection set on card, sets list value to value of selected card', async () => {\n        const page = await newE2EPage();\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        await page.setContent(`\n            <market-list>\n              <market-action-card value=\"apple\">Apple</market-action-card>\n              <market-action-card value=\"orange\" selected>Orange</market-action-card>\n              <market-action-card value=\"pear\">Pear</market-action-card>\n            </market-list>\n          `);\n\n        const el = await page.find('market-list');\n        const orangeCard = await el.find('market-action-card[value=\"orange\"]');\n        const appleCard = await el.find('market-action-card[value=\"apple\"]');\n        const pearCard = await el.find('market-action-card[value=\"pear\"]');\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(orangeCard).toHaveAttribute('selected');\n        expect(appleCard).not.toHaveAttribute('selected');\n        expect(pearCard).not.toHaveAttribute('selected');\n      });\n    });\n\n    it('sets interactive on list if action cards are slotted', async () => {\n      const page = await newE2EPage();\n      await page.setContent(`\n          <market-list>\n            <market-action-card>Apple</market-action-card>\n            <market-action-card>Orange</market-action-card>\n            <market-action-card>Pear</market-action-card>\n          </market-list>\n        `);\n\n      const el = await page.find('market-list');\n\n      expect(el).toEqualAttribute('role', 'listbox');\n    });\n\n    it('passes transient down to cards, and does not select on click', async () => {\n      const page = await newE2EPage();\n      const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n      await page.setContent(`\n          <market-list transient>\n            <market-action-card>Apple</market-action-card>\n            <market-action-card>Orange</market-action-card>\n            <market-action-card>Pear</market-action-card>\n          </market-list>\n        `);\n\n      const firstCard = await page.find('market-action-card');\n\n      expect(await firstCard.getProperty('transient')).toEqual(true);\n\n      await firstCard.click();\n      page.waitForChanges();\n\n      expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n      expect(firstCard).not.toHaveAttribute('selected');\n    });\n  });\n\n  describe('interactive list accessibility', () => {\n    it('sets role on list and rows with different control types', async () => {\n      const page = await newE2EPage();\n      await page.setContent(`\n        <market-list interactive>\n          <market-row value=\"all\">\n              <label slot=\"label\">Apple</label>\n              <market-checkbox slot=\"control\"></market-checkbox>\n          </market-row>\n          <market-row>Orange</market-row>\n          <market-row>Blueberry</market-row>\n        </market-list>\n      `);\n\n      const el = await page.find('market-list');\n      const rows = await page.findAll('market-row');\n\n      expect(el).toEqualAttribute('role', 'list');\n      rows.forEach((row) => {\n        expect(row).toEqualAttribute('role', 'listitem');\n      });\n    });\n\n    describe('with rows', () => {\n      let page: E2EPage;\n      let container: E2EElement;\n      let list: E2EElement;\n      let rows: E2EElement[];\n\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n          <div class=\"container\">\n            <market-list interactive>\n              <market-row>Apple</market-row>\n              <market-row href=\"https://www.squareup.com\">Orange</market-row>\n              <market-row disabled>Mango</market-row>\n              <market-row>Pear</market-row>\n            </market-list>\n            <market-action-card>Focusable element</div>\n          </div>\n        `);\n\n        container = await page.find('.container');\n        list = await page.find('market-list');\n        rows = await page.findAll('market-row');\n      });\n\n      it('sets roles on list and rows', () => {\n        expect(list).toEqualAttribute('role', 'list');\n        rows.forEach((row) => {\n          expect(row).toEqualAttribute('role', 'listitem');\n        });\n      });\n\n      it('tabbing moves focus through rows, then subsequent elements', async () => {\n        await container.focus();\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[0]);\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[1]);\n\n        // skips disabled row\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[3]);\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        const focusableElement = await page.find('market-action-card');\n        expect(await page.find(':focus')).toEqual(focusableElement);\n      });\n\n      it('navigates the rows with up and down arrows', async () => {\n        await container.focus();\n\n        // focus on list --> focus moves to first row\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[0]);\n\n        await page.keyboard.press('ArrowDown');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[1]);\n\n        // skips disabled row\n        await page.keyboard.press('ArrowDown');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[3]);\n        // already at the end of the list, so focus should stay on the last row\n        await page.keyboard.press('ArrowDown');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[3]);\n\n        // skips disabled row\n        await page.keyboard.press('ArrowUp');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[1]);\n\n        await page.keyboard.press('ArrowUp');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[0]);\n\n        // already at the top of the list, so focus should stay on the first row\n        await page.keyboard.press('ArrowUp');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[0]);\n      });\n\n      it('allows selecting a specific row with focusRow method', async () => {\n        await list.callMethod('focusRowAtIndex', 1);\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(rows[1]);\n      });\n    });\n\n    describe('with rows using slotted controls', () => {\n      let page: E2EPage;\n      let controls: E2EElement[];\n      let container: E2EElement;\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n          <div class=\"container\">\n            <market-list interactive>\n              <market-row>\n                <label slot=\"label\">Apple</label>\n                <market-checkbox slot=\"control\"></market-checkbox>\n              </market-row>\n              <market-row>\n                <label slot=\"label\">Orange</label>\n                <market-checkbox slot=\"control\"></market-checkbox>\n              </market-row>\n              <market-row>\n                <label slot=\"label\">Pear</label>\n                <market-checkbox slot=\"control\"></market-checkbox>\n              </market-row>\n            </market-list>\n          </div>\n        `);\n\n        controls = await page.findAll('market-checkbox');\n        container = await page.find('.container');\n      });\n\n      it('sets roles on list and rows', async () => {\n        const list = await page.find('market-list');\n        const rows = await page.findAll('market-row');\n\n        expect(list).toEqualAttribute('role', 'listbox');\n        rows.forEach((row) => {\n          expect(row).toEqualAttribute('role', 'option');\n        });\n      });\n\n      it('tabbing moves focus through slotted controls', async () => {\n        await container.focus();\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(controls[0]); // focus on 1st row control\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(controls[1]); // focus on 2nd row control\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(controls[2]); // focus on 3rd row control\n      });\n\n      it('up and down arrows do nothing if focus is on slotted control', async () => {\n        await container.focus();\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(controls[0]); // focus on 1st row control\n\n        await page.keyboard.press('ArrowDown');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(controls[0]);\n\n        await page.keyboard.press('ArrowUp');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(controls[0]);\n      });\n    });\n\n    describe('with action cards', () => {\n      let page: E2EPage;\n      let cards: E2EElement[];\n      let container: E2EElement;\n\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n          <div class=\"container\">\n            <market-list interactive>\n              <market-action-card>Apple</market-action-card>\n              <market-action-card>Orange</market-action-card>\n              <market-action-card disabled>Mango</market-action-card>\n              <market-action-card>Pear</market-action-card>\n            </market-list>\n            <market-row interactive>Focusable element</market-row>\n          </div>\n        `);\n\n        cards = await page.findAll('market-action-card');\n        container = await page.find('.container');\n      });\n\n      it('sets roles on list and cards', async () => {\n        const list = await page.find('market-list');\n\n        expect(list).toEqualAttribute('role', 'listbox');\n        cards.forEach((card) => {\n          expect(card).toEqualAttribute('role', 'option');\n        });\n      });\n\n      it('tabbing moves focus through cards, then subsequent elements', async () => {\n        await container.focus();\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[0]);\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[1]);\n\n        // skips disabled card\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[3]);\n\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        const focusableElement = await page.find('market-row');\n        expect(await page.find(':focus')).toEqual(focusableElement);\n      });\n\n      it('navigates the cards with up and down arrows', async () => {\n        await container.focus();\n\n        // focus on list --> focus moves to first card\n        await page.keyboard.press('Tab');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[0]);\n\n        await page.keyboard.press('ArrowDown');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[1]);\n\n        // skips disabled card\n        await page.keyboard.press('ArrowDown');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[3]);\n\n        // already at the end of the list, so focus should stay on the last card\n        await page.keyboard.press('ArrowDown');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[3]);\n\n        // skips disabled card\n        await page.keyboard.press('ArrowUp');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[1]);\n\n        await page.keyboard.press('ArrowUp');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[0]);\n\n        // already at the top of the list, so focus should stay on the first card\n        await page.keyboard.press('ArrowUp');\n        await page.waitForChanges();\n        expect(await page.find(':focus')).toEqual(cards[0]);\n      });\n    });\n  });\n\n  describe('interactive multiselect lists using a control row', () => {\n    describe('using slotted checkboxes', () => {\n      let page: E2EPage;\n      let el: E2EElement;\n      let controlRow: E2EElement;\n      let slottedCheckbox: E2EElement;\n      let appleRow: E2EElement;\n      let orangeRow: E2EElement;\n\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n          <market-list interactive multiselect>\n            <market-row value=\"all\" slot=\"control-row\">\n              <label slot=\"label\">Select all</label>\n              <market-checkbox slot=\"control\"></market-checkbox>\n            </market-row>\n            <market-row value=\"apple\">\n              <label slot=\"label\">Apple</label>\n              <div slot=\"subtext\">Lorem ipsum dolor sit amet, consectetur adipiscing elit</div>\n              <market-checkbox slot=\"control\"></market-checkbox>\n            </market-row>\n            <market-row value=\"orange\">\n              <label slot=\"label\">Orange</label>\n              <div slot=\"subtext\">Nunc viverra libero vitae rutrum scelerisque</div>\n              <market-checkbox slot=\"control\"></market-checkbox>\n            </market-row>\n          </market-list>\n        `);\n\n        el = await page.find('market-list');\n        controlRow = await el.find('market-row[slot=\"control-row\"]');\n        slottedCheckbox = await controlRow.find('market-checkbox[slot=\"control\"]');\n        appleRow = await el.find('market-row[value=\"apple\"]');\n        orangeRow = await el.find('market-row[value=\"orange\"]');\n      });\n\n      it('sets roles on list and rows', async () => {\n        const list = await page.find('market-list');\n        const rows = await page.findAll('market-row');\n\n        expect(list).toEqualAttribute('role', 'listbox');\n        rows.forEach((row) => {\n          expect(row).toEqualAttribute('role', 'option');\n        });\n      });\n\n      it('displays number of items on the control row', async () => {\n        const countEl = await el.find('pierce/.count');\n        expect(countEl.textContent).toStrictEqual('2');\n      });\n\n      it('displays the number of only selectable items on the control row', async () => {\n        orangeRow.setProperty('disabled', true);\n        await page.waitForChanges();\n\n        const countEl = await el.find('pierce/.count');\n        expect(countEl.textContent).toStrictEqual('1');\n      });\n\n      it('hides the count when `hideSelectableCount` is set to true', async () => {\n        el.setProperty('hideSelectableCount', true);\n        await page.waitForChanges();\n\n        const countEl = await controlRow.find('pierce/.count');\n        expect(countEl).toBeNull();\n      });\n\n      it('control row checkbox correctly reflects list selection state on load and on row interaction', async () => {\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        el.setAttribute('value', 'apple,orange'); // setting value attr --> all options selected\n        await page.waitForChanges();\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(controlRow).toHaveAttribute('selected');\n        expect(slottedCheckbox).toHaveAttribute('checked');\n        expect(slottedCheckbox).not.toHaveAttribute('indeterminate');\n        expect(appleRow).toHaveAttribute('selected');\n        expect(orangeRow).toHaveAttribute('selected');\n\n        await appleRow.click(); // deselect \"apple\" --> some options selected\n\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n        expect(controlRow).toHaveAttribute('selected');\n        expect(slottedCheckbox).toHaveAttribute('checked');\n        expect(slottedCheckbox).toHaveAttribute('indeterminate');\n        expect(appleRow).not.toHaveAttribute('selected');\n        expect(orangeRow).toHaveAttribute('selected');\n\n        await orangeRow.click(); // deselect \"orange\" --> no options selected\n\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(2);\n        expect(controlRow).not.toHaveAttribute('selected');\n        expect(slottedCheckbox).not.toHaveAttribute('checked');\n        expect(slottedCheckbox).not.toHaveAttribute('indeterminate');\n        expect(appleRow).not.toHaveAttribute('selected');\n        expect(orangeRow).not.toHaveAttribute('selected');\n      });\n\n      describe('using the control row', () => {\n        it('when no list items are selected, checkbox should be unchecked and control row should select all items', async () => {\n          expect(el).toEqualAttribute('value', '');\n          expect(controlRow).not.toHaveAttribute('selected');\n          expect(slottedCheckbox).not.toHaveAttribute('checked');\n          expect(slottedCheckbox).not.toHaveAttribute('indeterminate');\n\n          await controlRow.click();\n\n          expect(el).toEqualAttribute('value', 'apple,orange');\n          expect(controlRow).toHaveAttribute('selected');\n          expect(slottedCheckbox).toHaveAttribute('checked');\n          expect(slottedCheckbox).not.toHaveAttribute('indeterminate');\n        });\n\n        it('when all list items are selected, checkbox should be checked and control row should deselect all items', async () => {\n          el.setAttribute('value', 'apple,orange');\n          await page.waitForChanges();\n\n          expect(controlRow).toHaveAttribute('selected');\n          expect(slottedCheckbox).toHaveAttribute('checked');\n          expect(slottedCheckbox).not.toHaveAttribute('indeterminate');\n\n          await controlRow.click();\n\n          expect(el).toEqualAttribute('value', '');\n          expect(controlRow).not.toHaveAttribute('selected');\n          expect(slottedCheckbox).not.toHaveAttribute('checked');\n          expect(slottedCheckbox).not.toHaveAttribute('indeterminate');\n        });\n\n        it('when some list items are selected, checkbox should be indeterminate and control row should deselect all items', async () => {\n          el.setAttribute('value', 'apple');\n          await page.waitForChanges();\n\n          expect(controlRow).toHaveAttribute('selected');\n          expect(slottedCheckbox).toHaveAttribute('checked');\n          expect(slottedCheckbox).toHaveAttribute('indeterminate');\n\n          await controlRow.click();\n\n          expect(el).toEqualAttribute('value', '');\n          expect(controlRow).not.toHaveAttribute('selected');\n          expect(slottedCheckbox).not.toHaveAttribute('checked');\n          expect(slottedCheckbox).not.toHaveAttribute('indeterminate');\n        });\n\n        it('only selects non-disabled items when clicked; checkbox should be indeterminate', async () => {\n          orangeRow.setProperty('disabled', true);\n          await page.waitForChanges();\n\n          await controlRow.click();\n          await page.waitForChanges();\n\n          expect(el).toEqualAttribute('value', 'apple');\n          expect(appleRow).toHaveAttribute('selected');\n          expect(orangeRow).not.toHaveAttribute('selected');\n          expect(controlRow).toHaveAttribute('selected');\n          expect(slottedCheckbox).toHaveAttribute('checked');\n          expect(slottedCheckbox).toHaveAttribute('indeterminate');\n        });\n\n        it('does not deselect items that are both disabled and selected', async () => {\n          orangeRow.setProperty('disabled', true);\n          el.setAttribute('value', 'apple,orange');\n          await page.waitForChanges();\n\n          await controlRow.click();\n          await page.waitForChanges();\n\n          expect(el).toEqualAttribute('value', 'orange');\n          expect(appleRow).not.toHaveAttribute('selected');\n          expect(orangeRow).toHaveAttribute('selected');\n          expect(controlRow).toHaveAttribute('selected');\n          expect(slottedCheckbox).toHaveAttribute('checked');\n          expect(slottedCheckbox).toHaveAttribute('indeterminate');\n        });\n      });\n\n      /* skipping these tests until we find a way to test nodes emitted as event details */\n      describe.skip('marketListSelectionsDidChange event details', () => {\n        // when the event detail includes a market element node, this is what the test expects locally ¯\\_(ツ)_/¯\n        const returnMockRow = (attrs: number) => {\n          const mockObj = {};\n          const array = Array.from({ length: attrs }).fill(mockObj);\n          return { 's-p': array };\n        };\n\n        it('when selecting and deselecting all using control row', async () => {\n          const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n          await controlRow.click(); // select all\n          await page.waitForChanges();\n\n          expect(marketListSelectionsDidChangeSpy).toHaveFirstReceivedEventDetail({\n            newSelection: returnMockRow(2),\n            newSelectionValue: controlRow.getAttribute('value'),\n            newDeselection: null,\n            newDeselectionValue: null,\n            currentSelections: [returnMockRow(0), returnMockRow(0)],\n            currentSelectionValues: ['apple', 'orange'],\n            prevSelectionValues: [],\n          });\n\n          await controlRow.click(); // select none\n          await page.waitForChanges();\n\n          expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventDetail({\n            newSelection: null,\n            newSelectionValue: null,\n            newDeselection: returnMockRow(1),\n            newDeselectionValue: controlRow.getAttribute('value'),\n            currentSelections: [],\n            currentSelectionValues: [],\n            prevSelectionValues: ['apple', 'orange'],\n          });\n        });\n\n        it('when selecting and deselecting option rows', async () => {\n          const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n\n          await appleRow.click();\n          await page.waitForChanges();\n\n          expect(marketListSelectionsDidChangeSpy).toHaveFirstReceivedEventDetail({\n            newSelection: returnMockRow(2),\n            newSelectionValue: 'apple',\n            newDeselection: null,\n            newDeselectionValue: null,\n            currentSelections: [returnMockRow(2)],\n            currentSelectionValues: ['apple'],\n            prevSelectionValues: [],\n          });\n\n          await orangeRow.click();\n          await page.waitForChanges();\n\n          expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventDetail({\n            newSelection: returnMockRow(2),\n            newSelectionValue: 'orange',\n            newDeselection: null,\n            newDeselectionValue: null,\n            currentSelections: [returnMockRow(1), returnMockRow(2)],\n            currentSelectionValues: ['apple', 'orange'],\n            prevSelectionValues: ['apple'],\n          });\n\n          await appleRow.click();\n          await page.waitForChanges();\n\n          expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventDetail({\n            newSelection: null,\n            newSelectionValue: null,\n            newDeselection: returnMockRow(3),\n            newDeselectionValue: 'apple',\n            currentSelections: [returnMockRow(1)],\n            currentSelectionValues: ['orange'],\n            prevSelectionValues: ['apple', 'orange'],\n          });\n        });\n      });\n    });\n\n    describe('using slotted toggles', () => {\n      let page: E2EPage;\n      let el: E2EElement;\n      let controlRow: E2EElement;\n      let slottedToggle: E2EElement;\n      let appleRow: E2EElement;\n      let orangeRow: E2EElement;\n\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n          <market-list interactive multiselect>\n            <market-row value=\"all\" slot=\"control-row\">\n              <label slot=\"label\">Select all</label>\n              <market-toggle slot=\"control\"></market-toggle>\n            </market-row>\n            <market-row value=\"apple\">\n              <label slot=\"label\">Apple</label>\n              <div slot=\"subtext\">Lorem ipsum dolor sit amet, consectetur adipiscing elit</div>\n              <market-toggle slot=\"control\"></market-toggle>\n            </market-row>\n            <market-row value=\"orange\">\n              <label slot=\"label\">Orange</label>\n              <div slot=\"subtext\">Nunc viverra libero vitae rutrum scelerisque</div>\n              <market-toggle slot=\"control\"></market-toggle>\n            </market-row>\n          </market-list>\n        `);\n\n        el = await page.find('market-list');\n        controlRow = await el.find('market-row[slot=\"control-row\"]');\n        slottedToggle = await controlRow.find('market-toggle[slot=\"control\"]');\n        appleRow = await el.find('market-row[value=\"apple\"]');\n        orangeRow = await el.find('market-row[value=\"orange\"]');\n      });\n\n      it('sets roles on list and rows', async () => {\n        const list = await page.find('market-list');\n        const rows = await page.findAll('market-row');\n\n        expect(list).toEqualAttribute('role', 'listbox');\n        rows.forEach((row) => {\n          expect(row).toEqualAttribute('role', 'option');\n        });\n      });\n\n      it('displays number of items on the control row', async () => {\n        const countEl = await el.find('pierce/.count');\n        expect(countEl.textContent).toStrictEqual('2');\n      });\n\n      it('displays the number of only selectable items on the control row', async () => {\n        orangeRow.setProperty('disabled', true);\n        await page.waitForChanges();\n\n        const countEl = await el.find('pierce/.count');\n        expect(countEl.textContent).toStrictEqual('1');\n      });\n\n      it('hides the count when `hideSelectableCount` is set to true', async () => {\n        el.setProperty('hideSelectableCount', true);\n        await page.waitForChanges();\n\n        const countEl = await controlRow.find('pierce/.count');\n        expect(countEl).toBeNull();\n      });\n\n      it('control row toggle correctly reflects list selection state on load and on row interaction', async () => {\n        const marketListSelectionsDidChangeSpy = await page.spyOnEvent('marketListSelectionsDidChange');\n        el.setAttribute('value', 'apple,orange'); // setting value attr --> all options selected\n        await page.waitForChanges();\n\n        expect(marketListSelectionsDidChangeSpy).not.toHaveReceivedEvent();\n        expect(controlRow).toHaveAttribute('selected');\n        expect(slottedToggle).toHaveAttribute('checked');\n        expect(appleRow).toHaveAttribute('selected');\n        expect(orangeRow).toHaveAttribute('selected');\n\n        await appleRow.click(); // deselect \"apple\" --> some options selected\n\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(1);\n        expect(controlRow).not.toHaveAttribute('selected');\n        expect(slottedToggle).not.toHaveAttribute('checked');\n        expect(appleRow).not.toHaveAttribute('selected');\n        expect(orangeRow).toHaveAttribute('selected');\n\n        await orangeRow.click(); // deselect \"orange\" --> no options selected\n\n        expect(marketListSelectionsDidChangeSpy).toHaveReceivedEventTimes(2);\n        expect(controlRow).not.toHaveAttribute('selected');\n        expect(slottedToggle).not.toHaveAttribute('checked');\n        expect(appleRow).not.toHaveAttribute('selected');\n        expect(orangeRow).not.toHaveAttribute('selected');\n      });\n\n      describe('using the control row', () => {\n        it('when no list items are selected, toggle should be unchecked and control row should select all items', async () => {\n          expect(el).toEqualAttribute('value', '');\n          expect(controlRow).not.toHaveAttribute('selected');\n          expect(slottedToggle).not.toHaveAttribute('checked');\n\n          await controlRow.click();\n\n          expect(el).toEqualAttribute('value', 'apple,orange');\n          expect(controlRow).toHaveAttribute('selected');\n          expect(slottedToggle).toHaveAttribute('checked');\n        });\n\n        it('when all list items are selected, toggle should be checked and control row should deselect all items', async () => {\n          el.setAttribute('value', 'apple,orange');\n          await page.waitForChanges();\n\n          expect(controlRow).toHaveAttribute('selected');\n          expect(slottedToggle).toHaveAttribute('checked');\n\n          await controlRow.click();\n\n          expect(el).toEqualAttribute('value', '');\n          expect(controlRow).not.toHaveAttribute('selected');\n          expect(slottedToggle).not.toHaveAttribute('checked');\n        });\n\n        it('when some list items are selected, toggle should be unchecked and control row select all items', async () => {\n          el.setAttribute('value', 'apple');\n          await page.waitForChanges();\n\n          expect(controlRow).not.toHaveAttribute('selected');\n          expect(slottedToggle).not.toHaveAttribute('checked');\n\n          await controlRow.click();\n\n          expect(el).toEqualAttribute('value', 'apple,orange');\n          expect(controlRow).toHaveAttribute('selected');\n          expect(slottedToggle).toHaveAttribute('checked');\n        });\n\n        it('only selects non-disabled items when clicked; toggle should not be checked', async () => {\n          orangeRow.setProperty('disabled', true);\n          await page.waitForChanges();\n\n          await controlRow.click();\n          await page.waitForChanges();\n\n          expect(el).toEqualAttribute('value', 'apple');\n          expect(appleRow).toHaveAttribute('selected');\n          expect(orangeRow).not.toHaveAttribute('selected');\n          expect(controlRow).not.toHaveAttribute('selected');\n          expect(slottedToggle).not.toHaveAttribute('checked');\n        });\n      });\n    });\n  });\n});\n"]}