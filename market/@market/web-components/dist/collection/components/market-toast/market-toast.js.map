{"version":3,"file":"market-toast.js","sourceRoot":"","sources":["../../../../src/components/market-toast/market-toast.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Prop, Event, EventEmitter, Element, State, Method } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n/**\n * @slot - The text for the toast\n * @slot action - for `<a href>` or `<button>` (not a `<market-button>`)\n */\n@Component({\n  tag: 'market-toast',\n  styleUrl: 'market-toast.css',\n  shadow: true,\n})\nexport class MarketToast {\n  @Element() el: HTMLMarketToastElement;\n\n  /**\n   * toast variant that corresponds to the type of info it is conveying\n   */\n  @Prop({ reflect: true }) readonly variant: 'info' | 'success' | 'warning' | 'critical' | 'insight' = 'info';\n\n  /**\n   * Whether or not the toast persists, ie does not autodismiss after 5s\n   */\n  @Prop() readonly persistent: boolean = false;\n\n  /**\n   * Optional property to pass a string to the dismiss \"x\"\n   * that will function as its aria-label. Defaults to \"Dismiss\".\n   */\n  @Prop({ reflect: true }) readonly dismissButtonAriaLabel: string = 'Dismiss';\n\n  /**\n   * The progress of the action, progress bar will be rendered for values between 0-100 inclusive\n   */\n  @Prop({ reflect: true }) readonly progress: number = -1;\n\n  /**\n   * The amount of time (ms) until the toast autodismisses\n   * TODO(UI-1153): should be a design token\n   */\n  @State() durationTilAutoDismiss: number = 5000;\n\n  @State() showActionsNav: boolean = false;\n\n  /**\n   * Emitted when the toast automatically dismisses.\n   */\n  @Event() marketToastAutoDismissed: EventEmitter;\n\n  /**\n   * Emitted when the toast's dismissed button is clicked.\n   */\n  @Event() marketToastManuallyDismissed: EventEmitter;\n\n  /**\n   * Set toast to disappear after the autodismiss timeout has passed\n   */\n  @Method()\n  startAutoDismissTimer() {\n    if (!this.persistent) {\n      setTimeout(() => {\n        this.marketToastAutoDismissed.emit();\n      }, this.durationTilAutoDismiss);\n    }\n    return Promise.resolve();\n  }\n\n  handleManualDismiss() {\n    this.marketToastManuallyDismissed.emit();\n  }\n\n  componentWillLoad() {\n    this.checkIfActionsArePresent();\n  }\n\n  checkIfActionsArePresent() {\n    const actions = this.el.querySelector('[slot=\"action\"]');\n    this.showActionsNav = actions ? true : false;\n  }\n\n  // TODO: replace with design token references after they are added (UI-6241)\n  getVariantIcon() {\n    switch (this.variant) {\n      case 'success':\n        return 'success';\n      case 'info':\n        return 'info';\n      case 'warning':\n        return 'attention';\n      case 'insight':\n        return 'recommendation';\n      default:\n        return 'warning';\n    }\n  }\n\n  render() {\n    const MarketIconTagName = getNamespacedTagFor('market-icon');\n    const progress = Math.min(this.progress, 100);\n    const progressStyle = {\n      width: `${progress}%`,\n    };\n\n    return (\n      <Host class=\"market-toast\" role=\"alert\">\n        <div class=\"content\">\n          <span class=\"icon-container\">\n            {/* this span is the flexbox container to vertically align the icon */}\n            <MarketIconTagName name={this.getVariantIcon()}></MarketIconTagName>\n          </span>\n          <div class=\"main\">\n            <section>\n              <slot></slot>\n            </section>\n            <nav aria-label=\"toast-actions\" class={this.showActionsNav ? '' : 'hidden'}>\n              <slot name=\"action\" onSlotchange={() => this.checkIfActionsArePresent()}></slot>\n            </nav>\n          </div>\n          <nav aria-label=\"dismiss-container\" class=\"dismiss-container\">\n            <button type=\"button\" aria-label={this.dismissButtonAriaLabel} onClick={() => this.handleManualDismiss()}>\n              <MarketIconTagName name=\"close\"></MarketIconTagName>\n            </button>\n          </nav>\n        </div>\n        {this.progress >= 0 && (\n          <progress-bar\n            role=\"progressbar\"\n            aria-valuenow={progress}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            style={progressStyle}\n          ></progress-bar>\n        )}\n      </Host>\n    );\n  }\n}\n"]}