{"version":3,"file":"market-toast.spec.js","sourceRoot":"","sources":["../../../../../src/components/market-toast/test/market-toast.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,IAAI,EAAE,+CAA+C;SACtD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;KAwB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,IAAI,EAAE;;;;;;OAML;SACF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;KA0B7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC7B,UAAU,EAAE,CAAC,WAAW,CAAC;gBACzB,IAAI,EAAE,iBAAiB;aACxB,CAAC,CAAC;YAEH,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACjC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,cAAc,CAAC,CAAC;YAEtE,MAAM,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACxC,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAE9C,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,MAAM,CAAC,cAAc,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC7B,UAAU,EAAE,CAAC,WAAW,CAAC;gBACzB,IAAI,EAAE,4BAA4B;aACnC,CAAC,CAAC;YAEH,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACjC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,cAAc,CAAC,CAAC;YAEtE,MAAM,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACxC,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAE9C,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\n\nimport { MarketToast } from '../market-toast';\n\ndescribe('market-toast', () => {\n  it('default renders', async () => {\n    const page = await newSpecPage({\n      components: [MarketToast],\n      html: '<market-toast>A brief message.</market-toast>',\n    });\n    expect(page.root).toEqualHtml(`\n      <market-toast class=\"market-toast\" dismiss-button-aria-label=\"Dismiss\" progress=\"-1\" role=\"alert\" variant=\"info\">\n        <mock:shadow-root>\n          <div class=\"content\">\n            <span class=\"icon-container\">\n              <market-icon name=\"info\"></market-icon>\n            </span>\n            <div class=\"main\">\n              <section>\n                <slot></slot>\n              </section>\n              <nav aria-label=\"toast-actions\" class=\"hidden\">\n                <slot name=\"action\"></slot>\n              </nav>\n            </div>\n            <nav aria-label=\"dismiss-container\" class=\"dismiss-container\">\n              <button aria-label=\"Dismiss\" type=\"button\">\n                <market-icon name=\"close\"></market-icon>\n              </button>\n            </nav>\n          </div>\n        </mock:shadow-root>\n        A brief message.\n      </market-toast>\n    `);\n  });\n\n  it('does not hide the actions nav with slotted actions', async () => {\n    const page = await newSpecPage({\n      components: [MarketToast],\n      html: `\n        <market-toast class=\"market-toast\">\n          A brief message.\n          <button slot=\"action\">A button</button>\n          <a href=\"#\" slot=\"action\">A Link</a>\n        </market-toast>\n      `,\n    });\n    expect(page.root).toEqualHtml(`\n      <market-toast class=\"market-toast\" dismiss-button-aria-label=\"Dismiss\" progress=\"-1\" role=\"alert\" variant=\"info\">\n        <mock:shadow-root>\n          <div class=\"content\">\n            <span class=\"icon-container\">\n              <market-icon name=\"info\"></market-icon>\n            </span>\n            <div class=\"main\">\n              <section>\n                <slot></slot>\n              </section>\n              <nav aria-label=\"toast-actions\">\n                <slot name=\"action\"></slot>\n              </nav>\n            </div>\n            <nav aria-label=\"dismiss-container\" class=\"dismiss-container\">\n              <button aria-label=\"Dismiss\" type=\"button\">\n                <market-icon name=\"close\"></market-icon>\n              </button>\n            </nav>\n          </div>\n        </mock:shadow-root>\n        A brief message.\n        <button slot=\"action\">A button</button>\n        <a href=\"#\" slot=\"action\">A Link</a>\n      </market-toast>\n    `);\n  });\n\n  describe('autodismissal', () => {\n    beforeEach(() => {\n      jest.useFakeTimers('legacy');\n    });\n\n    afterEach(() => {\n      jest.useRealTimers();\n    });\n\n    it('emits the autodismiss event', async () => {\n      const page = await newSpecPage({\n        components: [MarketToast],\n        html: '<market-toast/>',\n      });\n\n      const autodismissSpy = jest.fn();\n      page.doc.addEventListener('marketToastAutoDismissed', autodismissSpy);\n\n      await page.root.startAutoDismissTimer();\n      expect(autodismissSpy).not.toHaveBeenCalled();\n\n      jest.runAllTimers();\n      expect(autodismissSpy).toHaveBeenCalled();\n    });\n\n    it('does not emit the autodismiss event when persistent', async () => {\n      const page = await newSpecPage({\n        components: [MarketToast],\n        html: '<market-toast persistent/>',\n      });\n\n      const autodismissSpy = jest.fn();\n      page.doc.addEventListener('marketToastAutoDismissed', autodismissSpy);\n\n      await page.root.startAutoDismissTimer();\n      expect(autodismissSpy).not.toHaveBeenCalled();\n\n      jest.runAllTimers();\n      expect(autodismissSpy).not.toHaveBeenCalled();\n    });\n  });\n});\n"]}