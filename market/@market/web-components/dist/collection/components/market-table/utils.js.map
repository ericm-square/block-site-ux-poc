{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/components/market-table/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,gBAAwB,EAAY,EAAE;IACnF,MAAM,KAAK,GAAa,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,iEAAiE;IAEtH,uCAAuC;IACvC,MAAM,iBAAiB,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC7E,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACtF,MAAM,qBAAqB,GAAG,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO;SACpF,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC;SAC9B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAEhB,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACvB,sCAAsC;QACtC,OAAO,CAAC,IAAI,CACV,2EAA2E,qBAAqB;+IACyC,CAC1I,CAAC;QAEF,oHAAoH;QACpH,oHAAoH;QACpH,yCAAyC;QACzC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,gBAAgB,GAAW,IAAI,CAAC;IAEpC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAEtB,0DAA0D;QAC1D,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YAC7B,+CAA+C;YAC/C,gBAAgB,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;YAErE,mCAAmC;YACnC,+FAA+F;YAC/F,MAAM,wBAAwB,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACnG,kFAAkF;YAClF,MAAM,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,wBAAwB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;YAE9G,2EAA2E;YAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC1C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACpE,CAAC;YAED,2DAA2D;YAC3D,gBAAgB,GAAG,IAAI,CAAC;YAExB,8DAA8D;YAC9D,CAAC,IAAI,cAAc,CAAC,MAAM,CAAC;QAC7B,CAAC;aAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC7B,qDAAqD;YACrD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["/**\n * Parses a CSS grid-template-columns declaration and attempts to return an array with one entry for each column.\n *\n * @param {string} cssPropertyValue - Value of the `grid-template-columns` property.\n *\n * Example inputs and outputs:\n * '100px 80px 50px' --> ['100px', '80px', '50px']\n * '100px repeat(2, 80px)' --> ['100px', '80px', '80px']\n * '100px repeat(3, 50px, 75px)' --> ['100px', '50px', '75px', '50px']\n * 'repeat(2, 80px) repeat(3, 50px, 75px) 100px' --> ['80px', '80px', '50px', '75px', '50px', '100px']\n *\n * Why do we need this?\n * `market-table` has a `styleDeclaration` watcher which checks the CSS styles applied to the table. this gets used to\n * determine the grid template definition for the table (`this.gridColumnTemplate`), which in turn is used to set column\n * widths and update the grid layout. however, in situations where `grid-template-columns` is defined using the\n * `repeat()` function, we need to parse the value to ensure that we have a width explicitly specified for each column.\n * this ensures consistent column sizing and behavior when columns are being stuck/unstuck to the left/right.\n *\n * Cases where this will break:\n * 1. If user is using <auto-repeat> values (\"auto-fill\", \"auto-fit\") instead of explicit widths\n * 2. If user is using a CSS function other than `repeat()` (ex. `minmax()`, `fit-content()`)\n * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns\n * https://developer.mozilla.org/en-US/docs/Web/CSS/repeat\n */\nexport const parsedGridTemplateColumnValues = (cssPropertyValue: string): string[] => {\n  const array: string[] = cssPropertyValue.split(' '); // ex. '100px repeat(2, 80px)' --> ['100px', 'repeat(2', '80px)']\n\n  // error handling for unsupported cases\n  const unsupportedValues = ['auto-fill', 'auto-fit', 'minmax', 'fit-content'];\n  const matches = unsupportedValues.filter((value) => cssPropertyValue.includes(value));\n  const unsupportedValuesText = `${matches.length > 0 ? 'features' : 'feature'} ${matches\n    .map((match) => `\\`${match}\\``)\n    .join(', ')}`;\n\n  if (matches.length > 0) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `<market-table>'s grid layout is not built to support the use of the CSS ${unsupportedValuesText}.\nTo avoid potential column layout issues, try using explicitly defined \\`grid-template-column\\` widths using length, percentage, or flex units.`,\n    );\n\n    // while this seems wonky (will return an array like ['repeat(auto-fill,', '250px)']), it means that table rows will\n    // inherit the parent table's `grid-template-columns` declaration and will look as intended except for in situations\n    // where columns are being stuck/unstuck.\n    return array;\n  }\n\n  const output: string[] = [];\n  let i = 0;\n  let repeatedColCount: number = null;\n\n  for (i = 0; i < array.length; i++) {\n    const item = array[i];\n\n    // check to see if we are at the start of a `repeat` block\n    if (item.includes('repeat(')) {\n      // get number of repeats, ex. \"repeat(4\" --> 4)\n      repeatedColCount = Number.parseInt(item.match(/\\d+/).toString(), 10);\n\n      // figure out what's being repeated\n      // look ahead from current index to the next index containing \")\" (the end of the repeat block)\n      const endOfRepeatFunctionIndex = array.findIndex((item, index) => index > i && item.includes(')'));\n      // slice grid-template-columns values into their own array and strip parens/commas\n      const repeatedValues = array.slice(i + 1, endOfRepeatFunctionIndex + 1).map((item) => item.replace(/\\W/, ''));\n\n      // push as many values from the set of repeating column sizes as are needed\n      for (let j = 0; j < repeatedColCount; j++) {\n        output.push(repeatedValues[j % repeatedValues.length].toString());\n      }\n\n      // reset repeatedColCount bc we're done w/ the repeat block\n      repeatedColCount = null;\n\n      // increment for loop to skip all the items we just dealt with\n      i += repeatedValues.length;\n    } else if (!repeatedColCount) {\n      // if not in a `repeat()` block, save value as normal\n      output.push(item);\n    }\n  }\n\n  return output;\n};\n"]}