{"version":3,"file":"market-date-picker-input-date.js","sourceRoot":"","sources":["../../../../../../src/components/market-date-picker/subcomponents/market-date-picker-input-date/market-date-picker-input-date.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Event, EventEmitter, Host, State, Watch } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../../../utils/namespace';\nimport { format, isAfter, isBefore, isSameDay, isValid, parseISO } from 'date-fns';\n\n@Component({\n  tag: 'market-date-picker-input-date',\n  styleUrl: 'market-date-picker-input-date.css',\n  shadow: true,\n})\nexport class MarketDateInputDate {\n  /**\n   * Whether to use date-time input instead of date-only\n   * @type {boolean}\n   * @memberof MarketDateInputDate\n   * @default false\n   */\n  @Prop() readonly withTime: boolean = false;\n\n  /**\n   * The selected start date\n   * @type {string}\n   * @memberof MarketDateInputDate\n   * @default ''\n   */\n  @Prop() readonly selectedStartDate: string;\n\n  /**\n   * The selected end date\n   * @type {string}\n   * @memberof MarketDateInputDate\n   * @default ''\n   */\n  @Prop() readonly selectedEndDate: string;\n\n  /**\n   * A function that returns true if the date should be disabled\n   * @type {(day: Date) => boolean}\n   * @memberof MarketDateInputDate\n   * @default undefined\n   */\n  @Prop() readonly isDateDisabled: (day: Date) => boolean;\n\n  /**\n   * The timeframe to restrict the date picker to\n   * @type {'past' | 'future' | 'present'}\n   * @memberof MarketDateInputDate\n   * @default 'present'\n   */\n  @Prop() readonly timeframe: 'past' | 'future' | 'present' = 'present';\n\n  /**\n   * Whether the date picker is a range\n   * @type {boolean}\n   * @memberof MarketDateInputDate\n   * @default false\n   */\n  @Prop() readonly range: boolean = false;\n\n  /**\n   * Emitted when the date picker date is selected\n   */\n  @Event() marketDatePickerInputDateSet: EventEmitter<{ date: string; input: string }>;\n\n  /**\n   * Emitted when the date selection changes validity\n   */\n  @Event() marketDatePickerInputDateInvalidStateChanged: EventEmitter<{ invalid: boolean }>;\n\n  /*\n   * Whether or not the entire date range is invalid\n   */\n  @State() isRangeInvalid: boolean = false;\n\n  @Watch('isRangeInvalid')\n  emitInvalidStateEvent() {\n    this.marketDatePickerInputDateInvalidStateChanged.emit({\n      invalid: this.isRangeInvalid,\n    });\n  }\n\n  private formatDate(date: string, isTime: boolean = false): string {\n    if (!date) return '';\n\n    const dateObj = new Date(date);\n    if (!isValid(dateObj)) {\n      return '';\n    }\n    const formatStr = isTime ? 'HH:mm' : 'yyyy-MM-dd';\n    return format(dateObj, formatStr);\n  }\n\n  private isInvalidDateForTimeframe(dateObj: Date, today: Date = new Date()): boolean {\n    const isFutureDate = this.timeframe === 'future' && isBefore(dateObj, today) && !isSameDay(dateObj, today);\n    const isPastDate = this.timeframe === 'past' && isAfter(dateObj, today) && !isSameDay(dateObj, today);\n\n    return isFutureDate || isPastDate;\n  }\n\n  private updateInvalidState(start: string = this.selectedStartDate, end: string = this.selectedEndDate): boolean {\n    if (this.isDateInvalid(start) || this.isDateInvalid(end)) {\n      this.isRangeInvalid = true;\n      return;\n    }\n\n    // If end date is set, check if start date is after end date\n    if (end) {\n      this.isRangeInvalid = isAfter(new Date(start), new Date(end));\n      return;\n    }\n\n    this.isRangeInvalid = false;\n  }\n\n  private isDateInvalid(date: string): boolean {\n    if (!date) return false;\n    const dateObj = parseISO(date);\n    if (dateObj.toString() === 'Invalid Date') return true;\n\n    if (this.isDateDisabled && this.isDateDisabled(dateObj)) {\n      return true;\n    }\n\n    if (this.timeframe && this.isInvalidDateForTimeframe(dateObj)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  emitDateSetStart(ev: Event) {\n    this.emitDateSet(ev, 'start');\n  }\n\n  emitDateSetEnd(ev: Event) {\n    this.emitDateSet(ev, 'end');\n  }\n\n  emitDateSetStartTime(ev: Event) {\n    this.emitDateSet(ev, 'start', true);\n  }\n\n  emitDateSetEndTime(ev: Event) {\n    this.emitDateSet(ev, 'end', true);\n  }\n\n  emitDateSet(ev: Event, input: string, timeInput: boolean = false) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    const { value } = ev.target as HTMLInputElement;\n    let valueToSubmit = value;\n\n    // If time is set, add the time to the date\n    if (this.withTime) {\n      if (timeInput) {\n        const date = this.formatDate(input === 'start' ? this.selectedStartDate : this.selectedEndDate);\n        const time = value.slice(0, 5);\n        valueToSubmit = `${date}T${time}`;\n      } else {\n        const time = this.formatDate(input === 'start' ? this.selectedStartDate : this.selectedEndDate, true);\n        valueToSubmit = `${value}T${time}`;\n      }\n    }\n    // Remove leading zeros\n    const realLength = valueToSubmit.replace(/^0+/, '').length;\n    // Only emit if length is (yyyy-mm-dd) or (yyyy-mm-ddThh:mm) and is valid\n    if (realLength === 10 || realLength === 16) {\n      this.marketDatePickerInputDateSet.emit({ date: valueToSubmit, input });\n    }\n  }\n\n  componentWillRender() {\n    this.updateInvalidState();\n  }\n\n  render() {\n    const MarketInputTextTagName = getNamespacedTagFor('market-input-text');\n    const MarketBannerTagName = getNamespacedTagFor('market-banner');\n\n    const inputWrapper = (type) => (\n      <div class={`input-wrapper ${type === 'start' ? 'start-input' : ''}`}>\n        {type === 'start' && dateInput('start')}\n        {type === 'start' && this.withTime && timeInput('start')}\n        {type === 'end' && dateInput('end')}\n        {type === 'end' && this.withTime && timeInput('end')}\n      </div>\n    );\n\n    const dateInput = (type: string) => (\n      <MarketInputTextTagName\n        type=\"date\"\n        class={`date-input`}\n        name={`date-picker-date-${type}`}\n        invalid={this.isRangeInvalid}\n        value={this.formatDate(type === 'start' ? this.selectedStartDate : this.selectedEndDate)}\n        onInput={type === 'start' ? this.emitDateSetStart.bind(this) : this.emitDateSetEnd.bind(this)}\n      >\n        <label htmlFor={`date-picker-${type}`}>\n          <slot name={`${type}-date`}>{this.range && (type === 'start' ? 'Start' : 'End')} Date</slot>\n        </label>\n      </MarketInputTextTagName>\n    );\n\n    const timeInput = (type: string) => (\n      <MarketInputTextTagName\n        type=\"time\"\n        class={`time-input`}\n        name={`date-picker-time-${type}`}\n        invalid={this.isRangeInvalid}\n        value={this.formatDate(type === 'start' ? this.selectedStartDate : this.selectedEndDate, true)}\n        onInput={type === 'start' ? this.emitDateSetStartTime.bind(this) : this.emitDateSetEndTime.bind(this)}\n      >\n        <label htmlFor={`date-picker-time-${type}`}>\n          <slot name={`${type}-time`}>{this.range && (type === 'start' ? 'Start' : 'End')} Time</slot>\n        </label>\n      </MarketInputTextTagName>\n    );\n\n    return (\n      <Host class=\"market-date-picker-input-date\">\n        {this.range ? (\n          <div class=\"input-row\">\n            {inputWrapper('start')}\n            {inputWrapper('end')}\n          </div>\n        ) : (\n          <div>{inputWrapper('start')}</div>\n        )}\n        {this.isRangeInvalid && (\n          <MarketBannerTagName variant=\"critical\">\n            <slot name=\"range-error\">Enter a valid date range</slot>\n          </MarketBannerTagName>\n        )}\n      </Host>\n    );\n  }\n}\n"]}