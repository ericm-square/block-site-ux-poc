{"version":3,"file":"market-input-password.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-input-password/test/market-input-password.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage, E2EPage, E2EElement } from '@stencil/core/testing';\n\ndescribe('market-input-password', () => {\n  let page;\n  it('renders', async () => {\n    page = await newE2EPage();\n    await page.setContent('<market-input-password></market-input-password>');\n\n    const element = await page.find('market-input-password');\n    expect(element).toHaveAttribute('hydrated');\n  });\n\n  it('should render with defaults', async () => {\n    page = await newE2EPage();\n    await page.setContent('<market-input-password></market-input-password>');\n    const el = await page.find('market-input-password');\n    expect(el).not.toBeNull();\n\n    const inputText = await el.find('pierce/market-input-text');\n    expect(inputText).not.toBeNull();\n\n    expect(inputText).toEqualAttribute('type', 'password');\n    expect(inputText).not.toHaveAttribute('disabled');\n    expect(inputText).not.toHaveAttribute('readonly');\n    expect(inputText).toEqualAttribute('value', '');\n    expect(inputText).not.toHaveAttribute('invalid');\n    expect(inputText).not.toHaveAttribute('focused');\n    expect(inputText).toEqualAttribute('inputmode', null);\n  });\n\n  it('can have a label', async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-input-password>\n        <label>Label</label>\n      </market-input-password>\n    `);\n\n    const label = await page.find('market-input-password label');\n    expect(label).not.toBeNull();\n  });\n\n  it('can change inputmode', async () => {\n    page = await newE2EPage();\n    await page.setContent('<market-input-password inputmode=\"numeric\"></market-input-password>');\n    const el = await page.find('market-input-password');\n    const innerInput = await el.find('pierce/input');\n    expect(innerInput).toEqualAttribute('inputmode', 'numeric');\n  });\n\n  it('has an eye icon button within the input', async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-input-password></market-input-password>\n    `);\n    const el = await page.find('market-input-password');\n    const accessory = await el.find('pierce/market-accessory');\n    expect(accessory).not.toBeNull();\n    expect(accessory.getAttribute('slot')).toEqual('trailing-accessory');\n  });\n\n  it('should update the type attribute when the eye icon is clicked', async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-input-password></market-input-password>\n    `);\n\n    const el = await page.find('market-input-password');\n\n    const input = await el.find('pierce/market-input-text');\n    expect(input).toEqualAttribute('type', 'password');\n\n    const button = await el.find('pierce/button.toggle');\n    await button.click();\n    expect(input).toEqualAttribute('type', 'text');\n  });\n\n  it('submits the form with enter', async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <form action=\"#\">\n        <market-input-password></market-input-password>\n        <market-button type=\"submit\">Submit</market-button>\n      </form>\n    `);\n\n    const form = await page.find('form');\n    const formSubmitSpy = await form.spyOnEvent('submit');\n    const el = await page.find('market-input-password');\n    const input = await el.find('pierce/input');\n\n    await input.press('Enter');\n    await page.waitForChanges();\n    expect(formSubmitSpy).toHaveReceivedEventTimes(1);\n  });\n\n  describe('when used with slotted HTML input', () => {\n    let page: E2EPage;\n    let customInput: E2EElement;\n    let slottedInput: E2EElement;\n    let defaultInput;\n\n    beforeEach(async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-input-password class=\"default\"></market-input-password>\n        <market-input-password class=\"custom\">\n          <input slot=\"input\" />\n        </market-input-password>\n      `);\n\n      customInput = await page.find('.custom');\n      slottedInput = await customInput.find('input');\n      defaultInput = await page.find('.default');\n    });\n\n    it('conditionally renders either the slotted or default input', async () => {\n      // market-input-password with slotted input\n      let lightDomInput = await customInput.find('input');\n      let shadowMarketInput = await customInput.shadowRoot.querySelector('market-input-text');\n      let shadowMarketInputSlotContent = await shadowMarketInput.querySelector('slot[name=\"input\"]');\n      expect(lightDomInput).not.toBe(null);\n      expect(shadowMarketInputSlotContent).not.toBe(null);\n\n      // market-input-password w/o slotted input\n      lightDomInput = await defaultInput.find('input');\n      shadowMarketInput = await defaultInput.shadowRoot.querySelector('market-input-text');\n      shadowMarketInputSlotContent = await shadowMarketInput.querySelector('input');\n\n      expect(lightDomInput).toBe(null);\n      expect(shadowMarketInputSlotContent).toBe(null);\n    });\n\n    it('focuses/blurs slotted input on mouse interaction', async () => {\n      await customInput.click(); // focus\n      await page.waitForChanges();\n      expect(await page.find(':focus')).toEqual(slottedInput);\n\n      await defaultInput.click(); // blur\n      await page.waitForChanges();\n      expect(await page.find(':focus')).toEqual(defaultInput);\n\n      await customInput.click(); // focus\n      await page.waitForChanges();\n      expect(await page.find(':focus')).toEqual(slottedInput);\n    });\n\n    it('focuses/blurs slotted input on tab interaction', async () => {\n      await page.keyboard.press('Tab'); // focus default input\n      await page.waitForChanges();\n      expect(await page.find(':focus')).toEqual(defaultInput);\n\n      await page.keyboard.press('Tab'); // focus default input eye button\n      await page.waitForChanges();\n      expect(await page.find(':focus')).toEqual(defaultInput);\n\n      await page.keyboard.press('Tab'); // focus slotted input\n      await page.waitForChanges();\n      expect(await page.find(':focus')).toEqual(slottedInput);\n\n      await page.keyboard.press('Tab'); // focus slotted input eye button\n      await page.waitForChanges();\n      expect(await page.find(':focus')).toEqual(customInput);\n    });\n  });\n});\n"]}