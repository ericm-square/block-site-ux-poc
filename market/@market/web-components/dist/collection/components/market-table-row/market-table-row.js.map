{"version":3,"file":"market-table-row.js","sourceRoot":"","sources":["../../../../src/components/market-table-row/market-table-row.tsx"],"names":[],"mappings":"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":["import { Component, Host, Prop, Element, Watch, Event, EventEmitter, Method, State, h, Listen } from '@stencil/core';\n\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { MarketCheckboxCustomEvent, MarketToggleCustomEvent } from '../../components';\n\nexport type TCell = HTMLMarketTableCellElement | HTMLMarketTableColumnElement;\n\n/**\n * @slot - Default slot for all cells\n * @slot control - Intended for use with a market table cell or market table column that contain a control element.\n */\n@Component({\n  tag: 'market-table-row',\n  styleUrl: 'market-table-row.css',\n  shadow: true,\n})\nexport class MarketTableRow {\n  private tableAreaLeft!: HTMLMarketTableAreaElement;\n  private tableAreaRight!: HTMLMarketTableAreaElement;\n  private tableAreaMain!: HTMLMarketTableAreaElement;\n  private slottedControl: HTMLMarketCheckboxElement | HTMLMarketToggleElement;\n\n  @Element() el: HTMLMarketTableRowElement;\n\n  // ----------- Consumer-defined props -------------\n\n  /**\n   * Optional: Level of leading indentation\n   * This will be multiplied by the default indentation size (40px) for uniform indentation\n   * levels\n   */\n  @Prop({ mutable: true, reflect: true }) leadingIndentation: number = 0;\n\n  /**\n   * Optional: The edge of the table to fix this row to.\n   */\n  @Prop({ mutable: true, reflect: true }) stickTo: false | 'top' | 'bottom' = false;\n\n  /**\n   * Optional: When present, can be used instead of `stickTo` in combination\n   * with `header` or `footer` to determine the edge of the table to stick this\n   * row to. (`header` elements with `[sticky]` will be attached to the top, and\n   * `footer` elements to the bottom)\n   */\n  @Prop({ mutable: true, reflect: true }) sticky: boolean;\n\n  /**\n   * Whether the row is currently active.\n   */\n  @Prop({ reflect: true }) readonly active: boolean = false;\n\n  /**\n   * Whether or not the row is interactive. Results in row receiving\n   * hover and active styling when hovered/clicked.\n   */\n  @Prop({ reflect: true }) readonly interactive: boolean = false;\n\n  /**\n   * Whether the row is disabled.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * Whether the row is selected. Used by control element.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  // --------------- Internal props -----------------\n\n  /**\n   * Gives this row header styling\n   */\n  @Prop({ mutable: true, reflect: true }) header: boolean = false;\n\n  /**\n   * Gives this row footer styling\n   */\n  @Prop({ mutable: true, reflect: true }) footer: boolean = false;\n\n  /**\n   * The slot this row was originally placed in\n   */\n  @Prop({ mutable: true, reflect: false }) originalSlot: string;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * The order of this row in the DOM\n   */\n  @Prop({ reflect: false }) readonly index: number = 0;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * A list of the market-table-column elements, set from the parent table so\n   * we can assign this row's cells some properties based on the columns\n   */\n  @Prop({ reflect: false }) readonly tableColumns: Array<HTMLMarketTableColumnElement>;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * This row's slotted market-table-cell elements\n   */\n  @Prop({ mutable: true, reflect: false }) cells: NodeListOf<TCell>;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used to set the CSS grid template for the main column group (market-table-area)\n   * in the row. Set by the parent table element\n   */\n  @Prop({ mutable: false, reflect: false }) readonly gridTemplateMain: Array<string> = [];\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used to set the CSS grid template for the fixed left column group (market-table-area)\n   * in the row. Set by the parent table element\n   */\n  @Prop({ mutable: false, reflect: false }) readonly gridTemplateLeft: Array<string> = [];\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used to set the CSS grid template for the fixed right column group (market-table-area)\n   * in the row. Set by the parent table element\n   */\n  @Prop({ mutable: false, reflect: false }) readonly gridTemplateRight: Array<string> = [];\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used to set aria-expanded on the nested button for animation\n   */\n  @Prop({ mutable: true, reflect: false }) expanded: boolean = false;\n\n  /**\n   * Used to determine if the table has accordion rows. When true,\n   * it will add extra spacing at the beginning of the row. This will\n   * keep the row's contents aligned with the accordion rows. This is\n   * set from the market-table component.\n   *\n   * This property can be overriden when the content does not need\n   * the extra accordion spacing.\n   */\n  @Prop({ mutable: true, reflect: true }) nested: boolean = false;\n\n  /** This is a CSSStyleDeclaration object\n   * https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\n   */\n  @State() styleDeclaration: any;\n\n  /**\n   * Used to set the CSS grid template for the row itself\n   */\n  @State() gridTemplate: Array<string> = [];\n\n  /**\n   * Used to update the button's aria-expanded\n   */\n  @State() nestedRowToggleButton: HTMLButtonElement;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * If this is a header row with column children, emit an event when this row loads\n   * so the parent table can read the column data\n   */\n  @Event() marketTableHeaderLoaded: EventEmitter<{ columns: NodeListOf<HTMLMarketTableColumnElement> }>;\n\n  /**\n   * Fired whenever an interactive row is clicked.\n   */\n  @Event({ bubbles: true, composed: true }) marketTableRowClicked: EventEmitter;\n\n  /**\n   * Emitted when this row is stuck to a table edge\n   * Can be fired when stick-to or sticky changes, the .stick() method is called directly\n   * or when this row is first rendered or slotted\n   */\n  @Event() marketTableRowStick: EventEmitter<{\n    position: 'left' | 'right';\n    index: number;\n  }>;\n\n  /**\n   * Emitted when this row is unstuck from a table edge\n   * Can be fired when stick-to or sticky changes, the .unstick() method is called directly\n   * or when this row is first rendered or slotted\n   */\n  @Event() marketTableRowUnstick: EventEmitter<{\n    position: 'left' | 'right';\n    index: number;\n  }>;\n\n  /**\n   * Emitted when the nested row button is toggled\n   */\n  @Event() marketAccordionToggled: EventEmitter<{ expanded: boolean }>;\n\n  /**\n   * Emitted when the nested row button is toggled\n   */\n  @Event() marketNestedRowToggled: EventEmitter<{ expanded: boolean }>;\n\n  @Watch('gridTemplateMain')\n  @Watch('gridTemplateLeft')\n  @Watch('gridTemplateRight')\n  formNewGridTemplate() {\n    this.gridTemplate = [...this.gridTemplateLeft, ...this.gridTemplateMain, ...this.gridTemplateRight];\n\n    if (this.tableAreaLeft) {\n      this.tableAreaLeft.placement = [1, this.gridTemplateLeft.length];\n    }\n\n    if (this.tableAreaMain) {\n      this.tableAreaMain.placement = [this.gridTemplateLeft.length + 1, this.gridTemplateMain.length];\n    }\n\n    if (this.tableAreaRight) {\n      this.tableAreaRight.placement = [\n        this.gridTemplateLeft.length + this.gridTemplateMain.length + 1,\n        this.gridTemplateRight.length,\n      ];\n    }\n  }\n\n  @Watch('gridTemplate')\n  gridTemplateObserver(newValue: Array<string>, oldValue: Array<string>) {\n    if (newValue !== oldValue) {\n      this.el.style.gridTemplateColumns = newValue.join(' ');\n    }\n  }\n\n  @Watch('stickTo')\n  @Watch('sticky')\n  stickyObserver(newValue: string | boolean, oldValue: string | boolean) {\n    if (newValue !== oldValue) {\n      this.emitStickyEvents();\n    }\n  }\n\n  @Watch('tableColumns')\n  columnsObserver(columns: Array<HTMLMarketTableColumnElement>) {\n    this.setCellColumnProperties(columns);\n  }\n\n  @Watch('cells')\n  updateCellProperties(\n    oldCellList: NodeListOf<HTMLMarketTableCellElement>,\n    newCellList: NodeListOf<HTMLMarketTableCellElement>,\n  ) {\n    if (oldCellList !== newCellList) {\n      this.setCellColumnProperties(this.tableColumns);\n    }\n  }\n\n  @Watch('leadingIndentation')\n  updateFirstCellProperties() {\n    this._setFirstCellProperties();\n  }\n\n  @Watch('expanded')\n  updateNestedRowButton() {\n    if (this.nestedRowToggleButton) {\n      this.nestedRowToggleButton.ariaExpanded = `${this.expanded}`;\n\n      // We cannot access the svg from the css files in the current state,\n      // so we have to do it through JS. I figured this was the best place\n      // to do it since the rotation depends on expansion for now. We should\n      // find a better way to access this svg in the style sheets. -lindamr\n      const svgElement = this.nestedRowToggleButton.querySelector('svg');\n      if (svgElement) {\n        if (this.expanded) {\n          svgElement.style.transform = 'rotate(-180deg)';\n        } else {\n          svgElement.style.transform = 'rotate(0deg)';\n        }\n      }\n    }\n  }\n\n  @Watch('selected')\n  updateSlottedControlCheckedValue() {\n    this.slottedControl?.setSelection(this.selected);\n  }\n\n  @Watch('disabled')\n  updateSlottedControlDisabledValue() {\n    this.slottedControl?.setDisabled(this.disabled);\n  }\n\n  @Listen('marketCheckboxValueChange')\n  @Listen('marketToggleChange')\n  handleMarketCheckboxValueChange(\n    event: MarketCheckboxCustomEvent<{ current: boolean }> | MarketToggleCustomEvent<{ current: boolean }>,\n  ) {\n    // Update selected value if event is triggered by slottedControl\n    if (event.target !== this.slottedControl) {\n      return;\n    }\n    this.selected = event.detail.current;\n  }\n\n  /**\n   * Sticks this row to the provided edge (position) of the table\n   */\n  @Method()\n  stick(position?: 'top' | 'bottom') {\n    if (position) {\n      this.stickTo = position;\n    } else if (this.header || this.footer) {\n      this.sticky = true;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Unsticks this row from any edge of the table\n   */\n  @Method()\n  unstick() {\n    this.sticky = false;\n    this.stickTo = false;\n    return Promise.resolve();\n  }\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used by the parent table to support fixing columns to either side of the table\n   */\n  @Method()\n  async _stickColumn(column: string, position: 'left' | 'right') {\n    const cell = this.el.querySelector(`[name=\"${column}\"], [column=\"${column}\"]`) as HTMLMarketTableCellElement;\n    if (cell) {\n      await cell._stickSelf(position);\n    } else {\n      console.warn('cannot stick cell to unknown position'); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used by the parent table to support fixing columns to either side of the table\n   */\n  @Method()\n  async _unstickColumn(column: string) {\n    const cell = this.el.querySelector(`[name=\"${column}\"], [column=\"${column}\"]`) as HTMLMarketTableCellElement;\n    if (cell) {\n      await cell._unstickSelf();\n    } else {\n      console.warn('cannot unstick cell from unknown position'); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Sets the hidden prop on market-table-cell. Used by market-table to allow market-table-column\n   * to control the hidden/visible state of its associated table cells.\n   */\n  @Method()\n  _syncColumnVisibilityWithCells(columnName, hidden) {\n    const cell = this.el.querySelector(\n      `[name=\"${columnName}\"], [column=\"${columnName}\"]`,\n    ) as HTMLMarketTableCellElement;\n    if (cell) {\n      cell.hidden = hidden;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Sets properties computed or specified on the row on the first\n   * cell to keep the table rows from shifting\n   */\n  @Method()\n  _setFirstCellProperties() {\n    // Setting indentation on the first cell of the row to not mess\n    // with the table grid\n    if (this.cells?.length && this.isStylableCell(this.cells[0])) {\n      this.cells[0]._updateFirstCellProperties?.(this.el);\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets the leadingIndentation\n   * @param leadingIndentation\n   */\n  @Method()\n  setLeadingIndentation(leadingIndentation: number) {\n    this.leadingIndentation = leadingIndentation;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets expanded property and emits nested row toggle event\n   */\n  @Method()\n  toggleNestedRow() {\n    this.expanded = !this.expanded;\n    this.marketAccordionToggled.emit({ expanded: this.expanded });\n    this.marketNestedRowToggled.emit({ expanded: this.expanded });\n    return Promise.resolve();\n  }\n\n  /**\n   * Checks type of cell to make Typescript happy about using functions that are only on\n   * HTMLMarketTableCellElement and not HTMLMarketTableColumnElement\n   * @param cell\n   * @returns\n   */\n  isStylableCell(cell: TCell): cell is HTMLMarketTableCellElement {\n    return (\n      (cell as HTMLMarketTableCellElement)._updateColumnRelatedProperties !== undefined &&\n      (cell as HTMLMarketTableCellElement)._updateFirstCellProperties !== undefined\n    );\n  }\n\n  setCellColumnProperties(columns: Array<HTMLMarketTableColumnElement>) {\n    if (this.cells && columns && columns.length > 0) {\n      this.cells.forEach((cell, i) => {\n        if (this.isStylableCell(cell)) {\n          const column = columns[i];\n          cell._updateColumnRelatedProperties(column);\n        }\n      });\n    }\n  }\n\n  emitStickyEvents() {\n    let position;\n\n    if (this.stickTo) {\n      position = this.stickTo;\n    } else if (this.header) {\n      position = 'top';\n    } else if (this.footer) {\n      position = 'bottom';\n    }\n\n    if (this.sticky || this.stickTo) {\n      // emit a stick event\n      this.marketTableRowStick.emit({\n        position,\n        index: this.index,\n      });\n    } else if (this.componentLoaded) {\n      // Emit an unstick event\n      this.marketTableRowUnstick.emit({\n        position,\n        index: this.index,\n      });\n    }\n  }\n\n  componentWillLoad() {\n    // setting row properties based on whether row is using a named slot\n    this.originalSlot = this.el.slot;\n    this.header = this.originalSlot === 'header';\n    this.footer = this.originalSlot === 'footer';\n    // prettier wants (typeof this.cells)[0] but that change seems wrong\n    // prettier-ignore\n    this.cells = this.el.querySelectorAll<typeof this.cells[0]>(getNamespacedTagFor('market-table-cell'));\n  }\n\n  handleSlotChange() {\n    this.cells = this.el.querySelectorAll(\n      `${getNamespacedTagFor('market-table-cell')}, ${getNamespacedTagFor('market-table-column')}`,\n    );\n\n    // If this is our header row, meaning we have column children, then emit an\n    // event that sends the columns to the table parent\n    if (this.header) {\n      this.marketTableHeaderLoaded.emit({\n        columns: this.el.querySelectorAll<HTMLMarketTableColumnElement>(getNamespacedTagFor('market-table-column')),\n      });\n    }\n\n    this.emitStickyEvents();\n  }\n\n  _getMarketRowElement(element: any) {\n    return element.querySelector(getNamespacedTagFor('market-table-row'));\n  }\n\n  // prevents unstick events from being fired on the slotchange before componentDidLoad\n  componentLoaded: Boolean = false;\n\n  _addCaretButtonToFirstCell() {\n    if (this.cells && this.cells[0]) {\n      this.nestedRowToggleButton = document.createElement('button');\n      Object.assign(this.nestedRowToggleButton, {\n        slot: 'nested-row-indicator',\n        type: 'button',\n        ariaExpanded: `${this.expanded}`,\n        onclick: () => this.toggleNestedRow(),\n      });\n      this.nestedRowToggleButton.innerHTML = `<svg class=\"caret\" width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\" style=\"transition-duration:300ms;\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M7.70715 7.70711C7.31663 8.09763 6.68346 8.09763 6.29294 7.70711L0.29294 1.70711L1.70715 0.292892L7.00005 5.58579L12.2929 0.292893L13.7072 1.70711L7.70715 7.70711Z\"\n            fill=\"currentColor\"\n          />\n        </svg>`;\n\n      // Get the first table cell child element and append the this.nestedRowToggleButtonElement to it. Because it has the nested-row-indicator slot, it should appear in the correct place\n      this.cells[0].append(this.nestedRowToggleButton);\n    }\n  }\n\n  _registerSlottedControl() {\n    this.slottedControl = this.el.querySelector<typeof this.slottedControl>(\n      [\n        `[slot=\"control\"] ${getNamespacedTagFor('market-checkbox')}`,\n        `[slot=\"control\"] ${getNamespacedTagFor('market-toggle')}`,\n      ].join(','),\n    );\n    if (this.slottedControl) {\n      this.slottedControl.setDisabled(this.disabled);\n      this.slottedControl.setSelection(this.selected);\n    }\n  }\n\n  componentDidRender() {\n    // Get accordion parent\n    const accordionElement = this.el.closest(getNamespacedTagFor('market-accordion-item'));\n    if (accordionElement) {\n      let parentRow: HTMLMarketTableRowElement;\n      if (this.el.slot === 'custom-trigger') {\n        // If current row has nested row, we need to look a level above for\n        // the correct indentation.\n        const parentAccordionElement = accordionElement.parentElement?.closest(\n          getNamespacedTagFor('market-accordion-item'),\n        );\n\n        // If there is a parent accordion element, find the trigger row\n        // to get previous level indentation and set the current one.\n        // Otherwise, the current row is at top level and indentaion will\n        // remain as 0.\n        if (parentAccordionElement) {\n          parentRow = [...parentAccordionElement.children].find(\n            (child) => child.slot === 'custom-trigger',\n          ) as HTMLMarketTableRowElement;\n        }\n      } else {\n        // Find the the trigger row within same level to set indentation\n        parentRow = [...accordionElement.children].find(\n          (child) => child.slot === 'custom-trigger',\n        ) as HTMLMarketTableRowElement;\n      }\n\n      // Set indentation\n      this.leadingIndentation = parentRow ? (parentRow.leadingIndentation ?? 0) + 1 : 0;\n    }\n\n    // Set indentation on the first cell of the row to not mess\n    // with the table grid\n    this._setFirstCellProperties();\n  }\n\n  componentDidLoad() {\n    this.componentLoaded = true;\n\n    if (this.el.slot === 'custom-trigger') {\n      // Add caret button\n      this._addCaretButtonToFirstCell();\n\n      // If accordion is expanded when component is loaded, we have to\n      // we have to make sure the caret is facing the correct way\n      const svgElement = this.nestedRowToggleButton.querySelector('svg');\n      if (svgElement && this.expanded) {\n        svgElement.style.transform = 'rotate(-180deg)';\n      }\n    }\n  }\n\n  handleClick(e) {\n    const ignoredElementTagNames = [\n      getNamespacedTagFor('market-accessory'),\n      getNamespacedTagFor('market-button'),\n      getNamespacedTagFor('market-button-dropdown'),\n      getNamespacedTagFor('market-checkbox'),\n      getNamespacedTagFor('market-link'),\n      getNamespacedTagFor('market-toggle'),\n      'button',\n      'a',\n      // add more interactive element tag names here\n    ];\n\n    // If the element clicked was one of the ignoredElementTagNames or anything inside of them,\n    // do not trigger marketTableRowClicked\n    const shouldIgnoreClick = ignoredElementTagNames.some((tagname) => e.target.closest(tagname));\n    if (shouldIgnoreClick) {\n      return;\n    }\n    if (this.interactive) {\n      this.marketTableRowClicked.emit();\n    }\n  }\n\n  handleKeydown(e) {\n    // don't intercept keydown of descendant elements\n    // e.g. when typing into nested input fields (gross)\n    if (e.target !== this.el) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'Enter':\n        this.handleClick(e);\n        break;\n      case ' ':\n        this.handleClick(e);\n        e.preventDefault(); // spacebar should not scroll page\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      disabled,\n      footer,\n      gridTemplateLeft,\n      gridTemplateMain,\n      gridTemplateRight,\n      header,\n      interactive,\n      selected,\n      slottedControl,\n    } = this;\n    const MarketTableAreaTagName = getNamespacedTagFor('market-table-area');\n\n    return (\n      <Host\n        aria-selected={slottedControl ? Boolean(selected).toString() : null}\n        class=\"market-table-row\"\n        role=\"row\"\n        tabindex={interactive && !disabled ? '0' : null}\n        header={header}\n        footer={footer}\n        onClick={(e) => this.handleClick(e)}\n        onKeydown={(e) => this.handleKeydown(e)}\n      >\n        <MarketTableAreaTagName\n          orientation=\"vertical\"\n          stick-to=\"left\"\n          gridTemplate={gridTemplateLeft}\n          ref={(el) => (this.tableAreaLeft = el)}\n        >\n          <slot name=\"sticky-left\"></slot>\n        </MarketTableAreaTagName>\n        <MarketTableAreaTagName\n          orientation=\"vertical\"\n          gridTemplate={gridTemplateMain}\n          ref={(el) => (this.tableAreaMain = el)}\n          active\n        >\n          <slot name=\"control\" onSlotchange={() => this._registerSlottedControl()}></slot>\n          <slot onSlotchange={() => this.handleSlotChange()}></slot>\n        </MarketTableAreaTagName>\n        <MarketTableAreaTagName\n          orientation=\"vertical\"\n          stick-to=\"right\"\n          gridTemplate={gridTemplateRight}\n          ref={(el) => (this.tableAreaRight = el)}\n        >\n          <slot name=\"sticky-right\"></slot>\n        </MarketTableAreaTagName>\n      </Host>\n    );\n  }\n}\n"]}