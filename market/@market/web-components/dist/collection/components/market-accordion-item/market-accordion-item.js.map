{"version":3,"file":"market-accordion-item.js","sourceRoot":"","sources":["../../../../src/components/market-accordion-item/market-accordion-item.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, h, Listen, Method, Prop, State } from '@stencil/core';\nimport {\n  ACCORDION_HEADING_10_VARIANT_EXPANDED_PHASE_ICON_ASSET,\n  ACCORDION_HEADING_20_VARIANT_EXPANDED_PHASE_ICON_ASSET,\n  ACCORDION_HEADING_30_VARIANT_EXPANDED_PHASE_ICON_ASSET,\n} from '@market/market-theme/js/cjs/index.js';\n\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\nconst sizeToHeadingType: Record<'small' | 'medium' | 'large', string> = {\n  large: '2',\n  medium: '3',\n  small: '4',\n};\n\n@Component({\n  tag: 'market-accordion-item',\n  styleUrl: 'market-accordion-item.css',\n  shadow: true,\n})\nexport class MarketAccordionItem {\n  @Element() el: HTMLMarketAccordionItemElement;\n\n  /**\n   * The unique name of the accordion.\n   */\n  @Prop({ reflect: true }) readonly name!: string;\n\n  /**\n   * Determines whether the accordion is shown as expanded or collapsed.\n   */\n  @Prop({ mutable: true, reflect: true }) expanded: boolean = false;\n\n  /**\n   * Whether the accordion should appear in a disabled state.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * The size of the heading text of the accordion.\n   */\n  @Prop({ reflect: true }) readonly size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Use a custom trigger to expand/collapse content\n   */\n  @State() customTrigger: HTMLMarketTableRowElement;\n\n  /**\n   * Fired whenever the \"expanded\" prop value changes.\n   */\n  @Event() marketAccordionItemExpandedChange: EventEmitter<{ expanded: boolean }>;\n\n  @Listen('marketAccordionToggled')\n  marketAccordionToggleHandler(e: CustomEvent) {\n    e.stopPropagation();\n    this.setExpanded(!this.expanded);\n  }\n\n  /**\n   * Used to set the \"open\" state of the accordion.\n   */\n  @Method()\n  setExpanded(newExpanded: boolean) {\n    const oldExpanded = this.expanded;\n\n    if (newExpanded !== oldExpanded) {\n      const { defaultPrevented } = this.marketAccordionItemExpandedChange.emit({\n        expanded: newExpanded,\n      });\n\n      if (!defaultPrevented) {\n        this.expanded = newExpanded;\n        if (this.customTrigger) {\n          this.customTrigger.expanded = newExpanded;\n        }\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `disabled` state. Allows external elements to programmatically trigger disabled styling.\n   */\n  @Method()\n  setDisabled(value: boolean) {\n    this.disabled = value;\n    return Promise.resolve();\n  }\n\n  getAccordionIcon() {\n    switch (this.size) {\n      case 'small':\n        return ACCORDION_HEADING_10_VARIANT_EXPANDED_PHASE_ICON_ASSET;\n      case 'large':\n        return ACCORDION_HEADING_30_VARIANT_EXPANDED_PHASE_ICON_ASSET;\n      default: // medium\n        return ACCORDION_HEADING_20_VARIANT_EXPANDED_PHASE_ICON_ASSET;\n    }\n  }\n\n  componentWillLoad() {\n    this.customTrigger = this.el.querySelector('[slot=\"custom-trigger\"]') as HTMLMarketTableRowElement;\n    if (this.customTrigger) {\n      this.customTrigger.expanded = this.expanded;\n    }\n  }\n\n  render() {\n    const Heading = `h${sizeToHeadingType[this.size]}`;\n    const MarketIconTagName = getNamespacedTagFor('market-icon');\n\n    return (\n      <Host class=\"market-accordion-item\">\n        {this.customTrigger ? (\n          <slot name=\"custom-trigger\"></slot>\n        ) : (\n          <Heading>\n            <button\n              id={`${this.name}__button`}\n              type=\"button\"\n              aria-expanded={this.expanded}\n              aria-controls={`${this.name}__content`}\n              aria-disabled={this.disabled}\n              disabled={this.disabled}\n              onClick={() => this.setExpanded(!this.expanded)}\n            >\n              <slot name=\"label\" />\n              <MarketIconTagName name={this.getAccordionIcon()}></MarketIconTagName>\n            </button>\n          </Heading>\n        )}\n        {this.expanded && (\n          <div\n            id={`${this.name}__content`}\n            class=\"accordion-content\"\n            role=\"region\"\n            aria-labelledby={`${this.name}__button`}\n          >\n            <slot></slot>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"]}