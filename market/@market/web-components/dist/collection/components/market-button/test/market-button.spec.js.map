{"version":3,"file":"market-button.spec.js","sourceRoot":"","sources":["../../../../../src/components/market-button/test/market-button.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage, SpecPage } from '@stencil/core/testing';\nimport { MarketButton } from '../market-button';\n\nimport MutationObserver from 'mutation-observer';\n\n// Fix for ReferenceError: MutationObserver is not defined\nglobal.MutationObserver = MutationObserver;\n\ndescribe('market-button', () => {\n  let page: SpecPage;\n\n  describe('defaults', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: '<market-button>Button</market-button>',\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button class=\"market-button\" rank=\"secondary\" size=\"medium\" type=\"button\" variant=\"regular\">\n          <mock:shadow-root>\n            <button class=\"inner-tag\" type=\"button\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n            </button>\n          </mock:shadow-root>\n          Button\n        </market-button>\n      `);\n    });\n  });\n\n  describe('with icon', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: `<market-button><market-accessory slot=\"icon\"></market-accessory> Button</market-button>`,\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button class=\"market-button\" rank=\"secondary\" size=\"medium\" type=\"button\" variant=\"regular\">\n          <mock:shadow-root>\n            <button class=\"inner-tag\" type=\"button\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n            </button>\n          </mock:shadow-root>\n          <market-accessory slot=\"icon\"></market-accessory>\n          Button\n        </market-button>\n      `);\n    });\n  });\n\n  describe('icon only', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: `<market-button><market-accessory slot=\"icon\"></market-accessory></market-button>`,\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button icon-only class=\"market-button\" rank=\"secondary\" size=\"medium\" type=\"button\" variant=\"regular\">\n          <mock:shadow-root>\n            <button class=\"inner-tag\" type=\"button\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n            </button>\n          </mock:shadow-root>\n          <market-accessory slot=\"icon\"></market-accessory>\n        </market-button>\n      `);\n    });\n  });\n\n  describe('disabled', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: '<market-button disabled>Button</market-button>',\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button class=\"market-button\" disabled rank=\"secondary\" size=\"medium\" type=\"button\" variant=\"regular\">\n          <mock:shadow-root>\n            <button class=\"inner-tag\" disabled tabindex=\"-1\" type=\"button\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n            </button>\n          </mock:shadow-root>\n          Button\n        </market-button>\n      `);\n    });\n  });\n\n  describe('loading', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: '<market-button is-loading>Button</market-button>',\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button is-loading class=\"market-button\" rank=\"secondary\" size=\"medium\" type=\"button\" variant=\"regular\">\n          <mock:shadow-root>\n            <button class=\"inner-tag\" type=\"button\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n            </button>\n            <market-activity-indicator size=\"small\"></market-activity-indicator>\n          </mock:shadow-root>\n          Button\n        </market-button>\n      `);\n    });\n  });\n\n  describe('caret up', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: '<market-button caret=\"up\">Button</market-button>',\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button caret=\"up\" class=\"market-button\" rank=\"secondary\" size=\"medium\" type=\"button\" variant=\"regular\">\n          <mock:shadow-root>\n            <button class=\"inner-tag\" type=\"button\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n              <market-icon name=\"collapse\"></market-icon>\n            </button>\n          </mock:shadow-root>\n          Button\n        </market-button>\n      `);\n    });\n  });\n\n  describe('caret down', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: '<market-button caret=\"down\">Button</market-button>',\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button caret=\"down\" class=\"market-button\" rank=\"secondary\" size=\"medium\" type=\"button\" variant=\"regular\">\n          <mock:shadow-root>\n            <button class=\"inner-tag\" type=\"button\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n              <market-icon name=\"expand\"></market-icon>\n            </button>\n          </mock:shadow-root>\n          Button\n        </market-button>\n      `);\n    });\n  });\n\n  describe('link', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: '<market-button href=\"http://squareup.com\" target=\"_blank\" rel=\"external\">Button</market-button>',\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button class=\"market-button\" href=\"http://squareup.com\" rank=\"secondary\" rel=\"external\" size=\"medium\" target=\"_blank\" type=\"button\" variant=\"regular\">\n          <mock:shadow-root>\n            <a class=\"inner-tag\" href=\"http://squareup.com\" rel=\"external\" target=\"_blank\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n            </a>\n          </mock:shadow-root>\n          Button\n        </market-button>\n      `);\n    });\n  });\n\n  describe('various attrs', () => {\n    beforeEach(async () => {\n      page = await newSpecPage({\n        components: [MarketButton],\n        html: '<market-button rank=\"primary\" type=\"submit\" variant=\"destructive\" size=\"small\">Button</market-button>',\n      });\n    });\n\n    it('renders correctly', () => {\n      expect(page.root).toEqualHtml(`\n        <market-button class=\"market-button\" rank=\"primary\" size=\"small\" type=\"submit\" variant=\"destructive\">\n          <mock:shadow-root>\n            <button class=\"inner-tag\" type=\"submit\">\n              <slot name=\"icon\"></slot>\n              <slot></slot>\n            </button>\n          </mock:shadow-root>\n          Button\n        </market-button>\n      `);\n    });\n  });\n});\n"]}