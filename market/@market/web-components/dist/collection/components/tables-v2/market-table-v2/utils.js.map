{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../src/components/tables-v2/market-table-v2/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse } from 'date-fns';\nimport {\n  HTMLMarketTableV2ChildElement,\n  TMarketTableV2SortOrder,\n  TMarketTableV2SortStrategy,\n  TMarketTableV2SortStrategyCallback,\n} from './types';\nimport { isMarketTableV2Group } from '../market-table-v2-group/types';\n\nexport const sortItems = ({\n  items,\n  order,\n  column,\n  strategy,\n  format,\n}: {\n  items: Array<HTMLMarketTableV2ChildElement>;\n  order: TMarketTableV2SortOrder;\n  column: number;\n  strategy: TMarketTableV2SortStrategy;\n  format: string;\n}): Array<HTMLMarketTableV2ChildElement> => {\n  const sortedItems = [...items];\n  sortedItems.sort((childA: HTMLMarketTableV2ChildElement, childB: HTMLMarketTableV2ChildElement) => {\n    const rowA = isMarketTableV2Group(childA)\n      ? (childA.querySelector('[slot=\"parent\"]') as HTMLMarketTableV2RowElement)\n      : childA;\n    const rowB = isMarketTableV2Group(childB)\n      ? (childB.querySelector('[slot=\"parent\"]') as HTMLMarketTableV2RowElement)\n      : childB;\n    const params = { rowA, rowB, order, column };\n    if (typeof strategy === 'function') {\n      return strategy(params);\n    } else if (strategy === 'number') {\n      return sortByNumber(params);\n    } else if (strategy === 'datetime' && format) {\n      return sortByDateTime({ ...params, format });\n    } else {\n      return sortByString(params);\n    }\n  });\n  return sortedItems;\n};\n\nconst sortByNumber: TMarketTableV2SortStrategyCallback = ({\n  rowA,\n  rowB,\n  order,\n  column,\n}: {\n  rowA: HTMLMarketTableV2RowElement;\n  rowB: HTMLMarketTableV2RowElement;\n  order: TMarketTableV2SortOrder;\n  column: number;\n}): number => {\n  const numberA = Number.parseFloat(rowA?.children[column]?.textContent?.trim());\n  const numberB = Number.parseFloat(rowB?.children[column]?.textContent?.trim());\n\n  if (order === 'ascending') {\n    return numberA - numberB;\n  } else {\n    return numberB - numberA;\n  }\n};\n\nconst sortByString: TMarketTableV2SortStrategyCallback = ({\n  rowA,\n  rowB,\n  order,\n  column,\n}: {\n  rowA: HTMLMarketTableV2RowElement;\n  rowB: HTMLMarketTableV2RowElement;\n  order: TMarketTableV2SortOrder;\n  column: number;\n}): number => {\n  const contentA = rowA?.children[column]?.textContent?.trim()?.toUpperCase();\n  const contentB = rowB?.children[column]?.textContent?.trim()?.toUpperCase();\n\n  if (order === 'ascending') {\n    if (contentA < contentB) return -1;\n    if (contentA > contentB) return 1;\n    return 0;\n  } else {\n    if (contentA < contentB) return 1;\n    if (contentA > contentB) return -1;\n    return 0;\n  }\n};\n\nconst sortByDateTime: TMarketTableV2SortStrategyCallback = ({\n  rowA,\n  rowB,\n  order,\n  column,\n  format,\n}: {\n  rowA: HTMLMarketTableV2RowElement;\n  rowB: HTMLMarketTableV2RowElement;\n  order: TMarketTableV2SortOrder;\n  column: number;\n  format: string;\n}): number => {\n  const contentA = rowA?.children[column]?.textContent?.trim();\n  const contentB = rowB?.children[column]?.textContent?.trim();\n  const dateA = parse(contentA, format, new Date());\n  const dateB = parse(contentB, format, new Date());\n\n  if (order === 'ascending') {\n    if (dateA < dateB) return -1;\n    if (dateA > dateB) return 1;\n    return 0;\n  } else {\n    if (dateA < dateB) return 1;\n    if (dateA > dateB) return -1;\n    return 0;\n  }\n};\n"]}