{"version":3,"file":"market-popover.js","sourceRoot":"","sources":["../../../../src/components/market-popover/market-popover.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAE5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D;;;;;;GAMG;AAMH,MAAM,OAAO,OAAO;IAGlB;;2FAEuF;IACvF,mBAAmB;QACjB;;qEAE6D;QAC7D,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,KAAK,CAAC;QACV,IAAI,IAAI,EAAE,CAAC;YACT,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,KAAK,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;QACtG,CAAC;aAAM,CAAC;YACN;4CACgC;YAChC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACtF,CAAC;QACD,IAAI,KAAK,EAAE,CAAC;YACV,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAC1B,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,gBAAgB;YAC1B,8DAAa,CACR,CACR,CAAC;IACJ,CAAC;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, h, Host } from '@stencil/core';\n\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n/**\n * @slot - Displays whatever you put between `<market-popover>` and `</market-popover>`\n * (can be string literals, Market component(s), HTML element(s), or any combination)\n *\n * If slot contains `<market-list>` elements, `initInteractiveList()` will set the\n * `interactive` property on each instance of `<market-list>` to `true`.\n */\n@Component({\n  tag: 'market-popover',\n  shadow: true,\n  styleUrl: 'market-popover.css',\n})\nexport class Popover {\n  @Element() el: HTMLMarketPopoverElement;\n\n  /* Don't want to force consumers to have to remember to put 'interactive' attribute\n    on a <market-list> slotted into this options list, so just set the property on the child\n    element here because lists should always be interactive when inside this component */\n  initInteractiveList() {\n    /* We could just do el.querySelectorAll('market-list') here, but to handle elements that may be multi-slotted\n    such as when using this popover inside of a select/filterable element and forwarding the slotted contents into\n    the popover, we need to use this assignedElements() method */\n    const slot = this.el.querySelector('slot');\n    let lists;\n    if (slot) {\n      lists = slot.assignedElements().filter((el) => el.localName === getNamespacedTagFor('market-list'));\n    } else {\n      /* .querySelectorAll() returns a NodeList and not an array so we need to convert it\n       in order to use .map() below */\n      lists = [].slice.call(this.el.querySelectorAll(getNamespacedTagFor('market-list')));\n    }\n    if (lists) {\n      lists.forEach((list) => {\n        list.interactive = true;\n      });\n    }\n  }\n\n  render() {\n    this.initInteractiveList();\n    return (\n      <Host class=\"market-popover\">\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"]}