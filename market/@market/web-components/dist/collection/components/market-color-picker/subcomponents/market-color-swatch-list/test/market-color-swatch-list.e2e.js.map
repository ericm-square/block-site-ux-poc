{"version":3,"file":"market-color-swatch-list.e2e.js","sourceRoot":"","sources":["../../../../../../../src/components/market-color-picker/subcomponents/market-color-swatch-list/test/market-color-swatch-list.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage, E2EPage, E2EElement, EventSpy } from '@stencil/core/testing';\n\ndescribe('market-color-swatch-list', () => {\n  let page: E2EPage;\n  let element: E2EElement;\n  let list: Array<E2EElement>;\n  let swatchListChangeEvent: EventSpy;\n\n  let redSwatch: E2EElement;\n  let blueSwatch: E2EElement;\n  let greenSwatch: E2EElement;\n  let yellowSwatch: E2EElement;\n\n  beforeEach(async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-color-swatch-list value=\"blue\">\n        <market-color-swatch value=\"red\"></market-color-swatch>\n        <market-color-swatch value=\"blue\"></market-color-swatch>\n        <market-color-swatch value=\"green\"></market-color-swatch>\n        <market-color-swatch value=\"yellow\"></market-color-swatch>\n      </market-color-swatch-list>\n    `);\n\n    element = await page.find('market-color-swatch-list');\n    list = await element.findAll('market-color-swatch');\n    swatchListChangeEvent = await page.spyOnEvent('marketColorSwatchListValueChange');\n\n    redSwatch = await element.find('market-color-swatch[value=\"red\"]');\n    blueSwatch = await element.find('market-color-swatch[value=\"blue\"]');\n    greenSwatch = await element.find('market-color-swatch[value=\"green\"]');\n    yellowSwatch = await element.find('market-color-swatch[value=\"yellow\"]');\n  });\n\n  it('renders', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-color-swatch-list></market-color-swatch-list>');\n\n    const element = await page.find('market-color-swatch-list');\n    expect(element).toHaveAttribute('hydrated');\n    expect(element).toHaveClass('market-color-swatch-list');\n  });\n\n  it('renders the slotted swatches and preselects one based on value', () => {\n    expect(list).toHaveLength(4);\n    expect(redSwatch).not.toHaveAttribute('selected');\n    expect(blueSwatch).toHaveAttribute('selected');\n    expect(greenSwatch).not.toHaveAttribute('selected');\n    expect(yellowSwatch).not.toHaveAttribute('selected');\n  });\n\n  it('moves selected swatch when an unselected swatch is clicked and fire event', async () => {\n    await redSwatch.click();\n    await page.waitForChanges();\n\n    expect(redSwatch).toHaveAttribute('selected');\n    expect(blueSwatch).not.toHaveAttribute('selected');\n    expect(greenSwatch).not.toHaveAttribute('selected');\n    expect(yellowSwatch).not.toHaveAttribute('selected');\n\n    expect(swatchListChangeEvent).toHaveReceivedEventTimes(1);\n    expect(swatchListChangeEvent.lastEvent.detail.value).toEqual('red');\n    expect(swatchListChangeEvent.lastEvent.detail.prevValue).toEqual('blue');\n  });\n\n  it('clears value of list when selected swatch is clicked (deselected)', async () => {\n    await blueSwatch.click();\n    await page.waitForChanges();\n\n    expect(redSwatch).not.toHaveAttribute('selected');\n    expect(blueSwatch).not.toHaveAttribute('selected');\n    expect(greenSwatch).not.toHaveAttribute('selected');\n    expect(yellowSwatch).not.toHaveAttribute('selected');\n\n    expect(swatchListChangeEvent).toHaveReceivedEventTimes(1);\n    expect(swatchListChangeEvent.lastEvent.detail.value).toEqual('');\n    expect(swatchListChangeEvent.lastEvent.detail.prevValue).toEqual('blue');\n  });\n});\n"]}