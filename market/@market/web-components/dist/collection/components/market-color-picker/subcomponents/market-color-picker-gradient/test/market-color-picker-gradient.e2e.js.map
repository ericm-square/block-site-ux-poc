{"version":3,"file":"market-color-picker-gradient.e2e.js","sourceRoot":"","sources":["../../../../../../../src/components/market-color-picker/subcomponents/market-color-picker-gradient/test/market-color-picker-gradient.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage, E2EPage, E2EElement, EventSpy } from '@stencil/core/testing';\n\ndescribe('market-color-picker-gradient', () => {\n  let page: E2EPage;\n  let element: E2EElement;\n  let gradientChangeEvent: EventSpy;\n\n  let primaryPicker: E2EElement;\n  let secondaryPicker: E2EElement;\n\n  let primaryGradient: E2EElement;\n  let secondaryGradient: E2EElement;\n\n  let primaryStyles;\n  let secondaryStyles;\n  let secondaryGradientStyles;\n  let primaryBackground;\n  let secondaryBackground;\n  let secondaryGradientBackground;\n\n  beforeEach(async () => {\n    page = await newE2EPage();\n    await page.setContent('<market-color-picker-gradient value=\"#006AFF\"></market-color-picker-gradient>');\n\n    element = await page.find('market-color-picker-gradient');\n    primaryPicker = await element.find('pierce/#primary-pointer');\n    secondaryPicker = await element.find('pierce/#secondary-pointer');\n    primaryGradient = await element.find('pierce/.primary-gradient');\n    secondaryGradient = await element.find('pierce/.secondary-gradient');\n    gradientChangeEvent = await page.spyOnEvent('marketColorPickerGradientValueChange');\n\n    // The rgb value of #006AFF is rgb(0, 106, 255).\n    primaryStyles = await primaryPicker.getComputedStyle();\n    secondaryStyles = await secondaryPicker.getComputedStyle();\n    secondaryGradientStyles = await secondaryGradient.getComputedStyle();\n\n    primaryBackground = primaryStyles.getPropertyValue('backgroundColor');\n    secondaryBackground = secondaryStyles.getPropertyValue('backgroundColor');\n    secondaryGradientBackground = secondaryGradientStyles.getPropertyValue('background');\n\n    await page.waitForChanges();\n  });\n\n  it('renders', () => {\n    expect(element).toHaveClass('market-color-picker-gradient');\n\n    expect(primaryPicker).toHaveClass('pointer');\n    expect(secondaryPicker).toHaveClass('pointer');\n\n    expect(primaryGradient).toHaveClass('primary-gradient');\n    expect(secondaryGradient).toHaveClass('secondary-gradient');\n  });\n\n  it('renders with a preset value', () => {\n    expect(primaryBackground).toEqual('rgb(0, 106, 255)');\n    expect(secondaryBackground).toEqual('rgb(0, 106, 255)');\n\n    // The expected gradient background for #006AFF.\n    expect(secondaryGradientBackground).toContain('linear-gradient(to top, rgb(0, 0, 0)');\n    expect(secondaryGradientBackground).toContain('linear-gradient(to left, rgb(0, 106, 255), rgb(255, 255, 255))');\n  });\n\n  it('updates picker colors, secondary gradient, and does not call event on value change', async () => {\n    expect(gradientChangeEvent).not.toHaveReceivedEvent();\n\n    await element.setProperty('value', '#00B23B');\n    await page.waitForChanges();\n\n    // get recomputed styles\n    primaryStyles = await primaryPicker.getComputedStyle();\n    secondaryStyles = await secondaryPicker.getComputedStyle();\n    secondaryGradientStyles = await secondaryGradient.getComputedStyle();\n\n    const updatedPrimaryBackground = primaryStyles.getPropertyValue('backgroundColor');\n    const updatedSecondaryBackground = secondaryStyles.getPropertyValue('backgroundColor');\n    const updatedSecondaryGradientBackground = secondaryGradientStyles.getPropertyValue('background');\n\n    expect(updatedPrimaryBackground).toEqual('rgb(0, 255, 85)');\n    expect(updatedSecondaryBackground).toEqual('rgb(0, 178, 59)');\n\n    expect(updatedSecondaryGradientBackground).toContain(\n      'linear-gradient(to left, rgb(0, 255, 85), rgb(255, 255, 255))',\n    );\n    expect(gradientChangeEvent).not.toHaveReceivedEvent();\n  });\n\n  describe('when a pointer is dragged', () => {\n    beforeEach(async () => {\n      page = await newE2EPage();\n\n      // absolutely position elements to simplify mouse manipulation\n      await page.setContent(`\n        <market-color-picker-gradient value=\"#006AFF\" style=\"position: absolute; width: 200px; top: 0; left: 0;\">\n        </market-color-picker-gradient>\n      `);\n    });\n\n    it('updates secondary gradient when primary pointer is dragged via click event and calls event', async () => {\n      // Expected starting background gradient.\n      expect(secondaryGradientBackground).toContain('linear-gradient(to top, rgb(0, 0, 0)');\n      expect(secondaryGradientBackground).toContain('linear-gradient(to left, rgb(0, 106, 255), rgb(255, 255, 255))');\n\n      expect(gradientChangeEvent).not.toHaveReceivedEvent();\n      expect(primaryBackground).toEqual('rgb(0, 106, 255)');\n      expect(secondaryBackground).toEqual('rgb(0, 106, 255)');\n\n      primaryGradient.click();\n      await page.waitForChanges();\n\n      // Repopulate changes\n      secondaryGradient = await element.find('pierce/.secondary-gradient');\n      secondaryGradientStyles = await secondaryGradient.getComputedStyle();\n      const updatedSecondaryGradientBackground = secondaryGradientStyles.getPropertyValue('background');\n\n      primaryStyles = await primaryPicker.getComputedStyle();\n      secondaryStyles = await secondaryPicker.getComputedStyle();\n\n      const updatedPrimaryBackground = primaryStyles.getPropertyValue('backgroundColor');\n      const updatedSecondaryBackground = secondaryStyles.getPropertyValue('backgroundColor');\n\n      // Secondary gradient should change\n      expect(updatedSecondaryGradientBackground).not.toContain(\n        'linear-gradient(to left, rgb(0, 106, 255), rgb(255, 255, 255))',\n      );\n\n      // Primary pointer background should update\n      expect(updatedPrimaryBackground).not.toEqual('rgb(0, 106, 255)');\n\n      // Secondary pointer background should update\n      expect(updatedSecondaryBackground).not.toEqual('rgb(0, 106, 255)');\n\n      expect(gradientChangeEvent).toHaveReceivedEvent();\n    });\n\n    it('updates secondary color when secondary pointer is dragged via click event and calls event', async () => {\n      // Expected starting background gradient.\n      expect(secondaryGradientBackground).toContain('linear-gradient(to top, rgb(0, 0, 0)');\n      expect(secondaryGradientBackground).toContain('linear-gradient(to left, rgb(0, 106, 255), rgb(255, 255, 255))');\n\n      expect(gradientChangeEvent).not.toHaveReceivedEvent();\n      expect(primaryBackground).toEqual('rgb(0, 106, 255)');\n      expect(secondaryBackground).toEqual('rgb(0, 106, 255)');\n\n      secondaryGradient.click();\n      await page.waitForChanges();\n\n      // Repopulate changes\n      const updatedSecondaryGradient = await element.find('pierce/.secondary-gradient');\n      const updatedSecondaryGradientStyles = await updatedSecondaryGradient.getComputedStyle();\n      const updatedSecondaryGradientBackground = updatedSecondaryGradientStyles.getPropertyValue('background');\n\n      primaryStyles = await primaryPicker.getComputedStyle();\n      secondaryStyles = await secondaryPicker.getComputedStyle();\n\n      const updatedPrimaryBackground = primaryStyles.getPropertyValue('backgroundColor');\n      const updatedSecondaryBackground = secondaryStyles.getPropertyValue('backgroundColor');\n\n      // Secondary background gradient should not change on secondary pointer movement.\n      expect(updatedSecondaryGradientBackground).toContain('linear-gradient(to top, rgb(0, 0, 0)');\n      expect(updatedSecondaryGradientBackground).toContain(\n        'linear-gradient(to left, rgb(0, 106, 255), rgb(255, 255, 255))',\n      );\n\n      // Primary pointer background should not update\n      expect(updatedPrimaryBackground).toEqual('rgb(0, 106, 255)');\n\n      // Secondary pointer background should update\n      expect(updatedSecondaryBackground).not.toEqual('rgb(0, 106, 255)');\n\n      expect(gradientChangeEvent).toHaveReceivedEvent();\n    });\n  });\n});\n"]}