{"version":3,"file":"market-color-swatch-list.js","sourceRoot":"","sources":["../../../../../../src/components/market-color-picker/subcomponents/market-color-swatch-list/market-color-swatch-list.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACtG,OAAO,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AAClE,OAAO,EAAE,6BAA6B,EAAE,MAAM,aAAa,CAAC;AAO5D,MAAM,OAAO,qBAAqB;;;;IAkBhC,YAAY;QACV,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED;4BACwB;IAExB,+BAA+B,CAAC,CAAc;QAC5C,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAED,uBAAuB,CAAC,SAA+C;QACrE,MAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QAEhE,IAAI,IAAI,CAAC,KAAK,KAAK,aAAa,EAAE,CAAC;YACjC,OAAO;QACT,CAAC;QAED,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC;YACtE,KAAK,EAAE,aAAa;YACpB,SAAS,EAAE,IAAI,CAAC,KAAK;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,wEAAwE;IACxE,qBAAqB;QACnB,wEAAwE;QACxE,IAAI,KAAK,GAAG;YACV,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;SACjC,CAAC;QACzC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,KAAK,GAAG;gBACN,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;aAC5C,CAAC;QAC3C,CAAC;QAED,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACvE,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,0BAA0B,EAAC,IAAI,EAAC,MAAM;YAChD,6DAAM,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAE9C,6BAA6B,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;gBACnD,OAAO,2BAAqB,KAAK,EAAE,WAAW,GAAwB,CAAC;YACzE,CAAC,CAAC,CACG,CACF,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, h, Listen, Prop, Watch } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../../../utils/namespace';\nimport { getDefaultMarketColorSwatches } from '../../utils';\n\n@Component({\n  tag: 'market-color-swatch-list',\n  styleUrl: 'market-color-swatch-list.css',\n  shadow: true,\n})\nexport class MarketColorSwatchList {\n  @Element() el: HTMLMarketColorSwatchListElement;\n\n  /**\n   * A string specifying a value for the list.\n   * For a color swatch to be selected, this value should match the swatch's value.\n   * Note: all color swatch values slotted in must be **unique**!\n   * An empty string, or '', will clear the selection.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string;\n\n  /**\n   * Fired whenever an item is selected or deselected.\n   */\n  @Event({ bubbles: true, cancelable: true, composed: true })\n  marketColorSwatchListValueChange: EventEmitter<{ value: string; prevValue: string }>;\n\n  @Watch('value')\n  valueWatcher() {\n    this.setSelectionFromValue();\n  }\n\n  /* Listen for the marketColorSwatchSelectedChange event which is emitted by slotted market-color-swatch elements\n  when they are clicked */\n  @Listen('marketColorSwatchSelectedChange')\n  colorSwatchSelectedEventHandler(e: CustomEvent) {\n    this.handleItemSelectedEvent(e.detail);\n  }\n\n  handleItemSelectedEvent(eventInfo: { value: string; selected: boolean }) {\n    const selectedValue = eventInfo.selected ? eventInfo.value : '';\n\n    if (this.value === selectedValue) {\n      return;\n    }\n\n    const { defaultPrevented } = this.marketColorSwatchListValueChange.emit({\n      value: selectedValue,\n      prevValue: this.value,\n    });\n\n    if (!defaultPrevented) {\n      this.value = selectedValue;\n    }\n  }\n\n  // After selection, the swatches in the list update their selected state\n  setSelectionFromValue() {\n    // First check for slotted swatches, otherwise use default in shadow dom\n    let items = [\n      ...this.el.querySelectorAll(getNamespacedTagFor('market-color-swatch')),\n    ] as Array<HTMLMarketColorSwatchElement>;\n    if (items.length === 0) {\n      items = [\n        ...this.el.shadowRoot.querySelectorAll(getNamespacedTagFor('market-color-swatch')),\n      ] as Array<HTMLMarketColorSwatchElement>;\n    }\n\n    items.forEach((item) => (item.selected = this.value === item.value));\n  }\n\n  handleSlotChange() {\n    this.setSelectionFromValue();\n  }\n\n  render() {\n    return (\n      <Host class=\"market-color-swatch-list\" role=\"list\">\n        <slot onSlotchange={() => this.handleSlotChange()}>\n          {/* Uses Market Figma default colors for the swatches, unless other colors are slotted in */}\n          {getDefaultMarketColorSwatches().map((swatchValue) => {\n            return <market-color-swatch value={swatchValue}></market-color-swatch>;\n          })}\n        </slot>\n      </Host>\n    );\n  }\n}\n"]}