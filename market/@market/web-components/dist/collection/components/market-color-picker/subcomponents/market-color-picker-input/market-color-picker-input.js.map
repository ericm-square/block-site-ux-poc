{"version":3,"file":"market-color-picker-input.js","sourceRoot":"","sources":["../../../../../../src/components/market-color-picker/subcomponents/market-color-picker-input/market-color-picker-input.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAEtF,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AAClE,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AAOtD,MAAM,OAAO,sBAAsB;;;;IAYjC,uBAAuB;QACrB,MAAM,wBAAwB,GAAG,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;QAC5E,MAAM,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE5C,gCAAgC;QAChC,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;YACvB,OAAO,EAAC,wBAAwB,IAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,SAA4B,CAAC;QAC3F,CAAC;QAED,gCAAgC;QAChC,OAAO,WAAK,KAAK,EAAC,yBAAyB,IAAE,iBAAiB,EAAE,CAAO,CAAC;IAC1E,CAAC;IAGD,gBAAgB,CAAC,KAAkB;QACjC,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;QAEzB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7B,qCAAqC;QACrC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACxC,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC3G,IAAI,gBAAgB,EAAE,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACzB,CAAC;IACH,CAAC;IAED,oBAAoB,CAAC,QAAgB,IAAI,CAAC,KAAK;QAC7C,IAAI,CAAC,KAAK;YAAE,OAAO;QAEnB,IAAI,YAAY,GAAG,KAAK,CAAC;QAEzB,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YAC5B,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;IAC5B,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM;QACJ,MAAM,sBAAsB,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;QAExE,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,2BAA2B;YAErC,EAAC,sBAAsB,qDAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,yBAAyB,EAAE,SAAS,EAAE,CAAC;gBACpF,4DAAK,IAAI,EAAC,mBAAmB,IAAE,IAAI,CAAC,uBAAuB,EAAE,CAAO;gBACpE,8DAAO,OAAO,EAAC,yBAAyB;oBACtC,6DAAM,IAAI,EAAC,OAAO,UAAW,CACvB;gBACR,8DAAa,CACU,CACpB,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Event, EventEmitter, Host, h, Listen, Prop } from '@stencil/core';\n\nimport { pencilWritingIcon } from './icons';\nimport { getNamespacedTagFor } from '../../../../utils/namespace';\nimport { parseToHSVA } from '../../../../utils/color';\n\n@Component({\n  tag: 'market-color-picker-input',\n  styleUrl: 'market-color-picker-input.css',\n  shadow: true,\n})\nexport class MarketColorPickerInput {\n  /**\n   * Value representing the color shown on the input.\n   * This should be in a hexadecimal format (i.e. #ABC123), similarly to native HTML color inputs.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string;\n\n  /**\n   * Fired whenever the color picker input value changes.\n   */\n  @Event({ cancelable: true }) marketColorPickerInputValueChange: EventEmitter<{ prevValue: string; value: string }>;\n\n  displayLeadingAccessory() {\n    const MarketColorSwatchTagName = getNamespacedTagFor('market-color-swatch');\n    const parsedValue = parseToHSVA(this.value);\n\n    // If invalid, this will be null\n    if (parsedValue.values) {\n      return <MarketColorSwatchTagName value={this.value} disabled></MarketColorSwatchTagName>;\n    }\n\n    // otherwise return default icon\n    return <div class=\"color-picker-input-icon\">{pencilWritingIcon()}</div>;\n  }\n\n  @Listen('marketInputValueChange')\n  inputValueChange(event: CustomEvent) {\n    const { detail } = event;\n\n    const prevValue = this.value;\n    // Format for hexadecimal if required\n    this.formatAndUpdateValue(detail.value);\n    const { defaultPrevented } = this.marketColorPickerInputValueChange.emit({ prevValue, value: this.value });\n    if (defaultPrevented) {\n      this.value = prevValue;\n    }\n  }\n\n  formatAndUpdateValue(value: string = this.value) {\n    if (!value) return;\n\n    let updatedValue = value;\n\n    if (updatedValue[0] !== '#') {\n      updatedValue = `#${updatedValue}`;\n    }\n\n    this.value = updatedValue;\n  }\n\n  componentWillLoad() {\n    this.formatAndUpdateValue();\n  }\n\n  render() {\n    const MarketInputTextTagName = getNamespacedTagFor('market-input-text');\n\n    return (\n      <Host class=\"market-color-picker-input\">\n        {/* max length for hexadecimal format */}\n        <MarketInputTextTagName value={this.value} id={'color-picker-input-text'} maxlength={7}>\n          <div slot=\"leading-accessory\">{this.displayLeadingAccessory()}</div>\n          <label htmlFor=\"color-picker-input-text\">\n            <slot name=\"label\">Hex</slot>\n          </label>\n          <slot></slot>\n        </MarketInputTextTagName>\n      </Host>\n    );\n  }\n}\n"]}