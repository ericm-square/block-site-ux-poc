{"version":3,"file":"market-color-swatch.js","sourceRoot":"","sources":["../../../../../../src/components/market-color-picker/subcomponents/market-color-swatch/market-color-swatch.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AACvF,OAAO,EAAE,oBAAoB,EAAE,MAAM,sCAAsC,CAAC;AAO5E,MAAM,OAAO,iBAAiB;;qBAMsB,oBAAoB;;;wBASV,KAAK;;IAOjE,eAAe;QACb,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,OAAO;QACT,CAAC;QAED,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QACpC,MAAM,WAAW,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;QAElE,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEpF,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtB,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDACH,KAAK,EAAC,qBAAqB,EAC3B,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,EACrC,KAAK,EAAE,EAAE,gBAAgB,EAAE,IAAI,CAAC,KAAK,EAAE;YAEvC,4DAAK,KAAK,EAAC,cAAc,GAAO,CAC3B,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Prop, Element, Event, EventEmitter } from '@stencil/core';\nimport { CORE_BLUE_FILL_COLOR } from '@market/market-theme/js/cjs/index.js';\n\n@Component({\n  tag: 'market-color-swatch',\n  styleUrl: 'market-color-swatch.css',\n  shadow: true,\n})\nexport class MarketColorSwatch {\n  @Element() el: HTMLMarketColorSwatchElement;\n\n  /**\n   * Value representing the color of the swatch. This is a string that can represent any [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   */\n  @Prop({ reflect: true }) readonly value: string = CORE_BLUE_FILL_COLOR;\n\n  @Prop({ reflect: true }) readonly name: string;\n\n  @Prop({ reflect: true }) readonly disabled: boolean;\n\n  /**\n   * Whether the swatch is selected or not.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  /**\n   * Fired whenever the swatch selection state changes.\n   */\n  @Event({ cancelable: true }) marketColorSwatchSelectedChange: EventEmitter<{ value: string; selected: boolean }>;\n\n  toggleSelection() {\n    if (this.disabled) {\n      return;\n    }\n\n    const newSelection = !this.selected;\n    const swatchValue = { value: this.value, selected: newSelection };\n\n    const { defaultPrevented } = this.marketColorSwatchSelectedChange.emit(swatchValue);\n\n    if (!defaultPrevented) {\n      this.selected = newSelection;\n    }\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-color-swatch\"\n        role=\"listitem\"\n        onClick={() => this.toggleSelection()}\n        style={{ '--swatch-color': this.value }}\n      >\n        <div class=\"inner-circle\"></div>\n      </Host>\n    );\n  }\n}\n"]}