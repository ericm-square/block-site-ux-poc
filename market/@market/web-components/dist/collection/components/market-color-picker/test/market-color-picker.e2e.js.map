{"version":3,"file":"market-color-picker.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-color-picker/test/market-color-picker.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage, E2EPage, E2EElement, EventSpy } from '@stencil/core/testing';\n\nimport { CORE_RED_FILL_COLOR } from '@market/market-theme/js/cjs/index.js';\n\ndescribe('market-color-picker', () => {\n  let page: E2EPage;\n  let element: E2EElement;\n  let gradientElement: E2EElement;\n  let swatchListElement: E2EElement;\n  let inputElement: E2EElement;\n\n  let gradientChangeEvent: EventSpy;\n  let swatchChangeEvent: EventSpy;\n  let inputChangeEvent: EventSpy;\n  let colorPickerChangeEvent: EventSpy;\n\n  // Gradient related testing\n  let primaryGradient: E2EElement;\n\n  beforeEach(async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-color-picker>\n        <market-color-picker-gradient></market-color-picker-gradient>\n        <market-color-swatch-list></market-color-swatch-list>\n        <market-color-picker-input></market-color-picker-input>  \n      </market-color-picker>\n    `);\n\n    element = await page.find('market-color-picker');\n    gradientElement = await element.find('pierce/market-color-picker-gradient');\n    swatchListElement = await element.find('pierce/market-color-swatch-list');\n    inputElement = await element.find('pierce/market-color-picker-input');\n\n    gradientChangeEvent = await page.spyOnEvent('marketColorPickerGradientValueChange');\n    swatchChangeEvent = await page.spyOnEvent('marketColorSwatchListValueChange');\n    inputChangeEvent = await page.spyOnEvent('marketColorPickerInputValueChange');\n    colorPickerChangeEvent = await page.spyOnEvent('marketColorPickerValueChange');\n\n    // For gradient related tests\n    primaryGradient = await gradientElement.find('pierce/.primary-gradient');\n  });\n\n  it('renders', async () => {\n    expect(element).not.toBeNull();\n    expect(element).not.toHaveAttribute('value');\n\n    expect(gradientElement).not.toBeNull();\n    expect(gradientElement).not.toHaveAttribute('value');\n\n    expect(swatchListElement).not.toBeNull();\n    expect(swatchListElement).not.toHaveAttribute('value');\n\n    const swatchElements = await swatchListElement.findAll('market-color-swatch');\n    expect(swatchElements.length).toEqual(0);\n\n    expect(inputElement).not.toBeNull();\n    expect(inputElement).not.toHaveAttribute('value');\n  });\n\n  it('renders with a default value and saved swatch colors', async () => {\n    page = await newE2EPage();\n\n    await page.setContent(`\n      <market-color-picker value=\"#FFFFFF\">\n        <market-color-picker-gradient></market-color-picker-gradient>\n        <market-color-swatch-list>\n          <market-color-swatch value=\"rgb(204, 0, 35)\"></market-color-swatch>\n          <market-color-swatch value=\"rgb(255, 191, 0)\"></market-color-swatch>\n          <market-color-swatch value=\"rgb(0, 106, 255)\"></market-color-swatch>\n        </market-color-swatch-list>\n        <market-color-picker-input></market-color-picker-input>\n      </market-color-picker>\n    `);\n    element = await page.find('market-color-picker');\n    gradientElement = await element.find('pierce/market-color-picker-gradient');\n    swatchListElement = await element.find('pierce/market-color-swatch-list');\n    inputElement = await element.find('pierce/market-color-picker-input');\n\n    expect(await element.getProperty('value')).toEqual('#FFFFFF');\n\n    expect(await gradientElement.getProperty('value')).toEqual('#FFFFFF');\n\n    expect(swatchListElement).not.toBeNull();\n    expect(await swatchListElement.getProperty('value')).toEqual('#FFFFFF');\n    const swatchElements = await swatchListElement.findAll('market-color-swatch');\n    expect(swatchElements.length).toEqual(3);\n\n    expect(await inputElement.getProperty('value')).toEqual('#FFFFFF');\n  });\n\n  it('can render without gradient and input', async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-color-picker>\n        <market-color-swatch-list></market-color-swatch-list>\n      </market-color-picker>\n    `);\n    element = await page.find('market-color-picker');\n    gradientElement = await element.find('pierce/market-color-picker-gradient');\n    swatchListElement = await element.find('pierce/market-color-swatch-list');\n    inputElement = await element.find('pierce/market-color-picker-input');\n\n    expect(gradientElement).toBeNull();\n    expect(swatchListElement).not.toBeNull();\n    expect(inputElement).toBeNull();\n  });\n\n  it('can render without swatch list', async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-color-picker>\n        <market-color-picker-gradient></market-color-picker-gradient>\n        <market-color-picker-input></market-color-picker-input>  \n    </market-color-picker>\n    `);\n    element = await page.find('market-color-picker');\n    gradientElement = await element.find('pierce/market-color-picker-gradient');\n    swatchListElement = await element.find('pierce/market-color-swatch-list');\n    inputElement = await element.find('pierce/market-color-picker-input');\n\n    expect(gradientElement).not.toBeNull();\n    expect(swatchListElement).toBeNull();\n    expect(inputElement).not.toBeNull();\n  });\n\n  it('updates the input value when the gradient is updated', async () => {\n    expect(inputElement).not.toHaveAttribute('value');\n    expect(gradientChangeEvent).not.toHaveReceivedEvent();\n    expect(colorPickerChangeEvent).not.toHaveReceivedEvent();\n\n    primaryGradient.click();\n    await page.waitForChanges();\n\n    expect(inputElement).toHaveAttribute('value');\n\n    expect(gradientChangeEvent).toHaveReceivedEvent();\n    expect(swatchChangeEvent).not.toHaveReceivedEvent();\n    expect(inputChangeEvent).not.toHaveReceivedEvent();\n    expect(colorPickerChangeEvent).toHaveReceivedEvent();\n  });\n\n  describe('when interacting with swatches', () => {\n    beforeEach(async () => {\n      page = await newE2EPage();\n\n      await page.setContent(`\n        <market-color-picker>\n          <market-color-picker-gradient></market-color-picker-gradient>\n          <market-color-swatch-list>\n            <market-color-swatch value=\"rgb(204, 0, 35)\"></market-color-swatch>\n            <market-color-swatch value=\"rgb(255, 191, 0)\"></market-color-swatch>\n            <market-color-swatch value=\"rgb(0, 106, 255)\"></market-color-swatch>\n          </market-color-swatch-list>\n          <market-color-picker-input></market-color-picker-input>  \n        </market-color-picker>\n      `);\n\n      element = await page.find('market-color-picker');\n      gradientElement = await element.find('pierce/market-color-picker-gradient');\n      swatchListElement = await element.find('pierce/market-color-swatch-list');\n      inputElement = await element.find('pierce/market-color-picker-input');\n\n      gradientChangeEvent = await page.spyOnEvent('marketColorPickerGradientValueChange');\n      swatchChangeEvent = await page.spyOnEvent('marketColorSwatchListValueChange');\n      inputChangeEvent = await page.spyOnEvent('marketColorPickerInputValueChange');\n      colorPickerChangeEvent = await page.spyOnEvent('marketColorPickerValueChange');\n    });\n\n    it('updates the gradient selection and input selection when swatch is selected', async () => {\n      expect(inputElement).not.toHaveAttribute('value');\n      expect(gradientElement).not.toHaveAttribute('value');\n\n      expect(gradientChangeEvent).not.toHaveReceivedEvent();\n      expect(swatchChangeEvent).not.toHaveReceivedEvent();\n      expect(inputChangeEvent).not.toHaveReceivedEvent();\n      expect(colorPickerChangeEvent).not.toHaveReceivedEvent();\n\n      const swatchList = await swatchListElement.findAll('market-color-swatch');\n      const redSwatch = swatchList[0];\n\n      expect(swatchList.length).toBe(3);\n      expect(redSwatch).not.toBeNull();\n\n      redSwatch.click();\n      await page.waitForChanges();\n\n      // The CORE_RED_FILL_COLOR gets converted to hex for the input, which should be '#cc0023'\n      const RED_COLOR_HEX = '#cc0023';\n\n      expect(inputElement).toEqualAttribute('value', RED_COLOR_HEX);\n      expect(await gradientElement.getProperty('value')).toEqual(CORE_RED_FILL_COLOR);\n\n      expect(gradientChangeEvent).not.toHaveReceivedEvent();\n      expect(swatchChangeEvent).toHaveReceivedEvent();\n      expect(inputChangeEvent).not.toHaveReceivedEvent();\n      expect(colorPickerChangeEvent).toHaveReceivedEvent();\n    });\n\n    it('clears input when swatch is deselected', async () => {\n      const swatchList = await swatchListElement.findAll('market-color-swatch');\n      const redSwatch = swatchList[0];\n\n      redSwatch.click();\n      await page.waitForChanges();\n\n      redSwatch.click();\n      await page.waitForChanges();\n\n      expect(inputElement).toEqualAttribute('value', '');\n      expect(await gradientElement.getProperty('value')).toEqual('');\n    });\n  });\n\n  it('updates gradient when input is typed in', async () => {\n    const inputTextElement = await inputElement.find('pierce/market-input-text');\n    const innerInput = await inputTextElement.find('pierce/input');\n    expect(innerInput).not.toBeNull();\n\n    await innerInput.type('#aff');\n    await page.waitForChanges();\n\n    const updatedInputElement = await element.find('pierce/market-color-picker-input');\n    const updatedGradientElement = await element.find('pierce/market-color-picker-gradient');\n\n    expect(updatedInputElement).toEqualAttribute('value', '#aff');\n    expect(await updatedGradientElement.getProperty('value')).toEqual('#aff');\n\n    expect(gradientChangeEvent).not.toHaveReceivedEvent();\n    expect(inputChangeEvent).toHaveReceivedEvent();\n    expect(colorPickerChangeEvent).toHaveReceivedEvent();\n  });\n});\n"]}