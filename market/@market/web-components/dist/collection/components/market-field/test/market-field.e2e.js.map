{"version":3,"file":"market-field.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-field/test/market-field.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage } from '@stencil/core/testing';\n\ndescribe('market-field', () => {\n  describe('with market-input-text', () => {\n    let page;\n\n    it('should render with defaults', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n      <market-field name=\"test field\">\n        <market-input-text></market-input-text>\n        <small slot=\"bottom-accessory\">This is supposedly helpful <a href=\"#\">text</a>.</small>\n        <small slot=\"error\">You did something wrong, friend.</small>\n        <button slot=\"action\">Do the thing.</button>\n      </market-field>\n      `);\n\n      const field = await page.find('market-field');\n      const input = await field.find('pierce/input');\n\n      expect(field).not.toBeNull();\n      expect(field).toEqualAttribute('name', 'test field');\n      expect(field).not.toHaveAttribute('disabled');\n      expect(field).not.toHaveAttribute('focused');\n      expect(field).not.toHaveAttribute('invalid');\n      expect(field).not.toHaveAttribute('readonly');\n\n      expect(input).not.toBeNull();\n      expect(input).toEqualAttribute('name', 'test field');\n      expect(input).not.toHaveAttribute('disabled');\n      expect(input).not.toHaveAttribute('focused');\n      expect(input).not.toHaveAttribute('invalid');\n      expect(input).not.toHaveAttribute('readonly');\n\n      const slots = await field.shadowRoot.querySelectorAll('slot');\n\n      // Should only have the input, bottom accessory, and action slots\n      expect(slots.length).toEqual(3);\n      const [inputSlot, bottomAccessorySlot, actionSlot] = slots;\n\n      expect(inputSlot).not.toHaveAttribute('name');\n      expect(inputSlot).toEqualHtml('<slot></slot>');\n\n      expect(bottomAccessorySlot).toEqualAttribute('name', 'bottom-accessory');\n      expect(bottomAccessorySlot).toEqualHtml('<slot name=\"bottom-accessory\"></slot>');\n\n      expect(actionSlot).toEqualAttribute('name', 'action');\n      expect(actionSlot).toEqualHtml('<slot name=\"action\"></slot>');\n    });\n\n    it('should render with default aria-describedby and ids', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n      <market-field invalid>\n        <market-input-text></market-input-text>\n        <small slot=\"bottom-accessory\">This is supposedly helpful <a href=\"#\">text</a>.</small>\n        <small slot=\"error\">You did something wrong, friend.</small>\n        <button slot=\"action\">Do the thing.</button>\n      </market-field>\n      `);\n\n      const field = await page.find('market-field');\n      const input = await field.find('market-input-text');\n\n      const inputDescribedBys = input.getAttribute('aria-describedby').split(' ');\n      expect(inputDescribedBys[0]).toMatch(/-error/);\n      expect(inputDescribedBys[1]).toMatch(/-bottom-accessory/);\n\n      const errorSlot = await field.querySelector('small[slot=\"error\"]');\n      expect(errorSlot.id).toMatch(/-error/);\n      expect(errorSlot.id).toEqual(inputDescribedBys[0]);\n\n      const bottomAccessorySlot = await field.querySelector('small[slot=\"bottom-accessory\"]');\n      expect(bottomAccessorySlot.id).toMatch(/-bottom-accessory/);\n      expect(bottomAccessorySlot.id).toEqual(inputDescribedBys[1]);\n    });\n\n    it('should not show an error message when not invalid', async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n      <market-field>\n        <market-input-text></market-input-text>\n        <small slot=\"bottom-accessory\">This is supposedly helpful <a href=\"#\">text</a>.</small>\n        <small slot=\"error\">You did something wrong, friend.</small>\n      </market-field>\n      `);\n\n      const field = await page.find('market-field');\n      const slots = await field.shadowRoot.querySelectorAll('slot');\n\n      // Should only have the input, bottom-accessory, and action slots\n      expect(slots.length).toEqual(3);\n      expect(slots[0]).not.toHaveAttribute('name');\n      expect(slots[1]).toEqualAttribute('name', 'bottom-accessory');\n      expect(slots[2]).toEqualAttribute('name', 'action');\n    });\n\n    describe('with the invalid property', () => {\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n        <market-field invalid>\n          <market-input-text></market-input-text>\n          <small slot=\"bottom-accessory\">This is supposedly helpful <a href=\"#\">text</a>.</small>\n          <small slot=\"error\">You did something wrong, friend.</small>\n        </market-field>\n        `);\n      });\n\n      it('should have invalid attributes on field and input-text when an invalid field is passed in', async () => {\n        const field = await page.find('market-field');\n        const input = await page.find('market-input-text');\n\n        expect(field).toHaveAttribute('invalid');\n        expect(input).toHaveAttribute('invalid');\n      });\n    });\n\n    describe('with the readonly property', () => {\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n        <market-field readonly>\n          <market-input-text></market-input-text>\n          <small slot=\"bottom-accessory\">This is supposedly helpful <a href=\"#\">text</a>.</small>\n          <small slot=\"error\">You did something wrong, friend.</small>\n        </market-field>\n        `);\n      });\n\n      it('should have readonly attributes on field and input when readonly is passed to field', async () => {\n        const field = await page.find('market-field');\n        const input = await page.find('market-input-text');\n\n        expect(field).toHaveAttribute('readonly');\n        expect(input).toHaveAttribute('readonly');\n      });\n    });\n\n    describe('with the disabled property', () => {\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n        <market-field disabled invalid>\n          <market-input-text></market-input-text>\n          <small slot=\"bottom-accessory\">This is supposedly helpful <a href=\"#\">text</a>.</small>\n          <small slot=\"error\">You did something wrong, friend.</small>\n        </market-field>\n        `);\n      });\n\n      it('should have disabled attributes on field and input when an disabled field is passed in', async () => {\n        const field = await page.find('market-field');\n        const input = await page.find('market-input-text');\n\n        expect(field).toHaveAttribute('disabled');\n        expect(input).toHaveAttribute('disabled');\n      });\n\n      it('should not show error messages when disabled and invalid', async () => {\n        const field = await page.find('market-field');\n        const slots = await field.shadowRoot.querySelectorAll('slot');\n\n        // Should only have the input, bottom accessory, action slots\n        expect(slots.length).toEqual(3);\n        expect(slots[0]).not.toHaveAttribute('name');\n        expect(slots[1]).toEqualAttribute('name', 'bottom-accessory');\n        expect(slots[2]).toEqualAttribute('name', 'action');\n      });\n    });\n  });\n\n  describe('with market-select', () => {\n    let page;\n\n    describe('with the invalid property', () => {\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n        <market-field invalid>\n          <market-select>\n            <label>Label</label>\n            <market-list slot=\"list\">\n              <market-row value=\"apple\">Apple</market-row>\n              <market-row value=\"orange\">Orange</market-row>\n              <market-row value=\"pear\">Pear</market-row>\n            </market-list>\n          </market-select>\n        </market-field>\n        `);\n      });\n\n      it('should have invalid attributes on field and input-text when market-field is invalid', async () => {\n        const field = await page.find('market-field');\n        const input = await page.find('market-select');\n\n        expect(field).toHaveAttribute('invalid');\n        expect(input).toHaveAttribute('invalid');\n      });\n    });\n\n    describe('with the readonly property', () => {\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n        <market-field readonly>\n          <market-select>\n            <label>Label</label>\n            <market-list slot=\"list\">\n              <market-row value=\"apple\">Apple</market-row>\n              <market-row value=\"orange\">Orange</market-row>\n              <market-row value=\"pear\">Pear</market-row>\n            </market-list>\n          </market-select>\n        </market-field>\n        `);\n      });\n\n      it('should have readonly attributes on field and input when market-field is readonly', async () => {\n        const field = await page.find('market-field');\n        const input = await page.find('market-select');\n\n        expect(field).toHaveAttribute('readonly');\n        expect(input).toHaveAttribute('readonly');\n      });\n    });\n\n    describe('with the disabled property', () => {\n      beforeEach(async () => {\n        page = await newE2EPage();\n        await page.setContent(`\n        <market-field disabled>\n          <market-select>\n            <label>Label</label>\n            <market-list slot=\"list\">\n              <market-row value=\"apple\">Apple</market-row>\n              <market-row value=\"orange\">Orange</market-row>\n              <market-row value=\"pear\">Pear</market-row>\n            </market-list>\n          </market-select>\n        </market-field>\n        `);\n      });\n\n      it('should have disabled attributes on field and input when market-field is disabled', async () => {\n        const field = await page.find('market-field');\n        const input = await page.find('market-select');\n\n        expect(field).toHaveAttribute('disabled');\n        expect(input).toHaveAttribute('disabled');\n      });\n    });\n  });\n});\n"]}