{"version":3,"file":"market-field.js","sourceRoot":"","sources":["../../../../src/components/market-field/market-field.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, Element, Host, h } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * @slot - The form input, ex. market-input-text.\n * @slot error - Optional error text for the block, displayed below the input when invalid.\n * @slot bottom-accessory - Optional content for the block, displayed below the input.\n * @slot action - Optional action component for the block, displayed below the input.\n */\n@Component({\n  tag: 'market-field',\n  shadow: true,\n  styleUrl: 'market-field.css',\n})\nexport class MarketField {\n  @Element() el: HTMLMarketFieldElement;\n\n  /**\n   * A string specifying a name for the field.\n   */\n  @Prop({ reflect: true }) readonly name: string;\n\n  /**\n   * A boolean representing whether the field is readonly or not.\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean = false;\n\n  /**\n   * A boolean representing whether the field is disabled or not.\n   * This visually and functionally will disable the field.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * A boolean representing whether the field is invalid or not.\n   * This represents error states.\n   */\n  @Prop({ reflect: true }) readonly invalid: boolean = false;\n\n  errorSlotId: string = uuid();\n\n  getSlottedInputs() {\n    const supportedInputTags = [\n      getNamespacedTagFor('market-input-text'),\n      getNamespacedTagFor('market-input-password'),\n      getNamespacedTagFor('market-select'),\n      getNamespacedTagFor('market-textarea'),\n      getNamespacedTagFor('market-code-input'),\n    ];\n\n    // create flattened array of slotted supported input elements based on tag name\n    const slottedInputElements = supportedInputTags.flatMap((tag) => {\n      return [\n        ...(this.el.getElementsByTagName(tag) as HTMLCollectionOf<\n          | HTMLMarketInputTextElement\n          | HTMLMarketInputPasswordElement\n          | HTMLMarketSelectElement\n          | HTMLMarketTextareaElement\n          | HTMLMarketCodeInputElement\n        >),\n      ];\n    });\n\n    return slottedInputElements;\n  }\n\n  getErrorSlot() {\n    return this.el.querySelector('[slot=\"error\"]');\n  }\n\n  getBottomAccessorySlot() {\n    return this.el.querySelector('[slot=\"bottom-accessory\"]');\n  }\n\n  getInputElAriaDescribedby() {\n    const describedBy = [];\n\n    if (this.getErrorSlot()) {\n      describedBy.push(`${this.errorSlotId}-error`);\n    }\n\n    if (this.getBottomAccessorySlot()) {\n      describedBy.push(`${this.errorSlotId}-bottom-accessory`);\n    }\n\n    return describedBy.join(' ');\n  }\n\n  handleErrorAttributes() {\n    const errorSlotEl = this.getErrorSlot();\n    if (errorSlotEl) {\n      errorSlotEl.setAttribute('role', 'alert');\n      errorSlotEl.setAttribute('id', `${this.errorSlotId}-error`);\n    }\n  }\n\n  handleBottomAccessoryAttributes() {\n    const bottomAccessorySlotEl = this.getBottomAccessorySlot();\n    if (bottomAccessorySlotEl) {\n      bottomAccessorySlotEl.setAttribute('id', `${this.errorSlotId}-bottom-accessory`);\n    }\n  }\n\n  render() {\n    // check for slotted supported market inputs and pass properties down\n    this.getSlottedInputs().forEach((input) => {\n      input.name = this.name;\n      input.disabled = this.disabled;\n      input.invalid = this.invalid;\n      input.readonly = this.readonly;\n\n      const inputElAriaDescribedby = this.getInputElAriaDescribedby();\n      if (inputElAriaDescribedby) {\n        input.setAttribute('aria-describedby', inputElAriaDescribedby);\n      }\n    });\n\n    return (\n      <Host class=\"market-field\">\n        <slot></slot>\n\n        {this.invalid && !this.disabled && (\n          // slot relocation broke in @stencil/core@1.13.0\n          // wrapping a slot in a shadowless div as a workaround\n          // this should be fixed in 2.1.1\n          <div>\n            <slot name=\"error\" onSlotchange={() => this.handleErrorAttributes()}></slot>\n          </div>\n        )}\n        <slot name=\"bottom-accessory\" onSlotchange={() => this.handleBottomAccessoryAttributes()}></slot>\n        <slot name=\"action\"></slot>\n      </Host>\n    );\n  }\n}\n"]}