{"version":3,"file":"market-context-manager.js","sourceRoot":"","sources":["../../../../src/components/market-context-manager/market-context-manager.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, Method, Element, State, Prop, Event, EventEmitter, Listen, h } from '@stencil/core';\n\nimport { DialogElement } from '../../utils/dialog';\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { asyncRequestAnimationFrame } from '../../utils/raf';\n\n@Component({\n  tag: 'market-context-manager',\n  styleUrl: 'market-context-manager.css',\n  shadow: true,\n})\nexport class MarketContextManager {\n  @Element() el: HTMLMarketContextManagerElement;\n\n  /**\n   * Whether or not the context manager is UI blocking\n   */\n  @Prop({ mutable: true, reflect: true }) active: boolean = false;\n\n  @State() currentContext: HTMLMarketContextElement;\n  @State() stack: Array<HTMLMarketContextElement> = [];\n\n  mouseDownEl: HTMLElement;\n\n  childListObserver: MutationObserver;\n\n  /**\n   * Emitted when the context manager is activated/blocking is turned on\n   */\n  @Event() marketContextManagerActivated: EventEmitter;\n\n  /**\n   * Emitted when the context manager is deactivated/blocking is turned off\n   */\n  @Event() marketContextManagerDeactivated: EventEmitter;\n\n  initChildListObserver() {\n    if (this.childListObserver) return;\n\n    const updateChildList = () => {\n      this.stack = [...this.el.children] as HTMLMarketContextElement[];\n      this.currentContext = this.stack.length > 0 ? this.stack[this.stack.length - 1] : null;\n    };\n\n    updateChildList();\n    this.childListObserver = new MutationObserver(updateChildList);\n    this.childListObserver.observe(this.el, { childList: true });\n  }\n\n  async getCurrentContext() {\n    while (!this.currentContext) {\n      await asyncRequestAnimationFrame();\n    }\n    return this.currentContext;\n  }\n\n  @Listen('marketContextEmptied')\n  contextEmptiedEventHandler({ target: emptiedContext }) {\n    // Remove the emptied context from the DOM\n    emptiedContext.remove();\n\n    // Remove the emptied context from the stack\n    this.stack.splice(this.stack.indexOf(emptiedContext), 1);\n\n    // Set the currentContext to the next highest context or null if this was the\n    // only context in the stack\n\n    if (this.stack.length === 0) {\n      this.deactivate();\n    }\n  }\n\n  @Listen('keydown', { target: 'window' })\n  windowKeydown(e: KeyboardEvent) {\n    if (e.key === 'Escape' || e.key === 'Esc') {\n      this.currentContext?.currentDialog.el.dismiss({ origin: this.el });\n    }\n  }\n\n  /**\n   * Adds the passed dialogEl to the DOM and creates a new context if necessary or according to\n   * `shouldCreateNewContext` if it is passed\n   */\n  @Method()\n  async open(dialogEl: DialogElement, shouldCreateNewContext?: boolean) {\n    let createNewContext = shouldCreateNewContext;\n    if (!this.currentContext || dialogEl) {\n      createNewContext = true;\n    }\n\n    // If we don't currently have a context, or we're opening certain types of\n    // dialogs, then we should create a new context\n    if (createNewContext) {\n      this.createNewContext();\n    }\n\n    await this.currentContext.open(dialogEl);\n  }\n\n  /**\n   * Closes the dialog with matching ID\n   */\n  @Method()\n  close(dialogID?: string) {\n    this.currentContext.close(dialogID);\n    return Promise.resolve();\n  }\n\n  /**\n   * Adds a new market-context to the stack in the DOM and activates it\n   */\n  @Method()\n  createNewContext() {\n    this.activate();\n\n    this.el.appendChild(document.createElement(getNamespacedTagFor('market-context')) as HTMLMarketContextElement);\n    this.currentContext = this.el.lastElementChild as HTMLMarketContextElement;\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Hides the entire context manager\n   */\n  @Method()\n  deactivate() {\n    this.active = false;\n    this.marketContextManagerDeactivated.emit();\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Shows the context manager\n   */\n  @Method()\n  activate() {\n    if (!this.active) {\n      this.active = true;\n      this.marketContextManagerActivated.emit();\n    }\n    return Promise.resolve();\n  }\n\n  handleMouseEvents(e) {\n    // checking to make sure the click started and ended on a market-context\n    // with a veil before dismissing the current dialog\n    // (clicks pass through contexts w/o veil, currently only used w/ market-blade)\n    if (e.type === 'mousedown') {\n      this.mouseDownEl = e.target.tagName;\n    } else if (e.type === 'mouseup') {\n      const mouseUpEl = e.target.tagName;\n      if (\n        this.mouseDownEl === mouseUpEl &&\n        e.target.tagName.toLowerCase() === getNamespacedTagFor('market-context') &&\n        !e.target.classList.contains('no-veil')\n      ) {\n        this.currentContext?.currentDialog?.el.dismiss({ origin: this.el });\n      }\n    }\n  }\n\n  componentDidLoad() {\n    this.initChildListObserver();\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-context-manager\"\n        onMouseDown={(e) => this.handleMouseEvents(e)}\n        onMouseUp={(e) => this.handleMouseEvents(e)}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.childListObserver?.disconnect();\n  }\n}\n"]}