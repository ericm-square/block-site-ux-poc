{"version":3,"file":"market-filter.js","sourceRoot":"","sources":["../../../../src/components/market-filter/market-filter.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC9G,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACpD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAGnE,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AASpD;;;;GAIG;AAMH,MAAM,OAAO,YAAY;;;;uBAgBoC,KAAK;oBAKpB,QAAQ;wBAKQ,KAAK;;gCAiBjB,cAAc;+BAQN,UAAU;;;IAiElE;;;;OAIG;IAEH,KAAK,CAAC,aAAa;QACjB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IAEH,KAAK,CAAC,QAAQ,CAAC,QAAiB,IAAI;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACzD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;;;OAQG;IAEH,KAAK,CAAC,qBAAqB,CAAC,KAAwB;;QAClD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,SAAS,GAAG,MAAA,IAAI,CAAC,MAAM,0CAAE,KAAK,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC;YACnC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,SAAS,EAAE,SAAS,IAAI,IAAI;YAC5B,KAAK;SACN,CAAC,CAAC;QACH,IAAI,CAAC,iCAAiC,EAAE,CAAC;QACzC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;;;;;OAQG;IAEH,KAAK,CAAC,2BAA2B,CAAC,KAAmC;QACnE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC;QAC1D,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;QACtD,MAAM,SAAS,GAAI,KAAsC,aAAtC,KAAK,uBAAL,KAAK,CAAmC,SAAS,CAAC;QACrE,MAAM,OAAO,GAAI,KAAsC,aAAtC,KAAK,uBAAL,KAAK,CAAmC,OAAO,CAAC;QACjE,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,SAAS,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,eAAe,GAAG,OAAO,CAAC;QAC5C,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC;YACnC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,SAAS,EAAE;gBACT,SAAS,EAAE,aAAa;gBACxB,OAAO,EAAE,WAAW;aACrB;YACD,KAAK,EAAE;gBACL,SAAS;gBACT,OAAO;aACR;SACF,CAAC,CAAC;QACH,IAAI,CAAC,iCAAiC,EAAE,CAAC;QACzC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IAEH,yBAAyB,CAAC,EAAE,MAAM,EAA0D;;QAC1F,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;QAE1C,MAAM,SAAS,GACb,MAAM,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QACrG,MAAM,KAAK,GAAG,CAAC,GAAG,EAAE;YAClB,IAAI,MAAM,CAAC,sBAAsB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC/C,OAAO,IAAI,CAAC;YACd,CAAC;iBAAM,IAAI,MAAM,CAAC,sBAAsB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACtD,OAAO,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAW,CAAC;YACpD,CAAC;YACD,OAAO,MAAM,CAAC,sBAAkC,CAAC;QACnD,CAAC,CAAC,EAAE,CAAC;QACL,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEtB,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC;YACnC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,SAAS,EAAE,SAAS,IAAI,IAAI;YAC5B,KAAK;SACN,CAAC,CAAC;QAEH;;;WAGG;QACH,IAAI,CAAC,CAAA,MAAA,IAAI,CAAC,MAAM,0CAAE,WAAW,CAAA,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3D,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxB,CAAC;IACH,CAAC;IAED;;OAEG;IAEH,qBAAqB,CAAC,CAAkD;QACtE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC;QACpE,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC;QAErC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC;YACnC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,SAAS,EAAE;gBACT,SAAS,EAAE,aAAa;gBACxB,OAAO,EAAE,WAAW;aACrB;YACD,KAAK,EAAE;gBACL,SAAS;gBACT,OAAO;aACR;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IAEH,oBAAoB,CAAC,CAAoB;QACvC,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE;YAAE,OAAO;QAEjC,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzE,IAAI,gBAAgB,EAAE,CAAC;YACrB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,yCAAyC;QACzC,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,gBAAgB,EAAE,CAAC;YACpD,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC;IACH,CAAC;IAED;;OAEG;IAEH,oBAAoB,CAAC,CAAoB;QACvC,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE;YAAE,OAAO;QAEjC,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1E,IAAI,gBAAgB,EAAE,CAAC;YACrB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,yCAAyC;QACzC,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,gBAAgB,EAAE,CAAC;YACpD,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC9B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,uBAAuB;QACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACrF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;QACxE,MAAM,MAAM,GAAG,WAAW,IAAI,EAAE,EAAE,CAAC;QAEnC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC;gBAC1B,IAAI,CAAC,YAAY,CAAC,EAAE,GAAG,MAAM,CAAC;gBAC9B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YACxC,CAAC;YACD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACzB,IAAI,CAAC,iCAAiC,EAAE,CAAC;QAC3C,CAAC;aAAM,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACvB,yCAAyC;YACzC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;gBAC7B,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;YACjC,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC;gBACxB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAClC,CAAC;YACD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACzB,IAAI,CAAC,iCAAiC,EAAE,CAAC;QAC3C,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,gBAAgB;QACtB;;;;WAIG;QACH,MAAM,cAAc,GAAG,CAAC,GAAyB,EAAE,EAAE;YACnD,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACrE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC;QAEF,MAAM,IAAI,GAAqC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CACrE,GAAG,mBAAmB,CAAC,aAAa,CAAC,IAAI,mBAAmB,CAAC,YAAY,CAAC,EAAE,CAC7E,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACnB,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;YACjE,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,4BAA4B,CAAC,KAA2B;QAC9D,MAAM,YAAY,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,YAAY,WAAW,KAAK,mBAAmB,CAAqB,CAAC;QAClH,OAAO,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAC;IAC9B,CAAC;IAED;;OAEG;IACK,iCAAiC;QACvC,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QACvE,MAAM,eAAe,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;QAChD,IAAI,eAAe,EAAE,CAAC;YACpB,IAAI,CAAC,oBAAoB,GAAG,cAAc,CAAC,WAAW,CAAC;YACvD,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACvB,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;gBACtC,OAAO;YACT,CAAC;YACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAElC,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;gBAC5B,0EAA0E;gBAC1E,MAAM,UAAU,GAAG,CAAC,GAAG,EAAE;oBACvB,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;wBAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;oBAC7C,CAAC;yBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;wBAC5C,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;oBAClC,CAAC;oBACD,OAAO,SAAS,CAAC,CAAC,mEAAmE;gBACvF,CAAC,CAAC,EAAE,CAAC;gBACL,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;oBACnB,IAAI,CAAC,oBAAoB,GAAG,GAAG,UAAU,EAAE,CAAC;oBAC5C,OAAO;gBACT,CAAC;YACH,CAAC;YACD,6EAA6E;YAC7E,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnF,CAAC;aAAM,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YAC7B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC1C,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,iBAAiB;gBAC9C,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,eAAe;aAC3C,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEO,UAAU,CAAC,EAAE,SAAS,EAAE,OAAO,EAAgC;;QACrE,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC1D,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACpD,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,EAAE,CAAC;YACnB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;QAExC,2FAA2F;QAC3F,MAAM,wBAAwB,GAAG,OAAO,CAAC,KAAK,IAAI,GAAG,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;QACpG,MAAM,eAAe,GACnB,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,kBAAkB,CACvB,MAAM,EACN,wBAAwB,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAChG,mCAAI,EAAE,CAAC;QACV,MAAM,aAAa,GAAG,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,kBAAkB,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,mCAAI,EAAE,CAAC;QAEpF,OAAO,GAAG,eAAe,GAAG,aAAa,CAAC,CAAC,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACK,4BAA4B,CAAC,CAAkD;;QACrF,MAAM,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC;QACnC,IAAI,aAAa,KAAK,eAAe,CAAC,MAAM,EAAE,CAAC;YAC7C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC;aAAM,IAAI,aAAa,EAAE,CAAC;YACzB,uCAAuC;YACvC,MAAM,qBAAqB,GAAG,MAAA,MAAA,MAAA,MAAA,IAAI,CAAC,YAAY,0CAAE,UAAU,0CACvD,aAAa,CAAC,GAAG,mBAAmB,CAAC,yBAAyB,CAAC,eAAe,aAAa,IAAI,CAAC,0CAChG,WAAW,0CAAE,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,oBAAoB,GAAG,qBAAqB,CAAC;QACpD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,4BAA4B,CAAC,EACnC,sBAAsB,EACtB,iBAAiB,GACyB;QAC1C,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QACvE,MAAM,eAAe,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;QAChD,IAAI,eAAe,EAAE,CAAC;YACpB,IAAI,CAAC,oBAAoB,GAAG,cAAc,CAAC,WAAW,CAAC;YACvD,OAAO;QACT,CAAC;QAED,IAAI,CAAC,CAAA,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,MAAM,CAAA,EAAE,CAAC;YACpC,eAAe;YACf,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;QACxC,CAAC;aAAM,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7C,yCAAyC;YACzC,IAAI,CAAC,oBAAoB,GAAG,GAAG,sBAAsB,CAAC,MAAM,EAAE,CAAC;QACjE,CAAC;aAAM,CAAC;YACN,8DAA8D;YAC9D,MAAM,OAAO,GAAI,iBAAiB,CAAC,CAAC,CAA0B,CAAC,aAAa,CAC1E,gBAAgB,CACG,CAAC;YACtB,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,WAAW,CAAC;QAClD,CAAC;IACH,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,MAAM;;QACJ,MAAM,EACJ,YAAY,EACZ,QAAQ,EACR,mBAAmB,EACnB,QAAQ,EACR,uBAAuB,EACvB,MAAM,EACN,SAAS,EACT,gBAAgB,EAChB,eAAe,EACf,oBAAoB,EACpB,IAAI,GACL,GAAG,IAAI,CAAC;QAET;;;;;WAKG;QACH,MAAM,iBAAiB,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,mCAAI,KAAK,CAAC;QACvD,MAAM,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;QAC5C,MAAM,WAAW,GAAG,mBAAmB,aAAnB,mBAAmB,cAAnB,mBAAmB,GAAI,CAAC,aAAa,IAAI,iBAAiB,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAE3G,MAAM,qBAAqB,GAAG,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;QACrE,MAAM,oBAAoB,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,yBAAyB,GAAG,mBAAmB,CAAC,sBAAsB,CAAC,CAAC;QAE9E,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,eAAe;YACzB,EAAC,qBAAqB,qDACpB,KAAK,EAAC,UAAU,EAChB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,WAAW,EACxB,gBAAgB,EAAE,gBAAgB,EAClC,eAAe,EAAE,eAAe;gBAEhC,EAAC,yBAAyB,qDACxB,MAAM,EAAE,QAAQ,EAChB,KAAK,EAAC,eAAe,EACrB,QAAQ,EAAE,QAAQ,EAClB,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC,EACvC,IAAI,EAAC,SAAS,EACd,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,SAAS;oBAEpB,6DAAM,IAAI,EAAC,OAAO,GAAQ;oBACzB,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CACtC,6DAAM,IAAI,EAAC,UAAU;wBACnB,6DAAM,IAAI,EAAC,eAAe,IAAE,oBAAoB,CAAQ,CACnD,CACR,CACyB;gBAC5B,EAAC,oBAAoB,qDAAC,KAAK,EAAE,UAAU,CAAC,EAAE,cAAc,EAAE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAC,SAAS,EAAC,EAAE,EAAE,SAAS;oBACtG,6DAAM,YAAY,EAAE,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAS;oBAK/D,6DAAM,IAAI,EAAC,MAAM,EAAC,YAAY,EAAE,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAS,CACtD,CACD,CACnB,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import type { Placement, PositioningStrategy } from '@popperjs/core';\nimport { Component, Element, Event, EventEmitter, Host, h, Listen, Method, Prop, State } from '@stencil/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { classNames } from '../../utils/classnames';\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { MENU_SLOT_NAMES } from '../market-date-picker/enums/menu';\nimport { TMarketDateRangeChangedEventDetail } from '../market-date-picker/events';\nimport { TMarketListSelectionsDidChangeEventDetail } from '../market-list/events';\nimport { isValueEmpty } from '../market-list/utils';\n\nimport {\n  TMarketFilterDateRangeValues,\n  TMarketFilterExpandedChangeEventDetail,\n  TMarketFilterValueDidChangeEventDetail,\n} from './events';\nimport { TMarketFilterType } from './types';\n\n/**\n * @slot label - Filter label, using `<label>`\n * @slot display-value - Overwrites the displayed value or feedback\n * @slot - The `<market-list>` or `<market-date-picker>` element\n */\n@Component({\n  tag: 'market-filter',\n  styleUrl: 'market-filter.css',\n  shadow: true,\n})\nexport class MarketFilter {\n  @Element() el: HTMLMarketFilterElement;\n\n  /**\n   * Filter name\n   */\n  @Prop() readonly name!: string;\n\n  /**\n   * Functionally and visually disables the filter button\n   */\n  @Prop() readonly disabled?: boolean;\n\n  /**\n   * Whether or not the button is focused\n   */\n  @Prop({ reflect: true, mutable: true }) focused: boolean = false;\n\n  /**\n   * String for setting filter button size\n   */\n  @Prop() readonly size: 'medium' | 'small' = 'medium';\n\n  /**\n   * Determines whether the filter is expanded or collapsed\n   */\n  @Prop({ mutable: true, reflect: true }) expanded: boolean = false;\n\n  /**\n   * Defines what types of interaction the dropdown should have\n   * (see `market-dropdown` docs for more granular explanation).\n   *\n   * If not defined and the list is multiselect,\n   * the dropdown interaction will be set to `persistent`\n   * so that the dropdown won't automatically close after selecting a row.\n   */\n  @Prop() readonly dropdownInteraction?: HTMLMarketDropdownElement['interaction'];\n\n  /**\n   * Configuration option for Popper.js (used to position `<market-popover>`).\n   * Describes the positioning strategy to use. By default, it is `bottom-start`.\n   * https://popper.js.org/docs/v2/constructors/#strategy\n   */\n  @Prop() readonly popoverPlacement?: Placement = 'bottom-start';\n\n  /**\n   * Configuration option for Popper.js (used to position `<market-popover>`).\n   * Describes the positioning strategy to use. By default, it is absolute. If\n   * your reference element is in a fixed container, use the fixed strategy.\n   * https://popper.js.org/docs/v2/constructors//#strategy\n   */\n  @Prop() readonly popoverStrategy: PositioningStrategy = 'absolute';\n\n  /**\n   * @deprecated\n   * **DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.\n   *\n   * Fired whenever the filter is closed\n   */\n  @Event({ bubbles: true, composed: true }) marketFilterClosed: EventEmitter<void>;\n\n  /**\n   * @deprecated\n   * **DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.\n   *\n   * Fired whenever the filter is opened\n   */\n  @Event({ bubbles: true, composed: true }) marketFilterOpened: EventEmitter<void>;\n\n  /**\n   * Fired whenever the dropdown is expanded/collapsed\n   */\n  @Event({ bubbles: true, composed: true })\n  marketFilterExpandedChanged: EventEmitter<TMarketFilterExpandedChangeEventDetail>;\n\n  /**\n   * Fired by the `marketListSelectionsDidChange` listener.\n   *\n   * @property {string} name - filter name, from `name` prop\n   * @property {string | string[] | TMarketFilterDateRangeValues } prevValue - list: selected value(s); date: `[<startDate>, <endDate>]`\n   * @property {string | string[] | TMarketFilterDateRangeValues } value - list: selected value(s); date: `[<startDate>, <endDate>]`\n   */\n  @Event() marketFilterValueDidChange: EventEmitter<TMarketFilterValueDidChangeEventDetail>;\n\n  /**\n   * Display value inferred from the `<market-list>` or `<market-date-picker>`\n   */\n  @State() selectedDisplayValue: string;\n\n  /**\n   * Reference to the market-filter-button\n   */\n  private filterButtonEl: HTMLMarketFilterButtonElement;\n\n  /**\n   * The selected row's raw value. This is only used for list types.\n   */\n  private rawValue: string | string[];\n\n  /**\n   * Filter type\n   */\n  private filterType: TMarketFilterType;\n\n  /**\n   * Reference to the slotted `<market-date-picker>`\n   */\n  private datePickerEl?: HTMLMarketDatePickerElement;\n\n  /**\n   * Reference to the slotted `<market-list>`\n   */\n  private listEl?: HTMLMarketListElement;\n\n  private popoverId: string;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   *\n   * Get the filter type\n   */\n  @Method()\n  async getFilterType(): Promise<TMarketFilterType> {\n    return Promise.resolve(this.filterType);\n  }\n\n  /**\n   * Toggle focus on the filter button\n   * @param {boolean} [value=true] whether or not focus will be applied or removed\n   * @returns {Promise<boolean>} whether or not the filter was focused or blurred\n   */\n  @Method()\n  async setFocus(value: boolean = true): Promise<boolean> {\n    this.focused = await this.filterButtonEl.setFocus(value);\n    return Promise.resolve(this.focused);\n  }\n\n  /**\n   * @private\n   * *INTERNAL*: Used by `market-filter-dropdown-menu` to reemit events from the cloned datepicker inside the dropdown.\n   *\n   * Sets the value of the list and emits `marketFilterValueDidChange`.\n   *\n   * @param value - The value to set for the market filter.\n   * @returns A promise that resolves when the value is set.\n   */\n  @Method()\n  async __setAndEmitListValue(value: string | string[]) {\n    if (!this.listEl) {\n      return Promise.reject(new Error('No list found.'));\n    }\n    const prevValue = this.listEl?.value;\n    this.listEl.value = value;\n    this.marketFilterValueDidChange.emit({\n      name: this.name,\n      prevValue: prevValue || null,\n      value,\n    });\n    this.setDisplayValueFromSlottedElement();\n    return Promise.resolve();\n  }\n\n  /**\n   * @private\n   * *INTERNAL*: Used by `market-filter-dropdown-menu` to reemit events from the cloned datepicker inside the dropdown.\n   *\n   * Sets the value of the date picker emits `marketFilterValueDidChange`.\n   *\n   * @param value - The new value for the date picker.\n   * @returns A promise that resolves when the value is set.\n   */\n  @Method()\n  async __setAndEmitDatePickerValue(value: TMarketFilterDateRangeValues) {\n    if (!this.datePickerEl) {\n      return Promise.reject(new Error('No date picker found.'));\n    }\n    const prevStartDate = this.datePickerEl.selectedStartDate;\n    const prevEndDate = this.datePickerEl.selectedEndDate;\n    const startDate = (value as TMarketFilterDateRangeValues)?.startDate;\n    const endDate = (value as TMarketFilterDateRangeValues)?.endDate;\n    this.datePickerEl.selectedStartDate = startDate;\n    this.datePickerEl.selectedEndDate = endDate;\n    this.marketFilterValueDidChange.emit({\n      name: this.name,\n      prevValue: {\n        startDate: prevStartDate,\n        endDate: prevEndDate,\n      },\n      value: {\n        startDate,\n        endDate,\n      },\n    });\n    this.setDisplayValueFromSlottedElement();\n    return Promise.resolve();\n  }\n\n  /**\n   * Handle `marketListSelectionsDidChange` emitted by `<market-list>`\n   */\n  @Listen('marketListSelectionsDidChange')\n  handleListSelectionChange({ detail }: CustomEvent<TMarketListSelectionsDidChangeEventDetail>) {\n    this.setDisplayValueFromListEvent(detail);\n\n    const prevValue =\n      detail.prevSelectionValues.length > 1 ? detail.prevSelectionValues : detail.prevSelectionValues[0];\n    const value = (() => {\n      if (detail.currentSelectionValues.length === 0) {\n        return null;\n      } else if (detail.currentSelectionValues.length === 1) {\n        return detail.currentSelectionValues[0] as string;\n      }\n      return detail.currentSelectionValues as string[];\n    })();\n    this.rawValue = value;\n\n    this.marketFilterValueDidChange.emit({\n      name: this.name,\n      prevValue: prevValue || null,\n      value,\n    });\n\n    /**\n     * If the `<market-list>` is mutliselect, prevent the dropdown from collapsing after a selection.\n     * Also prevent from closing when `dropdownInteraction` is provided.\n     */\n    if (!this.listEl?.multiselect && !this.dropdownInteraction) {\n      this.expanded = false;\n    }\n  }\n\n  /**\n   * Handle `marketDateRangeChanged` emitted by `<market-date-picker>`\n   */\n  @Listen('marketDateRangeChanged')\n  handleDateRangeChange(e: CustomEvent<TMarketDateRangeChangedEventDetail>) {\n    const { startDate, endDate, prevStartDate, prevEndDate } = e.detail;\n    this.setDisplayValueFromDateEvent(e);\n\n    this.marketFilterValueDidChange.emit({\n      name: this.name,\n      prevValue: {\n        startDate: prevStartDate,\n        endDate: prevEndDate,\n      },\n      value: {\n        startDate,\n        endDate,\n      },\n    });\n  }\n\n  /**\n   * Handle `marketDropdownOpened` emitted by `<market-dropdown>`\n   */\n  @Listen('marketDropdownOpened')\n  handleDropdownOpened(e: CustomEvent<void>) {\n    if (e.target !== this.el) return;\n\n    const { defaultPrevented } = this.marketFilterExpandedChanged.emit(true);\n    if (defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    // temporary handler for deprecated event\n    if (this.marketFilterOpened.emit().defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    if (!this.dropdownInteraction) {\n      this.expanded = true;\n    }\n  }\n\n  /**\n   * Handle `marketDropdownClosed` emitted by `<market-dropdown>`\n   */\n  @Listen('marketDropdownClosed')\n  handleDropdownClosed(e: CustomEvent<void>) {\n    if (e.target !== this.el) return;\n\n    const { defaultPrevented } = this.marketFilterExpandedChanged.emit(false);\n    if (defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    // temporary handler for deprecated event\n    if (this.marketFilterClosed.emit().defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    if (!this.dropdownInteraction) {\n      this.expanded = false;\n    }\n  }\n\n  /**\n   * Handle default slot changes\n   */\n  handleDefaultSlotChange() {\n    this.datePickerEl = this.el.querySelector(getNamespacedTagFor('market-date-picker'));\n    this.listEl = this.el.querySelector(getNamespacedTagFor('market-list'));\n    const autoId = `popover-${uuid()}`;\n\n    if (this.datePickerEl) {\n      if (!this.datePickerEl.id) {\n        this.datePickerEl.id = autoId;\n        this.popoverId = autoId;\n      } else {\n        this.popoverId = this.datePickerEl.id;\n      }\n      this.filterType = 'date';\n      this.setDisplayValueFromSlottedElement();\n    } else if (this.listEl) {\n      // make sure that the list is interactive\n      if (!this.listEl.interactive) {\n        this.listEl.interactive = true;\n      }\n      if (!this.listEl.id) {\n        this.listEl.id = autoId;\n        this.popoverId = autoId;\n      } else {\n        this.popoverId = this.listEl.id;\n      }\n      this.filterType = 'list';\n      this.setDisplayValueFromSlottedElement();\n    }\n  }\n\n  /**\n   * Listens to changes in row content to ensure that if the selected row's content\n   * is dynamically updated, those changes will be reflected to `selectedDisplayValue`.\n   */\n  private initRowObservers() {\n    /**\n     * Since onSlotchange only fires on changes to the slotted node itself,\n     * we need to use mutation observers to listen to changes to market-list's\n     * slotted market-rows: https://github.com/ionic-team/stencil/issues/232#issuecomment-397871813\n     */\n    const syncRowContent = (row: HTMLMarketRowElement) => {\n      if (typeof this.rawValue === 'string' && row.value === this.rawValue) {\n        this.selectedDisplayValue = this.getTextContentOfRowWithValue(row.value);\n      }\n    };\n\n    const rows: NodeListOf<HTMLMarketRowElement> = this.el.querySelectorAll(\n      `${getNamespacedTagFor('market-list')} ${getNamespacedTagFor('market-row')}`,\n    );\n    rows.forEach((row) => {\n      const observer = new MutationObserver(() => syncRowContent(row));\n      observer.observe(row, { characterData: true, subtree: true });\n    });\n  }\n\n  /**\n   * Gets the `.textContent` of the `<market-row>` with the provided `value`.\n   * This is only used for list types.\n   */\n  private getTextContentOfRowWithValue(value: typeof this.rawValue): string {\n    const marketRowTag = getNamespacedTagFor('market-row');\n    const labelEl = this.listEl.querySelector(`${marketRowTag}[value=\"${value}\"] [slot=\"label\"]`) as HTMLLabelElement;\n    return labelEl?.textContent;\n  }\n\n  /**\n   * Infers the value from the <market-list> or <market-date-picker>\n   */\n  private setDisplayValueFromSlottedElement() {\n    const displayValueEl = this.el.querySelector('[slot=\"display-value\"]');\n    const hasDisplayValue = Boolean(displayValueEl);\n    if (hasDisplayValue) {\n      this.selectedDisplayValue = displayValueEl.textContent;\n      return;\n    }\n\n    if (this.listEl) {\n      if (!this.listEl.value) {\n        this.selectedDisplayValue = undefined;\n        return;\n      }\n      this.rawValue = this.listEl.value;\n\n      if (this.listEl.multiselect) {\n        // if there's more than 1 value selected, get the count of selected values\n        const valueCount = (() => {\n          if (typeof this.listEl.value === 'string') {\n            return this.listEl.value.split(',').length;\n          } else if (Array.isArray(this.listEl.value)) {\n            return this.listEl.value.length;\n          }\n          return undefined; // this will skip the check below and print the raw `value` instead\n        })();\n        if (valueCount > 1) {\n          this.selectedDisplayValue = `${valueCount}`;\n          return;\n        }\n      }\n      // get the selected row's label textContent and set that as the display value\n      this.selectedDisplayValue = this.getTextContentOfRowWithValue(this.listEl.value);\n    } else if (this.datePickerEl) {\n      this.selectedDisplayValue = this.formatDate({\n        startDate: this.datePickerEl.selectedStartDate,\n        endDate: this.datePickerEl.selectedEndDate,\n      });\n    }\n  }\n\n  private formatDate({ startDate, endDate }: TMarketFilterDateRangeValues) {\n    const start = startDate ? new Date(startDate) : undefined;\n    const end = endDate ? new Date(endDate) : undefined;\n    if (!start && !end) {\n      return '';\n    }\n    const locale = this.datePickerEl.locale;\n\n    // If both dates exists and have the same year, show the year only on the end of the range.\n    const startAndEndInTheSameYear = Boolean(start && end && start.getFullYear() === end.getFullYear());\n    const startDateString =\n      start?.toLocaleDateString(\n        locale,\n        startAndEndInTheSameYear && end ? { day: 'numeric', month: 'numeric' } : { dateStyle: 'short' },\n      ) ?? '';\n    const endDateString = end?.toLocaleDateString(locale, { dateStyle: 'short' }) ?? '';\n\n    return `${startDateString}${endDateString ? `–${endDateString}` : ''}`;\n  }\n\n  /**\n   * Calculate the display value from the `marketDateRangeChanged` event of `<market-list>`\n   * Formatting is based on design guidelines:\n   * https://www.notion.so/marketdesignsystem/Filters-78885543b16446f49d5cfa98c6a56648#bb6aac7e29e04f98890ba32042ddae05\n   */\n  private setDisplayValueFromDateEvent(e: CustomEvent<TMarketDateRangeChangedEventDetail>) {\n    const { menuSelection } = e.detail;\n    if (menuSelection === MENU_SLOT_NAMES.CUSTOM) {\n      this.selectedDisplayValue = this.formatDate(e.detail);\n    } else if (menuSelection) {\n      // get the textContent of the menu item\n      const presetMenuTextContent = this.datePickerEl?.shadowRoot\n        ?.querySelector(`${getNamespacedTagFor('market-date-picker-menu')} slot[name=\"${menuSelection}\"]`)\n        ?.textContent?.trim();\n      this.selectedDisplayValue = presetMenuTextContent;\n    }\n  }\n\n  /**\n   * Calculate the display value from the `marketListSelectionsDidChange` event of `<market-list>`\n   */\n  private setDisplayValueFromListEvent({\n    currentSelectionValues,\n    currentSelections,\n  }: TMarketListSelectionsDidChangeEventDetail) {\n    const displayValueEl = this.el.querySelector('[slot=\"display-value\"]');\n    const hasDisplayValue = Boolean(displayValueEl);\n    if (hasDisplayValue) {\n      this.selectedDisplayValue = displayValueEl.textContent;\n      return;\n    }\n\n    if (!currentSelectionValues?.length) {\n      // no selection\n      this.selectedDisplayValue = undefined;\n    } else if (currentSelectionValues.length > 1) {\n      // multiple selections: display the count\n      this.selectedDisplayValue = `${currentSelectionValues.length}`;\n    } else {\n      // single selection: display the selected row's label contents\n      const labelEl = (currentSelections[0] as HTMLMarketRowElement).querySelector(\n        '[slot=\"label\"]',\n      ) as HTMLLabelElement;\n      this.selectedDisplayValue = labelEl.textContent;\n    }\n  }\n\n  connectedCallback() {\n    this.initRowObservers();\n    this.handleDefaultSlotChange();\n  }\n\n  render() {\n    const {\n      datePickerEl,\n      disabled,\n      dropdownInteraction,\n      expanded,\n      handleDefaultSlotChange,\n      listEl,\n      popoverId,\n      popoverPlacement,\n      popoverStrategy,\n      selectedDisplayValue,\n      size,\n    } = this;\n\n    /**\n     * Dropdown interaction will be set as 'persistent' by default if:\n     * - `dropdownInteraction` is not defined; or\n     * - `<market-list>` is provided and is `multiselect`; or\n     * - `<market-date-picker>` is provided\n     */\n    const isMultiselectList = listEl?.multiselect ?? false;\n    const hasDatePicker = Boolean(datePickerEl);\n    const interaction = dropdownInteraction ?? (hasDatePicker || isMultiselectList ? 'persistent' : undefined);\n\n    const MarketDropdownTagName = getNamespacedTagFor('market-dropdown');\n    const MarketPopoverTagName = getNamespacedTagFor('market-popover');\n    const MarketFilterButtonTagName = getNamespacedTagFor('market-filter-button');\n\n    return (\n      <Host class=\"market-filter\">\n        <MarketDropdownTagName\n          class=\"dropdown\"\n          disabled={disabled}\n          expanded={expanded}\n          interaction={interaction}\n          popoverPlacement={popoverPlacement}\n          popoverStrategy={popoverStrategy}\n        >\n          <MarketFilterButtonTagName\n            active={expanded}\n            class=\"filter-button\"\n            disabled={disabled}\n            ref={(el) => (this.filterButtonEl = el)}\n            slot=\"trigger\"\n            size={size}\n            popoverId={popoverId}\n          >\n            <slot name=\"label\"></slot>\n            {!isValueEmpty(selectedDisplayValue) && (\n              <span slot=\"feedback\">\n                <slot name=\"display-value\">{selectedDisplayValue}</slot>\n              </span>\n            )}\n          </MarketFilterButtonTagName>\n          <MarketPopoverTagName class={classNames({ 'date-popover': hasDatePicker })} slot=\"popover\" id={popoverId}>\n            <slot onSlotchange={handleDefaultSlotChange.bind(this)}></slot>\n            {/**\n             * @deprecated\n             * Use the default slot instead of `[slot=\"list\"]`\n             */}\n            <slot name=\"list\" onSlotchange={handleDefaultSlotChange.bind(this)}></slot>\n          </MarketPopoverTagName>\n        </MarketDropdownTagName>\n      </Host>\n    );\n  }\n}\n"]}