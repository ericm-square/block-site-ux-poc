{"version":3,"file":"market-button-dropdown.js","sourceRoot":"","sources":["../../../../src/components/market-button-dropdown/market-button-dropdown.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAC7G,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,2BAA2B,EAAE,qBAAqB,EAAkB,MAAM,kBAAkB,CAAC;AACtG,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AAEjE,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D;;GAEG;AACH,SAAS,cAAc,CAAC,EAA2B;IACjD,OAAO,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,mBAAmB,CAAC,eAAe,CAAC,CAAC;AAC3E,CAAC;AAED;;;;;GAKG;AAMH,MAAM,OAAO,oBAAoB;;QA0D/B,uBAAkB,GAAG,CAAC,cAA8B,EAAE,EAAE;YACtD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACvC,CAAC,CAAC;2BArD+D,OAAO;wBAKlB,KAAK;uBAKvB,KAAK;gCAOM,YAAY;+BAQH,UAAU;qCAKa,KAAK;gCAY/C,KAAK;;;IAc1C,0BAA0B,CAAC,CAAoB;QAC7C,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE;YAAE,OAAO;QACjC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IAGD,0BAA0B,CAAC,CAAoB;QAC7C,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE;YAAE,OAAO;QACjC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IAGD,wBAAwB;QACtB,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9C,CAAC;IACH,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;YACxD,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC;QAClC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC;QACpC,CAAC;IACH,CAAC;IAED,eAAe;QACb,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAChC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,gBAAgB,GAAG,qBAAqB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAClF,CAAC;IAED,mBAAmB;QACjB,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;QAE7D,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,iBAAiB,CAA0B,CAAC;QAC/E,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAEjE,IAAI,IAAI,EAAE,CAAC;YACT,4DAA4D;YAC5D,2DAA2D;YAC3D,8DAA8D;YAC9D,uDAAuD;YACvD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC;QAC/C,CAAC;QAED,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,qDAAqD;YACrD,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC;gBACvB,cAAc,CAAC,EAAE,GAAG,WAAW,IAAI,EAAE,EAAE,CAAC;YAC1C,CAAC;YAED,gDAAgD;YAChD,2BAA2B,CAAC,IAAI,CAAC,aAAa,EAAE;gBAC9C,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;gBAC1C,SAAS,EAAE,cAAc,CAAC,EAAE;aAC7B,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,qBAAqB,GAAG,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;QACrE,MAAM,oBAAoB,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QAEnE,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,wBAAwB;YAClC,EAAC,qBAAqB,qDACpB,WAAW,EAAE,IAAI,CAAC,WAAW,sBACX,IAAI,CAAC,eAAe,uBACnB,IAAI,CAAC,gBAAgB,EACxC,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBAEvB,6DAAM,IAAI,EAAC,SAAS,EAAC,IAAI,EAAC,SAAS,EAAC,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,GAAS;gBACvF,EAAC,oBAAoB,qDAAC,IAAI,EAAC,SAAS,EAAC,IAAI,EAAC,SAAS;oBACjD,6DAAM,IAAI,EAAC,SAAS,GAAQ,CACP,CACD,CACnB,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import type { Placement, PositioningStrategy } from '@popperjs/core';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { applyExpandableAriaControls, observeAriaAttributes, AriaAttributes } from '../../utils/aria';\nimport { supportedDropdownTriggers } from '../../utils/dropdown';\nimport type { TDropdownTriggerElement } from '../../utils/dropdown';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n/**\n * Type guard to check if the supported trigger element is a `market-button`\n */\nfunction isMarketButton(el: TDropdownTriggerElement): el is HTMLMarketButtonElement {\n  return el.tagName.toLowerCase() === getNamespacedTagFor('market-button');\n}\n\n/**\n * @slot trigger - Expects a slotted `market-button` or `market-filter-button`.\n * @slot content - Content slotted here will appear in `market-popover`, which\n * becomes visible when the slotted trigger content is interacted with.\n * @part popover - The inner market-popover.\n */\n@Component({\n  tag: 'market-button-dropdown',\n  styleUrl: 'market-button-dropdown.css',\n  shadow: true,\n})\nexport class MarketButtonDropdown {\n  @Element() el: HTMLMarketButtonDropdownElement;\n\n  /**\n   * Defines what types of interaction the button dropdown should have\n   * (see `market-dropdown` docs for more granular explanation)\n   */\n  @Prop() readonly interaction: 'click' | 'hover' | 'persistent' = 'click';\n\n  /**\n   * Functionally and visually disables the button dropdown.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * Disabling the up/down caret.\n   */\n  @Prop() readonly noCaret: boolean = false;\n\n  /**\n   * Configuration option for Popper.js (used to position `<market-popover>`).\n   * Describes the preferred placement of the popper.\n   * https://popper.js.org/docs/v2/constructors//#placement\n   */\n  @Prop() readonly popoverPlacement: Placement = 'bottom-end';\n\n  /**\n   * Configuration option for Popper.js (used to position `<market-popover>`).\n   * Describes the positioning strategy to use. By default, it is absolute. If\n   * your reference element is in a fixed container, use the fixed strategy.\n   * https://popper.js.org/docs/v2/constructors//#strategy\n   */\n  @Prop() readonly popoverStrategy: PositioningStrategy = 'absolute';\n\n  /**\n   * Disables the default behavior of *not* persisting selections in slotted `market-list`s.\n   */\n  @Prop({ attribute: 'persist-list' }) readonly persistListSelections: boolean = false;\n\n  /**\n   * Fired whenever the button dropdown is opened.\n   */\n  @Event({ bubbles: true, composed: true }) marketButtonDropdownOpened: EventEmitter;\n\n  /**\n   * Fired whenever the button dropdown is closed.\n   */\n  @Event({ bubbles: true, composed: true }) marketButtonDropdownClosed: EventEmitter;\n\n  @State() dropdownIsActive: boolean = false;\n\n  @State() ariaAttributes: AriaAttributes;\n\n  slottedButton: TDropdownTriggerElement;\n  slottedList: HTMLMarketListElement;\n\n  mutationObserver: MutationObserver;\n\n  onMutationObserved = (ariaAttributes: AriaAttributes) => {\n    this.ariaAttributes = ariaAttributes;\n  };\n\n  @Listen('marketDropdownOpened')\n  dropdownOpenedEventHandler(e: CustomEvent<void>) {\n    if (e.target !== this.el) return;\n    this.dropdownIsActive = true;\n    this.setCaret();\n    this.marketButtonDropdownOpened.emit();\n  }\n\n  @Listen('marketDropdownClosed')\n  dropdownClosedEventHandler(e: CustomEvent<void>) {\n    if (e.target !== this.el) return;\n    this.dropdownIsActive = false;\n    this.setCaret();\n    this.marketButtonDropdownClosed.emit();\n  }\n\n  @Watch('disabled')\n  syncTriggerDisabledState() {\n    if (this.slottedButton) {\n      this.slottedButton.disabled = this.disabled;\n    }\n  }\n\n  setCaret() {\n    if (this.noCaret || !isMarketButton(this.slottedButton)) {\n      return;\n    }\n\n    if (this.dropdownIsActive) {\n      this.slottedButton.caret = 'up';\n    } else {\n      this.slottedButton.caret = 'down';\n    }\n  }\n\n  registerTrigger() {\n    this.slottedButton = this.el.querySelector(supportedDropdownTriggers.join(','));\n    this.syncTriggerDisabledState();\n    this.setCaret();\n  }\n\n  componentWillLoad() {\n    this.mutationObserver = observeAriaAttributes(this.el, this.onMutationObserved);\n  }\n\n  componentWillRender() {\n    const MarketListTagName = getNamespacedTagFor('market-list');\n\n    const list = this.el.querySelector(MarketListTagName) as HTMLMarketListElement;\n    const popoverContent = this.el.querySelector(`[slot=\"content\"]`);\n\n    if (list) {\n      // We set this here even though market-popover also sets it,\n      // because the slotted market-list's componentWillLoad hook\n      // will fire before market-popover's, and we need it to be set\n      // before the row processing that happens in that hook.\n      list.interactive = true;\n\n      list.transient = !this.persistListSelections;\n    }\n\n    if (this.slottedButton) {\n      // Ensure popover has an ID and role for aria support\n      if (!popoverContent.id) {\n        popoverContent.id = `popover-${uuid()}`;\n      }\n\n      // Persist aria attributes on the slotted button\n      applyExpandableAriaControls(this.slottedButton, {\n        expanded: this.dropdownIsActive.toString(),\n        popoverId: popoverContent.id,\n      });\n    }\n  }\n\n  render() {\n    const MarketDropdownTagName = getNamespacedTagFor('market-dropdown');\n    const MarketPopoverTagName = getNamespacedTagFor('market-popover');\n\n    return (\n      <Host class=\"market-button-dropdown\">\n        <MarketDropdownTagName\n          interaction={this.interaction}\n          popover-strategy={this.popoverStrategy}\n          popover-placement={this.popoverPlacement}\n          disabled={this.disabled}\n        >\n          <slot name=\"trigger\" slot=\"trigger\" onSlotchange={() => this.registerTrigger()}></slot>\n          <MarketPopoverTagName slot=\"popover\" part=\"popover\">\n            <slot name=\"content\"></slot>\n          </MarketPopoverTagName>\n        </MarketDropdownTagName>\n      </Host>\n    );\n  }\n}\n"]}