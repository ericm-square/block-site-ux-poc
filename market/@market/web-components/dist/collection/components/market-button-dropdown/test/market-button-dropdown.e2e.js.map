{"version":3,"file":"market-button-dropdown.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-button-dropdown/test/market-button-dropdown.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage } from '@stencil/core/testing';\n\ndescribe('market-button-dropdown', () => {\n  it('renders', async () => {\n    const page = await newE2EPage();\n    await page.setContent(`\n      <market-button-dropdown>\n        <market-button slot=\"trigger\">Trigger</market-button>\n        <div slot=\"content\">Lorem ipsum dolor sit amet</div>\n      </market-button-dropdown>\n    `);\n\n    const element = await page.find('market-button-dropdown');\n    expect(element).toHaveAttribute('hydrated');\n  });\n\n  it('correctly passes aria- attributes required by screen readers', async () => {\n    const CONTENT_ID = 'slotted-content-id';\n    const page = await newE2EPage();\n    await page.setContent(`\n      <market-button-dropdown>\n        <market-button slot=\"trigger\">Trigger</market-button>\n        <div slot=\"content\" id=${CONTENT_ID}>Lorem ipsum dolor sit amet</div>\n      </market-button-dropdown>\n    `);\n    const slottedTrigger = await page.find('[slot=\"trigger\"]');\n    const slottedContent = await page.find('[slot=\"content\"]');\n    expect(slottedTrigger).toEqualAttribute('aria-expanded', 'false');\n    expect(slottedTrigger).toEqualAttribute('aria-controls', CONTENT_ID);\n    expect(slottedContent).toEqualAttribute('id', CONTENT_ID);\n\n    await slottedTrigger.click();\n\n    expect(slottedTrigger).toEqualAttribute('aria-expanded', 'true');\n  });\n\n  it(\"can't be opened when disabled\", async () => {\n    const page = await newE2EPage();\n    await page.setContent(`\n      <market-button-dropdown disabled>\n        <market-button slot=\"trigger\">Trigger</market-button>\n        <div slot=\"content\">Lorem ipsum dolor sit amet</div>\n      </market-button-dropdown>\n    `);\n    const element = await page.find('market-button-dropdown');\n    const trigger = await element.find('market-button');\n    const popover = await element.find('pierce/market-dropdown [slot=\"popover\"]');\n\n    let buttonDropdownVisibility = await popover.isVisible();\n    expect(buttonDropdownVisibility).toBe(false);\n\n    await trigger.click();\n\n    buttonDropdownVisibility = await popover.isVisible();\n    expect(buttonDropdownVisibility).toBe(false);\n  });\n\n  it('passes its disabled state to its slotted <market-button>', async () => {\n    const page = await newE2EPage();\n    await page.setContent(`\n      <market-button-dropdown disabled>\n        <market-button slot=\"trigger\">Trigger</market-button>\n        <div slot=\"content\">Lorem ipsum dolor sit amet</div>\n      </market-button-dropdown>\n    `);\n\n    const buttonDropdown = await page.find('market-button-dropdown');\n    expect(buttonDropdown).toHaveAttribute('disabled');\n\n    const trigger = await page.find('market-button');\n    expect(trigger).toHaveAttribute('disabled');\n  });\n\n  it(\"syncs its open/closed state with the slotted <market-button>'s up/down caret\", async () => {\n    const page = await newE2EPage();\n    await page.setContent(`\n      <market-button-dropdown>\n        <market-button slot=\"trigger\">Trigger</market-button>\n        <div slot=\"content\">Lorem ipsum dolor sit amet</div>\n      </market-button-dropdown>\n    `);\n\n    const el = await page.find('market-button-dropdown');\n    const trigger = await el.find('market-button');\n    const popover = await el.find('pierce/market-dropdown [slot=\"popover\"]');\n\n    // when dropdown is closed, caret should point down\n    let buttonDropdownVisibility = await popover.isVisible();\n    expect(buttonDropdownVisibility).toBe(false);\n    let triggerCaret = await trigger.getProperty('caret');\n    expect(triggerCaret).toBe('down');\n\n    await trigger.click();\n\n    // when dropdown is open (active), caret should point up\n    buttonDropdownVisibility = await popover.isVisible();\n    expect(buttonDropdownVisibility).toBe(true);\n    triggerCaret = await trigger.getProperty('caret');\n    expect(triggerCaret).toBe('up');\n  });\n\n  it('is compatible with a <market-filter-button> trigger', async () => {\n    const page = await newE2EPage();\n    await page.setContent(`\n      <market-button-dropdown>\n        <market-filter-button slot=\"trigger\">Trigger</market-filter-button>\n        <div slot=\"content\">Lorem ipsum dolor sit amet</div>\n      </market-button-dropdown>\n    `);\n\n    const el = await page.find('market-button-dropdown');\n    const trigger = await el.find('market-filter-button');\n    const popover = await el.find('pierce/market-dropdown [slot=\"popover\"]');\n\n    expect(await popover.isVisible()).toBe(false);\n    await trigger.click();\n    expect(await popover.isVisible()).toBe(true);\n  });\n\n  describe('when used with a slotted market-list', () => {\n    it('market-row selections do not persist after the dropdown has been closed', async () => {\n      const page = await newE2EPage();\n      await page.setContent(`\n        <market-button-dropdown>\n          <market-button slot=\"trigger\">Trigger</market-button>\n          <market-list slot=\"content\">\n            <market-row>Apple</market-row>\n            <market-row>Orange</market-row>\n            <market-row>Banana</market-row>\n          </market-list>\n        </market-button-dropdown>\n      `);\n\n      const trigger = await page.find('market-button-dropdown market-button');\n      const list = await page.find('market-button-dropdown market-list');\n      const firstRow = await list.find('market-row');\n\n      expect(await list.getProperty('transient')).toEqual(true);\n      expect(await firstRow.getProperty('transient')).toEqual(true);\n      expect(firstRow).not.toHaveAttribute('selected');\n\n      await trigger.click(); // open popover\n      await firstRow.click(); // clicking row closes popover\n      await trigger.click(); // re-open popover\n\n      expect(firstRow).not.toHaveAttribute('selected');\n\n      // We check re-opening and re-clicking here, since we had a bug arise\n      // where selection was persisted on re-open:\n      // https://square.slack.com/archives/CTU91JFU0/p1635990917212700?thread_ts=1635809467.171900&cid=CTU91JFU0\n      await trigger.click(); // open popover\n      await firstRow.click(); // clicking row closes popover\n      await trigger.click(); // re-open popover\n\n      expect(firstRow).not.toHaveAttribute('selected');\n    });\n\n    it('persists row selections when persist-list option is passed', async () => {\n      const page = await newE2EPage();\n      await page.setContent(`\n        <market-button-dropdown persist-list>\n          <market-button slot=\"trigger\">Trigger</market-button>\n          <market-list slot=\"content\">\n            <market-row>Apple</market-row>\n            <market-row>Orange</market-row>\n            <market-row>Banana</market-row>\n          </market-list>\n        </market-button-dropdown>\n      `);\n\n      const trigger = await page.find('market-button-dropdown market-button');\n      const list = await page.find('market-button-dropdown market-list');\n      const firstRow = await list.find('market-row');\n\n      expect(await list.getProperty('transient')).toEqual(false);\n      expect(await firstRow.getProperty('transient')).toEqual(false);\n      expect(firstRow).not.toHaveAttribute('selected');\n\n      await trigger.click(); // open popover\n      await firstRow.click(); // clicking row closes popover\n      await trigger.click(); // re-open popover\n\n      expect(firstRow).toHaveAttribute('selected');\n\n      await trigger.click(); // open popover\n      await firstRow.click(); // clicking row closes popover\n      await trigger.click(); // re-open popover\n\n      expect(firstRow).toHaveAttribute('selected');\n    });\n  });\n});\n"]}