{"version":3,"file":"market-action-card.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-action-card/test/market-action-card.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage, E2EPage, E2EElement } from '@stencil/core/testing';\n\ndescribe('market-action-card', () => {\n  it('should render with defaults', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-action-card></market-action-card>');\n\n    const el = await page.find('market-action-card');\n\n    expect(el).not.toBeNull();\n    expect(el).not.toHaveClass('has-slotted-row');\n    expect(el).not.toHaveAttribute('disabled');\n    expect(el).not.toHaveAttribute('selected');\n  });\n\n  it('should not emit event when disabled', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-action-card disabled></market-action-card>');\n\n    const el = await page.find('market-action-card');\n\n    expect(el).toHaveAttribute('disabled');\n    const cardSelected = await page.spyOnEvent('marketCardSelected');\n\n    await el.click();\n    await page.waitForChanges();\n\n    expect(cardSelected).not.toHaveReceivedEvent();\n  });\n\n  it('should have selected attribute after being selected', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-action-card></market-action-card>');\n\n    const el = await page.find('market-action-card');\n\n    expect(el).not.toHaveAttribute('selected');\n\n    await el.click();\n    await page.waitForChanges();\n\n    expect(el).toHaveAttribute('selected');\n  });\n\n  it('should emit selection event on click, and deselect on subsequent click', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-action-card></market-action-card>');\n\n    const el = await page.find('market-action-card');\n    const cardSelected = await page.spyOnEvent('marketCardSelected');\n    const cardDeselected = await page.spyOnEvent('marketCardDeselected');\n\n    await el.click();\n    await page.waitForChanges();\n\n    expect(cardSelected).toHaveReceivedEventTimes(1);\n    expect(cardDeselected).not.toHaveReceivedEvent();\n\n    await el.click();\n    await page.waitForChanges();\n\n    expect(cardSelected).toHaveReceivedEventTimes(1);\n    expect(cardDeselected).toHaveReceivedEventTimes(1);\n  });\n\n  describe('with a slotted row', () => {\n    it('should render with slotted row and slotted row class', async () => {\n      const page = await newE2EPage();\n      await page.setContent(`\n        <market-action-card>\n          <market-row>Apple</market-row>\n        </market-action-card>\n      `);\n\n      const el = await page.find('market-action-card');\n      const rowElement = await page.find('market-row');\n\n      expect(rowElement).not.toBeNull();\n\n      expect(el).toHaveClass('has-slotted-row');\n    });\n\n    it('should proxy row events with card events after being clicked', async () => {\n      const page = await newE2EPage();\n      await page.setContent(`\n        <market-action-card>\n          <market-row interactive>Apple</market-row>\n        </market-action-card>\n      `);\n\n      const rowElement = await page.find('market-row');\n      const cardElement = await page.find('market-action-card');\n\n      const cardSelected = await page.spyOnEvent('marketCardSelected');\n      const cardDeselected = await page.spyOnEvent('marketCardDeselected');\n      const rowSelected = await page.spyOnEvent('marketRowSelected');\n      const rowDeselected = await page.spyOnEvent('marketRowDeselected');\n\n      await rowElement.click();\n      await page.waitForChanges();\n\n      expect(cardSelected).toHaveReceivedEventTimes(1);\n      expect(rowSelected).not.toHaveReceivedEvent();\n      expect(cardElement).toHaveAttribute('selected');\n\n      await rowElement.click();\n      await page.waitForChanges();\n\n      expect(cardDeselected).toHaveReceivedEventTimes(1);\n      expect(rowDeselected).not.toHaveReceivedEvent();\n      expect(cardElement).not.toHaveAttribute('selected');\n    });\n  });\n\n  describe('in a list with slotted rows', () => {\n    it('deselects card when the contained row is deselected', async () => {\n      const page = await newE2EPage();\n      await page.setContent(`\n        <market-list interactive>\n          <market-action-card value=\"apple\" class=\"apple-card\">\n            <market-row interactive class=\"apple-row\">Apple</market-row>\n          </market-action-card>\n          <market-action-card value=\"orange\" class=\"orange-card\">\n            <market-row interactive class=\"orange-row\">Orange</market-row>\n          </market-action-card>\n          <market-action-card value=\"pear\">\n            <market-row interactive>Pear</market-row>\n          </market-action-card>\n        </market-list>\n      `);\n\n      const appleRowElement = await page.find('.apple-row');\n      const orangeRowElement = await page.find('.orange-row');\n      const appleCardElement = await page.find('.apple-card');\n      const orangeCardElement = await page.find('.orange-card');\n\n      await appleRowElement.click();\n      await page.waitForChanges();\n\n      expect(appleCardElement).toHaveAttribute('selected');\n      expect(orangeCardElement).not.toHaveAttribute('selected');\n\n      await orangeRowElement.click();\n      await page.waitForChanges();\n\n      expect(appleCardElement).not.toHaveAttribute('selected');\n      expect(orangeCardElement).toHaveAttribute('selected');\n    });\n\n    it('sets the contained row as selected when it is selected', async () => {\n      const page = await newE2EPage();\n      await page.setContent(`\n        <market-list interactive value=\"apple\">\n          <market-action-card value=\"apple\">\n            <market-row class=\"apple-row\">\n              <market-radio slot=\"control\"></market-radio>\n              Apple\n            </market-row>\n          </market-action-card>\n          <market-action-card class=\"orange-row\">\n            <market-row interactive value=\"orange\">\n              <market-radio slot=\"control\"></market-radio>\n              Orange\n            </market-row>\n          </market-action-card>\n          <market-action-card class=\"pear-row\">\n            <market-row interactive value=\"pear\">\n              <market-radio slot=\"control\"></market-radio>\n              Pear\n            </market-row>\n          </market-action-card>\n        </market-list>\n      `);\n\n      const appleCardElement = await page.find('market-action-card[value=\"apple\"]');\n      const appleRowElement = await page.find('.apple-row');\n\n      expect(appleCardElement).toHaveAttribute('selected');\n      expect(appleRowElement).toHaveAttribute('selected');\n    });\n  });\n\n  describe('accessibility', () => {\n    let page: E2EPage;\n    let card: E2EElement;\n    let container: E2EElement;\n\n    beforeEach(async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <div class=\"container\">\n          <market-action-card>\n            <market-row>\n              <label slot=\"label\">Apple</label>\n              <market-checkbox slot=\"control\"></market-checkbox>\n            </market-row>\n          </market-action-card>\n        </div>\n      `);\n      await page.waitForChanges();\n      container = await page.find('.container');\n      card = await page.find('market-action-card');\n    });\n\n    it('can be tabbed into', async () => {\n      await container.focus();\n      await page.keyboard.press('Tab');\n      await page.waitForChanges();\n      expect(await page.find(':focus')).toEqual(card);\n    });\n\n    it('can be tabbed out of', async () => {\n      await card.focus();\n      expect(await page.find(':focus')).toEqual(card);\n\n      await page.keyboard.press('Tab');\n      await page.waitForChanges();\n      expect(await page.find(':focus')).not.toEqual(card);\n    });\n\n    it('activates the underlying control when tabbed into', async () => {\n      await card.focus();\n      await page.keyboard.press('Tab');\n      await page.waitForChanges();\n\n      const focusedElement = await page.find(':focus');\n      expect(focusedElement.tagName).toBe('MARKET-CHECKBOX');\n\n      const checkboxSelected = await page.spyOnEvent('marketCheckboxValueChange');\n      expect(checkboxSelected).not.toHaveReceivedEvent();\n\n      await page.keyboard.press('Space');\n      await page.waitForChanges();\n\n      // activates the embedded control\n      expect(checkboxSelected).toHaveReceivedEvent();\n    });\n\n    it('cannot be tabbed into when disabled', async () => {\n      card.setProperty('disabled', true);\n      await page.waitForChanges();\n\n      await container.focus();\n      await page.keyboard.press('Tab');\n      await page.waitForChanges();\n      expect(await page.find(':focus')).not.toEqual(card);\n    });\n\n    it('hitting enter selects the focused card', async () => {\n      await card.focus();\n      expect(await page.find(':focus')).toEqual(card);\n\n      await page.keyboard.press('Enter');\n      await page.waitForChanges();\n      expect(card).toHaveAttribute('selected');\n    });\n\n    it('hitting space selects the focused card', async () => {\n      await card.focus();\n      expect(await page.find(':focus')).toEqual(card);\n\n      await page.keyboard.press('Space');\n      await page.waitForChanges();\n      expect(card).toHaveAttribute('selected');\n    });\n  });\n});\n"]}