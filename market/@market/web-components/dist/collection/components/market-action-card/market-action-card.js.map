{"version":3,"file":"market-action-card.js","sourceRoot":"","sources":["../../../../src/components/market-action-card/market-action-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, h, Listen, Method, Prop } from '@stencil/core';\n\nimport { TMarketActionCardDeselectedEventDetail, TMarketActionCardSelectedEventDetail } from './events';\nimport { getRowInActionCard } from './utils';\n\n/**\n * @slot - Optimized for use w/ slotted `<market-row>`s but can take any content. All slotted `market-row`s will automatically be set to interactive mode.\n */\n@Component({\n  tag: 'market-action-card',\n  styleUrl: 'market-action-card.css',\n  shadow: true,\n})\nexport class MarketActionCard {\n  rowEl: HTMLMarketRowElement;\n\n  @Element() el: HTMLMarketActionCardElement;\n\n  /**\n   * Whether the action card is selected or not.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  /**\n   * Visually and functionally disables the action card.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * A string specifying a value for the action card.\n   */\n  @Prop({ reflect: true }) readonly value: string;\n\n  /**\n   * When set to `true`, card will not persist selected state on click.\n   */\n  @Prop() readonly transient: boolean = false;\n\n  /**\n   * Fired whenever the action card is selected.\n   */\n  @Event({ bubbles: true, composed: true }) marketCardSelected: EventEmitter<TMarketActionCardSelectedEventDetail>;\n\n  /**\n   * Fired whenever the action card is deselected.\n   */\n  @Event({ bubbles: true, composed: true }) marketCardDeselected: EventEmitter<TMarketActionCardDeselectedEventDetail>;\n\n  /**\n   * When rows are slotted into cards, we want to catch their selection events\n   * and emit our own, so that the containing `market-list` only gets one set\n   * of selection events.\n   */\n  @Listen('marketRowSelected')\n  handleRowSelection(e: CustomEvent) {\n    this.select();\n    // Prevent `marketRowSelected` from bubbling up to containing lists, since we expect\n    // them to listen to our card selection events instead.\n    e.stopPropagation();\n  }\n\n  /**\n   * When rows are slotted into cards, we want to catch their selection events\n   * and emit our own, so that the containing `market-list` only gets one set\n   * of selection events.\n   */\n  @Listen('marketRowDeselected')\n  handleRowDeselection(e: CustomEvent) {\n    this.deselect();\n    // Prevent `marketRowSelected` from bubbling up to containing lists, since we expect\n    // them to listen to our card selection events instead.\n    e.stopPropagation();\n  }\n\n  /**\n   * Set `selected` to `true` and emit `marketCardSelected`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async select() {\n    this.selected = true;\n    await this.rowEl?.silentlySelect();\n    const { defaultPrevented } = this.marketCardSelected.emit({ value: this.value });\n    if (defaultPrevented) {\n      this.selected = false;\n      await this.rowEl?.silentlyDeselect();\n    }\n  }\n\n  /**\n   * Set `selected` to `false` and emit `marketCardDeselected`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async deselect() {\n    this.selected = false;\n    await this.rowEl?.silentlyDeselect();\n    const { defaultPrevented } = this.marketCardDeselected.emit({ value: this.value });\n    if (defaultPrevented) {\n      this.selected = true;\n      await this.rowEl?.silentlySelect();\n    }\n  }\n\n  /**\n   * Used for setting the selection state to true without emitting events.\n   * Useful for scenarios where another component (ex. `<market-list>`) needs\n   * to sync state with slotted `<market-action-card>`s.\n   */\n  @Method()\n  async silentlySelect() {\n    this.selected = true;\n    await this.rowEl?.silentlySelect();\n    return Promise.resolve();\n  }\n\n  /**\n   * Set `selected` to `false`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async silentlyDeselect() {\n    this.selected = false;\n    await this.rowEl?.silentlyDeselect();\n    return Promise.resolve();\n  }\n\n  isContentEditable(el) {\n    // check whether element (Market or HTML) accepts text input\n    const inputTagnames = ['input', 'textarea'];\n    return inputTagnames.some((str) => el.tagName.includes(str)) || el.isContentEditable;\n  }\n\n  handleClick(e) {\n    // clicks to text inputs should not select action card\n    if (this.isContentEditable(e.target)) {\n      return;\n    }\n\n    // Rows handle selected state when slotted. The only way you can click directly on\n    // the card is by clicking the border, and we want to just ignore that edge case.\n    if (this.disabled || this.transient || this.rowEl) {\n      return;\n    }\n\n    if (!this.selected) {\n      this.select();\n    } else {\n      this.deselect();\n    }\n  }\n\n  handleKeydown(e: KeyboardEvent) {\n    // user should be able to type normally in text inputs\n    if (this.isContentEditable(e.target)) {\n      return;\n    }\n\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault(); // prevents scroll down when Space is pressed\n      if (this.rowEl) {\n        this.rowEl.click();\n      } else {\n        this.el.click();\n      }\n    }\n  }\n\n  syncRowAttributes() {\n    if (!this.rowEl) {\n      return;\n    }\n    this.rowEl.interactive = true;\n    this.rowEl.selected = this.selected;\n    this.rowEl.removeAttribute('tabIndex');\n  }\n\n  handleSlotChangeDefault() {\n    this.rowEl = getRowInActionCard(this.el);\n    this.el.classList.toggle('has-slotted-row', Boolean(this.rowEl));\n    this.syncRowAttributes();\n  }\n\n  componentDidRender() {\n    // slotted rows inside action cards should not be able to receive focus because\n    // they are controlled by interaction w/ the action card\n    if (this.rowEl) {\n      this.rowEl.removeAttribute('tabIndex');\n    }\n  }\n\n  render() {\n    return (\n      <Host\n        aria-selected={this.selected}\n        class=\"market-action-card\"\n        onClick={this.handleClick.bind(this)}\n        onKeydown={this.handleKeydown.bind(this)}\n        role=\"option\"\n        tabindex={this.disabled ? null : '0'}\n      >\n        <slot onSlotchange={() => this.handleSlotChangeDefault()}></slot>\n      </Host>\n    );\n  }\n}\n"]}