{"version":3,"file":"market-icon.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-icon/test/market-icon.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage } from '@stencil/core/testing';\n\ndescribe('market-icon', () => {\n  it('displays an icon when passed a semantic token name', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-icon name=\"inform\" fidelity=\"24\"></market-icon>');\n\n    const element = await page.find('market-icon');\n    const svg = await element.find('svg');\n    const symbol = await page.find('#market-icon-i-circle-fidelity-24');\n\n    expect(element).not.toBeNull();\n\n    expect(element).toHaveClass('market-icon');\n\n    expect(element).toEqualAttribute('fidelity', '24');\n    expect(element).toEqualAttribute('name', 'inform');\n    expect(element).toHaveAttribute('tintable');\n\n    expect(svg).not.toBeNull();\n    expect(svg).toEqualAttribute('viewBox', '0 0 24 24');\n    expect(svg.innerHTML).toEqual(symbol.innerHTML);\n  });\n\n  it('can be passed a descriptive asset name', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-icon name=\"i-circle\"></market-icon>');\n\n    const element = await page.find('market-icon');\n    const svg = await element.find('svg');\n    const symbol = await page.find('#market-icon-i-circle-fidelity-24');\n\n    expect(element).not.toBeNull();\n\n    expect(element).toHaveClass('market-icon');\n    expect(element).toEqualAttribute('name', 'i-circle');\n\n    // non-token icons are tintabe by default\n    expect(element).toHaveAttribute('tintable');\n\n    expect(svg.innerHTML).toEqual(symbol.innerHTML);\n  });\n\n  it('chooses the default fidelity when an invalid fidelity or none is passed', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-icon name=\"inform\"></market-icon>');\n\n    const element = await page.find('market-icon');\n    const svg = await element.find('svg');\n\n    // No fidelity passed\n    expect(element).not.toHaveAttribute('fidelity');\n    expect(svg).toEqualAttribute('viewBox', '0 0 24 24');\n\n    // Setting an invalid fidelity for this icon (fidelity:55 does not exist in the tokens for the \"inform\" icon)\n    await element.setAttribute('fidelity', '55');\n\n    await page.waitForChanges();\n\n    expect(element).toEqualAttribute('fidelity', '55');\n    expect(svg).toEqualAttribute('viewBox', '0 0 24 24');\n  });\n\n  // Currently there are no tokens with multiple fidelities, so can't really test this\n  it.skip('sets the fidelity to one other than the default if one is passed', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-icon name=\"some-future-icon-with-multiple-fidelities\" fidelity=\"16\"></market-icon>');\n\n    const element = await page.find('market-icon');\n    const svg = await element.find('svg');\n\n    expect(element).toEqualAttribute('fidelity', '16');\n    expect(svg).toEqualAttribute('viewBox', '0 0 16 16');\n  });\n\n  it('changes color if it is tintable', async () => {\n    const page = await newE2EPage();\n\n    // Have to use RGB here because getComputedStyle() returns RGB\n    await page.setContent(`\n      <market-icon name=\"inform\" style=\"color: rgb(182, 3, 252)\"></market-icon>\n    `);\n\n    const element = await page.find('market-icon');\n    const svg = await element.find('svg');\n\n    expect(element).toHaveAttribute('tintable');\n\n    const style = await svg.getComputedStyle();\n\n    expect(style.color).toBe('rgb(182, 3, 252)');\n  });\n});\n"]}