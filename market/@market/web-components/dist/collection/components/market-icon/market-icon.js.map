{"version":3,"file":"market-icon.js","sourceRoot":"","sources":["../../../../src/components/market-icon/market-icon.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Host, Prop, h } from '@stencil/core';\nimport tokens from '@market/market-theme/js/icons.json';\nimport marketSVGSprite from '@market/market-theme/assets/icons/icons.svg';\nimport {\n  getDefaultIconFidelity,\n  getFidelityToken,\n  isValidTokenFidelity,\n  isValidSpriteFidelity,\n  getMarketIconSVGSymbol,\n} from '../../utils/icons';\n\nconst marketIconSVGSpriteID = '#market-icon-sprite';\n\n@Component({\n  tag: 'market-icon',\n  styleUrl: 'market-icon.css',\n  shadow: true,\n})\nexport class MarketIcon {\n  @Element() el: HTMLMarketIconElement;\n\n  /**\n   * A string identifier for the icon. This can be either the semantic name which maps to\n   * a token or the descriptive name, which maps to a SVG id in the sprite, though using the\n   * semantic name is preferred because it gives you access to additional features like fidelity.\n   * You can also pass any string and it will display a symbol or group within any SVG sprite\n   * on the page, whether it is the Market sprite or not.\n   */\n  @Prop({ reflect: true, mutable: false }) readonly name: string;\n\n  /**\n   * Optional: A number representing the fidelity of the icon to display.\n   */\n  @Prop({ reflect: true, mutable: false }) readonly fidelity: number;\n\n  /**\n   * Whether or not the icon can change color (is monotone).\n   * */\n  tintable: boolean = true;\n\n  width: number;\n  height: number;\n\n  cloneSymbol(symbol, assetName, width, height) {\n    // Remove any existing SVG child elements so we don't duplicate them\n    this.el.querySelectorAll('svg').forEach((svg) => svg.remove());\n\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink');\n    svg.dataset.name = assetName;\n    svg.setAttribute('viewBox', symbol?.getAttribute('viewBox'));\n    width && svg.setAttribute('width', `${width}`);\n    height && svg.setAttribute('height', `${height}`);\n    svg.innerHTML = symbol.innerHTML;\n\n    this.el.appendChild(svg);\n  }\n\n  getDimensions(symbol, fidelityToken, currentFidelity) {\n    // Get the dimensions from the symbol's viewBox attribute\n    const dimensions =\n      symbol\n        ?.getAttribute('viewBox')\n        .split(/\\s/)\n        .map((d) => Number.parseInt(d, 10)) || [];\n\n    /* Set the dimensions based on the following:\n    1. Passed width/height param\n    2. Width & Height as read from the tokens\n    3. The numbers from the matching SVG symbol's viewBox attribute\n    4. Whatever the currentFidelity is set to (assumes square dimensions)\n    */\n    const width = fidelityToken?.width ?? dimensions[2] ?? currentFidelity;\n    const height = fidelityToken?.height ?? dimensions[3] ?? currentFidelity;\n    return { width, height };\n  }\n\n  componentWillLoad() {\n    let assetName, currentFidelity, defaultFidelity, fidelityToken, symbol;\n\n    // Find the market SVG sprite if it is on the page\n    const documentSVGSprite = document.querySelector(marketIconSVGSpriteID) as SVGElement;\n\n    /* If we can't find a symbol or a root level SVG sprite, that means we need to add the default one\n    to the page */\n    if (!documentSVGSprite) {\n      /* This feels sort of icky, but using innerHTML apparently the best way to convert the string\n      that gets loaded from importing marketSVGSprite into an actual DOM element */\n      const template = document.createElement('div');\n      template.innerHTML = marketSVGSprite;\n      const sprite = template.querySelector(marketIconSVGSpriteID) as SVGElement;\n      sprite.style.display = 'none';\n      document.body.append(sprite);\n      template.remove();\n    }\n\n    // Get the full icon object as well as the object at the correct fidelity key if passed.\n    const iconToken = tokens.core.icon[this.name];\n\n    // If we have passed a semantic name\n    if (iconToken) {\n      // Determine the default fidelity from the tokens.\n      defaultFidelity = getDefaultIconFidelity(iconToken);\n      // Current fidelity is either the fidelity that is passed if it is valid, or the default fidelity\n      currentFidelity = isValidTokenFidelity(this.fidelity, iconToken) ? this.fidelity : defaultFidelity;\n      // Get the JSON object of the token values for this icon for this icon\n      fidelityToken = getFidelityToken(currentFidelity, iconToken);\n\n      // Find the asset name for this semantic icon\n      assetName = fidelityToken?.asset;\n\n      // Otherwise we've passed a descriptive name\n    } else {\n      // The name passed is assumed to be the asset name\n      assetName = this.name;\n\n      // If fidelity here is null or invalid, then this will be an approximate selection of the symbol\n      // But we need to surmise some default fidelity and current fidelity from something and since we\n      // dont have tokens, the SVG markup is the only thing we have more or less.\n      symbol = getMarketIconSVGSymbol(assetName, this.fidelity);\n\n      // Approximate a default fidelity from the matching SVG symbol in the sprite\n      defaultFidelity = Number.parseInt(symbol?.dataset.fidelity, 10);\n\n      // Current fidelity is either the fidelity that is passed if it is valid, or the default fidelity\n      currentFidelity = isValidSpriteFidelity(assetName, this.fidelity) ? this.fidelity : defaultFidelity;\n    }\n\n    /* Even if we already have a symbol, we want to run this function again in case the symbol\n    assignment on line 120 was assigned based on a non-existent or invalid fidelity */\n    symbol = getMarketIconSVGSymbol(assetName, currentFidelity);\n\n    const { width, height } = this.getDimensions(symbol, fidelityToken, currentFidelity);\n\n    if (symbol) {\n      // Append the symbol to the component's template\n      this.cloneSymbol(symbol, assetName, width, height);\n    }\n\n    // set props needed for render\n    this.width = width;\n    this.height = height;\n    this.tintable = fidelityToken?.tintable ?? true;\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-icon\"\n        tintable={this.tintable}\n        style={{\n          '--icon-width': `${this.width}px`,\n          '--icon-height': `${this.height}px`,\n        }}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"]}