{"version":3,"file":"market-code-display.js","sourceRoot":"","sources":["../../../../src/components/market-code-display/market-code-display.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Prop, Element, Event, EventEmitter } from '@stencil/core';\n\n/**\n * When code is split up, represents how many characters are in each group.\n */\nconst CODE_GROUP_LEN = 4;\n\n@Component({\n  tag: 'market-code-display',\n  styleUrl: 'market-code-display.css',\n  shadow: true,\n})\nexport class MarketCodeDisplay {\n  @Element() el: HTMLMarketCodeDisplayElement;\n\n  /**\n   * Whether the component should appear in a disabled state.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * A boolean representing whether the code input is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * A string holding the code inputted by the user through a slot.\n   */\n  private code: string = '';\n\n  /**\n   * An array holding spans containing each character in the code, with some blanks.\n   * Used for styling and spacing.\n   */\n  private codeChars: Array<string> = [];\n\n  /**\n   * The default 'Copy' button that is always present in any market-code-display.\n   * Created and inserted into DOM in componentWillLoad().\n   */\n  private copyButton: HTMLElement;\n\n  /**\n   * Emitted when the 'Copy' button is pressed. Can be used by consumer to create toast.\n   */\n  @Event() marketCodeCopied: EventEmitter;\n\n  /**\n   * Component Lifecycle Event:\n   * Grab the code and its len from inputted code slot.\n   * Set relevant props and insert the Copy button programmatically so that it appears in the light DOM.\n   */\n  componentWillLoad() {\n    // Set code and codeGroups\n    const slottedCodeTag = this.el.querySelector('[slot=code]');\n    const code = slottedCodeTag.textContent;\n    // Remove whitespace from slotted code\n    this.code = code.replace(/\\s/g, '');\n    this.initCodeChars(this.code);\n\n    // Programmatically insert default Copy button into light DOM\n    this.copyButton = document.createElement('button');\n    Object.assign(this.copyButton, {\n      slot: 'actions',\n      type: 'button',\n      tabIndex: this.disabled ? -1 : 0,\n      onclick: () => this.copyToClipboard(),\n    });\n    // NOTE: The following code is brittle! Relies on the fact that the consumer\n    //       slotted in elements in order of 'code' -> 'copy-text' -> 'actions'\n    // If consumer slotted in alt copy-text, place copyButton after code & copy-text\n    if (this.el.querySelector('[slot=copy-text]')) {\n      // Set text of the Copy button to slotted copy-text\n      const slottedCopyText = this.el.querySelector('[slot=copy-text]');\n      const copyText = slottedCopyText.textContent;\n      this.copyButton.innerHTML = copyText;\n      slottedCopyText.insertAdjacentElement('afterend', this.copyButton);\n    } else {\n      this.copyButton.innerHTML = `Copy`;\n      slottedCodeTag.insertAdjacentElement('afterend', this.copyButton);\n    }\n  }\n\n  /**\n   * Inits this.codeChars to an array of <span> tags containing each character in the code string.\n   * Additionally contains empty strings at certain indices based on codeLen.\n   * By default, blanks are only placed at the front & back of the array.\n   *    ['', 'x', 'x', 'x', 'x', '']\n   * If codeLen is divisible by 4, put blanks every 4 spots too.\n   *    ['', 'x', 'x', 'x', 'x', '', 'x', 'x', 'x', 'x', '']\n   * The exception to this is if codeLen===4, in which case we use the default.\n   * This codeChars arr is used in render() to space and style characters appropriately.\n   * Called only once on componentWillLoad() as to not cause re-renders\n   */\n  initCodeChars(code) {\n    const codeLen = code.length;\n    const BLANK_CODE_SPAN = <span class=\"code-char\"></span>;\n\n    // Place blanks every 4 chars\n    if (codeLen !== CODE_GROUP_LEN && codeLen % CODE_GROUP_LEN === 0) {\n      for (let i = 0; i < codeLen; i++) {\n        if (i % CODE_GROUP_LEN === 0) this.codeChars.push(BLANK_CODE_SPAN);\n        this.codeChars.push(<span class=\"code-char\">{code[i]}</span>);\n      }\n    }\n    // Only place blank at the front & back\n    else {\n      this.codeChars.push(BLANK_CODE_SPAN);\n      for (let i = 0; i < codeLen; i++) {\n        this.codeChars.push(<span class=\"code-char\">{code[i]}</span>);\n      }\n    }\n    this.codeChars.push(BLANK_CODE_SPAN);\n  }\n\n  /**\n   * When user presses the 'Copy' button, copy code to clipboard & emit an event.\n   */\n  copyToClipboard() {\n    navigator.clipboard.writeText(this.code);\n    this.marketCodeCopied.emit();\n  }\n\n  render() {\n    return (\n      <Host class=\"market-code-display\" tabIndex={this.disabled ? null : 0} aria-label={this.code}>\n        <span class=\"code-container\">{this.codeChars}</span>\n        <span class=\"actions-container\">\n          <slot name=\"actions\"></slot>\n        </span>\n      </Host>\n    );\n  }\n}\n"]}