{"version":3,"file":"market-filter-button.js","sourceRoot":"","sources":["../../../../src/components/market-filter-button/market-filter-button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAIvF;;;GAGG;AAMH,MAAM,OAAO,kBAAkB;;oBAIgC,QAAQ;wBAKf,KAAK;uBAKA,KAAK;wBAKV,KAAK;sBAKP,KAAK;;;;IAUzD,WAAW,CAAC,KAAc;QACxB,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,KAAK,CAAC,wBAAwB,EAAE,CAAC;QACnC,CAAC;IACH,CAAC;IAGD,oBAAoB,CAAC,QAAiB;QACpC,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC7B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC;IACH,CAAC;IAED;;;;OAIG;IAEH,KAAK,CAAC,QAAQ,CAAC,QAAiB,IAAI;QAClC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACxB,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACvB,CAAC;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAOD,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,sBAAsB;YAChC,gFACiB,IAAI,CAAC,QAAQ,EAC5B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,mBAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,mBACtB,IAAI,CAAC,SAAS,EAC7B,IAAI,EAAC,QAAQ;gBAEb,4DAAK,KAAK,EAAC,IAAI,EAAC,MAAM,EAAC,IAAI,EAAC,OAAO,EAAC,WAAW,EAAC,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,4BAA4B;oBAC5F,0EAAgB,SAAS,eAAW,SAAS,EAAC,CAAC,EAAC,iDAAiD,GAAG,CAChG;gBACN,6DAAM,KAAK,EAAC,OAAO;oBACjB,8DAAa,CACR;gBACP,6DAAM,IAAI,EAAC,UAAU,GAAQ,CACtB,CACJ,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Prop, Listen, Method, State, Watch } from '@stencil/core';\n\nimport { AriaAttributes } from '../../utils/aria';\n\n/**\n * @slot - The text used for the filter button label\n * @slot feedback - The text to indicate currently applied filters\n */\n@Component({\n  tag: 'market-filter-button',\n  styleUrl: 'market-filter-button.css',\n  shadow: true,\n})\nexport class MarketFilterButton {\n  /**\n   * String for setting filter button size\n   */\n  @Prop({ reflect: true }) readonly size: 'medium' | 'small' = 'medium';\n\n  /**\n   * Functionally and visually disables the button\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * Whether or not the button is focused\n   */\n  @Prop({ reflect: true, mutable: true }) focused: boolean = false;\n\n  /**\n   * Whether to display icon in place of label\n   */\n  @Prop({ reflect: true }) readonly iconOnly: boolean = false;\n\n  /**\n   * Whether or not the button is in an active state, e.g. filter is selected and dropdown is opened\n   */\n  @Prop({ reflect: true }) readonly active: boolean = false;\n\n  /**\n   * The ID of the popover element that the button controls\n   */\n  @Prop() readonly popoverId: string;\n\n  @State() ariaAttributes: AriaAttributes;\n\n  @Listen('click', { capture: true })\n  handleClick(event: UIEvent) {\n    if (this.disabled) {\n      event.stopImmediatePropagation();\n    }\n  }\n\n  @Watch('disabled')\n  handleDisabledChange(newValue: boolean) {\n    if (newValue && this.focused) {\n      this.focused = false;\n    }\n  }\n\n  /**\n   * Toggle focus on the filter button\n   * @param {boolean} [value=true] whether or not focus will be applied or removed\n   * @returns {Promise<boolean>} whether or not the button was focused or blurred\n   */\n  @Method()\n  async setFocus(value: boolean = true): Promise<boolean> {\n    if (this.disabled) {\n      return Promise.resolve(false);\n    }\n    this.focused = value;\n    if (this.focused) {\n      this.buttonEl.focus();\n    } else {\n      this.buttonEl.blur();\n    }\n    return Promise.resolve(this.focused);\n  }\n\n  /**\n   * Reference to the button element\n   */\n  private buttonEl: HTMLButtonElement;\n\n  render() {\n    return (\n      <Host class=\"market-filter-button\">\n        <button\n          aria-disabled={this.disabled}\n          disabled={this.disabled}\n          ref={(el) => (this.buttonEl = el)}\n          aria-expanded={this.active.toString()}\n          aria-controls={this.popoverId}\n          type=\"button\"\n        >\n          <svg width=\"18\" height=\"12\" viewBox=\"0 0 18 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 0H18V2H0V0ZM15 5H3V7H15V5ZM12 10H6V12H12V10Z\" />\n          </svg>\n          <span class=\"label\">\n            <slot></slot>\n          </span>\n          <slot name=\"feedback\"></slot>\n        </button>\n      </Host>\n    );\n  }\n}\n"]}