:host, ::slotted(*), * {
  box-sizing: border-box;
}

:host([disabled]) {
  cursor: not-allowed !important; /* stylelint-disable-line declaration-no-important */
}

:host([disabled]) *, :host([disabled]) ::slotted(*) {
  cursor: not-allowed !important; /* stylelint-disable-line declaration-no-important */
  pointer-events: none !important; /* stylelint-disable-line declaration-no-important */
}

:host {
  /* not really necessary, but some folks in dashboard are anchoring
    absolutely positioned UI to field components, so for now... */
  position: relative;

  /* remove browser focus styles */
  outline: none;

  /* == fonts == */
  font-weight: var(--field-input-weight);
  font-size: var(--field-input-size);
  line-height: var(--field-input-leading);
  cursor: text;
}

/* == inner input element == */

:host input, :host ::slotted(input), :host textarea, :host ::slotted(textarea) {
    width: 100%;
    margin: 0;
    padding: 0;
    border: none;
    background-color: transparent;
    color: inherit;
    font-weight: inherit;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    cursor: inherit;
  }

:host ::slotted(label) {
    cursor: inherit;
  }

/* override default browser focus styles */

:host input:focus, :host ::slotted(input:focus), :host textarea:focus, :host ::slotted(textarea:focus) {
    outline: none;
  }

/* placeholder color */

:host input::-moz-placeholder, :host textarea::-moz-placeholder {
    color: var(--field-placeholder-text-color);
  }

:host input::placeholder, :host textarea::placeholder {
    color: var(--field-placeholder-text-color);
  }

/* similar to the style above. this selector does not work with Safari */

:host ::slotted(input)::-moz-placeholder, :host ::slotted(textarea)::-moz-placeholder {
    color: var(--field-placeholder-text-color);
  }

:host ::slotted(input)::placeholder, :host ::slotted(textarea)::placeholder {
    color: var(--field-placeholder-text-color);
  }

:host([size='small']) {
    font-size: var(--core-type-paragraph-20-size);
    line-height: var(--core-type-paragraph-20-leading);
  }

:host {
  /* == state:normal.validity:normal == */
  border-radius: var(--field-border-radius);
  background-color: var(--field-normal-state-background-color);
  color: var(--field-normal-state-input-color);
}

/* use pseudo to create border so we can use inset box-shadow but still layer on top */

:host::after {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: var(--field-border-radius);
    box-shadow: inset 0 0 0 var(--field-border-size) var(--field-normal-state-normal-validity-border-color);
    pointer-events: none;
  }

/*
  Border changes per state and per validity
  Do not reorder this section. They are organized by precedence
  (i.e. disabled is placed last, because it should override all other state attributes).
  */

/* == state:normal.validity:invalid == */

:host([invalid])::after {
    box-shadow: inset 0 0 0 var(--field-border-size) var(--field-normal-state-invalid-validity-border-color);
  }

/* == state:hover.validity:normal == */

:host(:hover) {
    background-color: var(--field-hover-state-background-color);
    color: var(--field-hover-state-input-color);
  }

:host(:hover)::after {
      box-shadow: inset 0 0 0 var(--field-border-size) var(--field-hover-state-normal-validity-border-color);
    }

/* == state:hover.validity:invalid == */

:host([invalid]:hover)::after {
    box-shadow: inset 0 0 0 var(--field-border-size) var(--field-hover-state-invalid-validity-border-color);
  }

/* == state:focus.validity:normal == */

:host([focused]) {
    color: var(--field-focus-state-input-color);
  }

:host([focused])::after {
      box-shadow:
        inset 0 0 0 var(--field-focus-state-border-size)
        var(--field-focus-state-normal-validity-border-color);
    }

/* == state:focus.validity:invalid == */

:host([focused][invalid])::after {
    box-shadow: inset 0 0 0 var(--field-focus-state-border-size) var(--field-focus-state-invalid-validity-border-color);
  }

/* == state:readonly == */

:host([readonly]:hover)::after {
    box-shadow: inset 0 0 0 var(--field-border-size) var(--field-normal-state-normal-validity-border-color);
  }

/* == state:disabled == */

:host([disabled]) {

    /* stylelint-disable declaration-no-important */
    background-color: var(--field-disabled-state-background-color) !important;
    color: var(--field-disabled-state-input-color) !important;
    cursor: not-allowed !important;
  }

:host([disabled])::after {
      box-shadow: inset 0 0 0 var(--field-border-size) var(--field-disabled-state-border-color) !important;
    }

/* stylelint-enable declaration-no-important */

:host([disabled]) ::slotted(.market-accessory), :host([disabled]) ::slotted(img[slot*="accessory"]), :host([disabled]) ::slotted(svg[slot*="accessory"]), :host([disabled]) ::slotted(div[slot*="accessory"]) {
      /* non-interactive slotted accessories should be dimmed when field is disabled (same behavior as rows) */
      --field-disabled-state-accessory-opacity: var(--row-disabled-state-leading-accessory-opacity);

      opacity: var(--field-disabled-state-accessory-opacity);
    }

/*
  Label color changes per state, per phase
  Do not reorder this section. They are organized by precedence
  (i.e. disabled is placed last, because it should override all other state attributes).
  */

/* == state:normal.phase:empty == */

:host([value=""]) ::slotted(label) {
    color: var(--field-normal-state-empty-phase-label-color);
  }

/* == state:normal.phase:float == */

:host(:not([value=""])) ::slotted(label), :host([value=""][autofilled]) ::slotted(label) {
    color: var(--field-normal-state-float-phase-label-color);
  }

/* == state:hover.phase:empty == */

:host(:hover) ::slotted(label) {
    color: var(--field-hover-state-empty-phase-label-color);
  }

/* == state:hover.phase:float == */

:host(:not([value=""]):hover) ::slotted(label), :host([value=""][autofilled]:hover) ::slotted(label) {
    color: var(--field-hover-state-float-phase-label-color);
  }

/* == state:focus.phase:float == */

:host([focused]) ::slotted(label) {
    color: var(--field-focus-state-float-phase-label-color);
  }

/* == state:disabled.phase:empty == */

:host([value=""][disabled]) ::slotted(label) {
    color: var(--field-disabled-state-empty-phase-label-color);
  }

/* == state:disabled.phase:float == */

:host(:not([value=""])[disabled]) ::slotted(label), :host([value=""][autofilled][disabled]) ::slotted(label) {
    color: var(--field-disabled-state-float-phase-label-color);
  }

/* hide number arrows on input */

:host input::-webkit-outer-spin-button, :host input::-webkit-inner-spin-button {
    margin: 0;
    -webkit-appearance: none;
            appearance: none;
  }

/* this will remove number arrows in firefox */

:host input[type="number"] {
    -webkit-appearance: textfield;
       -moz-appearance: textfield;
            appearance: textfield;
  }


:host {
  --focus-ring-color: color-mix(in srgb, var(--core-focus-ring-color) 100%, transparent);

  display: flex;
  align-items: center;
}


:host input {
    /* input height is the line-height + padding */
    --stepper-quantity-input-field-height:
      calc(
        var(--stepper-quantity-input-field-value-text-leading) + var(--stepper-padding-size) * 2
      );

    position: relative;
    bottom: 0;
    width: 100%;
    height: var(--stepper-quantity-input-field-height);
    color: var(--stepper-quantity-input-field-value-text-normal-state-color);
    font-weight: var(--stepper-quantity-input-field-value-text-weight);
    font-size: var(--stepper-quantity-input-field-value-text-size);
    font-family: var(--stepper-quantity-input-field-value-text-font-family);
    line-height: var(--stepper-quantity-input-field-value-text-leading);
    letter-spacing: var(--stepper-quantity-input-field-value-text-tracking);
    text-align: center;
    text-transform: var(--stepper-quantity-input-field-value-text-case);
    cursor: text;
    font-feature-settings: "tnum";
  }


/* enable tabular (monospaced) figures */


:host input[disabled] {
      color: var(--stepper-quantity-input-field-value-text-disabled-state-color);
    }


:host input::-moz-placeholder {
      color: var(--stepper-quantity-input-field-value-text-placeholder-color);
    }


:host input::placeholder {
      color: var(--stepper-quantity-input-field-value-text-placeholder-color);
    }

/* button hit area extends beyond the "visual" button */
button {
  --transition-duration: 0.2s;
  --stepper-button-size: var(--stepper-button-minimum-height);

  position: relative;
  display: inline-flex;
  flex-shrink: 0;
  justify-content: center;
  align-items: center;
  box-sizing: content-box;
  width: var(--stepper-button-size);
  height: var(--stepper-button-size);
  padding: var(--stepper-padding-size);
  border: none;
  border-radius: var(--stepper-border-radius);
  background: none;
  cursor: pointer;
  transition: background-color color var(--transition-duration);
}
/* the actual "visual" button w/ background */
button::before {
    content: "";
    position: absolute;
    inset: 0;
    display: block;
    margin: var(--stepper-padding-size);
    border-radius: var(--stepper-button-border-radius);
    background: var(--stepper-button-normal-state-background-color);
  }
button svg {
    position: relative;
    pointer-events: none;
    fill: var(--stepper-button-normal-state-icon-color);
  }
button:hover::before {
      background: var(--stepper-button-hover-state-background-color);
    }
button:hover svg {
      fill: var(--stepper-button-hover-state-icon-color);
    }
button:focus {
    outline: none;
  }
button:focus::before {
      background: var(--stepper-button-focus-state-background-color);
    }
button:focus svg {
      fill: var(--stepper-button-focus-state-icon-color);
    }
button:focus-visible::before {
      outline: var(--core-focus-ring-border-size) solid var(--focus-ring-color);
      outline-offset: var(--core-focus-ring-border-size);
    }
button:active::before {
      background: var(--stepper-button-pressed-state-background-color);
    }
button:active svg {
      fill: var(--stepper-button-pressed-state-icon-color);
    }
button[disabled] {
    cursor: not-allowed;
  }
button[disabled]::before {
      background: var(--stepper-button-disabled-state-background-color);
    }
button[disabled] svg {
      fill: var(--stepper-button-disabled-state-icon-color);
    }
