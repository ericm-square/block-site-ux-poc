:host, ::slotted(*), * {
  box-sizing: border-box;
}

:host([disabled]) {
  cursor: not-allowed !important; /* stylelint-disable-line declaration-no-important */
}

:host([disabled]) *, :host([disabled]) ::slotted(*) {
  cursor: not-allowed !important; /* stylelint-disable-line declaration-no-important */
  pointer-events: none !important; /* stylelint-disable-line declaration-no-important */
}

:host {
  /* not really necessary, but some folks in dashboard are anchoring
    absolutely positioned UI to field components, so for now... */
  position: relative;

  /* remove browser focus styles */
  outline: none;

  /* == fonts == */
  font-weight: var(--field-input-weight);
  font-size: var(--field-input-size);
  line-height: var(--field-input-leading);
  cursor: text;
}

/* == inner input element == */

:host input, :host ::slotted(input), :host textarea, :host ::slotted(textarea) {
    width: 100%;
    margin: 0;
    padding: 0;
    border: none;
    background-color: transparent;
    color: inherit;
    font-weight: inherit;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    cursor: inherit;
  }

:host ::slotted(label) {
    cursor: inherit;
  }

/* override default browser focus styles */

:host input:focus, :host ::slotted(input:focus), :host textarea:focus, :host ::slotted(textarea:focus) {
    outline: none;
  }

/* placeholder color */

:host input::-moz-placeholder, :host textarea::-moz-placeholder {
    color: var(--field-placeholder-text-color);
  }

:host input::placeholder, :host textarea::placeholder {
    color: var(--field-placeholder-text-color);
  }

/* similar to the style above. this selector does not work with Safari */

:host ::slotted(input)::-moz-placeholder, :host ::slotted(textarea)::-moz-placeholder {
    color: var(--field-placeholder-text-color);
  }

:host ::slotted(input)::placeholder, :host ::slotted(textarea)::placeholder {
    color: var(--field-placeholder-text-color);
  }

:host([size='small']) {
    font-size: var(--core-type-paragraph-20-size);
    line-height: var(--core-type-paragraph-20-leading);
  }

:host {
  /* == state:normal.validity:normal == */
  border-radius: var(--field-border-radius);
  background-color: var(--field-normal-state-background-color);
  color: var(--field-normal-state-input-color);
}

/* use pseudo to create border so we can use inset box-shadow but still layer on top */

:host::after {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: var(--field-border-radius);
    box-shadow: inset 0 0 0 var(--field-border-size) var(--field-normal-state-normal-validity-border-color);
    pointer-events: none;
  }

/*
  Border changes per state and per validity
  Do not reorder this section. They are organized by precedence
  (i.e. disabled is placed last, because it should override all other state attributes).
  */

/* == state:normal.validity:invalid == */

:host([invalid])::after {
    box-shadow: inset 0 0 0 var(--field-border-size) var(--field-normal-state-invalid-validity-border-color);
  }

/* == state:hover.validity:normal == */

:host(:hover) {
    background-color: var(--field-hover-state-background-color);
    color: var(--field-hover-state-input-color);
  }

:host(:hover)::after {
      box-shadow: inset 0 0 0 var(--field-border-size) var(--field-hover-state-normal-validity-border-color);
    }

/* == state:hover.validity:invalid == */

:host([invalid]:hover)::after {
    box-shadow: inset 0 0 0 var(--field-border-size) var(--field-hover-state-invalid-validity-border-color);
  }

/* == state:focus.validity:normal == */

:host([focused]) {
    color: var(--field-focus-state-input-color);
  }

:host([focused])::after {
      box-shadow:
        inset 0 0 0 var(--field-focus-state-border-size)
        var(--field-focus-state-normal-validity-border-color);
    }

/* == state:focus.validity:invalid == */

:host([focused][invalid])::after {
    box-shadow: inset 0 0 0 var(--field-focus-state-border-size) var(--field-focus-state-invalid-validity-border-color);
  }

/* == state:readonly == */

:host([readonly]:hover)::after {
    box-shadow: inset 0 0 0 var(--field-border-size) var(--field-normal-state-normal-validity-border-color);
  }

/* == state:disabled == */

:host([disabled]) {

    /* stylelint-disable declaration-no-important */
    background-color: var(--field-disabled-state-background-color) !important;
    color: var(--field-disabled-state-input-color) !important;
    cursor: not-allowed !important;
  }

:host([disabled])::after {
      box-shadow: inset 0 0 0 var(--field-border-size) var(--field-disabled-state-border-color) !important;
    }

/* stylelint-enable declaration-no-important */

:host([disabled]) ::slotted(.market-accessory), :host([disabled]) ::slotted(img[slot*="accessory"]), :host([disabled]) ::slotted(svg[slot*="accessory"]), :host([disabled]) ::slotted(div[slot*="accessory"]) {
      /* non-interactive slotted accessories should be dimmed when field is disabled (same behavior as rows) */
      --field-disabled-state-accessory-opacity: var(--row-disabled-state-leading-accessory-opacity);

      opacity: var(--field-disabled-state-accessory-opacity);
    }

/*
  Label color changes per state, per phase
  Do not reorder this section. They are organized by precedence
  (i.e. disabled is placed last, because it should override all other state attributes).
  */

/* == state:normal.phase:empty == */

:host([value=""]) ::slotted(label) {
    color: var(--field-normal-state-empty-phase-label-color);
  }

/* == state:normal.phase:float == */

:host(:not([value=""])) ::slotted(label), :host([value=""][autofilled]) ::slotted(label) {
    color: var(--field-normal-state-float-phase-label-color);
  }

/* == state:hover.phase:empty == */

:host(:hover) ::slotted(label) {
    color: var(--field-hover-state-empty-phase-label-color);
  }

/* == state:hover.phase:float == */

:host(:not([value=""]):hover) ::slotted(label), :host([value=""][autofilled]:hover) ::slotted(label) {
    color: var(--field-hover-state-float-phase-label-color);
  }

/* == state:focus.phase:float == */

:host([focused]) ::slotted(label) {
    color: var(--field-focus-state-float-phase-label-color);
  }

/* == state:disabled.phase:empty == */

:host([value=""][disabled]) ::slotted(label) {
    color: var(--field-disabled-state-empty-phase-label-color);
  }

/* == state:disabled.phase:float == */

:host(:not([value=""])[disabled]) ::slotted(label), :host([value=""][autofilled][disabled]) ::slotted(label) {
    color: var(--field-disabled-state-float-phase-label-color);
  }

:host {
  /* default accessory spacing */
  --field-accessory-horizontal-spacing-size: 16px;
  --field-size-small-accessory-horizontal-spacing-size: 12px;

  /* image accessory spacing */
  --field-size-large-image-accessory-outer-spacing-size: 12px;
  --field-size-medium-image-accessory-outer-spacing-size: 4px;

  /* button accessory spacing */
  --field-size-large-button-accessory-outer-spacing-size: 12px;
  --field-size-medium-button-accessory-outer-spacing-size: 4px;

  /* tooltip accessory spacing */
  --field-size-large-tooltip-accessory-horizontal-spacing-size: 5px;
  --field-size-large-tooltip-accessory-vertical-spacing-size: -1px;
  --field-size-small-tooltip-accessory-horizontal-spacing-size: 1px;
}

/* Leading accessories */

:host ::slotted([slot="leading-accessory"]) {
    flex-shrink: 0;
    margin-right: var(--field-accessory-horizontal-spacing-size);
    margin-left: var(--field-accessory-horizontal-spacing-size);
  }

:host ::slotted(.market-accessory[slot="leading-accessory"][size="image"]) {
    margin-left: var(--field-size-large-image-accessory-outer-spacing-size);
  }

:host ::slotted(.market-tooltip[slot="leading-accessory"]) {
    /* Typically the tooltip would be a trailing accessory,
     but just in case it's ever used as leading accessory */
    margin:
      var(--field-size-large-tooltip-accessory-vertical-spacing-size)
      var(--field-size-large-tooltip-accessory-horizontal-spacing-size);
  }

:host ::slotted(.market-button[slot="leading-accessory"][size="small"]) {
    /* Typically the button would be a trailing accessory,
     but just in case it's ever used as leading accessory */
    margin-left: var(--field-size-large-button-accessory-outer-spacing-size);
  }

/* Trailing accessories */

:host ::slotted([slot="trailing-accessory"]) {
    flex-shrink: 0;
    margin-right: var(--field-accessory-horizontal-spacing-size);
    margin-left: var(--field-accessory-horizontal-spacing-size);
  }

:host ::slotted(.market-accessory[slot="trailing-accessory"][size="image"]) {
    margin-right: var(--field-size-large-image-accessory-outer-spacing-size);
  }

:host ::slotted(.market-tooltip[slot="trailing-accessory"]) {
    margin:
      var(--field-size-large-tooltip-accessory-vertical-spacing-size)
      var(--field-size-large-tooltip-accessory-horizontal-spacing-size);
  }

:host ::slotted(.market-button[slot="trailing-accessory"][size="small"]) {
    margin-right: var(--field-size-large-button-accessory-outer-spacing-size);
  }

/* Size medium */

:host([size='medium']) ::slotted(.market-accessory[slot="leading-accessory"][size="image"]) {
      margin-left: var(--field-size-medium-image-accessory-outer-spacing-size);
    }

:host([size='medium']) ::slotted(.market-button[slot="leading-accessory"][size="small"]) {
      margin-left: var(--field-size-medium-button-accessory-outer-spacing-size);
    }

:host([size='medium']) ::slotted(.market-accessory[slot="trailing-accessory"][size="image"]) {
      margin-right: var(--field-size-medium-image-accessory-outer-spacing-size);
    }

:host([size='medium']) ::slotted(.market-button[slot="trailing-accessory"][size="small"]) {
      margin-right: var(--field-size-medium-button-accessory-outer-spacing-size);
    }

/* Size small */

:host([size='small']) ::slotted([slot="leading-accessory"]), :host([size='small']) ::slotted([slot="trailing-accessory"]) {
      margin-right: var(--field-size-small-accessory-horizontal-spacing-size);
      margin-left: var(--field-size-small-accessory-horizontal-spacing-size);
    }

:host([size='small']) ::slotted(.market-tooltip[slot="leading-accessory"]), :host([size='small']) ::slotted(.market-tooltip[slot="trailing-accessory"]) {
      margin-right: var(--field-size-small-tooltip-accessory-horizontal-spacing-size);
      margin-left: var(--field-size-small-tooltip-accessory-horizontal-spacing-size);
    }

:host .label-input-container.has-leading-accessory {
    padding-left: 0 !important; /* stylelint-disable-line declaration-no-important */
  }

:host .label-input-container.has-trailing-accessory {
    padding-right: 0 !important; /* stylelint-disable-line declaration-no-important */
  }

:host {
  /* used for empty state scale transform */
  --field-input-animation-speed: 0.2s;
  --field-input-label-translate: 12px;
  --field-empty-phase-label-text-size-unitless: 16;
  --field-float-phase-label-text-size-unitless: 14;

  /* size medium */
  --field-size-medium-float-phase-vertical-padding-size: 12px;
  --field-size-medium-float-phase-horizontal-padding-size: 16px;

  /* size small */
  --field-size-small-float-phase-vertical-padding-size: 9px;
  --field-size-small-float-phase-horizontal-padding-size: 12px;

  display: flex;
  align-items: center;
}

:host .label-input-container, :host([value='']:not([focused]):not([autofilled])) .label-input-container {
    flex-grow: 1;
    padding: var(--field-float-phase-vertical-padding-size) var(--field-float-phase-horizontal-padding-size);
  }

:host([size='medium']) .label-input-container, :host([size='medium'][value='']:not([focused]):not([autofilled])) .label-input-container {
    padding:
      var(--field-size-medium-float-phase-vertical-padding-size)
      var(--field-size-medium-float-phase-horizontal-padding-size);
  }

:host([size='small']) .label-input-container, :host([size='small'][value='']:not([focused]):not([autofilled])) .label-input-container {
    padding:
      var(--field-size-small-float-phase-vertical-padding-size)
      var(--field-size-small-float-phase-horizontal-padding-size);
  }

/* == phase:empty == */

:host ::slotted(label) {
    display: block;
    min-height: var(--field-empty-phase-label-text-leading);
    font-weight: var(--field-empty-phase-label-text-weight);
    font-size: var(--field-empty-phase-label-text-size);
    line-height: var(--field-empty-phase-label-text-leading);
    letter-spacing: var(--field-empty-phase-label-text-tracking);
    transition: all var(--field-input-animation-speed);
    transform: translateY(var(--field-input-label-translate));
    transform-origin: 0 0;
  }

/* == phase:float == */

:host(:not([value=""])) ::slotted(label), :host([value=""]:not([focused])[autofilled]) ::slotted(label), :host([focused]) ::slotted(label) {
    font-weight: var(--field-float-phase-label-text-weight);
    transform:
      scale(
        calc(var(--field-float-phase-label-text-size-unitless) / var(--field-empty-phase-label-text-size-unitless))
      );
  }

/* normally (unfocused), hide the input & placeholder */

:host input, :host ::slotted(input), :host textarea, :host ::slotted(textarea) {
    opacity: 0%;
  }

/* focused or with value, show the input & placeholder */

:host([focused]) input, :host([focused]) ::slotted(input), :host([focused]) textarea, :host([focused]) ::slotted(textarea), :host(:not([value=''])) input, :host(:not([value=''])) ::slotted(input), :host(:not([value=''])) textarea, :host(:not([value=''])) ::slotted(textarea) {
      opacity: 100%;
    }

/* when not size large... */

/* visually hide the label */

:host([size='small']) ::slotted(label), :host([size='medium']) ::slotted(label) {
      position: absolute;
      overflow: hidden;
      clip: rect(0 0 0 0);
      width: 1px;
      height: 1px;
      white-space: nowrap;
      -webkit-clip-path: inset(50%);
              clip-path: inset(50%);
    }

/* input & placeholder is always visible */

:host([size='small']) input, :host([size='small']) ::slotted(input), :host([size='small']) textarea, :host([size='small']) ::slotted(textarea), :host([size='medium']) input, :host([size='medium']) ::slotted(input), :host([size='medium']) textarea, :host([size='medium']) ::slotted(textarea) {
      opacity: 100%;
    }

/* hide number arrows on input */

:host input::-webkit-outer-spin-button, :host input::-webkit-inner-spin-button {
    margin: 0;
    -webkit-appearance: none;
            appearance: none;
  }

/* this will remove number arrows in firefox */

:host input[type="number"] {
    -webkit-appearance: textfield;
       -moz-appearance: textfield;
            appearance: textfield;
  }

/* styles to disable the native UI elements for input type time */

input[type="time"]::-webkit-inner-spin-button, input[type="time"]::-webkit-outer-spin-button, input[type="time"]::-webkit-clear-button, input[type="time"]::-webkit-calendar-picker-indicator {
  display: none;
}

/* Hide date picker caret */
input[type="date"]::-webkit-calendar-picker-indicator, input[type="time"]::-webkit-calendar-picker-indicator {
  display: none;
}

/* Remove spacing created by Webkit for the calendar picker */
input[type="date"]::-webkit-inner-spin-button, input[type="time"]::-webkit-inner-spin-button, input[type="date"]::-webkit-clear-button, input[type="time"]::-webkit-clear-button {
  display: none;
  margin: 0;
  -webkit-appearance: none;
          appearance: none;
}

/* Visually displays a placeholder when no value is set but a placeholder is set elsewhere,
   such as with Safari using their own placeholders for date and time inputs */
:host([value=""]) input, :host([value=""]) ::slotted(input) {
  color: var(--field-placeholder-text-color);
}

/*
  These animations are part of a hack that allows us to detect browser autofill:
  https://stackoverflow.com/a/41530164
*/

:host input:-webkit-autofill, :host ::slotted(input:-webkit-autofill) {
  animation-name: market-input-autofill-start;
  animation-duration: 0.1ms;
}

:host input:not(:-webkit-autofill), :host ::slotted(input:not(:-webkit-autofill)) {
  animation-name: market-input-autofill-cancel;
  animation-duration: 0.1ms;
}

:host input::-webkit-date-and-time-value {
  text-align: left;
}

:host ::slotted(input::-webkit-date-and-time-value) {
  text-align: left;
}
