{"version":3,"file":"market-progress-tracker.js","sourceRoot":"","sources":["../../../../src/components/market-progress-tracker/market-progress-tracker.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Host, h, Prop, Listen, Watch } from '@stencil/core';\n\nimport { TMarketProgressTrackerStepClickEventDetail } from './subcomponents/market-progress-tracker-step/events';\nimport { isElementWithTagName } from '../../utils/namespace';\nimport { pick } from 'lodash-es';\n\n/**\n * @slot - Default slot, intended to be slotted with `<market-progress-tracker-step>`s\n */\n@Component({\n  tag: 'market-progress-tracker',\n  shadow: true,\n  styleUrl: 'market-progress-tracker.css',\n})\nexport class MarketProgressTracker {\n  @Element() el: HTMLMarketProgressTrackerElement;\n\n  /**\n   * Whether the progress tracker is in compact mode\n   *\n   * Only functional when `orientation` is set to `\"horizontal\"`\n   *\n   * @default false\n   */\n  @Prop() readonly compact: boolean = false;\n\n  /**\n   * Whether there are connectors displayed between steps\n   *\n   * @default false\n   */\n  @Prop() readonly connectorless: boolean = false;\n\n  /**\n   * Index of the current step of the tracker\n   *\n   * When defined, the child `market-progress-tracker-step` components’\n   * `active` and `completed` attributes will be automatically set.\n   *\n   * Otherwise, it is expected that the steps’\n   * `active` and `completed` properties are manually set.\n   *\n   * @default undefined\n   */\n  @Prop({ mutable: true, reflect: true }) currentStepIndex: number;\n\n  /**\n   * Type of icon used to indicate the step’s progress\n   *\n   * @default undefined\n   */\n  @Prop() readonly indicator: 'circle' | 'check';\n\n  /**\n   * Whether this step tracker is interactive\n   *\n   * Only functional when `orientation` is set to `\"horizontal\"`\n   *\n   * @default false\n   */\n  @Prop() readonly interactive: boolean = false;\n\n  /**\n   * Progress tracker orientation\n   *\n   * @default 'vertical'\n   */\n  @Prop() readonly orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Whether the direction of the progress indicators is reversed\n   *\n   * @default false\n   */\n  @Prop() readonly reversed: boolean = false;\n\n  /**\n   * Steps’ size\n   *\n   * @default 'medium'\n   */\n  @Prop({ reflect: true }) readonly size: 'large' | 'medium' | 'small' = 'medium';\n\n  @Listen('marketProgressTrackerStepClick')\n  marketProgressTrackerStepClickEventHandler(event: CustomEvent<TMarketProgressTrackerStepClickEventDetail>) {\n    const {\n      defaultPrevented,\n      detail: { index },\n    } = event;\n\n    // state will be updated only if `currentStepIndex` is defined\n    if (!defaultPrevented && this.currentStepIndex !== undefined) {\n      this.currentStepIndex = index;\n    }\n  }\n\n  @Watch('currentStepIndex')\n  currentStepIndexWatcher() {\n    this.updateStepState();\n  }\n\n  @Watch('reversed')\n  reversedWatcher() {\n    this.updateStepState();\n  }\n\n  @Watch('compact')\n  @Watch('indicator')\n  @Watch('interactive')\n  @Watch('orientation')\n  @Watch('size')\n  otherPropsWatcher(newValue: unknown, propKey: 'compact' | 'indicator' | 'interactive' | 'orientation' | 'size') {\n    this.propagatePropsToSteps({ [propKey]: newValue });\n  }\n\n  get stepEls() {\n    return [...this.el.children].filter((childEl): childEl is HTMLMarketProgressTrackerStepElement =>\n      isElementWithTagName(childEl, 'market-progress-tracker-step'),\n    );\n  }\n\n  updateStepState() {\n    const { connectorless, currentStepIndex, reversed, stepEls } = this;\n    const orderedSteps = reversed ? [...stepEls].reverse() : stepEls; // logical order\n\n    // set `data-step-index` based on logical order\n    orderedSteps.forEach((stepEl, index) => {\n      stepEl.dataset.stepIndex = `${index}`;\n    });\n\n    // automatically updates steps’ `completed` and `active` states if `currentStepIndex` is defined\n    if (currentStepIndex !== undefined) {\n      orderedSteps.forEach((stepEl, index) => {\n        stepEl.completed = index < currentStepIndex;\n        stepEl.active = index === currentStepIndex;\n      });\n    }\n\n    const activeIndex = currentStepIndex ?? orderedSteps.findIndex((stepEl) => stepEl.active) ?? -1;\n    stepEls.forEach((stepEl, index) => {\n      if (index < stepEls.length - 1) {\n        if (connectorless) {\n          stepEl.connector = null;\n        } else if ((reversed && index >= stepEls.length - activeIndex - 1) || (!reversed && index < activeIndex)) {\n          stepEl.connector = 'active';\n        } else {\n          stepEl.connector = 'inactive';\n        }\n      } else {\n        /**\n         * visually hides the last item’s connector:\n         *  - null:   progress tracker is connectorless\n         *  - hidden: progress tracker has connectors, but only the last step’s connector is hidden\n         * note that this has styling implications\n         */\n        stepEl.connector = connectorless ? null : 'hidden';\n      }\n    });\n  }\n\n  /**\n   * Updates the steps’ props based on the provided prop-value pair(s)\n   */\n  propagatePropsToSteps(\n    propValues: Partial<\n      Pick<HTMLMarketProgressTrackerElement, 'compact' | 'indicator' | 'interactive' | 'orientation' | 'size'>\n    >,\n  ) {\n    this.stepEls.forEach((stepEl) => {\n      stepEl.compact = propValues?.compact ?? stepEl.compact;\n      stepEl.indicator = propValues?.indicator ?? stepEl.indicator;\n      stepEl.interactive = propValues?.interactive ?? stepEl.interactive;\n      stepEl.orientation = propValues?.orientation ?? stepEl.orientation;\n      stepEl.size = propValues?.size ?? stepEl.size;\n    });\n  }\n\n  handleDefaultSlotChange() {\n    this.propagatePropsToSteps(pick(this, 'compact', 'indicator', 'interactive', 'orientation', 'size'));\n    this.updateStepState();\n  }\n\n  connectedCallback() {\n    this.propagatePropsToSteps(pick(this, 'compact', 'indicator', 'interactive', 'orientation', 'size'));\n    this.updateStepState();\n  }\n\n  render() {\n    const { handleDefaultSlotChange, interactive } = this;\n\n    return (\n      <Host class=\"market-progress-tracker\" role={interactive ? 'tablist' : 'list'}>\n        <slot onSlotchange={handleDefaultSlotChange.bind(this)}></slot>\n      </Host>\n    );\n  }\n}\n"]}