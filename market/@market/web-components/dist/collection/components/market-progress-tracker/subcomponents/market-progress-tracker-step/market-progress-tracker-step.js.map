{"version":3,"file":"market-progress-tracker-step.js","sourceRoot":"","sources":["../../../../../../src/components/market-progress-tracker/subcomponents/market-progress-tracker-step/market-progress-tracker-step.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Element, EventEmitter, Prop, Fragment, Event, State, Watch } from '@stencil/core';\n\nimport { TMarketProgressTrackerStepClickEventDetail } from './events';\nimport { getIcon } from './icons';\nimport { classNames } from '../../../../utils/classnames';\nimport { getNamespacedTagFor } from '../../../../utils/namespace';\n\n/**\n * @slot label - Primary text for the step\n * @slot subtext - Secondary text for the step\n * @part icon - The `<market-accessory>` that contains the custom icon indicator\n * @part content - The container for the text content\n * @part button - The clickable part when interactive and on horizontal orientation\n */\n@Component({\n  tag: 'market-progress-tracker-step',\n  styleUrl: './styles/market-progress-tracker-step.css',\n  shadow: true,\n})\nexport class MarketProgressTrackerStep {\n  @Element() el: HTMLMarketProgressTrackerStepElement;\n\n  /**\n   * Whether the step is active\n   *\n   * @default false\n   */\n  @Prop({ reflect: true }) readonly active: boolean = false;\n\n  /**\n   * @internal\n   *\n   * Whether the step is in compact mode\n   *\n   * Only functional when `orientation` is set to `\"horizontal\"`\n   *\n   * @default false\n   */\n  @Prop({ reflect: true }) readonly compact: boolean = false;\n\n  /**\n   * @internal\n   *\n   * Type of connector displayed between steps\n   *\n   * @default undefined\n   */\n  @Prop({ reflect: true }) readonly connector: 'active' | 'hidden' | 'inactive';\n\n  /**\n   * Whether the step is completed\n   *\n   * @default false\n   */\n  @Prop({ reflect: true }) readonly completed: boolean = false;\n\n  /**\n   * @internal\n   *\n   * Type of icon used to indicate the step’s progress\n   *\n   * This is disregarded when a custom icon is slotted via the `icon` slot.\n   *\n   * @default 'circle'\n   */\n  @Prop() readonly indicator: 'circle' | 'check' = 'circle';\n\n  /**\n   * @internal\n   *\n   * Whether the step is interactive\n   *\n   * Only functional when `orientation` is set to `\"horizontal\"`\n   *\n   * @default false\n   */\n  @Prop({ reflect: true }) readonly interactive: boolean = false;\n\n  /**\n   * Unique name of the step\n   *\n   * When this step is interactive and clicked, it is included in the detail of the emitted event.\n   *\n   * @default undefined\n   */\n  @Prop() readonly name: string;\n\n  /**\n   * @internal\n   *\n   * Affects the step’s appearance\n   *\n   * @default 'vertical'\n   */\n  @Prop({ reflect: true }) readonly orientation: 'vertical' | 'horizontal' = 'vertical';\n\n  /**\n   * @internal\n   *\n   * Step’s size\n   *\n   * @default 'medium'\n   */\n  @Prop({ reflect: true }) readonly size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Emitted when this step is clicked\n   */\n  @Event({ bubbles: true, composed: true })\n  marketProgressTrackerStepClick: EventEmitter<TMarketProgressTrackerStepClickEventDetail>;\n\n  /**\n   * Default icon element if an `icon` slot isn’t provided\n   */\n  @State() defaultIcon: SVGElement;\n\n  /**\n   * Updates the default icon based on the following attributes\n   */\n  @Watch('active')\n  @Watch('completed')\n  @Watch('indicator')\n  @Watch('orientation')\n  updateDefaultIcon() {\n    const { active, completed, el, indicator, orientation } = this;\n\n    const slottedIcon = [...el.children].some((e) => e.slot === 'icon');\n    if (slottedIcon) {\n      this.defaultIcon = null;\n    } else {\n      this.defaultIcon = getIcon({ active, completed, indicator, orientation });\n    }\n  }\n\n  handleClick() {\n    const { el, interactive, marketProgressTrackerStepClick, name } = this;\n    if (interactive) {\n      marketProgressTrackerStepClick.emit({\n        index: el.dataset.stepIndex !== undefined ? Number.parseInt(el.dataset.stepIndex, 10) : null,\n        name: name ?? null,\n      });\n    }\n  }\n\n  connectedCallback() {\n    this.updateDefaultIcon();\n  }\n\n  render() {\n    const { defaultIcon, handleClick, interactive, orientation, updateDefaultIcon } = this;\n    const MarketAccessoryTagName = getNamespacedTagFor('market-accessory');\n    const HorizontalWrapperTagName = interactive ? 'button' : 'div';\n\n    const renderContent = () => {\n      return (\n        <Fragment>\n          <div class={classNames('icon', { 'custom-icon': Boolean(!defaultIcon) })} part=\"icon\">\n            <slot name=\"icon\" onSlotchange={updateDefaultIcon.bind(this)}>\n              <MarketAccessoryTagName>{defaultIcon}</MarketAccessoryTagName>\n            </slot>\n          </div>\n          <div class=\"content\" part=\"content\">\n            <slot name=\"label\"></slot>\n            <slot name=\"subtext\"></slot>\n            <slot></slot>\n          </div>\n        </Fragment>\n      );\n    };\n\n    return (\n      <Host class=\"market-progress-tracker-step\" role={orientation === 'horizontal' ? 'presentation' : 'listitem'}>\n        {orientation === 'horizontal' ? (\n          <HorizontalWrapperTagName\n            class={interactive ? 'button' : 'label'}\n            onClick={interactive ? handleClick.bind(this) : null}\n            part={interactive ? 'button' : null}\n            role={interactive ? 'tab' : 'listitem'}\n          >\n            {renderContent()}\n          </HorizontalWrapperTagName>\n        ) : (\n          renderContent()\n        )}\n      </Host>\n    );\n  }\n}\n"]}