{"version":3,"file":"market-code-input.js","sourceRoot":"","sources":["../../../../src/components/market-code-input/market-code-input.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Element, Prop, State, Method, Watch, EventEmitter, Event } from '@stencil/core';\n\n/**\n * @slot trailing-accessory - An icon set on the right side of the input.\n */\n@Component({\n  tag: 'market-code-input',\n  styleUrl: 'market-code-input.css',\n  shadow: true,\n})\nexport class MarketCodeInput {\n  @Element() el: HTMLMarketCodeInputElement;\n\n  /**\n   * A string specifying the type of input to render (text or numeric)\n   */\n  @Prop({ reflect: true }) readonly type: 'text' | 'number' | 'password' = 'number';\n\n  /**\n   * A string specifying a name for the code input.\n   */\n  @Prop() readonly name: string;\n\n  /**\n   * A number specifying the length of the code\n   */\n  @Prop() readonly length: number = 4;\n\n  /**\n   * A boolean representing whether the code input is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * A string representing a default value (code) that can be passed in to be rendered\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /**\n   * A boolean representing whether the input is readonly or not.\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean = false;\n\n  /**\n   * A boolean representing whether the input is invalid or not.\n   * This represents error states.\n   */\n  @Prop({ reflect: true }) readonly invalid: boolean = false;\n\n  /**\n   * A boolean representing whether the input is disabled or not.\n   * This visually and functionally will disable the input.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  // Internal array representation of the code\n  @State() _code: Array<string>;\n\n  /**\n   * Emitted whenever any of the input values change.\n   */\n  @Event() marketCodeInputValueChange: EventEmitter<{ code: string }>;\n\n  @Watch('value')\n  valueChangeHandler(value: string) {\n    const sanitized = this.sanitizeValue(value);\n    if (this.value !== sanitized) {\n      this.value = sanitized;\n    }\n    this.setInputsFromValue(this.value);\n  }\n\n  /**\n   * Trigger focus styling on `<market-input-text>`\n   * and focus the cursor on the first empty `<input />`.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    this.focused = value;\n    if (value) {\n      this.focusFirstEmptyInput();\n    } else {\n      (this.el.shadowRoot.activeElement as HTMLInputElement)?.blur();\n    }\n    return Promise.resolve();\n  }\n\n  isNumber(value: string): boolean {\n    return /^\\d+$/.test(value);\n  }\n\n  isValidChar(char) {\n    // no whitespace\n    if (/\\s/.test(char)) return false;\n    // number check\n    return ['text', 'password'].includes(this.type) || this.isNumber(char);\n  }\n\n  focusFirstEmptyInput() {\n    const inputs = this.el.shadowRoot.querySelectorAll('input');\n    let input;\n    inputs.forEach((i) => {\n      if (!i.value && !input) input = i;\n    });\n    if (!input) input = inputs[this.length - 1];\n    input.focus();\n  }\n\n  /**\n   * Inits this._code to the passed-in `value` prop or to an\n   * empty array representation of the code input i.e ['', '', '', '']\n   * Called only once on componentWillLoad() as to not cause re-renders\n   */\n  initCode(value) {\n    if (value) {\n      this._code = value.split('');\n\n      // ensure that this._code is always of size this.length\n      if (this._code.length < this.length) {\n        const padding = Array.from<string>({ length: this.length - this._code.length }).fill('');\n        this._code = [...this._code, ...padding];\n      } else if (this._code.length > this.length) {\n        this._code = this._code.slice(0, this.length);\n      }\n    } else {\n      this._code = Array.from<string>({ length: this.length }).fill('');\n    }\n  }\n\n  sanitizeValue(value: string): string {\n    return value\n      .split('')\n      .filter((char) => this.isValidChar(char))\n      .join('')\n      .slice(0, this.length);\n  }\n\n  getValueFromInputs() {\n    let value = '';\n    this.el.shadowRoot.querySelectorAll('input').forEach((input) => {\n      value += input.value;\n    });\n    return value;\n  }\n\n  setInputsFromValue(value: string) {\n    const inputs = this.el.shadowRoot.querySelectorAll('input');\n\n    inputs.forEach((input, i) => {\n      const char = value[i];\n      const prevChar = value[i - 1];\n\n      // set the input value\n      input.value = char || '';\n\n      // set the input tabindex\n      if (i === 0 || prevChar) {\n        input.removeAttribute('tabindex');\n      } else {\n        input.tabIndex = -1;\n      }\n    });\n  }\n\n  spreadChars(e) {\n    const { target, data } = e;\n    const chars = data || target.value;\n    if (!chars) return;\n\n    const sanitized = this.sanitizeValue(chars);\n    if (sanitized) {\n      this.insertChars(target, sanitized.split(''));\n    } else {\n      target.value = '';\n    }\n  }\n\n  insertChars(input, chars: Array<string>) {\n    const { nextElementSibling } = input;\n    const [first, ...rest] = chars;\n\n    input.value = first;\n    nextElementSibling?.focus();\n\n    if (nextElementSibling && rest.length > 0) {\n      this.insertChars(nextElementSibling, rest);\n    }\n  }\n\n  updateValue() {\n    const previousValue = this.value;\n    const newValue = this.sanitizeValue(this.getValueFromInputs());\n    if (previousValue !== newValue) {\n      const { defaultPrevented } = this.marketCodeInputValueChange.emit({ code: newValue });\n      if (defaultPrevented) {\n        this.setInputsFromValue(previousValue);\n      } else {\n        this.value = newValue;\n      }\n    }\n  }\n\n  onInput(e) {\n    // Handle paste or autocomplete of multiple chars\n    this.spreadChars(e);\n    this.updateValue();\n  }\n\n  onFocus(e) {\n    const { target } = e;\n    this.focused = true;\n\n    if (target.value) {\n      target.select();\n    } else {\n      this.focusFirstEmptyInput();\n    }\n  }\n\n  onBlur() {\n    this.focused = false;\n  }\n\n  onKeyDown(e) {\n    const { target, key } = e;\n    const { value, previousElementSibling, nextElementSibling } = target;\n\n    switch (key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        previousElementSibling?.select();\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        nextElementSibling?.select();\n        break;\n      case 'Backspace':\n        if (!value) previousElementSibling?.select();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyUp(e) {\n    const { target } = e;\n    const { value } = target;\n\n    if (value.length > 1) {\n      this.spreadChars(e);\n    } else if (!this.isValidChar(value)) {\n      target.value = '';\n      target.focus();\n    }\n  }\n\n  onHostClick() {\n    // if a child input does not already have focus\n    if (!this.el.shadowRoot.activeElement) {\n      this.setFocus();\n    }\n  }\n\n  componentWillLoad() {\n    this.valueChangeHandler(this.value);\n    this.initCode(this.value);\n  }\n\n  render() {\n    const inputs = [];\n    this._code.forEach((char: string, index: number) => {\n      const tabindex = this._code[index - 1] || index === 0 ? null : -1;\n      inputs.push(\n        <input\n          required\n          type={this.type === 'password' ? 'password' : 'text'}\n          inputmode={this.type === 'number' ? 'numeric' : null}\n          autocomplete={index === 0 ? 'one-time-code' : null}\n          value={char}\n          maxlength={index === this.length - 1 ? '1' : null}\n          readOnly={this.readonly}\n          disabled={this.disabled}\n          placeholder=\"●\"\n          tabindex={tabindex}\n          onFocus={(e) => this.onFocus(e)}\n          onBlur={() => this.onBlur()}\n          onInput={(e) => this.onInput(e)}\n          onKeyDown={(e) => this.onKeyDown(e)}\n          onKeyUp={(e) => this.onKeyUp(e)}\n        />,\n      );\n    });\n\n    return (\n      <Host class=\"market-code-input\" name={this.name} onClick={() => this.onHostClick()}>\n        <span class=\"code-input-container\">{inputs}</span>\n        <slot name=\"trailing-accessory\"></slot>\n      </Host>\n    );\n  }\n}\n"]}