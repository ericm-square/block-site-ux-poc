{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../src/components/market-code-input/test/utils.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,EAAc,EAAE,KAAa;IACjE,4BAA4B;IAC5B,MAAM,gBAAgB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAClC,wBAAwB;IACxB,MAAM,CAAC,EAAE,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5C,uBAAuB;IACvB,MAAM,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,EAAc,EAAE,KAAa;IAClE,MAAM,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;IACxB,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAEhD,uCAAuC;IACvC,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;QAChC,MAAM,CAAC,MAAM,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,EAAc,EAAE,KAAa;IACrE,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,4BAA4B,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5E,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;AAC/B,CAAC","sourcesContent":["import { E2EElement } from '@stencil/core/testing';\n\nexport async function expectValueToBe(el: E2EElement, value: string): Promise<void> {\n  // check shadow input values\n  await expectInputsToBe(el, value);\n  // check value attribute\n  expect(el).toEqualAttribute('value', value);\n  // check value property\n  expect(await el.getProperty('value')).toEqual(value);\n}\n\nexport async function expectInputsToBe(el: E2EElement, value: string): Promise<void> {\n  const code = [...value];\n  const inputs = await el.findAll('pierce/input');\n\n  // pad the code array with empty values\n  for (let i = value.length; i < inputs.length; i++) {\n    code.push('');\n  }\n\n  inputs.forEach(async (input, i) => {\n    expect(await input.getProperty('value')).toBe(code[i]);\n  });\n}\n\nexport async function expectInputHasFocus(el: E2EElement, index: number): Promise<void> {\n  const input = await el.find(`pierce/input:nth-of-type(${index + 1}):focus`);\n  expect(input).not.toBeNull();\n}\n"]}