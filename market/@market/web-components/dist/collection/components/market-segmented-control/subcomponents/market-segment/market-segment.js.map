{"version":3,"file":"market-segment.js","sourceRoot":"","sources":["../../../../../../src/components/market-segmented-control/subcomponents/market-segment/market-segment.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAgB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAOtG,MAAM,OAAO,aAAa;;wBAMoC,KAAK;;wBAUpC,KAAK;;IAWlC,gBAAgB,CAAC,KAAK;QACpB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAGD,aAAa;QACX,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC;QACzC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAC,gBAAgB,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE;YACvF,8DAAa,CACR,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Element, Event, EventEmitter, Method, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'market-segment',\n  styleUrl: 'market-segment.css',\n  shadow: true,\n})\nexport class MarketSegment {\n  @Element() el: HTMLMarketSegmentElement;\n\n  /**\n   * Whether the market segment should appear in a disabled state.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * A string specifying a value for the segment.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string;\n\n  /**\n   * A boolean specifying whether the segment is selected or not.\n   */\n  @State() selected: boolean = false;\n\n  /**\n   * Fired when the segment is clicked or otherwise selected\n   */\n  @Event({ bubbles: true, composed: true }) marketSegmentSelectedChanged: EventEmitter<{\n    value: boolean;\n    prevValue: boolean;\n  }>;\n\n  @Method()\n  setSelectedState(state) {\n    this.selected = state;\n    return Promise.resolve();\n  }\n\n  @Method()\n  selectSegment() {\n    if (this.selected || this.disabled) {\n      return Promise.resolve();\n    }\n    this.marketSegmentSelectedChanged.emit();\n    return Promise.resolve();\n  }\n\n  render() {\n    return (\n      <Host selected={this.selected} class=\"market-segment\" onClick={() => this.selectSegment()}>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"]}