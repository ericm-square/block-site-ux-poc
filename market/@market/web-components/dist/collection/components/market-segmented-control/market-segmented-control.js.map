{"version":3,"file":"market-segmented-control.js","sourceRoot":"","sources":["../../../../src/components/market-segmented-control/market-segmented-control.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,oCAAoC,EAAE,MAAM,sCAAsC,CAAC;AAC5F,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAC7G,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,SAAS,YAAY,CAAC,KAAc;IAClC,OAAO,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;AAChF,CAAC;AAMD,MAAM,OAAO,sBAAsB;;;qBASuB,EAAE;wBAMJ,KAAK;;IAG3D,YAAY;QACV,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IAEH,qBAAqB;;QACnB,MAAA,IAAI,CAAC,KAAK,0CAAE,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjE,CAAC;IAYD;;OAEG;IACH,sBAAsB;;QACpB,MAAA,IAAI,CAAC,KAAK,0CAAE,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC3B,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;gBAC9B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAClF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;QAC3E,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACnC,CAAC;YACD,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAED;;OAEG;IACH,aAAa;;QACX,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CACvB,yBAAyB,EACzB,QAAQ,GAAG,IAAG,MAAA,IAAI,CAAC,KAAK,0CAAE,MAAM,CAAA,OAAO,oCAAoC,GAAG,CAAC,KAAK,CACrF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,YAAY,GAAG,SAAS;QACxC,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,wBAAwB,EAAE,GAAG,oCAAoC,IAAI,CAAC,CAAC;YACjG,OAAO;QACT,CAAC;QAED,MAAM,iBAAiB,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAChE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CACvB,wBAAwB,EACxB,QAAQ,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,GAAG,OAAO,oCAAoC,KAAK,CACtG,CAAC;IACJ,CAAC;IAED;;;OAGG;IAEH,wBAAwB;QACtB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAGD,iCAAiC,CAAC,CAAc;QAC9C,MAAM,YAAY,GAAG,CAAC,CAAC,MAAkC,CAAC;QAE1D,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,YAAY,CAEnF,CAAC;QAEd,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACvC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAEpC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAErC,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC;YAC1C,eAAe,EAAE,YAAY;YAC7B,oBAAoB,EAAE,YAAY,CAAC,KAAK;YACxC,iBAAiB,EAAE,aAAa;YAChC,sBAAsB,EAAE,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,KAAK;SAC7C,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,0BAA0B;YACpC,6DAAM,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,wBAAwB,EAAE,GAAS,CAC7D,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { SEGMENTED_CONTROL_PADDING_HORIZONTAL } from '@market/market-theme/js/cjs/index.js';\nimport { Component, Host, Prop, h, Listen, Element, Watch, State, Event, EventEmitter } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\nfunction isValueEmpty(value: unknown): boolean {\n  return value === '' || value === ' ' || value === null || value === undefined;\n}\n@Component({\n  tag: 'market-segmented-control',\n  styleUrl: 'market-segmented-control.css',\n  shadow: true,\n})\nexport class MarketSegmentedControl {\n  selectedSlider: HTMLElement;\n  @Element() el: HTMLMarketSegmentedControlElement;\n  @State() items: NodeListOf<HTMLMarketSegmentElement>;\n\n  /**\n   * A string specifying a value for the segmented-control.\n   * This value determines which segment is selected based on the segment value.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /**\n   * A boolean representing whether the market-segmented-control is disabled or not.\n   * This visually and functionally will disable the control area.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  @Watch('value')\n  valueWatcher() {\n    this.setSelectionsFromValue();\n  }\n\n  /**\n   * If a segment gets slotted in, set the value to match that of the row\n   */\n  @Watch('disabled')\n  disabledChangeHandler() {\n    this.items?.forEach((item) => (item.disabled = this.disabled));\n  }\n\n  /**\n   * Fired when the a new segment is selected\n   */\n  @Event({ bubbles: true, composed: true }) marketSegmentedSelectionDidChange: EventEmitter<{\n    selectedSegment: HTMLMarketSegmentElement;\n    selectedSegmentValue: string;\n    deselectedSegment: HTMLMarketSegmentElement;\n    deselectedSegmentValue: string;\n  }>;\n\n  /**\n   * Select item that corresponds to passed value, or clear all values if value is empty string.\n   */\n  setSelectionsFromValue() {\n    this.items?.forEach((item) => {\n      if (this.value === item.value) {\n        item.setSelectedState(true);\n        this.setSliderPosition(item);\n      } else {\n        item.setSelectedState(false);\n      }\n    });\n  }\n\n  /**\n   * Sets the initial state of the segmented-control by updating and propagating props and setting\n   * default value.\n   */\n  setInternalState() {\n    this.items = this.el.querySelectorAll(`${getNamespacedTagFor('market-segment')}`);\n    this.selectedSlider = this.el.shadowRoot.getElementById('selected-slider');\n    if (this.items.length > 0) {\n      if (isValueEmpty(this.value)) {\n        this.value = this.items[0].value;\n      }\n      this.setSelectionsFromValue();\n    }\n  }\n\n  /**\n   * Sets slider size to be the size of a segment\n   */\n  setSliderSize() {\n    this.el.style.setProperty(\n      '--selected-slider-width',\n      `calc(${100 / this.items?.length}% - ${SEGMENTED_CONTROL_PADDING_HORIZONTAL * 2}px)`,\n    );\n  }\n\n  /**\n   * Sets slider position (left offset) based on the currently selected item\n   */\n  setSliderPosition(selectedItem = undefined) {\n    if (!selectedItem) {\n      this.el.style.setProperty('--selected-slider-left', `${SEGMENTED_CONTROL_PADDING_HORIZONTAL}px`);\n      return;\n    }\n\n    const newSelectionIndex = [...this.items].indexOf(selectedItem);\n    this.el.style.setProperty(\n      '--selected-slider-left',\n      `calc(${(newSelectionIndex / this.items.length) * 100}% + ${SEGMENTED_CONTROL_PADDING_HORIZONTAL}px)`,\n    );\n  }\n\n  /**\n   * Sets the initial state of the segmented-control by updating and propagating props and setting\n   * default value.\n   */\n\n  defaultSlotchangeHandler() {\n    this.setInternalState();\n    this.setSliderSize();\n  }\n\n  @Listen('marketSegmentSelectedChanged')\n  marketSegmentSelectedEventHandler(e: CustomEvent) {\n    const newSelection = e.target as HTMLMarketSegmentElement;\n\n    const prevSelection = this.el.querySelector(`${getNamespacedTagFor('market-segment')}[selected]`) as\n      | HTMLMarketSegmentElement\n      | undefined;\n\n    prevSelection?.setSelectedState(false);\n    newSelection.setSelectedState(true);\n\n    this.setSliderPosition(newSelection);\n\n    this.marketSegmentedSelectionDidChange.emit({\n      selectedSegment: newSelection,\n      selectedSegmentValue: newSelection.value,\n      deselectedSegment: prevSelection,\n      deselectedSegmentValue: prevSelection?.value,\n    });\n  }\n\n  render() {\n    return (\n      <Host class=\"market-segmented-control\">\n        <slot onSlotchange={() => this.defaultSlotchangeHandler()}></slot>\n      </Host>\n    );\n  }\n}\n"]}