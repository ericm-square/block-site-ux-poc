{"version":3,"file":"market-select.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-select/test/market-select.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage, E2EPage, E2EElement, EventSpy } from '@stencil/core/testing';\n\ndescribe('market-select', () => {\n  let page: E2EPage;\n  let el: E2EElement;\n  let popover: E2EElement;\n  let popoverSelector: string;\n  let marketSelectClosedSpy: EventSpy;\n  let marketSelectValueDidChangeSpy: EventSpy;\n\n  describe('when rendered with defaults', () => {\n    beforeEach(async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-select name=\"my-select\">\n          <label>Label</label>\n          <market-list slot=\"list\">\n            <market-row value=\"apple\">Apple</market-row>\n            <market-row value=\"banana\">Banana</market-row>\n            <market-row value=\"orange\">Orange</market-row>\n            <market-row value=\"pear\">Pear</market-row>\n          </market-list>\n        </market-select>\n      `);\n\n      el = await page.find('market-select');\n      popoverSelector = `#${el.getAttribute('aria-controls')}`;\n      marketSelectClosedSpy = await el.spyOnEvent('marketSelectClosed');\n    });\n\n    it('renders', () => {\n      expect(el).not.toBeNull();\n    });\n\n    it('initializes the properties correctly', async () => {\n      expect(el.getAttribute('name')).toBe('my-select');\n      expect(el).not.toHaveAttribute('readonly');\n      expect(el).not.toHaveAttribute('disabled');\n      expect(el).not.toHaveAttribute('focused');\n      expect(el).not.toHaveAttribute('invalid');\n      expect(el).not.toHaveAttribute('required');\n      expect(el).not.toHaveAttribute('multiselect');\n      expect(el.getAttribute('value')).toBe('');\n      expect(await el.getProperty('value')).toBe('');\n    });\n\n    it('sets the correct aria attributes', () => {\n      expect(el.getAttribute('tabindex')).toBe('0');\n      expect(el.getAttribute('role')).toBe('combobox');\n      expect(el.getAttribute('aria-expanded')).toBe('false');\n      // aria-controls = randomly generated ID of popover\n      expect(el.getAttribute('aria-controls')).toMatch(/^popover-/);\n    });\n\n    it('renders the caret', async () => {\n      const caret = await el.find('pierce/svg.caret');\n      expect(caret).not.toBeNull();\n    });\n\n    it('does not display a selection', async () => {\n      const displayedSelection = await el.find('market-row[slot=\"displayed-selection\"]');\n      expect(displayedSelection).toBeNull();\n    });\n\n    it('moves the slotted list to the popover', async () => {\n      // open the list to inspect the popover\n      await el.callMethod('openList');\n      await page.waitForChanges();\n      popover = await page.find(popoverSelector);\n\n      expect(popover).not.toBeNull();\n      expect(await popover.isVisible()).toBe(true);\n\n      const list = await popover.find('market-list');\n      expect(list).not.toBeNull();\n      expect(list.getAttribute('role')).toBe('listbox');\n      expect(await list.getProperty('interactive')).toBe(true);\n      expect(await list.getProperty('multiselect')).toBe(false);\n\n      const rows = await list.findAll('market-row');\n      expect(rows.length).toEqual(4);\n      expect(rows[0].getAttribute('value')).toBe('apple');\n      expect(rows[1].getAttribute('value')).toBe('banana');\n      expect(rows[2].getAttribute('value')).toBe('orange');\n      expect(rows[3].getAttribute('value')).toBe('pear');\n    });\n\n    it('closes the list when removed from the DOM', async () => {\n      // open the list\n      await el.callMethod('openList');\n      await page.waitForChanges();\n\n      // remove from DOM\n      await el.callMethod('remove');\n\n      popover = await page.find(popoverSelector);\n      expect(popover).toBeNull();\n      expect(marketSelectClosedSpy).toHaveReceivedEventTimes(1);\n    });\n  });\n\n  describe('when rendered with an invalid initial value', () => {\n    beforeEach(async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-select name=\"my-select\" value=\"broccoli\">\n          <label>Label</label>\n          <market-list slot=\"list\">\n            <market-row value=\"apple\">Apple</market-row>\n            <market-row value=\"banana\">Banana</market-row>\n            <market-row value=\"orange\">Orange</market-row>\n            <market-row value=\"pear\">Pear</market-row>\n          </market-list>\n        </market-select>\n      `);\n\n      el = await page.find('market-select');\n    });\n\n    it('resets the value to empty', async () => {\n      expect(el.getAttribute('value')).toBe('');\n      expect(await el.getProperty('value')).toBe('');\n    });\n\n    it('does not display a current selection', async () => {\n      const displayedSelection = await el.find('market-row[slot=\"displayed-selection\"]');\n      expect(displayedSelection).toBeNull();\n    });\n  });\n\n  describe('when rendered with a valid initial value', () => {\n    beforeEach(async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-select name=\"my-select\" value=\"orange\">\n          <label>Label</label>\n          <market-list slot=\"list\">\n            <market-row value=\"apple\">Apple</market-row>\n            <market-row value=\"banana\">Banana</market-row>\n            <market-row value=\"orange\">Orange</market-row>\n            <market-row value=\"pear\">Pear</market-row>\n          </market-list>\n        </market-select>\n      `);\n\n      el = await page.find('market-select');\n      popoverSelector = `#${el.getAttribute('aria-controls')}`;\n      marketSelectValueDidChangeSpy = await el.spyOnEvent('marketSelectValueDidChange');\n    });\n\n    it('respects the initial value', async () => {\n      expect(el.getAttribute('value')).toBe('orange');\n      expect(await el.getProperty('value')).toBe('orange');\n    });\n\n    it('displays the current selection', async () => {\n      const displayedSelection = await el.find('market-row[slot=\"displayed-selection\"]');\n      expect(displayedSelection).not.toBeNull();\n      expect(displayedSelection).toEqualText('Orange');\n      expect(displayedSelection.getAttribute('value')).toBe('orange');\n    });\n\n    describe('when a row is dynamically added to the slotted list', () => {\n      beforeEach(async () => {\n        const slottedList = await el.find('market-list[slot=\"list\"]');\n        slottedList.innerHTML = `${slottedList.innerHTML}<market-row value=\"strawberry\">Strawberry</market-row>`;\n        await page.waitForChanges();\n      });\n\n      it('correctly updates the moved list in the popover', async () => {\n        // open the list to inspect the popover\n        await el.callMethod('openList');\n        await page.waitForChanges();\n        popover = await page.find(popoverSelector);\n\n        const rows = await popover.findAll('market-row');\n        expect(rows.length).toEqual(5);\n        expect(rows[0].getAttribute('value')).toBe('apple');\n        expect(rows[1].getAttribute('value')).toBe('banana');\n        expect(rows[2].getAttribute('value')).toBe('orange');\n        expect(rows[3].getAttribute('value')).toBe('pear');\n        expect(rows[4].getAttribute('value')).toBe('strawberry');\n      });\n\n      it('maintains the current value', async () => {\n        expect(el.getAttribute('value')).toEqual('orange');\n        expect(await el.getProperty('value')).toEqual('orange');\n      });\n\n      it('maintains the displayed selection', async () => {\n        const displayedSelection = await el.find('market-row[slot=\"displayed-selection\"]');\n        expect(displayedSelection).not.toBeNull();\n        expect(displayedSelection).toEqualText('Orange');\n        expect(displayedSelection.getAttribute('value')).toBe('orange');\n      });\n\n      it('does not emit a change event (like native <select>)', () => {\n        expect(marketSelectValueDidChangeSpy).not.toHaveReceivedEvent();\n      });\n    });\n\n    describe('when the selected row is dynamically removed from the slotted list', () => {\n      beforeEach(async () => {\n        const slottedList = await el.find('market-list[slot=\"list\"]');\n        const selectedRow = await slottedList.find('market-row[value=\"orange\"]');\n        await selectedRow.callMethod('remove');\n        await page.waitForChanges();\n      });\n\n      it('correctly updates the moved list in the popover', async () => {\n        // open the list to inspect the popover\n        await el.callMethod('openList');\n        await page.waitForChanges();\n        popover = await page.find(popoverSelector);\n\n        const rows = await popover.findAll('market-row');\n        expect(rows.length).toEqual(3);\n        expect(rows[0].getAttribute('value')).toBe('apple');\n        expect(rows[1].getAttribute('value')).toBe('banana');\n        expect(rows[2].getAttribute('value')).toBe('pear');\n      });\n\n      it('resets the value to empty', async () => {\n        expect(await el.getProperty('value')).toEqual('');\n      });\n\n      it('removes the displayed selection', async () => {\n        const displayedSelection = await el.find('market-row[slot=\"displayed-selection\"]');\n        expect(displayedSelection).toBeNull();\n      });\n\n      it('does not emit a change event (like native <select>)', () => {\n        expect(marketSelectValueDidChangeSpy).not.toHaveReceivedEvent();\n      });\n    });\n  });\n\n  describe('when a row using all its named slots is selected', () => {\n    beforeEach(async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <market-select value=\"orange\">\n          <label>Label</label>\n          <market-list slot=\"list\">\n            <market-row value=\"orange\">\n              <label slot=\"label\">Orange</label>\n              <p slot=\"subtext\">Subtext</p>\n              <label slot=\"side-label\">Side label</label>\n              <p slot=\"side-subtext\">Side subtext</p>\n              <market-checkbox slot=\"control\"></market-checkbox>\n              <market-accessory slot=\"leading-accessory\" size=\"icon\">+</market-accessory>\n              <market-accessory slot=\"trailing-accessory\" size=\"icon\">+</market-accessory>\n            </market-row>\n          </market-list>\n        </market-select>\n      `);\n\n      el = await page.find('market-select');\n    });\n\n    it('only shows the main label in the displayed selection', async () => {\n      const displayedSelection = await el.find('market-row[slot=\"displayed-selection\"]');\n      const label = await displayedSelection.find('[slot=\"label\"]');\n      expect(await label.isVisible()).toBe(true);\n    });\n\n    it('hides all other named slots in the displayed selection', async () => {\n      const displayedSelection = await el.find('market-row[slot=\"displayed-selection\"]');\n      const subtext = await displayedSelection.find('[slot=\"subtext\"]');\n      const sideLabel = await displayedSelection.find('[slot=\"side-label\"]');\n      const sideSubtext = await displayedSelection.find('[slot=\"side-subtext\"]');\n      const leadingAccessory = await displayedSelection.find('[slot=\"leading-accessory\"]');\n      const trailingAccessory = await displayedSelection.find('[slot=\"trailing-accessory\"]');\n      const control = await displayedSelection.find('[slot=\"control\"]');\n\n      expect(await subtext.isVisible()).toBe(false);\n      expect(await sideLabel.isVisible()).toBe(false);\n      expect(await sideSubtext.isVisible()).toBe(false);\n      expect(await leadingAccessory.isVisible()).toBe(false);\n      expect(await trailingAccessory.isVisible()).toBe(false);\n      expect(await control.isVisible()).toBe(false);\n    });\n  });\n\n  describe('when popoverContainer is specified', () => {\n    beforeEach(async () => {\n      page = await newE2EPage();\n      await page.setContent(`\n        <div id=\"outer-container\">\n          <div id=\"inner-container\">\n            <market-select name=\"my-select\" popover-container=\"#inner-container\">\n              <label>Label</label>\n              <market-list slot=\"list\">\n                <market-row value=\"apple\">Apple</market-row>\n                <market-row value=\"banana\">Banana</market-row>\n                <market-row value=\"orange\">Orange</market-row>\n                <market-row value=\"pear\">Pear</market-row>\n              </market-list>\n            </market-select>\n          </div>\n        </div>\n      `);\n\n      el = await page.find('market-select');\n      popoverSelector = `#inner-container > #${el.getAttribute('aria-controls')}`;\n    });\n\n    it('appends the popover to the specified container', async () => {\n      // open the list to inspect the popover\n      await el.callMethod('openList');\n      await page.waitForChanges();\n      popover = await page.find(popoverSelector);\n\n      expect(popover).not.toBeNull();\n      expect(await popover.isVisible()).toBe(true);\n    });\n  });\n});\n"]}