{"version":3,"file":"market-select.search.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-select/test/market-select.search.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage, E2EPage, E2EElement } from '@stencil/core/testing';\n\ndescribe('market-select: with search', () => {\n  let page: E2EPage;\n  let el: E2EElement;\n  let searchEl: E2EElement;\n  let appleRowEl: E2EElement;\n  let bananaRowEl: E2EElement;\n  let orangeRowEl: E2EElement;\n  let pearRowEl: E2EElement;\n\n  beforeEach(async () => {\n    page = await newE2EPage();\n    await page.setContent(`\n      <market-select>\n        <label>Label</label>\n        <market-list slot=\"list\">\n          <market-input-search slot=\"search\"></market-input-search>\n          <market-row value=\"apple\">Apple</market-row>\n          <market-row value=\"banana\">Banana</market-row>\n          <market-row value=\"orange\">Orange</market-row>\n          <market-row value=\"pear\">Pear</market-row>\n        </market-list>\n      </market-select>\n    `);\n    el = await page.find('.market-select');\n    searchEl = await el.find('.market-input-search');\n    appleRowEl = await page.find('.market-row[value=\"apple\"]');\n    bananaRowEl = await page.find('.market-row[value=\"banana\"]');\n    orangeRowEl = await page.find('.market-row[value=\"orange\"]');\n    pearRowEl = await page.find('.market-row[value=\"pear\"]');\n  });\n\n  it('renders search input', async () => {\n    await el.click();\n    await page.waitForChanges();\n    expect(await searchEl.isVisible()).toStrictEqual(true);\n  });\n\n  it('can search and select', async () => {\n    await el.click();\n    await page.waitForChanges();\n    await searchEl.click();\n\n    await page.keyboard.type('p'); // should yield `apple` and `pear`\n    await page.waitForChanges();\n    expect(await appleRowEl.isVisible()).toStrictEqual(true);\n    expect(await bananaRowEl.isVisible()).toStrictEqual(false);\n    expect(await orangeRowEl.isVisible()).toStrictEqual(false);\n    expect(await pearRowEl.isVisible()).toStrictEqual(true);\n\n    await pearRowEl.click();\n    await page.waitForChanges();\n    expect(el.getAttribute('value')).toStrictEqual('pear');\n  });\n\n  it('can search and select multiple rows', async () => {\n    el.setAttribute('multiselect', '');\n    await page.waitForChanges();\n    await el.click();\n    await page.waitForChanges();\n    await searchEl.click();\n\n    await page.keyboard.type('p'); // should yield `apple` and `pear`\n    await page.waitForChanges();\n    expect(await appleRowEl.isVisible()).toStrictEqual(true);\n    expect(await bananaRowEl.isVisible()).toStrictEqual(false);\n    expect(await orangeRowEl.isVisible()).toStrictEqual(false);\n    expect(await pearRowEl.isVisible()).toStrictEqual(true);\n\n    await appleRowEl.click();\n    await pearRowEl.click();\n    await page.waitForChanges();\n    expect(el.getAttribute('value')).toStrictEqual('apple,pear');\n  });\n\n  it('shows empty state when searching for something that does not exist', async () => {\n    await el.click();\n    await page.waitForChanges();\n    await searchEl.click();\n\n    await page.keyboard.type('x'); // should yield nothing\n    await page.waitForChanges();\n    expect(await appleRowEl.isVisible()).toStrictEqual(false);\n    expect(await bananaRowEl.isVisible()).toStrictEqual(false);\n    expect(await orangeRowEl.isVisible()).toStrictEqual(false);\n    expect(await pearRowEl.isVisible()).toStrictEqual(false);\n\n    const listEl = await page.find('.market-list');\n    const emptyStateEl = await listEl.find('pierce/.market-empty-state');\n    expect(await emptyStateEl.isVisible()).toStrictEqual(true);\n  });\n});\n"]}