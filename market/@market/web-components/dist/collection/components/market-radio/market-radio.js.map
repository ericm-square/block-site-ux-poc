{"version":3,"file":"market-radio.js","sourceRoot":"","sources":["../../../../src/components/market-radio/market-radio.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, EventEmitter, Host, h, Method, Prop, Element } from '@stencil/core';\nimport { getControlInputAriaLabel } from '../../utils/aria';\n\n@Component({\n  tag: 'market-radio',\n  styleUrl: 'market-radio.css',\n  shadow: true,\n})\nexport class MarketRadio {\n  @Element() el: HTMLMarketRadioElement;\n\n  /**\n   * Whether the radio button is selected (analogous to the HTML input attribute `checked`).\n   * If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  /**\n   * Whether the radio button is disabled.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * Whether the radio button is invalid.\n   */\n  @Prop({ reflect: true }) readonly invalid: boolean = false;\n\n  /**\n   * Whether the radio is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * Whether the radio is hovered or not.\n   */\n  @Prop({ mutable: true, reflect: true }) hovered: boolean = false;\n\n  /**\n   * Whether the radio is active or not.\n   */\n  @Prop({ mutable: true, reflect: true }) active: boolean = false;\n\n  /**\n   * Fired whenever \"selected\" prop value changes.\n   */\n  @Event() marketRadioValueChange: EventEmitter<{ current: boolean; previous: boolean }>;\n\n  innerInput: HTMLInputElement;\n\n  /**\n   * Toggles `selected` prop, and emits a change event accordingly.\n   * Used by `market-row` to sync its selected state w/ slotted radio buttons.\n   */\n  @Method()\n  setSelection(newValue: boolean, { silent = false } = {}) {\n    const { marketRadioValueChange, selected: prevValue, innerInput } = this;\n\n    if (typeof newValue !== 'boolean') return Promise.resolve();\n    if (prevValue === newValue) return Promise.resolve();\n\n    if (!silent) {\n      const { defaultPrevented } = marketRadioValueChange.emit({\n        current: newValue,\n        previous: prevValue,\n      });\n      if (defaultPrevented) {\n        return Promise.resolve();\n      }\n    }\n\n    this.selected = newValue;\n    // When using the non-lazy output target, this method sometimes gets called from\n    // market-row's watcher before/after innerInput is removed, hence this check.\n    if (innerInput) {\n      innerInput.checked = newValue;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).\n   */\n  @Method()\n  setValue(newValue: boolean) {\n    /* eslint-disable-next-line no-console */\n    console.warn(\"market-radio's setValue() method has been deprecated. Use setSelection() instead.\", this.el);\n    this.setSelection(newValue);\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `active` state. Allows external elements to programmatically\n   * trigger active styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setActive(value: boolean) {\n    this.active = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `hovered` state. Allows external elements to programmatically\n   * trigger hover styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setHover(value: boolean) {\n    this.hovered = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `disabled` state. Allows external elements to programmatically\n   * trigger disabled styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setDisabled(value: boolean) {\n    this.disabled = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `focused` state, except when disabled.\n   * Allows external consumers to programmatically\n   * trigger focused styling.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    if (this.disabled) {\n      return Promise.resolve();\n    }\n    this.focused = value;\n    return Promise.resolve();\n  }\n\n  onFocus() {\n    if (this.disabled) {\n      return;\n    }\n\n    this.focused = true;\n    this.el.shadowRoot.querySelector('input').focus();\n  }\n\n  handleClick(event: MouseEvent) {\n    // Always prevent default so we can manually control the selection\n    event.preventDefault();\n\n    if (this.disabled) {\n      return;\n    }\n\n    // once a radio is selected, it shouldn't be togglable/deselectable on click\n    if (!this.selected) {\n      this.setFocus();\n      this.setSelection(true);\n    }\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-radio\"\n        onBlur={() => {\n          this.setFocus(false);\n        }}\n        onClick={this.handleClick}\n        onFocus={() => {\n          this.setFocus();\n        }}\n      >\n        <input\n          ref={(el) => (this.innerInput = el)}\n          type=\"radio\"\n          aria-label={getControlInputAriaLabel(this.el)}\n          checked={this.selected}\n          disabled={this.disabled}\n        />\n        {this.selected && (\n          <svg width=\"6\" height=\"6\" viewBox=\"0 0 6 6\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" />\n          </svg>\n        )}\n      </Host>\n    );\n  }\n}\n"]}