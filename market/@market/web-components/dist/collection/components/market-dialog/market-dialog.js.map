{"version":3,"file":"market-dialog.js","sourceRoot":"","sources":["../../../../src/components/market-dialog/market-dialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  MODAL_DIALOG_ANIMATION_ENTER_TRANSITION_DURATION,\n  MODAL_DIALOG_ANIMATION_EXIT_TRANSITION_DURATION,\n} from '@market/market-theme/js/cjs/index.js';\nimport { Component, Host, Prop, Element, Method, Event, EventEmitter, h, Watch } from '@stencil/core';\n\nimport { DialogDismissedEvent, DialogLoadedEvent, DialogType } from '../../utils/dialog';\nimport {\n  createAndActivateFocusTrap,\n  FocusTrap,\n  FocusTrapActivateOptions,\n  FocusTrapDeactivateOptions,\n  FocusTrapOptions,\n} from '../../utils/focus-trap';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n/**\n * @slot - The main content of the dialog. Use `<section class=\"main\">` tag.\n */\n@Component({\n  tag: 'market-dialog',\n  styleUrl: 'market-dialog.css',\n  shadow: true,\n})\nexport class MarketDialog {\n  @Element() el: HTMLMarketDialogElement;\n  connectedCallbackTimeout: NodeJS.Timeout;\n  type: DialogType = 'dialog';\n  focusTrap: FocusTrap;\n  header: HTMLMarketHeaderElement;\n\n  /**\n   * INTERNAL ONLY: Used in CSS to trigger start and stop animations\n   */\n  @Prop({ mutable: true, reflect: true }) hidden: boolean = false;\n\n  /**\n   * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal\n   */\n  @Prop({ reflect: true, attribute: 'data-dialog-id' }) readonly dialogID: string;\n\n  /**\n   * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place\n   * in the stack\n   */\n  @Prop({ reflect: true, attribute: 'data-dialog-index' }) readonly index: number;\n\n  /**\n   * Whether the activity indicator is rendered or not\n   */\n  @Prop() readonly isLoading: boolean = false;\n\n  /**\n   * Whether the dialog is persistent or dismissable\n   */\n  @Prop({ reflect: true }) readonly persistent: boolean = false;\n\n  /**\n   * Enforces focus trapping on the dialog\n   */\n  @Prop({ mutable: true }) trapFocus: boolean = false;\n\n  /**\n   * The duration for the modal enter animation, set from design tokens\n   */\n  @Prop()\n  readonly animationEnterDuration: number = MODAL_DIALOG_ANIMATION_ENTER_TRANSITION_DURATION;\n\n  /**\n   * The duration for the modal exit animation, set from design tokens\n   */\n  @Prop()\n  readonly animationExitDuration: number = MODAL_DIALOG_ANIMATION_EXIT_TRANSITION_DURATION;\n\n  /**\n   * Triggered when the dialog finishes loading\n   */\n  @Event() marketDialogLoaded: EventEmitter<DialogLoadedEvent>;\n\n  /**\n   * Triggered when the dialog is dismissed, handled by context manager\n   */\n  @Event() marketDialogDismissed: EventEmitter<DialogDismissedEvent>;\n\n  /**\n   * Triggered when the dialog is fully dismissed\n   */\n  @Event() marketDialogDidDismiss: EventEmitter<DialogDismissedEvent>;\n\n  /**\n   * Emits the dismiss event\n   * The parent context will handle actually removing elements from the DOM,\n   * All the dialog needs to do it emit an event so actually closing it can be\n   * some other elements problem\n   */\n  @Method()\n  dismiss(dismissOptions?: Partial<DialogDismissedEvent>) {\n    if (!this.persistent) {\n      const { defaultPrevented } = this.marketDialogDismissed.emit({\n        dialog: this.el,\n        type: this.type,\n        origin: dismissOptions?.origin || this.el,\n      });\n\n      if (!defaultPrevented) {\n        this.hidden = true;\n\n        /**\n         * Emit a marketDialogDidDismiss event when modal gets fully dismissed (after animation).\n         */\n        setTimeout(() => {\n          this.marketDialogDidDismiss.emit({\n            dialog: this.el,\n            type: this.type,\n            origin: this.el,\n          });\n        }, this.animationExitDuration);\n      }\n    }\n    return Promise.resolve();\n  }\n\n  @Watch('trapFocus')\n  onTrapFocusChanged(newValue: boolean, oldValue: boolean) {\n    // only activate/deactivate when the `trapFocus` prop value changes\n    if (newValue !== oldValue) {\n      if (newValue) {\n        this.activateFocusTrap();\n      } else {\n        this.deactivateFocusTrap();\n      }\n    }\n  }\n\n  /**\n   * Activates the focus trap\n   *\n   * See [`focus-trap.ts`](../../utils/focus-trap.ts) for default options\n   *\n   * @param {Object} [options] [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)\n   * @param {Object} [activateOptions] set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)\n   */\n  @Method()\n  activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) {\n    if (this.focusTrap) {\n      this.focusTrap.activate(activateOptions ?? {});\n      if (!this.trapFocus) {\n        this.trapFocus = true;\n      }\n    } else {\n      this.focusTrap = createAndActivateFocusTrap({\n        activateOptions,\n        el: this.el,\n        options,\n      });\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Deactivates the focus trap\n   *\n   * @param {FocusTrapDeactivateOptions} [deactivateOptions] set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)\n   */\n  @Method()\n  deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) {\n    if (this.focusTrap) {\n      this.focusTrap.deactivate({\n        returnFocus: true,\n        checkCanReturnFocus: (trigger) =>\n          new Promise((resolve) => {\n            if (typeof (trigger as any)?.setFocus === 'function') {\n              (trigger as any).setFocus();\n            } else {\n              resolve(); // node.focus(); will be called by focus-trap\n            }\n          }),\n        ...deactivateOptions,\n      });\n      this.focusTrap = undefined;\n    }\n    return Promise.resolve();\n  }\n\n  removeTopMarginOfFirstHeading() {\n    const headings = this.el.querySelectorAll<HTMLHeadingElement>('h1, h2, h3, h4, h5, h6');\n    if (headings.length > 0) {\n      headings[0].style.marginTop = '0';\n    }\n  }\n\n  handleSlotchange() {\n    this.removeTopMarginOfFirstHeading();\n  }\n\n  connectedCallback() {\n    this.connectedCallbackTimeout = setTimeout(() => {\n      /**\n       * Emit a marketDialogLoaded event when the component connects. Need this so\n       * the context manager isn't rummaging around it's DOM to try and find the\n       * dialog that was just appended\n       */\n      this.marketDialogLoaded.emit({\n        dialog: this.el,\n        type: this.type,\n      });\n\n      if (this.trapFocus) {\n        this.activateFocusTrap();\n      }\n    }, this.animationEnterDuration);\n\n    this.handleSlotchange();\n  }\n\n  disconnectedCallback() {\n    this.deactivateFocusTrap();\n\n    /**\n     * Prevents error caused by race conditions during rapid mounting and\n     * unmounting of component by clearing the setTimeout from connectedCallback\n     * if it gets called after disconnectedCallback.\n     */\n    clearTimeout(this.connectedCallbackTimeout);\n  }\n\n  render() {\n    const MarketActivityIndicatorTagName = getNamespacedTagFor('market-activity-indicator');\n\n    return (\n      <Host class=\"market-dialog\" role=\"dialog\">\n        {this.isLoading && <MarketActivityIndicatorTagName></MarketActivityIndicatorTagName>}\n        <slot onSlotchange={this.handleSlotchange.bind(this)}></slot>\n      </Host>\n    );\n  }\n}\n"]}