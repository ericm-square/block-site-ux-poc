{"version":3,"file":"market-table-column.e2e.js","sourceRoot":"","sources":["../../../../../src/components/market-table-column/test/market-table-column.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage } from '@stencil/core/testing';\n\ndescribe('market-table-column', () => {\n  it('does not emit an event on click if it is not sortable', async () => {\n    const page = await newE2EPage();\n    await page.setContent(\"<market-table-column name='test'>Can't sort me</market-table-column>\");\n\n    const columnSelected = await page.spyOnEvent('marketTableColumnSort');\n\n    const el = await page.find('market-table-column');\n\n    await el.click();\n    await page.waitForChanges();\n\n    expect(columnSelected).toHaveReceivedEventTimes(0);\n  });\n\n  it('emits an event on click if it is sortable', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-table-column sortable name=\"test\">Sort Me</market-table-column>');\n\n    const columnSelected = await page.spyOnEvent('marketTableColumnSort');\n\n    const el = await page.find('market-table-column');\n\n    await el.click();\n    await page.waitForChanges();\n\n    expect(columnSelected).toHaveReceivedEventTimes(1);\n    expect(columnSelected.lastEvent.detail.previousSortOrder).toBe(undefined);\n\n    el.setAttribute('sort-order', 'ascending');\n    await page.waitForChanges();\n\n    await el.click();\n    await page.waitForChanges();\n\n    expect(columnSelected).toHaveReceivedEventTimes(2);\n    expect(columnSelected.lastEvent.detail.previousSortOrder).toBe('ascending');\n  });\n\n  it('can stick and unstick itself', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-table-column name=\"test\" slot=\"starting-slot\">Column content</market-table-column>');\n    const el = await page.find('market-table-column');\n\n    await el.callMethod('_stickSelf', 'left');\n    await page.waitForChanges();\n\n    expect(el).toEqualAttribute('slot', 'sticky-left');\n\n    await el.callMethod('_stickSelf', 'right');\n    await page.waitForChanges();\n\n    expect(el).toEqualAttribute('slot', 'sticky-right');\n\n    await el.callMethod('_unstickSelf', '');\n    await page.waitForChanges();\n\n    expect(el).toEqualAttribute('slot', 'starting-slot');\n  });\n\n  it('emits the correct sticky events on changes to the stick-to property', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-table-column name=\"test\">Column content</market-table-column>');\n    const el = await page.find('market-table-column');\n    const columnStuck = await page.spyOnEvent('marketTableColumnStick');\n    const columnUnstuck = await page.spyOnEvent('marketTableColumnUnstick');\n\n    el.setAttribute('stick-to', 'left');\n    await page.waitForChanges();\n\n    expect(columnStuck).toHaveReceivedEventTimes(1);\n    expect(columnStuck.lastEvent.detail.position).toBe('left');\n\n    el.setAttribute('stick-to', 'right');\n    await page.waitForChanges();\n\n    expect(columnStuck).toHaveReceivedEventTimes(2);\n    expect(columnStuck.lastEvent.detail.position).toBe('right');\n\n    el.removeAttribute('stick-to');\n    await page.waitForChanges();\n\n    expect(columnUnstuck).toHaveReceivedEventTimes(1);\n    expect(columnUnstuck.lastEvent.detail.position).toBe(null);\n  });\n\n  it('emits the correct sticky events when stuck/unstuck', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<market-table-column name=\"test\">Column content</market-table-column>');\n    const el = await page.find('market-table-column');\n    const columnStuck = await page.spyOnEvent('marketTableColumnStick');\n    const columnUnstuck = await page.spyOnEvent('marketTableColumnUnstick');\n\n    await el.callMethod('stick', 'left');\n\n    expect(columnStuck).toHaveReceivedEventTimes(1);\n    expect(columnStuck.lastEvent.detail.position).toBe('left');\n\n    await el.callMethod('unstick');\n\n    expect(columnUnstuck).toHaveReceivedEventTimes(1);\n    expect(columnStuck.lastEvent.detail.position).toBe('left');\n  });\n});\n"]}