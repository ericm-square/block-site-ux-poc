/* TODO: Make these to design spec */

/* We have separate enter and exit animations because of the way that CSS
animation seems to work, despite having an animation-direction property.
Using separate animations is the only way to allow reverse animation without
having to use javascript to trigger re-animating
https://stackoverflow.com/a/47992656
*/

@keyframes market-popup {
  from {
    opacity: 0%;
    transform: scale(0.9, 0.9);
  }

  to {
    opacity: 100%;
    transform: scale(1, 1);
  }
}

@keyframes market-popdown {
  from {
    opacity: 100%;
    transform: scale(1, 1);
  }

  to {
    opacity: 0%;
    transform: scale(0.9, 0.9);
  }
}

@keyframes market-slideup {
  from {
    opacity: 0%;
    transform: translateY(80vh);
  }

  to {
    opacity: 100%;
    transform: translateY(0);
  }
}

@keyframes market-slidedown {
  from {
    opacity: 100%;
    transform: translateY(0);
  }

  to {
    opacity: 0%;
    transform: translateY(80vh);
  }
}

@keyframes market-slide-left-enter {
  from {
    transform: translateX(100%);
  }

  to {
    transform: translateX(0);
  }
}

/* animation-direction reverse not working; reversing the animation manually instead */
@keyframes market-slide-left-exit {
  from {
    transform: translateX(0);
  }

  to {
    transform: translateX(100%);
  }
}

@keyframes market-fade-in {
  from {
    opacity: 0%;
  }

  to {
    opacity: 100%;
  }
}

@keyframes market-fade-out {
  from {
    opacity: 100%;
  }

  to {
    opacity: 0%;
  }
}

/* stylelint-disable block-no-empty */

/**
 * These empty input-autofill animations are part of a hack that allows us to
 * detect browser autofill: https://stackoverflow.com/a/41530164
 */
@keyframes market-input-autofill-start {
  from {}
  to {}
}

@keyframes market-input-autofill-cancel {
  from {}
  to {}
}

/**
 * These empty input-search animations allow us detect compact enter/exit animations
 */
@keyframes market-input-search-compact-enter {
  from {}
  to {}
}

@keyframes market-input-search-compact-exit {
  from {}
  to {}
}

/* stylelint-enable block-no-empty */
 /* safari needs an explicit import */

:host {
  display: flex;
  flex-direction: column;
  justify-content: stretch;
  overflow: hidden;
}

:host ::slotted(main), :host ::slotted(.main) {
    flex: 0 1 100%;
    overflow-y: auto;
    height: 100%;
  }

:host ::slotted(.market-header) {
    margin-bottom: var(--core-metrics-spacing-300);
    padding-top: 0;
  }

:host ::slotted(.market-footer) {
    padding-bottom: 0;
  }


:host {
  --handle-whitespace: calc(var(--modal-sheet-handle-padding-top-size) + var(--modal-sheet-handle-padding-bottom-size));
  --handle-area-height: calc(var(--handle-whitespace) + var(--modal-sheet-handle-height));
  --max-width-padding: var(--modal-sheet-regular-horizontal-size-class-horizontal-padding);
  --min-width-padding: var(--modal-sheet-compact-horizontal-size-class-horizontal-padding);

  /* todo: replace 200px half-width with design token */
  --padding-width: clamp(var(--min-width-padding), calc(50% - 200px), var(--max-width-padding));
  --padding-height: var(--modal-sheet-regular-vertical-size-class-vertical-padding);

  position: fixed;

  /* start just off screen when added to the dom */
  top: calc(100vh + var(--handle-area-height));
  bottom: auto;
  left: 50%;
  overflow: visible;
  box-sizing: border-box;
  width: 100%;

  /* todo: replace 400px width with design token */
  max-width: calc(400px + calc(var(--max-width-padding) + var(--max-width-padding)));
  max-height: calc(100% - var(--handle-area-height));
  padding-top: var(--padding-height);
  border-radius: var(--modal-sheet-border-radius) var(--modal-sheet-border-radius) 0 0;
  background-color: var(--modal-sheet-background-color);
  opacity: 0%;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  transition:
    top var(--core-animation-enter-transition-moderate-speed-duration),
    opacity var(--core-animation-enter-transition-moderate-speed-duration);
  transform: translate(-50%, 0);
}


:host([state="closed"]) {
    top: calc(100vh + var(--handle-area-height));
    opacity: 0%;
    transition:
      top var(--core-animation-exit-transition-moderate-speed-duration),
      opacity var(--core-animation-exit-transition-moderate-speed-duration);
  }


:host([state="partial-open"]) {
    opacity: 100%;
  }


:host([state="full-open"]) {
    opacity: 100%;
  }


:host([dragging]) {
    transition: opacity var(--core-animation-enter-transition-moderate-speed-duration);
  }


:host([tapdisabled]) {
    pointer-events: none;
  }


:host ::slotted([slot="header"]) {
    padding-right: var(--padding-width);
    padding-left: var(--padding-width);
  }


/*
    this visually extends the sheet below the screen to avoid a gap
    when the sheet is dragged upwards.
  */


:host::after {
    content: "";
    position: absolute;
    top: 100%;
    display: block;
    width: inherit;
    max-width: inherit;
    height: 100vh;
    background-color: inherit;
  }

.handle {
  position: fixed;
  bottom: calc(100% + var(--modal-sheet-handle-padding-bottom-size));
  left: 50%;
  display: block;
  width: var(--modal-sheet-handle-width);
  height: var(--modal-sheet-handle-height);
  border: none;
  border-radius: var(--modal-sheet-border-radius);
  background-color: var(--modal-sheet-handle-background-color);
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  transform: translate(-50%, 0);
}

.handle::before {
    content: "";
    position: absolute;
    inset: calc(var(--modal-sheet-handle-padding-bottom-size) * -1);
  }

.handle:focus {
    outline: var(--button-focus-ring-border-size) solid var(--button-focus-ring-color);
  }

.main {
  overflow-x: hidden;
  overflow-y: auto;
  padding-right: var(--padding-width);
  padding-bottom: var(--padding-height);
  padding-left: var(--padding-width);
  overscroll-behavior: contain;
}

.main[dragging] {
  overflow-y: hidden;
}
