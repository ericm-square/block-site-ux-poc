{"version":3,"file":"mutation-observer.js","sourceRoot":"","sources":["../../../src/utils/mutation-observer.ts"],"names":[],"mappings":"AAIA;;;;GAIG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,YAA8B,EAAmB,EAAE;IAC5F,MAAM,UAAU,GAAY,YAAY,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QAChE,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YACrC,IAAI,OAAQ,IAAc,CAAC,gBAAgB,KAAK,UAAU,EAAE,CAAC;gBAC3D,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;QACH,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,OAAO,OAAO,CAAC,GAAG,CAChB,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QAC5B,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,+BAA+B,GAAG,CAC7C,OAAiB,EACjB,aAAqB,EACrB,QAAsE,EACtE,EAAE;IACF,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,CAAC,SAAS,EAAE,EAAE;QAClD,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YACjC,IAAI,QAAQ,CAAC,IAAI,KAAK,YAAY,IAAI,QAAQ,CAAC,aAAa,KAAK,aAAa,EAAE,CAAC;gBAC/E,SAAS;YACX,CAAC;YACD,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAkB,CAAC;YAC5C,MAAM,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAClD,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;QACvC,CAAC;IACH,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAChD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["type TNode = Node & {\n  componentOnReady: () => Promise<void>;\n};\n\n/**\n * Use this util within a MutationObserver callback.\n * This waits for all `addedNodes[].componentOnReady` to be called.\n * @returns {Promise} Promise when the elements are ready\n */\nexport const waitForAddedNodesToBeReady = (mutationList: MutationRecord[]): Promise<void[]> => {\n  const addedNodes: TNode[] = mutationList.reduce((nodes, record) => {\n    for (const node of record.addedNodes) {\n      if (typeof (node as TNode).componentOnReady === 'function') {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }, []);\n  return Promise.all(\n    addedNodes.map(async (node) => {\n      await node.componentOnReady();\n      return Promise.resolve();\n    }),\n  );\n};\n\n/**\n * Creates a MutationObserver and observes attribute changes\n *\n * @param element - Element to be observed\n * @param attributeName - Name of attribute to be observed\n * @param callback - Callback to be executed when the attribute's value is mutated\n * @returns MutationObserver\n */\nexport const createAttributeMutationObserver = <TElement extends HTMLElementTagNameMap[keyof HTMLElementTagNameMap]>(\n  element: TElement,\n  attributeName: string,\n  callback: (value: TElement[keyof TElement], element: TElement) => void,\n) => {\n  const observer = new MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n      if (mutation.type !== 'attributes' || mutation.attributeName !== attributeName) {\n        continue;\n      }\n      const element = mutation.target as TElement;\n      const value = element.getAttribute(attributeName);\n      callback.apply({}, [value, element]);\n    }\n  });\n  observer.observe(element, { attributes: true });\n  return observer;\n};\n"]}