{"version":3,"file":"transition-to-promise.js","sourceRoot":"","sources":["../../../src/utils/transition-to-promise.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,oFAAoF;AACpF,mFAAmF;AACnF,mFAAmF;AACnF,EAAE;AACF,iBAAiB;AACjB,uCAAuC;AACvC,kBAAkB;AAClB,qBAAqB;AACrB,2BAA2B;AAC3B,MAAM;AACN,EAAE;AACF,kEAAkE;AAClE,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,EAAe,EAAE,MAAc;IACvE,MAAM,aAAa,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;IAC3C,MAAM,EAAE,kBAAkB,EAAE,GAAG,aAAa,CAAC;IAC7C,MAAM,UAAU,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAElD,OAAO,OAAO,CAAC,GAAG,CAChB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;QACnC,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/B,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YACnC,8BAA8B;YAC9B,IAAI,CAAC,KAAK;gBAAE,OAAO,EAAE,CAAC;YAEtB,yBAAyB;YACzB,IAAI,KAAK,KAAK,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAAE,OAAO,EAAE,CAAC;YAE5C,wDAAwD;YACxD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACnC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;gBAC3B,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,iDAAiD;YACjD,MAAM,eAAe,GAAG,CAAC,CAAkB,EAAE,EAAE;gBAC7C,IAAI,CAAC,CAAC,YAAY,KAAK,QAAQ;oBAAE,OAAO;gBACxC,EAAE,CAAC,mBAAmB,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;gBACzD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC;YACF,EAAE,CAAC,gBAAgB,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;YACtD,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CACH,CAAC;AACJ,CAAC","sourcesContent":["// This function sets CSS styles on an element and returns a promise.\n// The promise is resolved after any CSS transitions complete on the changed styles.\n// It's smart enough to resolve immediately if there is no transition on the style.\n// However, this is intended to be used with transitions that are set in CSS files.\n//\n// Example usage:\n// await transitionToPromise(element, {\n//   top: '100px',\n//   height: '100px',\n//   transform: 'scale(2)',\n// });\n//\n// adapted from https://gist.github.com/davej/44e3bbec414ed4665220\nexport async function transitionToPromise(el: HTMLElement, styles: object) {\n  const computedStyle = getComputedStyle(el);\n  const { transitionProperty } = computedStyle;\n  const properties = transitionProperty.split(', ');\n\n  return Promise.all(\n    Object.keys(styles).map((property) => {\n      const value = styles[property];\n      return new Promise<void>((resolve) => {\n        // if no value to set, resolve\n        if (!value) resolve();\n\n        // if same value, resolve\n        if (value === el.style[property]) resolve();\n\n        // if no transition on this property, set it and resolve\n        if (!properties.includes(property)) {\n          el.style[property] = value;\n          resolve();\n        }\n\n        // otherwise, set up a listener for transitionend\n        const transitionEnded = (e: TransitionEvent) => {\n          if (e.propertyName !== property) return;\n          el.removeEventListener('transitionend', transitionEnded);\n          resolve();\n        };\n        el.addEventListener('transitionend', transitionEnded);\n        el.style[property] = value;\n      });\n    }),\n  );\n}\n"]}