{"version":3,"file":"callbacks.js","sourceRoot":"","sources":["../../../src/utils/callbacks.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAa,EAAE,IAAY,EAAE,EAAE;IACtD,IAAI,OAAO,CAAC;IAEZ,OAAO,CAAC,GAAG,IAAS,EAAE,EAAE;QACtB,MAAM,KAAK,GAAG,GAAG,EAAE;YACjB,OAAO,GAAG,IAAI,CAAC;YACf,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC;QAEF,YAAY,CAAC,OAAO,CAAC,CAAC;QACtB,OAAO,GAAG,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/**\n * helper functions for managing callback timing (ex. delay, throttle, debounce)\n *\n * these will probably be most useful in situations where we wish to respond to\n * user input events (particularly ones that happen in \"streams\" like scrolling,\n * window resizing, or typing) in a performant way.\n *\n * if this file ends up larger than a few functions, we should consider bringing\n * in lodash as a dependency instead: https://lodash.com/docs\n *\n * recommended pattern for using these functions in your stencil components:\n * myEventHandler = debounce(() => {\n *   // your code\n * }, timeout)\n */\n\n/**\n * returns a function that will not be triggered until it stops being called for\n * N milliseconds, adapted from https://davidwalsh.name/javascript-debounce-function\n *\n * @param callback - callback to be executed after the wait\n * @param {number} wait - wait in milliseconds\n */\nexport const debounce = (callback: any, wait: number) => {\n  let timeout;\n\n  return (...args: any) => {\n    const later = () => {\n      timeout = null;\n      callback.apply(this, args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n"]}