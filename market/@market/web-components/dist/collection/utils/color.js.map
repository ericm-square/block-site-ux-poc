{"version":3,"file":"color.js","sourceRoot":"","sources":["../../../src/utils/color.ts"],"names":[],"mappings":"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","sourcesContent":["// Formulas pulled from\n// https://github.com/simonwep/pickr/blob/master/src/js/utils/color.js#L28\n\n// Shorthands\nconst { min, max, floor, round } = Math;\n\nexport function hsvToRgb(hArg: number, sArg: number, vArg: number) {\n  let h = hArg;\n  let s = sArg;\n  let v = vArg;\n\n  h = (h / 360) * 6;\n  s /= 100;\n  v /= 100;\n\n  const i = floor(h);\n\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n\n  const mod = i % 6;\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n\n  return [r * 255, g * 255, b * 255];\n}\n\n/**\n * Convert HSV spectrum to Hex.\n * @param h Hue\n * @param s Saturation\n * @param v Value\n * @returns {string[]} Hex values\n */\nexport function hsvToHex(h: number, s: number, v: number) {\n  return hsvToRgb(h, s, v).map((v) => round(v).toString(16).padStart(2, '0'));\n}\n\n/**\n * Convert RGB to HSV.\n * @param r Red\n * @param g Green\n * @param b Blue\n * @return {number[]} HSV values.\n */\nfunction rgbToHsv(rArg: number, gArg: number, bArg: number) {\n  let r = rArg;\n  let g = gArg;\n  let b = bArg;\n\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const minVal = min(r, g, b);\n  const maxVal = max(r, g, b);\n  const delta = maxVal - minVal;\n\n  let h: number, s: number;\n  const v = maxVal;\n  if (delta === 0) {\n    h = s = 0;\n  } else {\n    s = delta / maxVal;\n    const dr = ((maxVal - r) / 6 + delta / 2) / delta;\n    const dg = ((maxVal - g) / 6 + delta / 2) / delta;\n    const db = ((maxVal - b) / 6 + delta / 2) / delta;\n\n    if (r === maxVal) {\n      h = db - dg;\n    } else if (g === maxVal) {\n      h = 1 / 3 + dr - db;\n    } else if (b === maxVal) {\n      h = 2 / 3 + dg - dr;\n    }\n\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n  }\n\n  return [h * 360, s * 100, v * 100];\n}\n\n/**\n * Convert HSL to HSV.\n * @param h Hue\n * @param s Saturation\n * @param l Lightness\n * @return {number[]} HSV values.\n */\nfunction hslToHsv(h: number, sArg: number, lArg: number) {\n  let s = sArg;\n  let l = lArg;\n\n  s /= 100;\n  l /= 100;\n  s *= l < 0.5 ? l : 1 - l;\n\n  const ns = ((2 * s) / (l + s)) * 100;\n  const v = (l + s) * 100;\n  return [h, Number.isNaN(ns) ? 0 : ns, v];\n}\n\n/**\n * Convert HEX to HSV.\n * @param hex Hexadecimal string of rgb colors, can have length 3 or 6.\n * @return {number[]} HSV values.\n */\nfunction hexToHsv(hex: string) {\n  const result = hex.match(/.{2}/g) as string[];\n  const numResult = result.map((v: string) => Number.parseInt(v, 16));\n\n  return rgbToHsv(numResult[0], numResult[1], numResult[2]);\n}\n\n/**\n * Takes an Array of any type, convert strings which represents\n * a number to a number and anything else to undefined.\n * @param array\n * @return {*}\n */\nexport function numarize(array: unknown[]): (number | undefined)[] {\n  return array.map((v) => {\n    const n = Number(v);\n    return Number.isNaN(v) ? undefined : n;\n  });\n}\n\n/**\n * Try's to parse a string which represents a color to a HSV array.\n * Current supported types are rgba, hsla and hexadecimal.\n * @param str\n * @return {*}\n */\n/* eslint-disable complexity */\nexport function parseToHSVA(str: string) {\n  // Check if string is a color-name\n  // str = str.match(/^[a-zA-Z]+$/) ? standardizeColor(str) : str;\n\n  // Regular expressions to match different types of color represention\n  const validColorValueRegex = {\n    rgba: /^rgba?\\D+([\\d.]+)(%?)\\D+([\\d.]+)(%?)\\D+([\\d.]+)(%?)\\D*?(([\\d.]+)(%?)|$)/i,\n    hsla: /^hsla?\\D+([\\d.]+)\\D+([\\d.]+)\\D+([\\d.]+)\\D*?(([\\d.]+)(%?)|$)/i,\n    hsva: /^hsva?\\D+([\\d.]+)\\D+([\\d.]+)\\D+([\\d.]+)\\D*?(([\\d.]+)(%?)|$)/i,\n    hexa: /^#?(([\\da-f]{3,4})|([\\da-f]{6})|([\\da-f]{8}))$/i,\n  };\n\n  for (const [colorType, regex] of Object.entries(validColorValueRegex)) {\n    const match = regex.exec(str);\n    if (!match) {\n      continue;\n    }\n\n    // Try to convert\n    switch (colorType) {\n      case 'rgba': {\n        const numarizedResult = numarize(match);\n        let r = numarizedResult[1];\n        let g = numarizedResult[3];\n        let b = numarizedResult[5];\n        let a = numarizedResult[8];\n\n        r = match[2] === '%' ? (r / 100) * 255 : r;\n        g = match[4] === '%' ? (g / 100) * 255 : g;\n        b = match[6] === '%' ? (b / 100) * 255 : b;\n        a = match[9] === '%' ? a / 100 : a;\n\n        if (r > 255 || g > 255 || b > 255 || a < 0 || a > 1) {\n          break;\n        }\n\n        return { values: [...rgbToHsv(r, g, b), a], a, colorType };\n      }\n      case 'hexa': {\n        let [, hex] = match;\n\n        if (hex.length === 4 || hex.length === 3) {\n          hex = hex\n            .split('')\n            .map((v: any) => v + v)\n            .join('');\n        }\n\n        const raw = hex.slice(0, 6);\n        let a: string | number | undefined = hex.slice(6);\n\n        // Convert 0 - 255 to 0 - 1 for opacity\n        a = a ? Number.parseInt(a, 16) / 255 : undefined;\n\n        return { values: [...hexToHsv(raw), a], a, colorType };\n      }\n      case 'hsla': {\n        const numarizedResult = numarize(match);\n        const h = numarizedResult[1];\n        const s = numarizedResult[2];\n        const l = numarizedResult[3];\n        let a = numarizedResult[5];\n\n        a = match[6] === '%' ? a / 100 : a;\n\n        if (h > 360 || s > 100 || l > 100 || a < 0 || a > 1) {\n          break;\n        }\n\n        return { values: [...hslToHsv(h, s, l), a], a, colorType };\n      }\n      case 'hsva': {\n        const numarizedResult = numarize(match);\n        const h = numarizedResult[1];\n        const s = numarizedResult[2];\n        const v = numarizedResult[3];\n        let a = numarizedResult[5];\n\n        a = match[6] === '%' ? a / 100 : a;\n\n        if (h > 360 || s > 100 || v > 100 || a < 0 || a > 1) {\n          break;\n        }\n\n        return { values: [h, s, v, a], a, colorType };\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  return { values: null, colorType: null };\n}\n\n/* eslint-enable complexity */\n"]}