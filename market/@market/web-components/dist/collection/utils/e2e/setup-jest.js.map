{"version":3,"file":"setup-jest.js","sourceRoot":"","sources":["../../../../src/utils/e2e/setup-jest.ts"],"names":[],"mappings":"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","sourcesContent":["import { E2EElement } from '@stencil/core/testing';\n\nconst marketControlTags = new Set(['market-checkbox', 'market-radio', 'market-toggle']);\n\nexpect.extend({\n  async toHaveAriaChecked(el: E2EElement, value: string) {\n    const tagName = (await el.getProperty('tagName')).toLowerCase();\n    const toOrNot = this.isNot ? 'NOT to' : 'to';\n    const elHasAttr = el.getAttribute('aria-checked') === value;\n    const pass = elHasAttr;\n    const message = () => `Expected \"${tagName}\" ${toOrNot} be aria-checked=\"${value}\"`;\n    return { pass, message };\n  },\n\n  async toHaveReflectedBooleanProperty(el: E2EElement, prop: string) {\n    const tagName = (await el.getProperty('tagName')).toLowerCase();\n    const toOrNot = this.isNot ? 'NOT to' : 'to';\n    const hasProp = (await el.getProperty(prop)) === true;\n    const hasAttr = el.getAttribute(prop) === '';\n    const pass = hasProp && hasAttr;\n    const message = () => `Expected \"${tagName}\" ${toOrNot} have reflected boolean property \"${prop}\"`;\n    return { pass, message };\n  },\n\n  async toBeMarketControl(el: E2EElement) {\n    const tagName = (await el.getProperty('tagName')).toLowerCase();\n    const toOrNot = this.isNot ? 'NOT to' : 'to';\n    const pass = marketControlTags.has(tagName);\n    const message = () => `Expected \"${tagName}\" ${toOrNot} be a Market control`;\n    return { pass, message };\n  },\n\n  async toBeSelectedMarketControl(el: E2EElement) {\n    const tagName = (await el.getProperty('tagName')).toLowerCase();\n    const marketPropName = tagName === 'market-radio' ? 'selected' : 'checked';\n    const toOrNot = this.isNot ? 'NOT to' : 'to';\n    const input: E2EElement = await el.find('pierce/input');\n\n    await expect(el).toBeMarketControl();\n    if (this.isNot) {\n      await expect(el).not.toHaveReflectedBooleanProperty(marketPropName);\n\n      const marketProp = await el.getProperty(marketPropName);\n      await expect(marketProp).toBe(false);\n\n      const inputProp = await input.getProperty('checked');\n      await expect(inputProp).toBe(false);\n    } else {\n      await expect(el).toHaveReflectedBooleanProperty(marketPropName);\n\n      const marketProp = await el.getProperty(marketPropName);\n      await expect(marketProp).toBe(true);\n\n      const inputProp = await input.getProperty('checked');\n      await expect(inputProp).toBe(true);\n    }\n\n    const message = () => `Expected \"${tagName}\" ${toOrNot} be a selected Market control element`;\n    return { pass: !this.isNot, message };\n  },\n\n  async toBeIndeterminateMarketControl(el: E2EElement) {\n    const tagName = (await el.getProperty('tagName')).toLowerCase();\n    const toOrNot = this.isNot ? 'NOT to' : 'to';\n    const input: E2EElement = await el.find('pierce/input');\n\n    await expect(el).toBeMarketControl();\n    if (this.isNot) {\n      const inputProp = await input.getProperty('indeterminate');\n      await expect(inputProp).toBe(false);\n    } else {\n      const inputProp = await input.getProperty('indeterminate');\n      await expect(inputProp).toBe(true);\n    }\n\n    const message = () => `Expected \"${tagName}\" ${toOrNot} be an indeterminate Market control element`;\n    return { pass: !this.isNot, message };\n  },\n\n  async toBeVisible(el: E2EElement) {\n    expect(el).not.toBeNull();\n    const isVisible = await el.callMethod('checkVisibility');\n    if (isVisible) {\n      return {\n        message: () => `Expected element not to be visible`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `Expected element to be visible`,\n        pass: false,\n      };\n    }\n  },\n});\n"]}