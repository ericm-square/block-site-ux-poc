{"file":"market-context-manager.entry.js","mappings":"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","names":[],"sources":["src/components/market-context-manager/market-context-manager.css?tag=market-context-manager&encapsulation=shadow","src/components/market-context-manager/market-context-manager.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: -1000;\n  display: block;\n  overflow: hidden;\n  width: 100vw;\n  height: 100%;\n  opacity: 0%;\n\n  &([active]) {\n    z-index: 1000;\n    opacity: 100%;\n\n    /* whether click events pass through or not is managed by market-context's styles */\n    pointer-events: none;\n  }\n}\n","import { Component, Host, Method, Element, State, Prop, Event, EventEmitter, Listen, h } from '@stencil/core';\n\nimport { DialogElement } from '../../utils/dialog';\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { asyncRequestAnimationFrame } from '../../utils/raf';\n\n@Component({\n  tag: 'market-context-manager',\n  styleUrl: 'market-context-manager.css',\n  shadow: true,\n})\nexport class MarketContextManager {\n  @Element() el: HTMLMarketContextManagerElement;\n\n  /**\n   * Whether or not the context manager is UI blocking\n   */\n  @Prop({ mutable: true, reflect: true }) active: boolean = false;\n\n  @State() currentContext: HTMLMarketContextElement;\n  @State() stack: Array<HTMLMarketContextElement> = [];\n\n  mouseDownEl: HTMLElement;\n\n  childListObserver: MutationObserver;\n\n  /**\n   * Emitted when the context manager is activated/blocking is turned on\n   */\n  @Event() marketContextManagerActivated: EventEmitter;\n\n  /**\n   * Emitted when the context manager is deactivated/blocking is turned off\n   */\n  @Event() marketContextManagerDeactivated: EventEmitter;\n\n  initChildListObserver() {\n    if (this.childListObserver) return;\n\n    const updateChildList = () => {\n      this.stack = [...this.el.children] as HTMLMarketContextElement[];\n      this.currentContext = this.stack.length > 0 ? this.stack[this.stack.length - 1] : null;\n    };\n\n    updateChildList();\n    this.childListObserver = new MutationObserver(updateChildList);\n    this.childListObserver.observe(this.el, { childList: true });\n  }\n\n  async getCurrentContext() {\n    while (!this.currentContext) {\n      await asyncRequestAnimationFrame();\n    }\n    return this.currentContext;\n  }\n\n  @Listen('marketContextEmptied')\n  contextEmptiedEventHandler({ target: emptiedContext }) {\n    // Remove the emptied context from the DOM\n    emptiedContext.remove();\n\n    // Remove the emptied context from the stack\n    this.stack.splice(this.stack.indexOf(emptiedContext), 1);\n\n    // Set the currentContext to the next highest context or null if this was the\n    // only context in the stack\n\n    if (this.stack.length === 0) {\n      this.deactivate();\n    }\n  }\n\n  @Listen('keydown', { target: 'window' })\n  windowKeydown(e: KeyboardEvent) {\n    if (e.key === 'Escape' || e.key === 'Esc') {\n      this.currentContext?.currentDialog.el.dismiss({ origin: this.el });\n    }\n  }\n\n  /**\n   * Adds the passed dialogEl to the DOM and creates a new context if necessary or according to\n   * `shouldCreateNewContext` if it is passed\n   */\n  @Method()\n  async open(dialogEl: DialogElement, shouldCreateNewContext?: boolean) {\n    let createNewContext = shouldCreateNewContext;\n    if (!this.currentContext || dialogEl) {\n      createNewContext = true;\n    }\n\n    // If we don't currently have a context, or we're opening certain types of\n    // dialogs, then we should create a new context\n    if (createNewContext) {\n      this.createNewContext();\n    }\n\n    await this.currentContext.open(dialogEl);\n  }\n\n  /**\n   * Closes the dialog with matching ID\n   */\n  @Method()\n  close(dialogID?: string) {\n    this.currentContext.close(dialogID);\n    return Promise.resolve();\n  }\n\n  /**\n   * Adds a new market-context to the stack in the DOM and activates it\n   */\n  @Method()\n  createNewContext() {\n    this.activate();\n\n    this.el.appendChild(document.createElement(getNamespacedTagFor('market-context')) as HTMLMarketContextElement);\n    this.currentContext = this.el.lastElementChild as HTMLMarketContextElement;\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Hides the entire context manager\n   */\n  @Method()\n  deactivate() {\n    this.active = false;\n    this.marketContextManagerDeactivated.emit();\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Shows the context manager\n   */\n  @Method()\n  activate() {\n    if (!this.active) {\n      this.active = true;\n      this.marketContextManagerActivated.emit();\n    }\n    return Promise.resolve();\n  }\n\n  handleMouseEvents(e) {\n    // checking to make sure the click started and ended on a market-context\n    // with a veil before dismissing the current dialog\n    // (clicks pass through contexts w/o veil, currently only used w/ market-blade)\n    if (e.type === 'mousedown') {\n      this.mouseDownEl = e.target.tagName;\n    } else if (e.type === 'mouseup') {\n      const mouseUpEl = e.target.tagName;\n      if (\n        this.mouseDownEl === mouseUpEl &&\n        e.target.tagName.toLowerCase() === getNamespacedTagFor('market-context') &&\n        !e.target.classList.contains('no-veil')\n      ) {\n        this.currentContext?.currentDialog?.el.dismiss({ origin: this.el });\n      }\n    }\n  }\n\n  componentDidLoad() {\n    this.initChildListObserver();\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-context-manager\"\n        onMouseDown={(e) => this.handleMouseEvents(e)}\n        onMouseUp={(e) => this.handleMouseEvents(e)}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.childListObserver?.disconnect();\n  }\n}\n"],"version":3}