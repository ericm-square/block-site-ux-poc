{"file":"market-context.entry.js","mappings":"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","names":["CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION","CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION"],"sources":["src/components/market-context/market-context.css?tag=market-context&encapsulation=shadow","src/components/market-context/market-context.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  position: absolute;\n  display: grid;\n  justify-items: center;\n  width: 100vw;\n  height: 100%;\n\n  /* Enter Animation */\n  animation:\n    var(--core-animation-enter-transition-moderate-speed-duration)\n    market-fade-in\n    forwards\n    var(--core-animation-enter-transition-easing);\n\n  &([hidden]) {\n    /* Exit Animation */\n    opacity: 0%;\n    animation-name: market-fade-out;\n    animation-duration: var(--core-animation-exit-transition-moderate-speed-duration);\n    animation-timing-function: var(--core-animation-exit-transition-easing);\n  }\n\n  /* clicks should never pass through dialog content */\n  & > * {\n    pointer-events: auto;\n  }\n}\n\n/* veil */\n:host(:not(.no-veil)) {\n  background-color: var(--core-surface-overlay-color);\n  opacity: 100%;\n\n  /* clicks should not pass through */\n  pointer-events: auto;\n}\n\n/* no veil */\n:host(.no-veil) {\n  /* clicks pass through to underlying elements */\n  pointer-events: none;\n}\n\n@media screen and (min-width: 800px) {\n  ::slotted(.market-modal-partial) {\n    align-self: center;\n    margin: var(--modal-partial-vertical-screen-buffer-size) var(--modal-partial-horizontal-screen-buffer-size);\n  }\n}\n\n::slotted(.market-dialog) {\n  align-self: center;\n  width: calc(100% - (2 * var(--modal-dialog-horizontal-screen-buffer-size, 16px)));\n}\n","import {\n  CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION,\n  CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION,\n} from '@market/market-theme/js/cjs/index.js';\nimport { Component, Prop, Host, Element, Method, State, Listen, Event, Watch, EventEmitter, h } from '@stencil/core';\n\nimport { Dialog, DialogLoadedEvent, DialogElement, ALL_DIALOG_TYPES, DIALOGS_META } from '../../utils/dialog';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n@Component({\n  tag: 'market-context',\n  styleUrl: 'market-context.css',\n  shadow: true,\n})\nexport class MarketContext {\n  @Element() el: HTMLMarketContextElement;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Exposes the context's currentDialog for use by market-context-manager\n   */\n  @Prop({ mutable: true }) currentDialog: Dialog;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Disabling the context's default veil (including scroll blocking behavior)\n   * when visible. By default, this is set by market-context according to what\n   * dialog type is being opened. In the future, we want to expose this as an\n   * optional config option for market-context-manager's open() method.\n   */\n  @Prop({ mutable: true }) noVeil: Boolean = false;\n\n  /**\n   * Whether the context is hidden or visible.\n   */\n  @Prop({ mutable: true, reflect: true }) hidden: boolean = false;\n\n  /* TODO: make these match whatever the first/last dialog's animation is */\n  /**\n   * The duration for the modal enter animation, set from design tokens\n   */\n  @Prop()\n  readonly animationEnterDuration: number = CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION;\n\n  /**\n   * The duration for the modal exit animation, set from design tokens\n   */\n  @Prop()\n  readonly animationExitDuration: number = CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION;\n\n  // TODO: refactor context to only take one dialog (breaking change)\n  @State() stack: Array<Dialog> = [];\n  @State() totalCount: number = 0;\n  @State() dialogMeta: object = {};\n\n  /**\n   * Emitted whenever the contents of the context have changed:\n   * - Dialog added to the stack\n   * - Dialog removed from the stack\n   */\n  @Event() marketContextContentsChanged: EventEmitter<{\n    action: 'marketNewDialogOpened' | 'marketDialogClosed';\n    currentDialog: Dialog;\n    stack: Array<Dialog>;\n  }>;\n\n  /**\n   * Emitted whenever the context's stack is empty (no more open dialogs)\n   */\n  @Event() marketContextEmptied: EventEmitter;\n\n  @Watch('currentDialog')\n  currentDialogWatcher(newDialog: Dialog) {\n    this.stack.push(newDialog);\n    this.stack = [...this.stack]; // Spread syntax ensures triggering the watcher\n  }\n\n  @Watch('stack')\n  stackWatcher(newValue: Array<Dialog>) {\n    newValue.forEach((dialog) => {\n      // increase the count of the type of dialog in the meta\n      this.dialogMeta[dialog.type].count += 1;\n      // Increase the total count of dialogs\n      this.totalCount += 1;\n    });\n\n    // If there are no more dialogs opened, then emit an event indicating so\n    if (newValue.length === 0) {\n      this.hidden = true;\n\n      setTimeout(() => {\n        this.marketContextEmptied.emit();\n      }, this.animationExitDuration);\n    }\n\n    this.setContextVeil();\n  }\n\n  doesStackContainDialogThatRequiresVeil(dialog: DialogElement) {\n    const veiledDialogTagnames = Object.entries(DIALOGS_META)\n      .filter(([, config]) => config.veil)\n      .map(([type]) => getNamespacedTagFor(`market-${type}` as keyof HTMLElementTagNameMap));\n    return veiledDialogTagnames.includes(dialog.tagName.toLowerCase() as keyof HTMLElementTagNameMap);\n  }\n\n  setContextVeil(): void {\n    // consumer use of noVeil prop overrides default behavior\n    // veil shouldn't reset when stack is emptied\n    if (this.el.hasAttribute('no-veil') || this.stack.length === 0) {\n      return;\n    }\n\n    // context will turn off veil if no context in its stack requires one\n    this.noVeil = !this.stack.some((dialog) => this.doesStackContainDialogThatRequiresVeil(dialog.el));\n  }\n\n  stackHasDialog(dialogEl: DialogElement): boolean {\n    return this.stack.some((dialog) => dialog.el === dialogEl);\n  }\n\n  @Listen('marketDialogLoaded')\n  modalLoadedEventHandler(e: CustomEvent<DialogLoadedEvent>) {\n    const dialog = e.detail.dialog;\n    const type = e.detail.type;\n\n    if (dialog.parentElement !== this.el) {\n      // Ignore marketDialogLoaded events from dialogs which are not children of this\n      // context.\n      return;\n    } else if (this.stackHasDialog(dialog)) {\n      // Ignore marketDialogLoaded events from dialogs already contained in this\n      // context's stack.\n      return;\n    }\n\n    // Generate a new dialogID (ex. \"modal-partial-2\")\n    const generatedDialogID = this.generateDialogID(type);\n\n    // Set the dialogID for the dialog element (note: this maps to data-dialog-id\n    // and not the native id attribute)\n    dialog.dialogID = generatedDialogID;\n\n    // Set the id prop if one does not exist\n    // (we don't use this prop anymore, but since we were setting it to\n    // generatedDialogID before, removing it would be a breaking change)\n    dialog.id = dialog.id || generatedDialogID;\n\n    // Build a new Dialog object and set the currentDialog\n    this.currentDialog = {\n      el: dialog,\n      type,\n      dialogID: dialog.dialogID,\n      id: dialog.id,\n      index: this.stack.length,\n      indexOfType: this.dialogMeta[type].count + 1,\n    };\n\n    // Emit a nice marketContextContentsChanged event\n    this.marketContextContentsChanged.emit({\n      action: 'marketNewDialogOpened',\n      currentDialog: this.currentDialog,\n      stack: this.stack,\n    });\n  }\n\n  // This event is emitted from market dialog components (Modal, Sheet, Blade, etc.)\n  @Listen('marketDialogDismissed')\n  dialogDismissedEventHandler(event) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // only close direct children of this context\n    if (event.target.parentElement === this.el) {\n      this.close(event.detail.dialog.dialogID);\n    }\n  }\n\n  generateDialogID(type: string) {\n    // ex. \"sheet-2\"\n    return `${type}-${this.dialogMeta[type].count + 1}`;\n  }\n\n  getDialogByID(dialogID: string) {\n    return this.stack.find((dialog) => dialog.dialogID === dialogID);\n  }\n\n  /**\n   * Adds the passed dialogTemplate to the stack and inserts it into the DOM\n   */\n  @Method()\n  open(dialogTemplate) {\n    if (this.stack.length === 0) {\n      this.noVeil = !this.doesStackContainDialogThatRequiresVeil(dialogTemplate);\n    }\n\n    this.el.appendChild(dialogTemplate);\n    return Promise.resolve();\n  }\n\n  /**\n   * **Recommended for internal use only**\n   * Removes the topmost dialog from the stack or the dialog matching the passed `dialogID`\n   * Note that using this will not trigger the dialog to emit a marketDialogDismissed event.\n   *\n   * The recommended path for closing a dialog is to call its dismiss() method.\n   */\n  // TODO (breaking): consider renaming this method to `removeDialogElement`\n  @Method()\n  close(dialogID?: string) {\n    let dialog;\n    const d = this.stack.indexOf(dialog);\n\n    // If we want to close a specific dialog, then find that dialog in the stack\n    if (dialogID) {\n      dialog = this.stack.find((dialog) => dialog.dialogID === dialogID);\n\n      // If there is no dialog with the passed id, log a helpful warning\n      /* eslint-disable-next-line no-console */\n      !dialog && console.warn(`Tried to close dialog with data-dialog-id \"${dialogID}\" but none were found`);\n      // Otherwise we will close the current/most recently opened dialog\n    } else {\n      dialog = this.currentDialog;\n    }\n\n    if (dialog) {\n      // currently, \"persistent\" is only implemented for market-dialog, bc it's\n      // the only dialog type that doesn't programmatically insert a close button\n      // when used w/ market-header\n      if (dialog.type === 'dialog' && dialog.el.persistent) {\n        return Promise.resolve();\n      }\n\n      // Remove the dialog node from the DOM\n      setTimeout(() => {\n        dialog.el.remove();\n\n        // Remove the dialog from the stack. Reassign to trigger the watcher\n        this.stack.splice(d, 1);\n        this.stack = [...this.stack];\n\n        // Emit a nice event\n        this.marketContextContentsChanged.emit({\n          action: 'marketDialogClosed',\n          currentDialog: dialog,\n          stack: this.stack,\n        });\n      }, dialog.el.animationExitDuration);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * **Recommended for internal use only**\n   * Removes the topmost dialog from the stack (just an alias for default .close() behavior)\n   * Note that using this will not trigger the dialog to emit a marketDialogDismissed event.\n   *\n   * The recommended path for closing a dialog is to call its dismiss() method.\n   */\n  // TODO (breaking): consider removing this method in favor of encouraging consumers to close dialogs via dialog.dismiss();\n  @Method()\n  closeCurrent() {\n    this.close();\n    return Promise.resolve();\n  }\n\n  connectedCallback() {\n    ALL_DIALOG_TYPES.forEach((dialogType) => {\n      this.dialogMeta[dialogType] = { count: 0 };\n    });\n  }\n\n  render() {\n    return (\n      <Host class={`market-context ${this.noVeil ? 'no-veil' : ''}`}>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}