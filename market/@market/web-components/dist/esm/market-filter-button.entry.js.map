{"file":"market-filter-button.entry.js","mappings":";;AAAA,MAAM,qBAAqB,GAAG,4jJAA4jJ,CAAC;AAC3lJ,iCAAe,qBAAqB;;MCYvB,kBAAkB;;;oBAIgC,QAAQ;wBAKf,KAAK;uBAKA,KAAK;wBAKV,KAAK;sBAKP,KAAK;;;;IAUzD,WAAW,CAAC,KAAc;QACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,KAAK,CAAC,wBAAwB,EAAE,CAAC;SAClC;KACF;IAGD,oBAAoB,CAAC,QAAiB;QACpC,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;KACF;;;;;;IAQD,MAAM,QAAQ,CAAC,QAAiB,IAAI;QAClC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;SACvB;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;SACtB;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACtC;IAOD,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,KAAK,EAAC,sBAAsB,IAChC,gFACiB,IAAI,CAAC,QAAQ,EAC5B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAE,CAAC,EAAE,MAAM,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,mBAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,mBACtB,IAAI,CAAC,SAAS,EAC7B,IAAI,EAAC,QAAQ,IAEb,4DAAK,KAAK,EAAC,IAAI,EAAC,MAAM,EAAC,IAAI,EAAC,OAAO,EAAC,WAAW,EAAC,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,4BAA4B,IAC5F,0EAAgB,SAAS,eAAW,SAAS,EAAC,CAAC,EAAC,iDAAiD,GAAG,CAChG,EACN,6DAAM,KAAK,EAAC,OAAO,IACjB,8DAAa,CACR,EACP,6DAAM,IAAI,EAAC,UAAU,GAAQ,CACtB,CACJ,EACP;KACH;;;;;;;;;","names":[],"sources":["src/components/market-filter-button/market-filter-button.css?tag=market-filter-button&encapsulation=shadow","src/components/market-filter-button/market-filter-button.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  /* TODO: add icon color tokens */\n  --filter-button-normal-state-icon-color: var(--filter-button-normal-state-label-color);\n  --filter-button-hover-state-icon-color: var(--filter-button-hover-state-label-color);\n  --filter-button-pressed-state-icon-color: var(--filter-button-pressed-state-label-color);\n  --filter-button-disabled-state-icon-color: var(--filter-button-disabled-state-label-color);\n\n  display: inline-block;\n  white-space: nowrap;\n}\n\nbutton {\n  display: inline-flex;\n  gap: var(--filter-button-label-content-spacing);\n  justify-content: center;\n  align-items: center;\n\n  /* button width is 100% of host(market-filter-button), not the parent element of market-filter-button */\n  width: 100%;\n  border: none;\n  border-radius: var(--filter-button-border-radius);\n  background-color: var(--filter-button-normal-state-background-color);\n  color: var(--filter-button-normal-state-label-color);\n  box-shadow: var(--filter-button-normal-state-border-color) 0 0 0 var(--filter-button-border-size) inset;\n  font-family: inherit;\n  white-space: nowrap;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n\n  ::slotted([slot]) {\n    cursor: inherit;\n  }\n\n  ::slotted([slot=\"feedback\"]) {\n    color: var(--filter-button-normal-state-feedback-color);\n    white-space: nowrap;\n  }\n\n  svg {\n    display: none;\n    fill: var(--filter-button-normal-state-icon-color);\n  }\n}\n\n:host([icon-only]) {\n  .label {\n    display: none;\n  }\n\n  svg {\n    display: block;\n  }\n}\n\n:host([size=\"medium\"]) {\n  button {\n    min-height: var(--filter-button-medium-size-minimum-height);\n    padding:\n      var(--filter-button-medium-size-label-vertical-padding)\n      var(--filter-button-medium-size-label-horizontal-padding);\n    font-weight: var(--filter-button-medium-size-label-text-weight);\n    font-size: var(--filter-button-medium-size-label-text-size);\n    line-height: var(--filter-button-medium-size-label-text-leading);\n    letter-spacing: var(--filter-button-medium-size-label-text-tracking);\n    text-transform: var(--filter-button-medium-size-label-text-case);\n  }\n\n  ::slotted([slot=\"feedback\"]) {\n    font-weight: var(--filter-button-medium-size-feedback-text-weight);\n    font-size: var(--filter-button-medium-size-feedback-text-size);\n    line-height: var(--filter-button-medium-size-feedback-text-leading);\n    letter-spacing: var(--filter-button-medium-size-feedback-text-tracking);\n    text-transform: var(--filter-button-medium-size-feedback-text-case);\n  }\n}\n\n:host([size=\"small\"]) {\n  button {\n    min-height: var(--filter-button-small-size-minimum-height);\n    padding:\n      var(--filter-button-small-size-label-vertical-padding)\n      var(--filter-button-small-size-label-horizontal-padding);\n    font-weight: var(--filter-button-small-size-label-text-weight);\n    font-size: var(--filter-button-small-size-label-text-size);\n    line-height: var(--filter-button-small-size-label-text-leading);\n    letter-spacing: var(--filter-button-small-size-label-text-tracking);\n    text-transform: var(--filter-button-small-size-label-text-case);\n  }\n\n  ::slotted([slot=\"feedback\"]) {\n    font-weight: var(--filter-button-small-size-feedback-text-weight);\n    font-size: var(--filter-button-small-size-feedback-text-size);\n    line-height: var(--filter-button-small-size-feedback-text-leading);\n    letter-spacing: var(--filter-button-small-size-feedback-text-tracking);\n    text-transform: var(--filter-button-small-size-feedback-text-case);\n  }\n}\n\n:host(:hover),\n:host(:focus) {\n  button {\n    background-color: var(--filter-button-hover-state-background-color);\n    color: var(--filter-button-hover-state-label-color);\n    box-shadow: var(--filter-button-hover-state-border-color) 0 0 0 var(--filter-button-border-size) inset;\n  }\n\n  ::slotted([slot=\"feedback\"]) {\n    color: var(--filter-button-hover-state-feedback-color);\n  }\n\n  svg {\n    fill: var(--filter-button-hover-state-icon-color);\n  }\n}\n\n:host([active]),\n:host(:active) {\n  button {\n    background-color: var(--filter-button-pressed-state-background-color);\n    color: var(--filter-button-pressed-state-label-color);\n    box-shadow: var(--filter-button-pressed-state-border-color) 0 0 0 var(--filter-button-border-size) inset;\n  }\n\n  ::slotted([slot=\"feedback\"]) {\n    color: var(--filter-button-pressed-state-feedback-color);\n  }\n\n  svg {\n    fill: var(--filter-button-pressed-state-icon-color);\n  }\n}\n\n:host([disabled]) {\n  button {\n    background-color: var(--filter-button-disabled-state-background-color);\n    color: var(--filter-button-disabled-state-label-color);\n    box-shadow: var(--filter-button-disabled-state-border-color) 0 0 0 var(--filter-button-border-size) inset;\n  }\n\n  ::slotted([slot=\"feedback\"]) {\n    color: var(--filter-button-disabled-state-feedback-color);\n  }\n\n  svg {\n    fill: var(--filter-button-disabled-state-icon-color);\n  }\n}\n","import { Component, Host, h, Prop, Listen, Method, State, Watch } from '@stencil/core';\n\nimport { AriaAttributes } from '../../utils/aria';\n\n/**\n * @slot - The text used for the filter button label\n * @slot feedback - The text to indicate currently applied filters\n */\n@Component({\n  tag: 'market-filter-button',\n  styleUrl: 'market-filter-button.css',\n  shadow: true,\n})\nexport class MarketFilterButton {\n  /**\n   * String for setting filter button size\n   */\n  @Prop({ reflect: true }) readonly size: 'medium' | 'small' = 'medium';\n\n  /**\n   * Functionally and visually disables the button\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * Whether or not the button is focused\n   */\n  @Prop({ reflect: true, mutable: true }) focused: boolean = false;\n\n  /**\n   * Whether to display icon in place of label\n   */\n  @Prop({ reflect: true }) readonly iconOnly: boolean = false;\n\n  /**\n   * Whether or not the button is in an active state, e.g. filter is selected and dropdown is opened\n   */\n  @Prop({ reflect: true }) readonly active: boolean = false;\n\n  /**\n   * The ID of the popover element that the button controls\n   */\n  @Prop() readonly popoverId: string;\n\n  @State() ariaAttributes: AriaAttributes;\n\n  @Listen('click', { capture: true })\n  handleClick(event: UIEvent) {\n    if (this.disabled) {\n      event.stopImmediatePropagation();\n    }\n  }\n\n  @Watch('disabled')\n  handleDisabledChange(newValue: boolean) {\n    if (newValue && this.focused) {\n      this.focused = false;\n    }\n  }\n\n  /**\n   * Toggle focus on the filter button\n   * @param {boolean} [value=true] whether or not focus will be applied or removed\n   * @returns {Promise<boolean>} whether or not the button was focused or blurred\n   */\n  @Method()\n  async setFocus(value: boolean = true): Promise<boolean> {\n    if (this.disabled) {\n      return Promise.resolve(false);\n    }\n    this.focused = value;\n    if (this.focused) {\n      this.buttonEl.focus();\n    } else {\n      this.buttonEl.blur();\n    }\n    return Promise.resolve(this.focused);\n  }\n\n  /**\n   * Reference to the button element\n   */\n  private buttonEl: HTMLButtonElement;\n\n  render() {\n    return (\n      <Host class=\"market-filter-button\">\n        <button\n          aria-disabled={this.disabled}\n          disabled={this.disabled}\n          ref={(el) => (this.buttonEl = el)}\n          aria-expanded={this.active.toString()}\n          aria-controls={this.popoverId}\n          type=\"button\"\n        >\n          <svg width=\"18\" height=\"12\" viewBox=\"0 0 18 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 0H18V2H0V0ZM15 5H3V7H15V5ZM12 10H6V12H12V10Z\" />\n          </svg>\n          <span class=\"label\">\n            <slot></slot>\n          </span>\n          <slot name=\"feedback\"></slot>\n        </button>\n      </Host>\n    );\n  }\n}\n"],"version":3}