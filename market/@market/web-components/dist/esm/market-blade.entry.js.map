{"file":"market-blade.entry.js","mappings":"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","names":["CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION","CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION"],"sources":["src/components/market-blade/market-blade.css?tag=market-blade&encapsulation=shadow","src/components/market-blade/market-blade.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/modals.css\";\n\n:host {\n  @extend %modal;\n\n  position: fixed;\n  top: 0;\n  right: 0;\n  width: 100%;\n  max-width: var(--modal-blade-maximum-width-size);\n  height: 100vh;\n  padding-top: var(--modal-blade-regular-vertical-size-class-vertical-padding);\n  padding-bottom: var(--modal-blade-regular-vertical-size-class-vertical-padding);\n  background-color: var(--modal-blade-background-color);\n  box-shadow: var(--elevation-20-shadow);\n\n  /* Enter animation */\n  animation-name: market-slide-left-enter;\n  animation-duration:\n    var(\n      --blade-animation-enter-transition-duration,\n      var(--core-animation-enter-transition-moderate-speed-duration)\n    );\n  animation-timing-function:\n    var(\n      --blade-animation-enter-transition-easing,\n      var(--core-animation-enter-transition-easing)\n    );\n  animation-fill-mode: forwards;\n\n  ::slotted(*) {\n    padding-right: var(--modal-blade-regular-horizontal-size-class-horizontal-padding);\n    padding-left: var(--modal-blade-regular-horizontal-size-class-horizontal-padding);\n  }\n\n  /* Exit animation */\n  &([hidden]) {\n    animation-name: market-slide-left-exit;\n    animation-duration:\n      var(\n        --blade-animation-exit-transition-duration,\n        var(--core-animation-exit-transition-moderate-speed-duration)\n      );\n    animation-timing-function:\n      var(\n        --blade-animation-exit-transition-easing,\n        var(--core-animation-exit-transition-easing)\n      );\n  }\n\n  /* Used to skip exit animation if blade loads w/ hidden attribute */\n  &([hidden].skip-animation) {\n    transform: translateX(100%);\n    animation: none;\n  }\n}\n\n@media only screen and (min-width: 1200px) {\n  :host {\n    max-width: var(--modal-blade-wide-viewport-width-size);\n    padding-top: var(--modal-blade-wide-viewport-padding-top-size);\n    padding-bottom: var(--modal-blade-wide-viewport-padding-bottom-size);\n  }\n\n  ::slotted(*) {\n    padding-right: var(--modal-blade-wide-viewport-padding-right-size);\n    padding-left: var(--modal-blade-wide-viewport-padding-left-size);\n  }\n}\n","// TODO: use blade design tokens for animation speeds when they exist\nimport {\n  CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION,\n  CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION,\n} from '@market/market-theme/js/cjs/index.js';\nimport { Component, Host, Prop, Element, Listen, Method, Event, EventEmitter, h, Watch } from '@stencil/core';\n\nimport {\n  DialogDismissedEvent,\n  DialogLoadedEvent,\n  DialogType,\n  setupDialogCompactHandler,\n  getDialogSelector,\n} from '../../utils/dialog';\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport {\n  createAndActivateFocusTrap,\n  FocusTrap,\n  FocusTrapActivateOptions,\n  FocusTrapDeactivateOptions,\n  FocusTrapOptions,\n} from '../../utils/focus-trap';\nimport { classNames } from '../../utils/classnames';\nimport { TMarketHeaderNavigateEventDetail } from '../market-header/events';\n\n/**\n * @slot - The main content of the blade. Use `<section class=\"main\">` tag.\n */\n@Component({\n  tag: 'market-blade',\n  styleUrl: 'market-blade.css',\n  shadow: true,\n})\nexport class MarketBlade {\n  @Element() el: HTMLMarketBladeElement;\n  type: DialogType = 'blade';\n  focusTrap: FocusTrap;\n\n  /**\n   * INTERNAL ONLY: Used in CSS to trigger start and stop animations\n   */\n  @Prop({ mutable: true, reflect: true }) hidden: boolean = false;\n\n  /**\n   * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal\n   */\n  @Prop({ reflect: true, attribute: 'data-dialog-id' }) readonly dialogID: string;\n\n  /**\n   * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place\n   * in the stack\n   */\n  @Prop({ reflect: true, attribute: 'data-dialog-index' }) readonly index: number;\n\n  /**\n   * DEPRECATED: The duration for the blade enter/exit animations, set from design tokens\n   */\n  @Prop() readonly animationDuration: number = CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION;\n\n  /**\n   * The duration for the modal enter animation, set from design tokens\n   */\n  @Prop() readonly animationEnterDuration: number = CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION;\n\n  /**\n   * The duration for the modal exit animation, set from design tokens\n   */\n  @Prop() readonly animationExitDuration: number = CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION;\n\n  /**\n   * Enforces focus trapping on the modal\n   */\n  @Prop({ mutable: true }) trapFocus: boolean = false;\n\n  /* Used to skip the exit animation for <market-blade hidden> on load */\n  skipAnimation: boolean = false;\n\n  /**\n   * Triggered when the blade finishes loading\n   */\n  @Event() marketDialogLoaded: EventEmitter<DialogLoadedEvent>;\n\n  /**\n   * Triggered when the blade is dismissed, handled by context manager\n   */\n  @Event() marketDialogDismissed: EventEmitter<DialogDismissedEvent>;\n\n  /**\n   * Triggered when the dialog is fully dismissed\n   */\n  @Event() marketDialogDidDismiss: EventEmitter<DialogDismissedEvent>;\n\n  @Watch('hidden')\n  reenableAnimation() {\n    this.skipAnimation = false;\n  }\n\n  /**\n   * Listen to the marketHeaderNavigate event emitted by a market-header child component\n   * so we can emit a close event if needed\n   */\n  @Listen('marketHeaderNavigate')\n  headerNavigateEventHandler(event: CustomEvent<TMarketHeaderNavigateEventDetail>) {\n    const { detail, target } = event;\n    // TODO: 'close' should probably come from an enum of some sort\n    if (detail.action === 'close') {\n      // only dismiss if this is the first ancestor dialog\n      if ((target as HTMLElement).closest(getDialogSelector()) === this.el) {\n        this.dismiss();\n      }\n    }\n  }\n\n  /**\n   * Emits the dismiss event\n   * The parent context will handle actually removing elements from the DOM,\n   * All the blade needs to do it emit an event so actually closing it can be\n   * some other elements problem\n   */\n  @Method()\n  dismiss(dismissOptions?: Partial<DialogDismissedEvent>) {\n    const { defaultPrevented } = this.marketDialogDismissed.emit({\n      dialog: this.el,\n      type: this.type,\n      origin: dismissOptions?.origin || this.el,\n    });\n\n    if (!defaultPrevented) {\n      this.hidden = true;\n\n      /**\n       * Emit a marketDialogDidDismiss event when modal gets fully dismissed (after animation).\n       */\n      setTimeout(() => {\n        this.marketDialogDidDismiss.emit({\n          dialog: this.el,\n          type: this.type,\n          origin: this.el,\n        });\n      }, this.animationExitDuration);\n    }\n\n    return Promise.resolve();\n  }\n\n  @Watch('trapFocus')\n  onTrapFocusChanged(newValue: boolean, oldValue: boolean) {\n    // only activate/deactivate when the `trapFocus` prop value changes\n    if (newValue !== oldValue) {\n      if (newValue) {\n        this.activateFocusTrap();\n      } else {\n        this.deactivateFocusTrap();\n      }\n    }\n  }\n\n  /**\n   * Activates the focus trap\n   *\n   * See [`focus-trap.ts`](../../utils/focus-trap.ts) for default options\n   *\n   * @param {Object} [options] [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)\n   * @param {Object} [activateOptions] set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)\n   */\n  @Method()\n  activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) {\n    if (this.focusTrap) {\n      this.focusTrap.activate(activateOptions ?? {});\n      if (!this.trapFocus) {\n        this.trapFocus = true;\n      }\n    } else {\n      this.focusTrap = createAndActivateFocusTrap({\n        activateOptions,\n        el: this.el,\n        options,\n      });\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Deactivates the focus trap\n   *\n   * @param {FocusTrapDeactivateOptions} [deactivateOptions] set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)\n   */\n  @Method()\n  deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) {\n    if (this.focusTrap) {\n      this.focusTrap.deactivate({\n        returnFocus: true,\n        checkCanReturnFocus: (trigger) =>\n          new Promise((resolve) => {\n            if (typeof (trigger as any)?.setFocus === 'function') {\n              (trigger as any).setFocus();\n            } else {\n              resolve(); // node.focus(); will be called by focus-trap\n            }\n          }),\n        ...deactivateOptions,\n      });\n      this.focusTrap = undefined;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Emit a marketDialogLoaded event when the component connects.\n   * Need this so the context manager isn't rummaging around it's DOM\n   * to try and find the dialog that was just appended\n   */\n  connectedCallback() {\n    setTimeout(() => {\n      this.marketDialogLoaded.emit({\n        dialog: this.el,\n        type: this.type,\n      });\n\n      if (this.trapFocus) {\n        this.activateFocusTrap();\n      }\n    }, this.animationEnterDuration);\n  }\n\n  componentWillLoad() {\n    const header = this.el.querySelector<HTMLMarketHeaderElement>(getNamespacedTagFor('market-header'));\n    if (header) {\n      // We want to force the header to be navigable when slotted into blade\n      header.showNavigation = true;\n    }\n\n    if (this.hidden) {\n      this.skipAnimation = true;\n    }\n\n    setupDialogCompactHandler(this.el);\n  }\n\n  disconnectedCallback() {\n    this.deactivateFocusTrap();\n  }\n\n  render() {\n    return (\n      <Host\n        role=\"dialog\"\n        class={classNames('market-blade', {\n          'skip-animation': this.skipAnimation,\n        })}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}