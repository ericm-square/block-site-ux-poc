{"file":"utils-642247e6.js","mappings":";;IAiBY;AAAZ,WAAY,sBAAsB;IAChC,qEAAK,CAAA;IACL,2EAAQ,CAAA;IACR,uEAAM,CAAA;IACN,+GAA0B,CAAA;AAC5B,CAAC,EALW,sBAAsB,KAAtB,sBAAsB;;ACdlC;;;;SAIgB,YAAY,CAAC,KAAc;;IAEzC,OAAO,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,KAAK,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;AAC/G,CAAC;AAED;;;;SAIgB,cAAc,CAAC,OAAgB;;IAC7C,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;IACD,MAAM,OAAO,GAAG,MAAC,OAAuB,CAAC,OAAO,0CAAE,iBAAiB,EAAE,CAAC;IACtE,MAAM,gBAAgB,GAAG;QACvB,mBAAmB,CAAC,iBAAiB,CAAC,CAAC,iBAAiB,EAAE;QAC1D,mBAAmB,CAAC,cAAc,CAAC,CAAC,iBAAiB,EAAE;QACvD,mBAAmB,CAAC,eAAe,CAAC,CAAC,iBAAiB,EAAE;KAC7C,CAAC;IACd,OAAO,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC5C,CAAC;AAED,SAAS,oBAAoB,CAAC,GAAyB;IACrD,IAAI,CAAC,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,OAAO,KAAK,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,SAAS,CAAC,EAAE;QAC1G,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,cAAc,GAAG,GAAG,CAAC,aAAa,CAAC,kBAAkB,CAA2C,CAAC;IAEvG,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,sBAAsB,CAAC,0BAA0B,CAAC;KAC1D;IACD,IAAI,oBAAoB,CAAC,cAAc,EAAE,iBAAiB,CAAC,EAAE;QAC3D,OAAO,sBAAsB,CAAC,QAAQ,CAAC;KACxC;IACD,IAAI,oBAAoB,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE;QACxD,OAAO,sBAAsB,CAAC,KAAK,CAAC;KACrC;IACD,IAAI,oBAAoB,CAAC,cAAc,EAAE,eAAe,CAAC,EAAE;QACzD,OAAO,sBAAsB,CAAC,MAAM,CAAC;KACtC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;;;SAIgB,qBAAqB,CAAC,IAAqB;IACzD,IAAI,oBAAoB,CAAC,IAAI,EAAE,oBAAoB,CAAC,EAAE;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC;QACvE,IAAI,QAAQ,EAAE;YACZ,OAAO,oBAAoB,CAAC,QAAQ,CAAC,CAAC;SACvC;QACD,OAAO,sBAAsB,CAAC,0BAA0B,CAAC;KAC1D;IAED,IAAI,oBAAoB,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE;QAC5C,OAAO,oBAAoB,CAAC,IAA4B,CAAC,CAAC;KAC3D;IAED,OAAO,SAAS,CAAC;AACnB;;;;","names":[],"sources":["src/components/market-list/types.ts","src/components/market-list/utils.ts"],"sourcesContent":["export type TMarketListItem = HTMLMarketRowElement | HTMLMarketActionCardElement;\nexport type TMarketListValidControlRowInputElement =\n  | HTMLMarketCheckboxElement\n  | HTMLMarketToggleElement\n  | HTMLMarketRadioElement;\nexport type TMarketListFilterStrategyPropCallback = (attrs: {\n  item: TMarketListItem;\n  label: string;\n  query: string;\n  textContent: string;\n  value: string;\n}) => boolean;\nexport type TMarketListFilterStrategyPropTypes =\n  | 'label'\n  | 'textcontent'\n  | 'value'\n  | TMarketListFilterStrategyPropCallback;\nexport enum ListItemSelectableType {\n  RADIO,\n  CHECKBOX,\n  SWITCH,\n  SELECTABLE_WITHOUT_CONTROL,\n}\n","import { getNamespacedTagFor, isElementWithTagName } from '../../utils/namespace';\nimport { ListItemSelectableType, TMarketListItem, TMarketListValidControlRowInputElement } from './types';\n\n/**\n * Check if the value is considered empty\n * @param {unknown} value\n */\nexport function isValueEmpty(value: unknown): boolean {\n  // Note: we don't check for 0 here because it's a valid value, so _.isEmpty() is not used\n  return value === '' || value === null || value === undefined || (Array.isArray(value) && value.length === 0);\n}\n\n/**\n * Check if the slotted control in <market-row slot=\"control-row> is a valid control row input\n * @param {unknown} control\n */\nexport function isValidControl(control: unknown): control is TMarketListValidControlRowInputElement {\n  if (!control) {\n    return false;\n  }\n  const tagName = (control as HTMLElement).tagName?.toLocaleLowerCase();\n  const validControlTags = [\n    getNamespacedTagFor('market-checkbox').toLocaleLowerCase(),\n    getNamespacedTagFor('market-radio').toLocaleLowerCase(),\n    getNamespacedTagFor('market-toggle').toLocaleLowerCase(),\n  ] as string[];\n  return validControlTags.includes(tagName);\n}\n\nfunction getRowSelectableType(row: HTMLMarketRowElement): ListItemSelectableType | undefined {\n  if (!row.interactive || row.variant === 'drill' || Boolean(row.href) || (row.interactive && row.transient)) {\n    return undefined;\n  }\n\n  const slottedControl = row.querySelector('[slot=\"control\"]') as TMarketListValidControlRowInputElement;\n\n  if (!slottedControl) {\n    return ListItemSelectableType.SELECTABLE_WITHOUT_CONTROL;\n  }\n  if (isElementWithTagName(slottedControl, 'market-checkbox')) {\n    return ListItemSelectableType.CHECKBOX;\n  }\n  if (isElementWithTagName(slottedControl, 'market-radio')) {\n    return ListItemSelectableType.RADIO;\n  }\n  if (isElementWithTagName(slottedControl, 'market-toggle')) {\n    return ListItemSelectableType.SWITCH;\n  }\n  return undefined;\n}\n\n/**\n * Get the selectable type (radio, checkbox, etc.) from a list item, which is either a market-row or market-action-card\n * @param {TMarketListItem} item\n */\nexport function getItemSelectableType(item: TMarketListItem): ListItemSelectableType | undefined {\n  if (isElementWithTagName(item, 'market-action-card')) {\n    const innerRow = item.querySelector(getNamespacedTagFor('market-row'));\n    if (innerRow) {\n      return getRowSelectableType(innerRow);\n    }\n    return ListItemSelectableType.SELECTABLE_WITHOUT_CONTROL;\n  }\n\n  if (isElementWithTagName(item, 'market-row')) {\n    return getRowSelectableType(item as HTMLMarketRowElement);\n  }\n\n  return undefined;\n}\n"],"version":3}