{"file":"market-color-swatch-list.js","mappings":";;;;;AAyBA;;;;SAIgB,6BAA6B;IAC3C,OAAO;QACLA,4BAAwB;QACxBC,uBAAmB;QACnBC,0BAAsB;QACtBC,wBAAoB;QACpBC,0BAAsB;QACtBC,yBAAqB;QACrBC,yBAAqB;QACrBC,0BAAsB;QACtBC,yBAAqB;QACrBC,wBAAoB;QACpBC,wBAAoB;QACpBC,uBAAmB;QACnBC,0BAAsB;QACtBC,wBAAoB;KACrB,CAAC;AACJ;;AC9CA,MAAM,wBAAwB,GAAG,8IAA8I,CAAC;AAChL,oCAAe,wBAAwB;;MCQ1BC,uBAAqB;;;;;;;;IAkBhC,YAAY;QACV,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAC9B;;;IAKD,+BAA+B,CAAC,CAAc;QAC5C,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;KACxC;IAED,uBAAuB,CAAC,SAA+C;QACrE,MAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhE,IAAI,IAAI,CAAC,KAAK,KAAK,aAAa,EAAE;YAChC,OAAO;SACR;QAED,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC;YACtE,KAAK,EAAE,aAAa;YACpB,SAAS,EAAE,IAAI,CAAC,KAAK;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE;YACrB,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;SAC5B;KACF;;IAGD,qBAAqB;;QAEnB,IAAI,KAAK,GAAG;YACV,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;SACjC,CAAC;QACzC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,KAAK,GAAG;gBACN,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;aAC5C,CAAC;SAC1C;QAED,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KACtE;IAED,gBAAgB;QACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAC9B;IAED,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,KAAK,EAAC,0BAA0B,EAAC,IAAI,EAAC,MAAM,IAChD,6DAAM,YAAY,EAAE,MAAM,IAAI,CAAC,gBAAgB,EAAE,IAE9C,6BAA6B,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW;YAC/C,OAAO,2BAAqB,KAAK,EAAE,WAAW,GAAwB,CAAC;SACxE,CAAC,CACG,CACF,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["CORE_BURGUNDY_FILL_COLOR","CORE_RED_FILL_COLOR","CORE_ORANGE_FILL_COLOR","CORE_GOLD_FILL_COLOR","CORE_YELLOW_FILL_COLOR","CORE_TAUPE_FILL_COLOR","CORE_BROWN_FILL_COLOR","CORE_FOREST_FILL_COLOR","CORE_GREEN_FILL_COLOR","CORE_TEAL_FILL_COLOR","CORE_BLUE_FILL_COLOR","CORE_SKY_FILL_COLOR","CORE_PURPLE_FILL_COLOR","CORE_PINK_FILL_COLOR","MarketColorSwatchList"],"sources":["src/components/market-color-picker/utils.ts","src/components/market-color-picker/subcomponents/market-color-swatch-list/market-color-swatch-list.css?tag=market-color-swatch-list&encapsulation=shadow","src/components/market-color-picker/subcomponents/market-color-swatch-list/market-color-swatch-list.tsx"],"sourcesContent":["import {\n  CORE_BURGUNDY_FILL_COLOR,\n  CORE_RED_FILL_COLOR,\n  CORE_ORANGE_FILL_COLOR,\n  CORE_GOLD_FILL_COLOR,\n  CORE_YELLOW_FILL_COLOR,\n  CORE_TAUPE_FILL_COLOR,\n  CORE_BROWN_FILL_COLOR,\n  CORE_FOREST_FILL_COLOR,\n  CORE_GREEN_FILL_COLOR,\n  CORE_TEAL_FILL_COLOR,\n  CORE_BLUE_FILL_COLOR,\n  CORE_SKY_FILL_COLOR,\n  CORE_PURPLE_FILL_COLOR,\n  CORE_PINK_FILL_COLOR,\n} from '@market/market-theme/js/cjs/index.js';\n\n/**\n * Takes swatch colors string prop and converts it into a usable array. Removes any empty strings.\n * @param {string} swatchString\n */\nexport function formatSwatchArray(swatchString: string): Array<string> {\n  return swatchString.split(';').filter((el) => el);\n}\n\n/**\n * Helper function to grab default Market color swatches formatted for market-color-picker\n * @returns { string } colorString\n */\nexport function getDefaultMarketColorSwatches(): Array<string> {\n  return [\n    CORE_BURGUNDY_FILL_COLOR,\n    CORE_RED_FILL_COLOR,\n    CORE_ORANGE_FILL_COLOR,\n    CORE_GOLD_FILL_COLOR,\n    CORE_YELLOW_FILL_COLOR,\n    CORE_TAUPE_FILL_COLOR,\n    CORE_BROWN_FILL_COLOR,\n    CORE_FOREST_FILL_COLOR,\n    CORE_GREEN_FILL_COLOR,\n    CORE_TEAL_FILL_COLOR,\n    CORE_BLUE_FILL_COLOR,\n    CORE_SKY_FILL_COLOR,\n    CORE_PURPLE_FILL_COLOR,\n    CORE_PINK_FILL_COLOR,\n  ];\n}\n",":host {\n  display: grid;\n\n  /* TODO: add design tokens */\n  grid-template-columns: repeat(auto-fill, var(--color-swatch-width, 40px));\n  grid-gap: var(--color-swatch-list-spacing, 16px);\n}\n","import { Component, Element, Event, EventEmitter, Host, h, Listen, Prop, Watch } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../../../utils/namespace';\nimport { getDefaultMarketColorSwatches } from '../../utils';\n\n@Component({\n  tag: 'market-color-swatch-list',\n  styleUrl: 'market-color-swatch-list.css',\n  shadow: true,\n})\nexport class MarketColorSwatchList {\n  @Element() el: HTMLMarketColorSwatchListElement;\n\n  /**\n   * A string specifying a value for the list.\n   * For a color swatch to be selected, this value should match the swatch's value.\n   * Note: all color swatch values slotted in must be **unique**!\n   * An empty string, or '', will clear the selection.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string;\n\n  /**\n   * Fired whenever an item is selected or deselected.\n   */\n  @Event({ bubbles: true, cancelable: true, composed: true })\n  marketColorSwatchListValueChange: EventEmitter<{ value: string; prevValue: string }>;\n\n  @Watch('value')\n  valueWatcher() {\n    this.setSelectionFromValue();\n  }\n\n  /* Listen for the marketColorSwatchSelectedChange event which is emitted by slotted market-color-swatch elements\n  when they are clicked */\n  @Listen('marketColorSwatchSelectedChange')\n  colorSwatchSelectedEventHandler(e: CustomEvent) {\n    this.handleItemSelectedEvent(e.detail);\n  }\n\n  handleItemSelectedEvent(eventInfo: { value: string; selected: boolean }) {\n    const selectedValue = eventInfo.selected ? eventInfo.value : '';\n\n    if (this.value === selectedValue) {\n      return;\n    }\n\n    const { defaultPrevented } = this.marketColorSwatchListValueChange.emit({\n      value: selectedValue,\n      prevValue: this.value,\n    });\n\n    if (!defaultPrevented) {\n      this.value = selectedValue;\n    }\n  }\n\n  // After selection, the swatches in the list update their selected state\n  setSelectionFromValue() {\n    // First check for slotted swatches, otherwise use default in shadow dom\n    let items = [\n      ...this.el.querySelectorAll(getNamespacedTagFor('market-color-swatch')),\n    ] as Array<HTMLMarketColorSwatchElement>;\n    if (items.length === 0) {\n      items = [\n        ...this.el.shadowRoot.querySelectorAll(getNamespacedTagFor('market-color-swatch')),\n      ] as Array<HTMLMarketColorSwatchElement>;\n    }\n\n    items.forEach((item) => (item.selected = this.value === item.value));\n  }\n\n  handleSlotChange() {\n    this.setSelectionFromValue();\n  }\n\n  render() {\n    return (\n      <Host class=\"market-color-swatch-list\" role=\"list\">\n        <slot onSlotchange={() => this.handleSlotChange()}>\n          {/* Uses Market Figma default colors for the swatches, unless other colors are slotted in */}\n          {getDefaultMarketColorSwatches().map((swatchValue) => {\n            return <market-color-swatch value={swatchValue}></market-color-swatch>;\n          })}\n        </slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}