{"file":"market-action-card.js","mappings":"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","names":["MarketActionCard"],"sources":["src/components/market-action-card/utils.ts","src/components/market-action-card/market-action-card.css?tag=market-action-card&encapsulation=shadow","src/components/market-action-card/market-action-card.tsx"],"sourcesContent":["import { isRowElement } from '../../utils/element-type-guard';\n\n/**\n * Finds the row that's slotted in the action card\n *\n * @param {HTMLMarketActionCardElement} actionCardEl - the action card element\n * @returns {HTMLMarketRowElement | null} the row element, if found\n */\nexport function getRowInActionCard(actionCardEl: HTMLMarketActionCardElement): HTMLMarketRowElement | null {\n  if (!actionCardEl?.children) {\n    return null;\n  }\n  return [...actionCardEl.children].find(isRowElement);\n}\n","@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  --focus-ring-color: color-mix(in srgb, var(--action-card-focus-ring-color) 100%, transparent);\n\n  display: block;\n  padding: var(--action-card-padding-vertical-size) var(--action-card-padding-horizontal-size);\n  border-radius: var(--action-card-border-radius);\n  background-color: var(--action-card-background-color);\n  box-shadow:\n    inset\n    0\n    0\n    0\n    var(--action-card-normal-state-unselected-value-border-width)\n    var(--action-card-normal-state-unselected-value-border-color);\n  opacity: var(--action-card-normal-state-content-opacity);\n  cursor: pointer;\n\n  &(:hover) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-hover-state-unselected-value-border-width)\n      var(--action-card-hover-state-unselected-value-border-color);\n  }\n\n  &(:active) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-active-state-unselected-value-border-width)\n      var(--action-card-active-state-unselected-value-border-color);\n  }\n\n  &([disabled]) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-disabled-state-unselected-value-border-width)\n      var(--action-card-disabled-state-unselected-value-border-color);\n    opacity: var(--action-card-disabled-state-content-opacity);\n  }\n\n  &([selected]) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-normal-state-selected-value-border-width)\n      var(--action-card-normal-state-selected-value-border-color);\n  }\n\n  &([selected]:hover) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-hover-state-selected-value-border-width)\n      var(--action-card-hover-state-selected-value-border-color);\n  }\n\n  &([selected]:active) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-active-state-selected-value-border-width)\n      var(--action-card-active-state-selected-value-border-color);\n  }\n\n  &([selected][disabled]) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-disabled-state-selected-value-border-width)\n      var(--action-card-disabled-state-selected-value-border-color);\n  }\n\n  &(.has-slotted-row) {\n    padding: 0 var(--row-background-horizontal-outset-padding);\n\n    ::slotted(.market-row) {\n      /* rows used inside action cards are interactive but should not have interactive styles */\n      /* stylelint-disable max-line-length */\n      --row-normal-variant-hover-state-text-color: var(--row-normal-variant-normal-state-text-color);\n      --row-normal-variant-hover-state-subtext-color: var(--row-normal-variant-normal-state-subtext-color);\n      --row-normal-variant-hover-state-side-text-primary-color: var(--row-normal-variant-normal-state-side-text-primary-color);\n      --row-normal-variant-hover-state-side-text-secondary-color: var(--row-normal-variant-normal-state-side-text-secondary-color);\n      --row-normal-variant-selected-state-text-color: var(--row-normal-variant-normal-state-text-color);\n      --row-normal-variant-selected-state-subtext-color: var(--row-normal-variant-normal-state-subtext-color);\n      --row-normal-variant-selected-state-side-text-primary-color: var(--row-normal-variant-normal-state-side-text-primary-color);\n      --row-normal-variant-selected-state-side-text-secondary-color: var(--row-normal-variant-normal-state-side-text-secondary-color);\n      --row-normal-variant-pressed-state-text-color: var(--row-normal-variant-normal-state-text-color);\n      --row-normal-variant-pressed-state-subtext-color: var(--row-normal-variant-normal-state-subtext-color);\n      --row-normal-variant-pressed-state-side-text-primary-color: var(--row-normal-variant-normal-state-side-text-primary-color);\n      --row-normal-variant-pressed-state-side-text-secondary-color: var(--row-normal-variant-normal-state-side-text-secondary-color);\n      /* stylelint-enable max-line-length */\n\n      /* since .market-rowâ€™s .container already has a padding, add some more */\n      padding-right:\n        calc(\n          var(--action-card-padding-horizontal-size) -\n          var(--row-normal-variant-background-horizontal-outset-padding)\n        );\n      padding-left:\n        calc(\n          var(--action-card-padding-horizontal-size) -\n          var(--row-normal-variant-background-horizontal-outset-padding)\n        );\n      background-color: transparent;\n    }\n  }\n\n  &(:focus-visible) {\n    outline: var(--action-card-focus-ring-border-size) solid var(--focus-ring-color);\n    outline-offset: var(--action-card-focus-ring-buffer-size);\n  }\n}\n","import { Component, Element, Event, EventEmitter, Host, h, Listen, Method, Prop } from '@stencil/core';\n\nimport { TMarketActionCardDeselectedEventDetail, TMarketActionCardSelectedEventDetail } from './events';\nimport { getRowInActionCard } from './utils';\n\n/**\n * @slot - Optimized for use w/ slotted `<market-row>`s but can take any content. All slotted `market-row`s will automatically be set to interactive mode.\n */\n@Component({\n  tag: 'market-action-card',\n  styleUrl: 'market-action-card.css',\n  shadow: true,\n})\nexport class MarketActionCard {\n  rowEl: HTMLMarketRowElement;\n\n  @Element() el: HTMLMarketActionCardElement;\n\n  /**\n   * Whether the action card is selected or not.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  /**\n   * Visually and functionally disables the action card.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * A string specifying a value for the action card.\n   */\n  @Prop({ reflect: true }) readonly value: string;\n\n  /**\n   * When set to `true`, card will not persist selected state on click.\n   */\n  @Prop() readonly transient: boolean = false;\n\n  /**\n   * Fired whenever the action card is selected.\n   */\n  @Event({ bubbles: true, composed: true }) marketCardSelected: EventEmitter<TMarketActionCardSelectedEventDetail>;\n\n  /**\n   * Fired whenever the action card is deselected.\n   */\n  @Event({ bubbles: true, composed: true }) marketCardDeselected: EventEmitter<TMarketActionCardDeselectedEventDetail>;\n\n  /**\n   * When rows are slotted into cards, we want to catch their selection events\n   * and emit our own, so that the containing `market-list` only gets one set\n   * of selection events.\n   */\n  @Listen('marketRowSelected')\n  handleRowSelection(e: CustomEvent) {\n    this.select();\n    // Prevent `marketRowSelected` from bubbling up to containing lists, since we expect\n    // them to listen to our card selection events instead.\n    e.stopPropagation();\n  }\n\n  /**\n   * When rows are slotted into cards, we want to catch their selection events\n   * and emit our own, so that the containing `market-list` only gets one set\n   * of selection events.\n   */\n  @Listen('marketRowDeselected')\n  handleRowDeselection(e: CustomEvent) {\n    this.deselect();\n    // Prevent `marketRowSelected` from bubbling up to containing lists, since we expect\n    // them to listen to our card selection events instead.\n    e.stopPropagation();\n  }\n\n  /**\n   * Set `selected` to `true` and emit `marketCardSelected`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async select() {\n    this.selected = true;\n    await this.rowEl?.silentlySelect();\n    const { defaultPrevented } = this.marketCardSelected.emit({ value: this.value });\n    if (defaultPrevented) {\n      this.selected = false;\n      await this.rowEl?.silentlyDeselect();\n    }\n  }\n\n  /**\n   * Set `selected` to `false` and emit `marketCardDeselected`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async deselect() {\n    this.selected = false;\n    await this.rowEl?.silentlyDeselect();\n    const { defaultPrevented } = this.marketCardDeselected.emit({ value: this.value });\n    if (defaultPrevented) {\n      this.selected = true;\n      await this.rowEl?.silentlySelect();\n    }\n  }\n\n  /**\n   * Used for setting the selection state to true without emitting events.\n   * Useful for scenarios where another component (ex. `<market-list>`) needs\n   * to sync state with slotted `<market-action-card>`s.\n   */\n  @Method()\n  async silentlySelect() {\n    this.selected = true;\n    await this.rowEl?.silentlySelect();\n    return Promise.resolve();\n  }\n\n  /**\n   * Set `selected` to `false`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async silentlyDeselect() {\n    this.selected = false;\n    await this.rowEl?.silentlyDeselect();\n    return Promise.resolve();\n  }\n\n  isContentEditable(el) {\n    // check whether element (Market or HTML) accepts text input\n    const inputTagnames = ['input', 'textarea'];\n    return inputTagnames.some((str) => el.tagName.includes(str)) || el.isContentEditable;\n  }\n\n  handleClick(e) {\n    // clicks to text inputs should not select action card\n    if (this.isContentEditable(e.target)) {\n      return;\n    }\n\n    // Rows handle selected state when slotted. The only way you can click directly on\n    // the card is by clicking the border, and we want to just ignore that edge case.\n    if (this.disabled || this.transient || this.rowEl) {\n      return;\n    }\n\n    if (!this.selected) {\n      this.select();\n    } else {\n      this.deselect();\n    }\n  }\n\n  handleKeydown(e: KeyboardEvent) {\n    // user should be able to type normally in text inputs\n    if (this.isContentEditable(e.target)) {\n      return;\n    }\n\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault(); // prevents scroll down when Space is pressed\n      if (this.rowEl) {\n        this.rowEl.click();\n      } else {\n        this.el.click();\n      }\n    }\n  }\n\n  syncRowAttributes() {\n    if (!this.rowEl) {\n      return;\n    }\n    this.rowEl.interactive = true;\n    this.rowEl.selected = this.selected;\n    this.rowEl.removeAttribute('tabIndex');\n  }\n\n  handleSlotChangeDefault() {\n    this.rowEl = getRowInActionCard(this.el);\n    this.el.classList.toggle('has-slotted-row', Boolean(this.rowEl));\n    this.syncRowAttributes();\n  }\n\n  componentDidRender() {\n    // slotted rows inside action cards should not be able to receive focus because\n    // they are controlled by interaction w/ the action card\n    if (this.rowEl) {\n      this.rowEl.removeAttribute('tabIndex');\n    }\n  }\n\n  render() {\n    return (\n      <Host\n        aria-selected={this.selected}\n        class=\"market-action-card\"\n        onClick={this.handleClick.bind(this)}\n        onKeydown={this.handleKeydown.bind(this)}\n        role=\"option\"\n        tabindex={this.disabled ? null : '0'}\n      >\n        <slot onSlotchange={() => this.handleSlotChangeDefault()}></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}