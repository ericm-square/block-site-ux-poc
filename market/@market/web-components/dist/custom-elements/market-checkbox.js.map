{"file":"market-checkbox.js","mappings":"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","names":["MarketCheckbox"],"sources":["src/components/market-checkbox/market-checkbox.css?tag=market-checkbox&encapsulation=shadow","src/components/market-checkbox/market-checkbox.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  --checkbox-offset: calc(-1 * var(--checkbox-border-size));\n  --focus-ring-color: color-mix(in srgb, var(--checkbox-focus-ring-color) 100%, transparent);\n\n  position: relative;\n  display: inline-block;\n  width: var(--checkbox-width);\n  height: var(--checkbox-height);\n  border: var(--checkbox-border-size) solid var(--checkbox-normal-state-normal-validity-unchecked-value-border-color);\n  border-radius: var(--checkbox-border-radius);\n\n  /* state:normal.validity:normal.value:unchecked */\n  background-color: var(--checkbox-normal-state-normal-validity-unchecked-value-background-color);\n}\n\ninput {\n  position: absolute;\n\n  /* The top and left offset are to account for the border size */\n  top: var(--checkbox-offset);\n  left: var(--checkbox-offset);\n  width: var(--checkbox-width);\n  height: var(--checkbox-height);\n  margin: 0;\n  border-radius: var(--checkbox-border-radius);\n  background: transparent;\n  outline: none;\n  cursor: pointer;\n  appearance: none;\n}\n\ninput:focus-visible {\n  outline: var(--checkbox-focus-ring-border-size) solid var(--focus-ring-color);\n  outline-offset: var(--checkbox-focus-ring-buffer-size);\n}\n\nsvg {\n  position: absolute;\n  top: var(--checkbox-offset);\n  left: var(--checkbox-offset);\n  pointer-events: none;\n}\n\n:host(:hover),\n:host([hovered]) {\n  /* state:hover.validity:normal.value:unchecked */\n  border-color: var(--checkbox-hover-state-normal-validity-unchecked-value-border-color);\n  background-color: var(--checkbox-hover-state-normal-validity-unchecked-value-background-color);\n}\n\n:host([focused]) {\n  /* state:focus.validity:normal.value:unchecked */\n  border-color: var(--checkbox-focus-state-normal-validity-unchecked-value-border-color);\n  background-color: var(--checkbox-focus-state-normal-validity-unchecked-value-background-color);\n}\n\n:host(:active),\n:host([active]) {\n  /* state:active.validity:normal.value:unchecked */\n  border-color: var(--checkbox-pressed-state-normal-validity-unchecked-value-border-color);\n  background-color: var(--checkbox-pressed-state-normal-validity-unchecked-value-background-color);\n}\n\n:host([checked]) {\n  /* state:normal.validity:normal.value:checked */\n  border-color: var(--checkbox-normal-state-normal-validity-checked-value-border-color);\n  background-color: var(--checkbox-normal-state-normal-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-normal-state-normal-validity-checked-value-icon-color);\n  }\n}\n\n:host([checked]:hover),\n:host([checked][hovered]) {\n  /* state:hover.validity:normal.value:checked */\n  border-color: var(--checkbox-hover-state-normal-validity-checked-value-border-color);\n  background-color: var(--checkbox-hover-state-normal-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-hover-state-normal-validity-checked-value-icon-color);\n  }\n}\n\n:host([checked][focused]) {\n  /* state:focus.validity:normal.value:checked */\n  border-color: var(--checkbox-focus-state-normal-validity-checked-value-border-color);\n  background-color: var(--checkbox-focus-state-normal-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-focus-state-normal-validity-checked-value-icon-color);\n  }\n}\n\n:host([checked]:active),\n:host([checked][active]) {\n  /* state:active.validity:normal.value:checked */\n  border-color: var(--checkbox-pressed-state-normal-validity-checked-value-border-color);\n  background-color: var(--checkbox-pressed-state-normal-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-pressed-state-normal-validity-checked-value-icon-color);\n  }\n}\n\n:host([indeterminate]) {\n  /* state:normal.validity:normal.value:indeterminate */\n  border-color: var(--checkbox-normal-state-normal-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-normal-state-normal-validity-indeterminate-value-background-color);\n\n  path {\n    stroke: var(--checkbox-normal-state-normal-validity-indeterminate-value-icon-color);\n  }\n}\n\n:host([indeterminate]:hover),\n:host([indeterminate][hovered]) {\n  /* state:hover.validity:normal.value:indeterminate */\n  border-color: var(--checkbox-hover-state-normal-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-hover-state-normal-validity-indeterminate-value-background-color);\n\n  path {\n    stroke: var(--checkbox-hover-state-normal-validity-indeterminate-value-icon-color);\n  }\n}\n\n:host([indeterminate][focused]) {\n  /* state:focus.validity:normal.value:indeterminate */\n  border-color: var(--checkbox-focus-state-normal-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-focus-state-normal-validity-indeterminate-value-background-color);\n\n  path {\n    stroke: var(--checkbox-focus-state-normal-validity-indeterminate-value-icon-color);\n  }\n}\n\n:host([indeterminate]:active),\n:host([indeterminate][active]) {\n  /* state:active.validity:normal.value:indeterminate */\n  border-color: var(--checkbox-pressed-state-normal-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-pressed-state-normal-validity-indeterminate-value-background-color);\n\n  path {\n    stroke: var(--checkbox-pressed-state-normal-validity-indeterminate-value-icon-color);\n  }\n}\n\n:host([invalid]) {\n  /* state:normal.validity:invalid.value:unchecked */\n  border-color: var(--checkbox-normal-state-invalid-validity-unchecked-value-border-color);\n  background-color: var(--checkbox-normal-state-invalid-validity-unchecked-value-background-color);\n}\n\n:host([invalid]:hover) {\n  /* state:hover.validity:invalid.value:unchecked */\n  border-color: var(--checkbox-hover-state-invalid-validity-unchecked-value-border-color);\n  background-color: var(--checkbox-hover-state-invalid-validity-unchecked-value-background-color);\n}\n\n:host([invalid][focused]) {\n  /* state:focus.validity:invalid.value:unchecked */\n  border-color: var(--checkbox-focus-state-invalid-validity-unchecked-value-border-color);\n  background-color: var(--checkbox-focus-state-invalid-validity-unchecked-value-background-color);\n}\n\n:host([invalid]:active) {\n  /* state:active.validity:invalid.value:unchecked */\n  border-color: var(--checkbox-pressed-state-invalid-validity-unchecked-value-border-color);\n  background-color: var(--checkbox-pressed-state-invalid-validity-unchecked-value-background-color);\n}\n\n:host([invalid][checked]) {\n  /* state:normal.validity:invalid.value:checked */\n  border-color: var(--checkbox-normal-state-invalid-validity-checked-value-border-color);\n  background-color: var(--checkbox-normal-state-invalid-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-normal-state-invalid-validity-checked-value-icon-color);\n  }\n}\n\n:host([invalid][checked]:hover) {\n  /* state:hover.validity:invalid.value:checked */\n  border-color: var(--checkbox-hover-state-invalid-validity-checked-value-border-color);\n  background-color: var(--checkbox-hover-state-invalid-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-hover-state-invalid-validity-checked-value-icon-color);\n  }\n}\n\n:host([invalid][checked][focused]) {\n  /* state:focus.validity:invalid.value:checked */\n  border-color: var(--checkbox-focus-state-invalid-validity-checked-value-border-color);\n  background-color: var(--checkbox-focus-state-invalid-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-focus-state-invalid-validity-checked-value-icon-color);\n  }\n}\n\n:host([invalid][checked]:active) {\n  /* state:active.validity:invalid.value:checked */\n  border-color: var(--checkbox-pressed-state-invalid-validity-checked-value-border-color);\n  background-color: var(--checkbox-pressed-state-invalid-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-pressed-state-invalid-validity-checked-value-icon-color);\n  }\n}\n\n:host([invalid][indeterminate]) {\n  /* state:normal.validity:invalid.value:indeterminate */\n  border-color: var(--checkbox-normal-state-invalid-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-normal-state-invalid-validity-indeterminate-value-background-color);\n\n  path {\n    stroke: var(--checkbox-normal-state-invalid-validity-indeterminate-value-icon-color);\n  }\n}\n\n:host([invalid][indeterminate]:hover) {\n  /* state:hover.validity:invalid.value:indeterminate */\n  border-color: var(--checkbox-hover-state-invalid-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-hover-state-invalid-validity-indeterminate-value-background-color);\n\n  path {\n    stroke: var(--checkbox-hover-state-invalid-validity-indeterminate-value-icon-color);\n  }\n}\n\n:host([invalid][indeterminate][focused]) {\n  /* state:focus.validity:invalid.value:indeterminate */\n  border-color: var(--checkbox-focus-state-invalid-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-focus-state-invalid-validity-indeterminate-value-background-color);\n}\n\n:host([invalid][indeterminate]:active) {\n  /* state:active.validity:invalid.value:indeterminate */\n  border-color: var(--checkbox-pressed-state-invalid-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-pressed-state-invalid-validity-indeterminate-value-background-color);\n\n  path {\n    stroke: var(--checkbox-pressed-state-invalid-validity-indeterminate-value-icon-color);\n  }\n}\n\n/* Disabled states trump all others */\n\n:host([disabled]) {\n  /* state:disabled.validity:normal.value:unchecked */\n  border-color: var(--checkbox-disabled-state-normal-validity-unchecked-value-border-color);\n  background-color: var(--checkbox-disabled-state-normal-validity-unchecked-value-background-color);\n  cursor: not-allowed;\n\n  input {\n    cursor: not-allowed;\n  }\n}\n\n:host([checked][disabled]) {\n  /* state:disabled.validity:normal.value:checked */\n  border-color: var(--checkbox-disabled-state-normal-validity-checked-value-border-color);\n  background-color: var(--checkbox-disabled-state-normal-validity-checked-value-background-color);\n\n  path {\n    stroke: var(--checkbox-disabled-state-normal-validity-checked-value-icon-color);\n  }\n}\n\n:host([indeterminate][disabled]) {\n  /* state:disabled.validity:normal.value:indeterminate */\n  border-color: var(--checkbox-disabled-state-normal-validity-indeterminate-value-border-color);\n  background-color: var(--checkbox-disabled-state-normal-validity-indeterminate-value-background-color);\n\n  path {\n    stroke: var(--checkbox-disabled-state-normal-validity-indeterminate-value-icon-color);\n  }\n}\n","import { Component, Event, EventEmitter, Host, h, Prop, Element, Method } from '@stencil/core';\nimport { getControlInputAriaLabel } from '../../utils/aria';\n\n@Component({\n  tag: 'market-checkbox',\n  styleUrl: 'market-checkbox.css',\n  shadow: true,\n})\nexport class MarketCheckbox {\n  @Element() el: HTMLMarketCheckboxElement;\n\n  /**\n   * Whether the checkbox is checked or unchecked. Operates independently of the indeterminate property.\n   * If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.\n   */\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. If true, indeterminate visual state takes precedence over checked/unchecked.\n   */\n  @Prop({ mutable: true, reflect: true }) indeterminate: boolean = false;\n\n  /**\n   * Whether the checkbox is invalid.\n   */\n  @Prop({ reflect: true }) readonly invalid: boolean = false;\n\n  /**\n   * Whether the checkbox is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * Whether the checkbox is hovered or not.\n   */\n  @Prop({ mutable: true, reflect: true }) hovered: boolean = false;\n\n  /**\n   * Whether the checkbox is active or not.\n   */\n  @Prop({ mutable: true, reflect: true }) active: boolean = false;\n\n  /**\n   * Fired whenever \"checked\" prop value changes.\n   */\n  @Event() marketCheckboxValueChange: EventEmitter<{ current: boolean; previous: boolean }>;\n\n  innerInput: HTMLInputElement;\n\n  /**\n   * Toggles `checked` prop, and emits a change event accordingly.\n   * Used by `market-row` to sync its selected state w/ slotted checkboxes.\n   */\n  @Method()\n  setSelection(newValue: boolean, { silent = false } = {}) {\n    // this method's implementation could be cleaned up and simplified\n    // (see analogous setSelection methods in toggle & radio),\n    // but the extra indeterminate state complicates things a bit.\n    // so just implementing this in a roundabout way for now in order to\n    // keep the tests the same, until we decide to handle it differently.\n    // ideally the indeterminate state wouldn't change if the event is prevented,\n    // but this could be a breaking change which would need to be addressed.\n    const { marketCheckboxValueChange, checked: prevValue, innerInput } = this;\n\n    if (typeof newValue !== 'boolean') return Promise.resolve();\n\n    this.indeterminate = false;\n\n    if (prevValue === newValue) return Promise.resolve();\n\n    if (!silent) {\n      const { defaultPrevented } = marketCheckboxValueChange.emit({\n        current: newValue,\n        previous: prevValue,\n      });\n      if (defaultPrevented) {\n        return Promise.resolve();\n      }\n    }\n\n    this.checked = newValue;\n    // When using the non-lazy output target, this method sometimes gets called\n    // from market-row's watcher after innerInput is removed, hence this check.\n    if (innerInput) {\n      innerInput.checked = newValue;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Toggles `indeterminate` prop. Operates independently of the `checked` property but if `true`,\n   * indeterminate visual appearance takes precedence over checked/unchecked.\n   */\n  @Method()\n  setIndeterminate(newValue: boolean) {\n    this.indeterminate = newValue;\n    return Promise.resolve();\n  }\n\n  /**\n   * DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).\n   */\n  @Method()\n  setValue(newValue: boolean) {\n    /* eslint-disable-next-line no-console */\n    console.warn(\"market-checkbox's setValue() method has been deprecated. Use setSelection() instead.\", this.el);\n    this.setSelection(newValue);\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `active` state. Allows external elements to programmatically\n   * trigger active styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setActive(value: boolean) {\n    this.active = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `hovered` state. Allows external elements to programmatically\n   * trigger hover styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setHover(value: boolean) {\n    this.hovered = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `disabled` state. Allows external elements to programmatically\n   * trigger disabled styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setDisabled(value: boolean) {\n    this.disabled = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `focused` state, except when disabled.\n   * Allows external consumers to programmatically\n   * trigger focused styling.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    if (this.disabled) {\n      return Promise.resolve();\n    }\n    this.focused = value;\n    return Promise.resolve();\n  }\n\n  handleClick(event: MouseEvent) {\n    // Always prevent default so we can manually control the selection\n    event.preventDefault();\n\n    if (this.disabled) {\n      return;\n    }\n\n    this.setFocus();\n    this.setSelection(!this.checked);\n  }\n\n  getCheckedState(): boolean | 'indeterminate' {\n    return this.indeterminate ? 'indeterminate' : this.checked;\n  }\n\n  componentDidRender() {\n    if (!this.innerInput) {\n      this.innerInput = this.el.shadowRoot.querySelector('input');\n    }\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-checkbox\"\n        onBlur={() => {\n          this.setFocus(false);\n        }}\n        onClick={this.handleClick}\n        onFocus={() => {\n          this.setFocus();\n        }}\n      >\n        <input\n          ref={(el) => (this.innerInput = el)}\n          type=\"checkbox\"\n          aria-label={getControlInputAriaLabel(this.el)}\n          checked={this.checked}\n          indeterminate={this.indeterminate}\n          disabled={this.disabled}\n        />\n        {this.checked && !this.indeterminate && (\n          <svg\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            data-testid=\"check\"\n          >\n            <path\n              d=\"M6 10L8.85714 13L14 7\"\n              stroke=\"white\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            />\n          </svg>\n        )}\n        {/* indeterminate visual state overrides checked state */}\n        {this.indeterminate && (\n          <svg\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            data-testid=\"indeterminate\"\n          >\n            <path d=\"M6 10H14\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n          </svg>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}