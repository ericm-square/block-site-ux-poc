{"file":"market-table-v2-group.js","mappings":"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","names":["MarketTableV2Group"],"sources":["src/components/tables-v2/market-table-v2-group/market-table-v2-group.css?tag=market-table-v2-group&encapsulation=shadow","src/components/tables-v2/market-table-v2-group/market-table-v2-group.tsx"],"sourcesContent":[":host {\n  --table-cell-horizontal-padding-size: 8px;\n  --table-cell-indent-size: 40px;\n  --drag-highlight-border-size: 2px;\n}\n\n/* weird, but slot needs to inherit in order to cascade to slotted items */\n:host,\nslot,\n.children {\n  vertical-align: inherit;\n  text-align: inherit;\n}\n\n/* secret sauce here:\n  this removes the wrappers from the layout render tree\n  so that the table layout still works! */\n:host,\n.children {\n  display: contents;\n}\n\n:host([collapsible][collapsed]) {\n  .children {\n    display: none;\n  }\n}\n\n/* highlight the group's parent if it's collapsed but contains the drag cursor */\n:host(.market-drag-cursor-parent[collapsible][collapsed]) {\n  ::slotted([slot=\"parent\"]) {\n    position: relative;\n    border-radius: var(--core-radius-10);\n    background-color: var(--core-emphasis-40-color);\n    outline: var(--drag-highlight-border-size) solid var(--core-emphasis-fill-color);\n    outline-offset: calc(var(--drag-highlight-border-size) * -1);\n  }\n}\n\n/* the drag cursor */\n::slotted(.market-drag-cursor) {\n  --drag-cursor-height: 4px;\n\n  position: absolute;\n  right: 0;\n  left:\n    calc(\n      var(--table-cell-horizontal-padding-size) +\n      (var(--drag-cursor-indent-level) + 1) * var(--table-cell-indent-size)\n    );\n  display: block;\n  height: 0;\n  outline: calc(var(--drag-cursor-height) / 2) solid var(--core-emphasis-fill-color);\n  pointer-events: none;\n}\n\n/* hide the placeholder group's child rows */\n:host(.market-drag-placeholder) {\n  ::slotted(:not([slot=\"parent\"])) {\n    display: none;\n  }\n}\n","import { Component, Host, h, Element, Prop, Watch, Listen, EventEmitter, Event, Method } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../../utils/namespace';\nimport {\n  HTMLMarketTableV2ChildElement,\n  TMarketTableV2Selection,\n  MarketTableV2SelectionChangeEventDetail,\n  TMarketTableV2SortOrder,\n  TMarketTableV2SortStrategy,\n} from '../market-table-v2/types';\nimport { isDraggable, TMarketDragEventDetail, Draggable } from '../../../utils/draggable';\nimport { TMarketReorderableOptions, Reorderable, TMarketReorderEventDetail } from '../../../utils/reorderable';\nimport { TMarketDragCoords } from '../../../utils/gesture/types';\nimport { sortItems } from '../market-table-v2/utils';\n\n/**\n * @slot - Default slot for children rows\n * @slot parent - Slot for for the parent row\n */\n\n@Component({\n  tag: 'market-table-v2-group',\n  styleUrl: 'market-table-v2-group.css',\n  shadow: true,\n})\nexport class MarketTableV2Group {\n  private parent: HTMLMarketTableV2RowElement;\n  private rows: Array<HTMLMarketTableV2RowElement>;\n  private groups: Array<HTMLMarketTableV2GroupElement>;\n  private children: Array<HTMLMarketTableV2ChildElement>;\n  private drag: Draggable;\n  private reorder: Reorderable;\n\n  @Element() el: HTMLMarketTableV2GroupElement;\n\n  /**\n   * Whether the group is collapsible.\n   */\n  @Prop({ reflect: true }) readonly collapsible: boolean = false;\n\n  /**\n   * Whether the group is expanded or collapsed, when `collapsible` is `true`.\n   */\n  @Prop({ reflect: true, mutable: true }) collapsed: boolean = false;\n\n  /**\n   * Whether the group is drag & drop enabled.\n   */\n  @Prop({ reflect: true }) readonly dragEnabled: boolean = false;\n\n  /**\n   * Indentation level\n   */\n  @Prop({ reflect: true }) readonly indent: number = 0;\n\n  /**\n   * Whether the group is reorderable or not.\n   * Setting to `internal` enables reordering table rows internally\n   * while `external` also allows dragging to & from other tables.\n   */\n  @Prop({ reflect: true }) readonly reorderable: TMarketReorderableOptions;\n\n  /**\n   * When set to `framework`, the group will move the reordered item back to its original position\n   * before the `marketTableV2RowsReordered` event is fired. This is useful when the table\n   * is rendered within a framework like Ember or React.\n   */\n  @Prop() readonly reorderMode: 'default' | 'framework' = 'default';\n\n  /**\n   * Whether the group is selected.\n   * Relevant if the group has rows with slotted controls.\n   */\n  @Prop({ mutable: true }) selected: TMarketTableV2Selection = 'false';\n\n  /**\n   * @internal\n   * Fired when the group selection state changes. Used internally in table components.\n   */\n  @Event({ bubbles: true, composed: true })\n  marketInternalTableV2GroupSelectionChange: EventEmitter<MarketTableV2SelectionChangeEventDetail>;\n\n  /**\n   * Fired when the group's rows are reordered.\n   * If a row was dropped into this group from an external source, `oldIndex` is `-1`.\n   * If a row was removed from this group and dropped into an external source, `newIndex` is `-1`.\n   */\n  @Event({ bubbles: true, composed: true })\n  marketTableV2RowsReordered: EventEmitter<TMarketReorderEventDetail>;\n\n  /**\n   * Fired when the group's collapsed state changes.\n   */\n  @Event({ bubbles: true, composed: true })\n  marketTableV2GroupCollapsedChange: EventEmitter<{ previous: boolean; current: boolean }>;\n\n  @Listen('marketTableV2CellCaretClicked')\n  onMarketTableV2CellCaretClicked(e: CustomEvent<void>) {\n    e.stopPropagation();\n    this.setCollapsed(!this.collapsed);\n  }\n\n  @Listen('marketInternalTableV2RowSelectionChange')\n  @Listen('marketInternalTableV2GroupSelectionChange')\n  async onMarketTableV2SelectionChange(e: CustomEvent<MarketTableV2SelectionChangeEventDetail>) {\n    const { el, parent } = this;\n    const { target, detail } = e;\n    const { current } = detail;\n\n    // oddly, a component's instance can catch its own event\n    // before it bubbles, so prevent an infinite loop!\n    if (target === el) return;\n    e.stopImmediatePropagation();\n\n    if (target === parent) {\n      // if the target is the parent, propagate values downward\n      await this.setSelected(current);\n    } else {\n      // the target is a child, and it's complicated...\n      await this.setSelectedFromChildEvent(e);\n    }\n  }\n\n  // These marketDragHandle listeners are for dragging this entire group,\n  // which is triggered by dragging the handle of the parent row.\n  // We ONLY want to listen for drag handle events on the parent,\n  // so we return early if the target is NOT the parent.\n\n  @Listen('marketDragHandleDragStart')\n  async onDragHandleStart(e: CustomEvent<TMarketDragCoords>) {\n    e.stopImmediatePropagation();\n    const { el, parent } = this;\n    const { target, detail: coords } = e;\n    if (parent !== target) return;\n    const anchor = parent.dragHandlePosition === 'leading' ? 'left' : 'right';\n    const drag = new Draggable(el, { anchor });\n    this.drag = drag;\n    await drag.start(coords);\n    parent.classList.add('market-drag-placeholder');\n  }\n\n  @Listen('marketDragHandleDragMove')\n  onDragHandleMove(e: CustomEvent<TMarketDragCoords>) {\n    e.stopImmediatePropagation();\n    const { parent, drag } = this;\n    const { target, detail: coords } = e;\n    if (parent !== target) return;\n    drag.move(coords);\n  }\n\n  @Listen('marketDragHandleDragEnd')\n  async onDragHandleDragEnd(e: CustomEvent<TMarketDragCoords>) {\n    e.stopImmediatePropagation();\n    const { parent, drag } = this;\n    const { target, detail: coords } = e;\n    if (parent !== target) return;\n    await drag.end(coords);\n    parent.classList.remove('market-drag-placeholder');\n    drag.destroy();\n  }\n\n  // These marketDrag listeners are for dragging WITHIN this group.\n  // If the dragged element is the parent row, we return early.\n\n  @Listen('marketDragMove')\n  onDragMove(e: CustomEvent<TMarketDragEventDetail>) {\n    const { parent, reorder } = this;\n    const { el } = e.detail;\n    if (parent === el) return;\n    e.stopImmediatePropagation();\n    reorder?.dragMove(e);\n  }\n\n  @Listen('marketDragLeave')\n  onDragLeave(e: CustomEvent<TMarketDragEventDetail>) {\n    const { parent, reorder } = this;\n    const { el } = e.detail;\n    if (parent === el) return;\n    e.stopImmediatePropagation();\n    reorder?.dragLeave();\n  }\n\n  @Listen('marketDragEnd')\n  onDragEnd(e: CustomEvent<TMarketDragEventDetail>) {\n    const { parent, reorder } = this;\n    const { el } = e.detail;\n    if (parent === el) return;\n    reorder?.dragEnd(e);\n  }\n\n  @Listen('marketDragDrop')\n  onDragDrop(e: CustomEvent<TMarketDragEventDetail>) {\n    const { parent, reorder } = this;\n    const { el } = e.detail;\n    if (parent === el) return;\n    reorder?.dragDrop(e);\n  }\n\n  @Watch('indent')\n  @Watch('collapsed')\n  @Watch('collapsible')\n  propagateNestedState() {\n    const { parent, children, groups, rows, indent, collapsible, collapsed } = this;\n\n    groups.forEach((group) => {\n      group.collapsible = collapsible;\n    });\n\n    if (collapsible) {\n      const hasChildren = children.length > 0;\n      if (parent) {\n        parent.caret = hasChildren ? (collapsed ? 'down' : 'up') : undefined;\n        parent.indent = hasChildren ? indent : indent + 1;\n      }\n      groups.forEach((group) => {\n        group.indent = indent + 1;\n        group.collapsible = collapsible;\n      });\n      rows.forEach((row) => {\n        // child rows get extra indentation to account for no caret\n        row.indent = indent + 2;\n      });\n    } else {\n      if (parent) {\n        parent.caret = undefined;\n        parent.indent = indent;\n      }\n      children.forEach((child) => {\n        child.indent = indent + 1;\n      });\n      groups.forEach((group) => {\n        group.collapsible = collapsible;\n      });\n    }\n  }\n\n  @Watch('dragEnabled')\n  watchDragEnabled() {\n    const { parent, children, dragEnabled } = this;\n    if (parent) parent.dragEnabled = dragEnabled;\n    children?.forEach((child) => {\n      child.dragEnabled = dragEnabled;\n    });\n  }\n\n  @Watch('reorderable')\n  watchReorderable() {\n    const { el, reorder, reorderable, reorderMode, marketTableV2RowsReordered } = this;\n\n    reorder?.destroy();\n\n    const reorderEnabled = ['internal', 'external'].includes(reorderable);\n    if (reorderEnabled) {\n      const rowTagName = getNamespacedTagFor('market-table-v2-row');\n      const groupTagName = getNamespacedTagFor('market-table-v2-group');\n\n      this.reorder = new Reorderable({\n        el,\n        accepts: [`${rowTagName}:not([header]):not([footer]):not([slot=\"parent\"])`, groupTagName],\n        event: marketTableV2RowsReordered,\n        mode: reorderMode,\n      });\n    }\n\n    this.syncDragEnabled();\n  }\n\n  /**\n   * @internal\n   * Sets selection on the group and propagates the value\n   * downwards to its children rows and upwards to any parent groups or tables.\n   */\n  @Method()\n  async setSelected(selected: TMarketTableV2Selection, { silent = false } = {}) {\n    const { parent, children, marketInternalTableV2GroupSelectionChange, selected: prevSelected } = this;\n\n    // return if no values have changed\n    if (prevSelected === selected) return Promise.resolve();\n\n    // fire the internal selection event\n    if (!silent) {\n      marketInternalTableV2GroupSelectionChange.emit({\n        current: selected,\n        previous: prevSelected,\n      });\n    }\n\n    // propagate the new values\n    this.selected = selected;\n\n    // this direction is top -> down, so don't fire events to avoid infinite loop\n    await parent?.setSelected(selected, { silent: true });\n    children?.forEach(async (child) => {\n      await child.setSelected(selected, { silent: true });\n    });\n\n    return Promise.resolve();\n  }\n\n  /**\n   * @internal\n   * Used internally by Reorderable utils.\n   * Sets the group's collapsed state and fires the change event.\n   * Normally you should set the `collapsed` prop directly.\n   */\n  @Method()\n  async setCollapsed(collapsed: boolean, { silent = false } = {}) {\n    const { collapsed: prevCollapsed, collapsible, marketTableV2GroupCollapsedChange } = this;\n\n    if (!collapsible) return Promise.resolve();\n    if (collapsed === prevCollapsed) return Promise.resolve();\n\n    this.collapsed = collapsed;\n    if (!silent) {\n      const { defaultPrevented } = marketTableV2GroupCollapsedChange.emit({\n        previous: prevCollapsed,\n        current: collapsed,\n      });\n      if (defaultPrevented) this.collapsed = prevCollapsed;\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * @internal\n   * Recursively sorts the group's children rows and groups.\n   */\n  @Method()\n  async sort({\n    order,\n    column,\n    strategy,\n    format,\n  }: {\n    order: TMarketTableV2SortOrder;\n    column: number;\n    strategy: TMarketTableV2SortStrategy;\n    format: string;\n  }) {\n    const { el, children, groups } = this;\n\n    // sort the children\n    const sortedChildren = sortItems({\n      items: children,\n      order,\n      column,\n      strategy,\n      format,\n    });\n\n    // sort the groups' children\n    groups?.forEach((group) =>\n      group.sort({\n        order,\n        column,\n        strategy,\n        format,\n      }),\n    );\n\n    // render the sorted rows\n    sortedChildren.forEach((row: HTMLMarketTableV2RowElement) => {\n      el.append(row);\n    });\n\n    return Promise.resolve();\n  }\n\n  private async setSelectedFromChildEvent(e: CustomEvent<MarketTableV2SelectionChangeEventDetail>) {\n    const { parent, children, marketInternalTableV2GroupSelectionChange, selected: prevSelected } = this;\n    const { target, detail } = e;\n    const { current: childSelected } = detail;\n\n    // get an array of what the children's selected values would be AFTER this event\n    const childrenSelected = children.map((child) => {\n      // if the target was THIS child, it will be new event value (not .selected)\n      if (target === child) return childSelected;\n      // otherwise, get the current value directly from this child\n      return child.selected;\n    });\n\n    // what this group's selected value would be AFTER this event\n    const groupSelected = childrenSelected.every((val) => val === 'true')\n      ? 'true'\n      : childrenSelected.every((val) => val === 'false')\n      ? 'false'\n      : 'indeterminate';\n\n    // return if no values have changed\n    if (prevSelected === groupSelected) return;\n\n    // fire the internal selection event\n    marketInternalTableV2GroupSelectionChange.emit({\n      current: groupSelected,\n      previous: prevSelected,\n    });\n\n    // propagate the new values\n    this.selected = groupSelected;\n    await parent.setSelected(groupSelected, { silent: true });\n  }\n\n  private getElements() {\n    this.parent = [...this.el.children].find((child) => {\n      return child.tagName === getNamespacedTagFor('market-table-v2-row').toUpperCase() && child.slot === 'parent';\n    }) as HTMLMarketTableV2RowElement;\n\n    this.rows = [...this.el.children].filter((child) => {\n      return child.tagName === getNamespacedTagFor('market-table-v2-row').toUpperCase() && child.slot !== 'parent';\n    }) as Array<HTMLMarketTableV2RowElement>;\n\n    this.groups = [...this.el.children].filter((child) => {\n      return child.tagName === getNamespacedTagFor('market-table-v2-group').toUpperCase() && child.slot !== 'parent';\n    }) as Array<HTMLMarketTableV2GroupElement>;\n\n    this.children = [...this.groups, ...this.rows];\n  }\n\n  private getStyles() {\n    const { indent } = this;\n    return { '--drag-cursor-indent-level': indent.toString() };\n  }\n\n  private syncDragEnabled() {\n    const { parent, rows, groups, reorderable, reorderMode } = this;\n\n    const reorderEnabled = ['internal', 'external'].includes(reorderable);\n\n    if (parent) parent.dragEnabled = reorderEnabled;\n\n    rows?.forEach((row) => {\n      if (!isDraggable(row)) return;\n      row.dragEnabled = reorderEnabled;\n    });\n\n    groups?.forEach((group) => {\n      group.dragEnabled = reorderEnabled;\n      group.reorderable = reorderable;\n      group.reorderMode = reorderMode;\n    });\n  }\n\n  private onSlotChange() {\n    this.getElements();\n    this.propagateNestedState();\n    this.syncDragEnabled();\n  }\n\n  connectedCallback() {\n    this.getElements();\n    this.propagateNestedState();\n    this.syncDragEnabled();\n  }\n\n  componentDidRender() {\n    this.watchReorderable();\n  }\n\n  render() {\n    return (\n      <Host class=\"market-table-v2-group\" style={this.getStyles()}>\n        <slot name=\"parent\" onSlotchange={() => this.onSlotChange()}></slot>\n        <div class=\"children\">\n          <slot onSlotchange={() => this.onSlotChange()}></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}