{"file":"market-code-display.js","mappings":"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","names":["MarketCodeDisplay"],"sources":["src/components/market-code-display/market-code-display.css?tag=market-code-display&encapsulation=shadow","src/components/market-code-display/market-code-display.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: min-content;\n  min-width: var(--code-display-width, 320px);\n  min-height: var(--code-display-height, 48px);\n  margin: var(--code-display-margin, 12px);\n  padding:\n    var(--code-display-padding-vertical, 12px)\n    var(--code-display-padding-right, 16px)\n    var(--code-display-padding-vertical, 12px)\n    var(--code-display-zero-value, 0);\n  border-radius: var(--code-display-border-radius, 6px);\n  background-color: var(--code-display-background-color, var(--core-fill-40-color));\n  font-weight: var(--code-display-code-font-weight, var(--core-type-bold-weight));\n  font-size: var(--code-display-code-font-size, var(--core-type-heading-20-size));\n  font-family: var(--code-display-font-family, var(--core-type-font-family));\n  font-feature-settings: \"tnum\"; /* enable tabular (monospaced) figures */\n\n  &(:not([disabled])) button:hover,\n  ::slotted(button:hover),\n  ::slotted(a:hover) {\n    opacity: var(--code-display-action-interaction-opacity, 60%);\n  }\n\n  &(:not([disabled])) button:active,\n  ::slotted(button:active),\n  ::slotted(a:active) {\n    opacity: var(--code-display-action-interaction-opacity, 60%);\n  }\n\n  &([disabled]) {\n    color: var(--code-display-disabled-text-color, var(--core-text-30-color)); /* Color of the code */\n  }\n\n  &([disabled]) ::slotted(button),\n  ::slotted(a) {\n    color: var(--code-display-disabled-text-color, var(--core-text-30-color)); /* Color of action link text */\n  }\n\n  .code-container {\n    display: flex;\n    flex-grow: 2;\n    justify-content: space-between;\n    min-width: var(--code-display-code-container-min-width, 269px);\n  }\n\n  .code-char {\n    flex-basis: 100%;\n    font-family: var(--core-type-mono-font-family, monospace);\n    text-align: center;\n  }\n\n  .actions-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    /* Implement nav separator line (Taken from market-banner.css) */\n    & ::slotted([slot=\"actions\"]:not(:last-child)) {\n      /* add extra right margin to place separator */\n      margin-right: var(--code-display-extra-actions-margin-right, 25px);\n\n      &::after {\n        /* left and right margins will position separator between this and the next action, and outside of clickable hit area */\n        content: \"\";\n        display: inline-block;\n        width: var(--code-display-button-separator-width, 1px);\n        height: var(--code-display-button-separator-height, 8px);\n        margin-right: var(--code-display-separator-margin-right, -13px);\n        margin-left: var(--code-display-button-content-spacing, 12px);\n        background-color: var(--code-display-button-separator-color, var(--core-fill-10-color));\n        opacity: var(--code-display-button-separator-opacity, 30%);\n        pointer-events: none;\n      }\n    }\n  }\n\n  button,\n  ::slotted(button),\n  ::slotted(a) {\n    margin: var(--code-display-zero-value, 0);\n    padding: var(--code-display-zero-value, 0);\n    border: none;\n    background-color: transparent;\n    color: var(--code-display-button-font-color, var(--core-blue-text-color));\n    font-weight: var(--code-display-button-font-weight, var(--core-type-semibold-weight));\n    font-size: var(--code-display-button-font-size, var(--core-type-paragraph-20-size));\n    font-family: inherit;\n    line-height: var(--code-display-button-line-height, var(--core-type-paragraph-20-leading));\n    text-decoration: none;\n    cursor: pointer;\n  }\n}\n\n/* Use media query to change width of button when window shrinks below 320px */\n@media only screen and (max-width: 320px) {\n  :host {\n    flex-wrap: wrap;\n    width: 100%;\n    min-width: var(--code-display-zero-value, 0);\n\n    .code-container {\n      min-width: var(--code-display-zero-value, 0);\n    }\n  }\n}\n","import { Component, Host, h, Prop, Element, Event, EventEmitter } from '@stencil/core';\n\n/**\n * When code is split up, represents how many characters are in each group.\n */\nconst CODE_GROUP_LEN = 4;\n\n@Component({\n  tag: 'market-code-display',\n  styleUrl: 'market-code-display.css',\n  shadow: true,\n})\nexport class MarketCodeDisplay {\n  @Element() el: HTMLMarketCodeDisplayElement;\n\n  /**\n   * Whether the component should appear in a disabled state.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * A boolean representing whether the code input is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * A string holding the code inputted by the user through a slot.\n   */\n  private code: string = '';\n\n  /**\n   * An array holding spans containing each character in the code, with some blanks.\n   * Used for styling and spacing.\n   */\n  private codeChars: Array<string> = [];\n\n  /**\n   * The default 'Copy' button that is always present in any market-code-display.\n   * Created and inserted into DOM in componentWillLoad().\n   */\n  private copyButton: HTMLElement;\n\n  /**\n   * Emitted when the 'Copy' button is pressed. Can be used by consumer to create toast.\n   */\n  @Event() marketCodeCopied: EventEmitter;\n\n  /**\n   * Component Lifecycle Event:\n   * Grab the code and its len from inputted code slot.\n   * Set relevant props and insert the Copy button programmatically so that it appears in the light DOM.\n   */\n  componentWillLoad() {\n    // Set code and codeGroups\n    const slottedCodeTag = this.el.querySelector('[slot=code]');\n    const code = slottedCodeTag.textContent;\n    // Remove whitespace from slotted code\n    this.code = code.replace(/\\s/g, '');\n    this.initCodeChars(this.code);\n\n    // Programmatically insert default Copy button into light DOM\n    this.copyButton = document.createElement('button');\n    Object.assign(this.copyButton, {\n      slot: 'actions',\n      type: 'button',\n      tabIndex: this.disabled ? -1 : 0,\n      onclick: () => this.copyToClipboard(),\n    });\n    // NOTE: The following code is brittle! Relies on the fact that the consumer\n    //       slotted in elements in order of 'code' -> 'copy-text' -> 'actions'\n    // If consumer slotted in alt copy-text, place copyButton after code & copy-text\n    if (this.el.querySelector('[slot=copy-text]')) {\n      // Set text of the Copy button to slotted copy-text\n      const slottedCopyText = this.el.querySelector('[slot=copy-text]');\n      const copyText = slottedCopyText.textContent;\n      this.copyButton.innerHTML = copyText;\n      slottedCopyText.insertAdjacentElement('afterend', this.copyButton);\n    } else {\n      this.copyButton.innerHTML = `Copy`;\n      slottedCodeTag.insertAdjacentElement('afterend', this.copyButton);\n    }\n  }\n\n  /**\n   * Inits this.codeChars to an array of <span> tags containing each character in the code string.\n   * Additionally contains empty strings at certain indices based on codeLen.\n   * By default, blanks are only placed at the front & back of the array.\n   *    ['', 'x', 'x', 'x', 'x', '']\n   * If codeLen is divisible by 4, put blanks every 4 spots too.\n   *    ['', 'x', 'x', 'x', 'x', '', 'x', 'x', 'x', 'x', '']\n   * The exception to this is if codeLen===4, in which case we use the default.\n   * This codeChars arr is used in render() to space and style characters appropriately.\n   * Called only once on componentWillLoad() as to not cause re-renders\n   */\n  initCodeChars(code) {\n    const codeLen = code.length;\n    const BLANK_CODE_SPAN = <span class=\"code-char\"></span>;\n\n    // Place blanks every 4 chars\n    if (codeLen !== CODE_GROUP_LEN && codeLen % CODE_GROUP_LEN === 0) {\n      for (let i = 0; i < codeLen; i++) {\n        if (i % CODE_GROUP_LEN === 0) this.codeChars.push(BLANK_CODE_SPAN);\n        this.codeChars.push(<span class=\"code-char\">{code[i]}</span>);\n      }\n    }\n    // Only place blank at the front & back\n    else {\n      this.codeChars.push(BLANK_CODE_SPAN);\n      for (let i = 0; i < codeLen; i++) {\n        this.codeChars.push(<span class=\"code-char\">{code[i]}</span>);\n      }\n    }\n    this.codeChars.push(BLANK_CODE_SPAN);\n  }\n\n  /**\n   * When user presses the 'Copy' button, copy code to clipboard & emit an event.\n   */\n  copyToClipboard() {\n    navigator.clipboard.writeText(this.code);\n    this.marketCodeCopied.emit();\n  }\n\n  render() {\n    return (\n      <Host class=\"market-code-display\" tabIndex={this.disabled ? null : 0} aria-label={this.code}>\n        <span class=\"code-container\">{this.codeChars}</span>\n        <span class=\"actions-container\">\n          <slot name=\"actions\"></slot>\n        </span>\n      </Host>\n    );\n  }\n}\n"],"version":3}