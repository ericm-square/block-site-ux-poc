{"file":"market-table-area.js","mappings":";;AAAA,MAAM,kBAAkB,GAAG,mqCAAmqC,CAAC;AAC/rC,8BAAe,kBAAkB;;MCapBA,iBAAe;;;;;2BAMiD,YAAY;;;sBAe7B,KAAK;yBAMD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;;;;;IAQrE,kBAAkB,CAAC,QAAuB,EAAE,QAAwB;QAClE,IAAI,QAAQ,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACrC,IACE,QAAQ,CAAC,MAAM,GAAG,CAAC;gBACnB,QAAQ,KAAK,SAAS;cACtB;gBACA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACxD;iBAAM;gBACL,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,GAAG,SAAS,CAAC;aAC/C;SACF;KACF;;;;IAMD,iBAAiB,CAAC,QAAuB,EAAE,QAAuB;QAChE,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACzB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,WAAW,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;SACnE;KACF;IAED,iBAAiB;QACf,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC5C;IAED,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,KAAK,EAAC,mBAAmB,IAC7B,8DAAa,CACR,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["MarketTableArea"],"sources":["src/components/market-table-area/market-table-area.css?tag=market-table-area&encapsulation=shadow","src/components/market-table-area/market-table-area.tsx"],"sourcesContent":["/* TODO: add design tokens for table components */\n\n:host {\n  position: relative;\n  grid-column: 1 / -1; /* makes the row span the full available columns in the table grid */\n  background-color: var(--table-cell-state-normal-background-color, var(--core-surface-10-color));\n\n  &(:not([active])) {\n    display: none !important; /* stylelint-disable-line declaration-no-important */\n  }\n\n  &([orientation=\"horizontal\"]) {\n    display: block;\n  }\n\n  &([orientation=\"vertical\"]) {\n    display: grid;\n    grid-auto-columns: 1fr;\n    grid-auto-flow: column;\n\n    ::slotted(.market-table-row) {\n      border-bottom: none;\n    }\n  }\n\n  &([stick-to]) {\n    position: sticky;\n    z-index: 1;\n  }\n\n  &([stick-to][orientation=\"horizontal\"]) {\n    z-index: 2;\n  }\n\n  &([stick-to=\"top\"]) {\n    top: 0;\n    border-bottom: var(--table-border-width, 1px) solid var(--table-heading-border-color, var(--core-divider-10-color));\n  }\n\n  &([stick-to=\"bottom\"]) {\n    bottom: 0;\n  }\n\n  &([stick-to=\"bottom\"]:not(:empty)) {\n    border-top: var(--table-border-width, 1px) solid var(--table-heading-border-color, var(--core-divider-10-color));\n  }\n\n  &([stick-to=\"left\"]) {\n    left: 0;\n    justify-content: end;\n    border-right: var(--table-border-width, 1px) solid var(--table-heading-border-color, var(--core-divider-10-color));\n  }\n\n  &([stick-to=\"right\"]) {\n    right: 0;\n    justify-content: start;\n    border-left: var(--table-border-width, 1px) solid var(--table-heading-border-color, var(--core-divider-10-color));\n  }\n}\n","import { Component, Host, Element, Watch, Prop, State, h } from '@stencil/core';\n\n/**\n * This is an implementation component only and does not relfect any component in the\n * design spec for Market */\n\n/**\n * @slot - Default slot\n */\n@Component({\n  tag: 'market-table-area',\n  styleUrl: 'market-table-area.css',\n  shadow: true,\n})\nexport class MarketTableArea {\n  @Element() el: HTMLMarketTableAreaElement;\n\n  /**\n   * Whether or not this area is grouping columns (vertical) or rows (horizontal)\n   */\n  @Prop({ reflect: true }) readonly orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Sticks this area to an edge of the table\n   */\n  @Prop({ reflect: true }) readonly stickTo: 'top' | 'bottom' | 'left' | 'right';\n\n  /**\n   * Set by the parent market-table or market-row component to determine CSS grid template\n   */\n  @Prop({ reflect: false }) readonly gridTemplate: Array<string>;\n\n  /**\n   * Whether or not this table area is currently visible/has any rows or cells within\n   */\n  @Prop({ mutable: true, reflect: true }) active: boolean = false;\n\n  /**\n   * Sets the element's grid-column CSS property to determine where this particular element\n   * falls on the parent grid. Used in vertical orientation table areas\n   */\n  @Prop({ reflect: false }) readonly placement: Array<number> = [1, -1];\n\n  @State() elements: Array<HTMLMarketTableRowElement | HTMLMarketTableCellElement | HTMLMarketTableColumnElement>;\n\n  /* When the gridTemplate changes, we need to parse it and update this elements's\n  grid-template-columns property, which defines the number and widths of columns\n  within this area */\n  @Watch('gridTemplate')\n  assignGridTemplate(newValue: Array<string>, oldValue?: Array<string>) {\n    if (newValue && newValue !== oldValue) {\n      if (\n        newValue.length > 0 ||\n        oldValue === undefined // shows content for tables w/o header row\n      ) {\n        this.active = true;\n        this.el.style.gridTemplateColumns = newValue.join(' ');\n      } else {\n        this.active = false;\n        this.el.style.gridTemplateColumns = undefined;\n      }\n    }\n  }\n\n  /* When the placement changes, we need to parse it and update this element's\n  grid-column property in order to correctly place it within the parent grid.\n  Used to support sticky areas */\n  @Watch('placement')\n  placementObserver(newValue: Array<number>, oldValue: Array<number>) {\n    if (newValue !== oldValue) {\n      this.el.style.gridColumn = `${newValue[0]} / span ${newValue[1]}`;\n    }\n  }\n\n  componentWillLoad() {\n    this.assignGridTemplate(this.gridTemplate);\n  }\n\n  render() {\n    return (\n      <Host class=\"market-table-area\">\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}