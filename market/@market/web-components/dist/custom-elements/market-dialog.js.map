{"file":"market-dialog.js","mappings":";;;;;AAAA,MAAM,eAAe,GAAG,klGAAklG,CAAC;AAC3mG,2BAAe,eAAe;;MCuBjBA,cAAY;;;;;;;;QAGvB,SAAI,GAAe,QAAQ,CAAC;sBAO8B,KAAK;;;yBAgBzB,KAAK;0BAKa,KAAK;yBAKf,KAAK;sCAMTC,oDAAgD;qCAMjDC,mDAA+C;;;;;;;;IAwBxF,OAAO,CAAC,cAA8C;QACpD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;gBAC3D,MAAM,EAAE,IAAI,CAAC,EAAE;gBACf,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,KAAI,IAAI,CAAC,EAAE;aAC1C,CAAC,CAAC;YAEH,IAAI,CAAC,gBAAgB,EAAE;gBACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;;;gBAKnB,UAAU,CAAC;oBACT,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC;wBAC/B,MAAM,EAAE,IAAI,CAAC,EAAE;wBACf,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,MAAM,EAAE,IAAI,CAAC,EAAE;qBAChB,CAAC,CAAC;iBACJ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;aAChC;SACF;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IAGD,kBAAkB,CAAC,QAAiB,EAAE,QAAiB;;QAErD,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACzB,IAAI,QAAQ,EAAE;gBACZ,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC1B;iBAAM;gBACL,IAAI,CAAC,mBAAmB,EAAE,CAAC;aAC5B;SACF;KACF;;;;;;;;;IAWD,iBAAiB,CAAC,OAA0B,EAAE,eAA0C;QACtF,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,aAAf,eAAe,cAAf,eAAe,GAAI,EAAE,CAAC,CAAC;YAC/C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACvB;SACF;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,0BAA0B,CAAC;gBAC1C,eAAe;gBACf,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,OAAO;aACR,CAAC,CAAC;SACJ;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;;;;;;IAQD,mBAAmB,CAAC,iBAA8C;QAChE,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,UAAU,iBACvB,WAAW,EAAE,IAAI,EACjB,mBAAmB,EAAE,CAAC,OAAO,KAC3B,IAAI,OAAO,CAAC,CAAC,OAAO;oBAClB,IAAI,QAAQ,OAAe,aAAf,OAAO,uBAAP,OAAO,CAAU,QAAQ,CAAA,KAAK,UAAU,EAAE;wBACnD,OAAe,CAAC,QAAQ,EAAE,CAAC;qBAC7B;yBAAM;wBACL,OAAO,EAAE,CAAC;qBACX;iBACF,CAAC,IACD,iBAAiB,EACpB,CAAC;YACH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC5B;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IAED,6BAA6B;QAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAqB,wBAAwB,CAAC,CAAC;QACxF,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC;SACnC;KACF;IAED,gBAAgB;QACd,IAAI,CAAC,6BAA6B,EAAE,CAAC;KACtC;IAED,iBAAiB;QACf,IAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC;;;;;;YAMzC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;gBAC3B,MAAM,EAAE,IAAI,CAAC,EAAE;gBACf,IAAI,EAAE,IAAI,CAAC,IAAI;aAChB,CAAC,CAAC;YAEH,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC1B;SACF,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAEhC,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;IAED,oBAAoB;QAClB,IAAI,CAAC,mBAAmB,EAAE,CAAC;;;;;;QAO3B,YAAY,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;KAC7C;IAED,MAAM;QACJ,MAAM,8BAA8B,GAAG,mBAAmB,CAAC,2BAA2B,CAAC,CAAC;QAExF,QACE,EAAC,IAAI,qDAAC,KAAK,EAAC,eAAe,EAAC,IAAI,EAAC,QAAQ,IACtC,IAAI,CAAC,SAAS,IAAI,EAAC,8BAA8B,sDAAkC,EACpF,6DAAM,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAS,CACxD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["MarketDialog","MODAL_DIALOG_ANIMATION_ENTER_TRANSITION_DURATION","MODAL_DIALOG_ANIMATION_EXIT_TRANSITION_DURATION"],"sources":["src/components/market-dialog/market-dialog.css?tag=market-dialog&encapsulation=shadow","src/components/market-dialog/market-dialog.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/modals.css\";\n\n:host {\n  --modal-dialog-width: var(--modal-dialog-maximum-width-size);\n  --modal-dialog-horizontal-padding-size: var(--modal-dialog-compact-horizontal-size-class-horizontal-padding);\n  --modal-dialog-vertical-padding-size: var(--modal-dialog-compact-vertical-size-class-vertical-padding);\n\n  @extend %modal;\n\n  width: var(--modal-dialog-width);\n  max-width: var(--modal-dialog-width);\n  padding:\n    var(--modal-dialog-vertical-padding-size)\n    var(--modal-dialog-horizontal-padding-size);\n  border-radius: var(--modal-dialog-border-radius);\n  background-color: var(--modal-dialog-background-color);\n\n  /* Enter animation */\n  animation:\n    var(--modal-dialog-animation-enter-transition-duration)\n    market-popup\n    forwards\n    var(--modal-dialog-animation-enter-transition-easing);\n\n  /* Exit animation */\n  &([hidden]) {\n    animation-name: market-popdown;\n    animation-duration: var(--modal-dialog-animation-exit-transition-duration);\n    animation-timing-function: var(--modal-dialog-animation-exit-transition-easing);\n  }\n}\n\n:host([value=\"loadingMode\"]) {\n  display: flex;\n  flex-direction: column;\n}\n\n::slotted(.market-footer) {\n  padding-top: var(--modal-dialog-regular-vertical-size-class-vertical-padding);\n}\n\n.market-activity-indicator {\n  align-self: flex-start;\n  margin-bottom: var(--core-metrics-spacing-200);\n}\n\n@media only screen and (min-width: 600px) {\n  :host {\n    --modal-dialog-horizontal-padding-size: var(--modal-dialog-regular-horizontal-size-class-horizontal-padding);\n    --modal-dialog-vertical-padding-size: var(--modal-dialog-regular-vertical-size-class-vertical-padding);\n  }\n}\n\n@media only screen and (min-width: 1200px) {\n  :host {\n    /* TODO: define missing token: --modal-dialog-wide-vertical-size-class-vertical-padding */\n    --modal-dialog-horizontal-padding-size: var(--modal-dialog-wide-horizontal-size-class-horizontal-padding);\n    --modal-dialog-vertical-padding-size: var(--modal-dialog-wide-vertical-size-class-vertical-padding, 32px);\n  }\n}\n","import {\n  MODAL_DIALOG_ANIMATION_ENTER_TRANSITION_DURATION,\n  MODAL_DIALOG_ANIMATION_EXIT_TRANSITION_DURATION,\n} from '@market/market-theme/js/cjs/index.js';\nimport { Component, Host, Prop, Element, Method, Event, EventEmitter, h, Watch } from '@stencil/core';\n\nimport { DialogDismissedEvent, DialogLoadedEvent, DialogType } from '../../utils/dialog';\nimport {\n  createAndActivateFocusTrap,\n  FocusTrap,\n  FocusTrapActivateOptions,\n  FocusTrapDeactivateOptions,\n  FocusTrapOptions,\n} from '../../utils/focus-trap';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n/**\n * @slot - The main content of the dialog. Use `<section class=\"main\">` tag.\n */\n@Component({\n  tag: 'market-dialog',\n  styleUrl: 'market-dialog.css',\n  shadow: true,\n})\nexport class MarketDialog {\n  @Element() el: HTMLMarketDialogElement;\n  connectedCallbackTimeout: NodeJS.Timeout;\n  type: DialogType = 'dialog';\n  focusTrap: FocusTrap;\n  header: HTMLMarketHeaderElement;\n\n  /**\n   * INTERNAL ONLY: Used in CSS to trigger start and stop animations\n   */\n  @Prop({ mutable: true, reflect: true }) hidden: boolean = false;\n\n  /**\n   * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal\n   */\n  @Prop({ reflect: true, attribute: 'data-dialog-id' }) readonly dialogID: string;\n\n  /**\n   * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place\n   * in the stack\n   */\n  @Prop({ reflect: true, attribute: 'data-dialog-index' }) readonly index: number;\n\n  /**\n   * Whether the activity indicator is rendered or not\n   */\n  @Prop() readonly isLoading: boolean = false;\n\n  /**\n   * Whether the dialog is persistent or dismissable\n   */\n  @Prop({ reflect: true }) readonly persistent: boolean = false;\n\n  /**\n   * Enforces focus trapping on the dialog\n   */\n  @Prop({ mutable: true }) trapFocus: boolean = false;\n\n  /**\n   * The duration for the modal enter animation, set from design tokens\n   */\n  @Prop()\n  readonly animationEnterDuration: number = MODAL_DIALOG_ANIMATION_ENTER_TRANSITION_DURATION;\n\n  /**\n   * The duration for the modal exit animation, set from design tokens\n   */\n  @Prop()\n  readonly animationExitDuration: number = MODAL_DIALOG_ANIMATION_EXIT_TRANSITION_DURATION;\n\n  /**\n   * Triggered when the dialog finishes loading\n   */\n  @Event() marketDialogLoaded: EventEmitter<DialogLoadedEvent>;\n\n  /**\n   * Triggered when the dialog is dismissed, handled by context manager\n   */\n  @Event() marketDialogDismissed: EventEmitter<DialogDismissedEvent>;\n\n  /**\n   * Triggered when the dialog is fully dismissed\n   */\n  @Event() marketDialogDidDismiss: EventEmitter<DialogDismissedEvent>;\n\n  /**\n   * Emits the dismiss event\n   * The parent context will handle actually removing elements from the DOM,\n   * All the dialog needs to do it emit an event so actually closing it can be\n   * some other elements problem\n   */\n  @Method()\n  dismiss(dismissOptions?: Partial<DialogDismissedEvent>) {\n    if (!this.persistent) {\n      const { defaultPrevented } = this.marketDialogDismissed.emit({\n        dialog: this.el,\n        type: this.type,\n        origin: dismissOptions?.origin || this.el,\n      });\n\n      if (!defaultPrevented) {\n        this.hidden = true;\n\n        /**\n         * Emit a marketDialogDidDismiss event when modal gets fully dismissed (after animation).\n         */\n        setTimeout(() => {\n          this.marketDialogDidDismiss.emit({\n            dialog: this.el,\n            type: this.type,\n            origin: this.el,\n          });\n        }, this.animationExitDuration);\n      }\n    }\n    return Promise.resolve();\n  }\n\n  @Watch('trapFocus')\n  onTrapFocusChanged(newValue: boolean, oldValue: boolean) {\n    // only activate/deactivate when the `trapFocus` prop value changes\n    if (newValue !== oldValue) {\n      if (newValue) {\n        this.activateFocusTrap();\n      } else {\n        this.deactivateFocusTrap();\n      }\n    }\n  }\n\n  /**\n   * Activates the focus trap\n   *\n   * See [`focus-trap.ts`](../../utils/focus-trap.ts) for default options\n   *\n   * @param {Object} [options] [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)\n   * @param {Object} [activateOptions] set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)\n   */\n  @Method()\n  activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) {\n    if (this.focusTrap) {\n      this.focusTrap.activate(activateOptions ?? {});\n      if (!this.trapFocus) {\n        this.trapFocus = true;\n      }\n    } else {\n      this.focusTrap = createAndActivateFocusTrap({\n        activateOptions,\n        el: this.el,\n        options,\n      });\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Deactivates the focus trap\n   *\n   * @param {FocusTrapDeactivateOptions} [deactivateOptions] set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)\n   */\n  @Method()\n  deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) {\n    if (this.focusTrap) {\n      this.focusTrap.deactivate({\n        returnFocus: true,\n        checkCanReturnFocus: (trigger) =>\n          new Promise((resolve) => {\n            if (typeof (trigger as any)?.setFocus === 'function') {\n              (trigger as any).setFocus();\n            } else {\n              resolve(); // node.focus(); will be called by focus-trap\n            }\n          }),\n        ...deactivateOptions,\n      });\n      this.focusTrap = undefined;\n    }\n    return Promise.resolve();\n  }\n\n  removeTopMarginOfFirstHeading() {\n    const headings = this.el.querySelectorAll<HTMLHeadingElement>('h1, h2, h3, h4, h5, h6');\n    if (headings.length > 0) {\n      headings[0].style.marginTop = '0';\n    }\n  }\n\n  handleSlotchange() {\n    this.removeTopMarginOfFirstHeading();\n  }\n\n  connectedCallback() {\n    this.connectedCallbackTimeout = setTimeout(() => {\n      /**\n       * Emit a marketDialogLoaded event when the component connects. Need this so\n       * the context manager isn't rummaging around it's DOM to try and find the\n       * dialog that was just appended\n       */\n      this.marketDialogLoaded.emit({\n        dialog: this.el,\n        type: this.type,\n      });\n\n      if (this.trapFocus) {\n        this.activateFocusTrap();\n      }\n    }, this.animationEnterDuration);\n\n    this.handleSlotchange();\n  }\n\n  disconnectedCallback() {\n    this.deactivateFocusTrap();\n\n    /**\n     * Prevents error caused by race conditions during rapid mounting and\n     * unmounting of component by clearing the setTimeout from connectedCallback\n     * if it gets called after disconnectedCallback.\n     */\n    clearTimeout(this.connectedCallbackTimeout);\n  }\n\n  render() {\n    const MarketActivityIndicatorTagName = getNamespacedTagFor('market-activity-indicator');\n\n    return (\n      <Host class=\"market-dialog\" role=\"dialog\">\n        {this.isLoading && <MarketActivityIndicatorTagName></MarketActivityIndicatorTagName>}\n        <slot onSlotchange={this.handleSlotchange.bind(this)}></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}