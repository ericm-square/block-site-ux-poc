{"version":3,"names":["ALL_DIALOG_TYPES","DIALOGS_META","veil","blade","dialog","sheet","getDialogSelector","map","type","getNamespacedTagFor","join","setupDialogCompactHandler","modal","main","querySelector","header","compact","addEventListener","scrollTop","headingDiv","shadowRoot","headingDivStyles","getComputedStyle","paddingTop","Number","parseInt","height","marginTop","style"],"sources":["src/utils/dialog.tsx"],"sourcesContent":["/**\n * [PR 29510](https://github.com/Microsoft/TypeScript/pull/29510), available in\n * TypeScript 3.4+, enables us to define the literal string union type\n * `DialogType` based on a readonly array of all possible values (`as const`\n * makes `ALL_DIALOG_TYPES` readonly). This is required to support refactoring\n * from enum to union type while also allowing us to enumerate all possible\n * values (see references of `ALL_DIALOG_TYPES` for use cases).\n *\n * Motivation for the refactor from enum to union type can be found in the\n * description for [PR 1554](https://github.com/squareup/market/pull/1554).\n */\nimport { getNamespacedTagFor } from './namespace';\n\nexport const ALL_DIALOG_TYPES = ['modal-full', 'modal-partial', 'blade', 'dialog', 'sheet'] as const;\n\nexport const DIALOGS_META = {\n  'modal-full': { veil: true },\n  'modal-partial': { veil: true },\n  blade: { veil: false },\n  dialog: { veil: true },\n  sheet: { veil: true },\n};\n\nexport const getDialogSelector = () =>\n  ALL_DIALOG_TYPES.map((type) => {\n    return getNamespacedTagFor(`market-${type}`);\n  }).join(',');\n\n// prettier wants (typeof ALL_DIALOG_TYPES)[number] but that change seems wrong\n// prettier-ignore\nexport type DialogType = typeof ALL_DIALOG_TYPES[number];\n\nexport type DialogElement =\n  | HTMLMarketDialogElement\n  | HTMLMarketBladeElement\n  | HTMLMarketModalFullElement\n  | HTMLMarketModalPartialElement\n  | HTMLMarketSheetElement;\n\nexport interface Dialog {\n  el: DialogElement;\n  type: DialogType;\n  id: string;\n  dialogID: string;\n  index: number;\n  indexOfType: number;\n}\n\nexport interface DialogDismissedEvent {\n  dialog: DialogElement;\n  type: DialogType;\n  origin: HTMLElement;\n}\n\nexport interface DialogLoadedEvent {\n  dialog: DialogElement;\n  type: DialogType;\n}\n\nexport function setupDialogCompactHandler(modal) {\n  const main = modal.querySelector('main, .main');\n  const header = modal.querySelector(getNamespacedTagFor('market-header'));\n\n  // Manage compact header on scroll unless it's already explicitly set\n  if (main && header && !header.compact) {\n    main.addEventListener('scroll', () => {\n      if (main.scrollTop > 0) {\n        if (!header.compact) {\n          const headingDiv = header.shadowRoot.querySelector('.heading') as HTMLElement;\n          const headingDivStyles = getComputedStyle(headingDiv);\n          const paddingTop =\n            Number.parseInt(headingDivStyles.height, 10) + Number.parseInt(headingDivStyles.marginTop, 10);\n          main.style.paddingTop = `${paddingTop}px`;\n          header.compact = true;\n        }\n      } else {\n        if (header.compact) {\n          main.style.paddingTop = '';\n          header.compact = false;\n        }\n      }\n    });\n  }\n}\n"],"mappings":"0CAaaA,EAAmB,CAAC,aAAc,gBAAiB,QAAS,SAAU,S,MAEtEC,EAAe,CAC1B,aAAc,CAAEC,KAAM,MACtB,gBAAiB,CAAEA,KAAM,MACzBC,MAAO,CAAED,KAAM,OACfE,OAAQ,CAAEF,KAAM,MAChBG,MAAO,CAAEH,KAAM,O,MAGJI,EAAoB,IAC/BN,EAAiBO,KAAKC,GACbC,EAAoB,UAAUD,OACpCE,KAAK,K,SAiCMC,EAA0BC,GACxC,MAAMC,EAAOD,EAAME,cAAc,eACjC,MAAMC,EAASH,EAAME,cAAcL,EAAoB,kBAGvD,GAAII,GAAQE,IAAWA,EAAOC,QAAS,CACrCH,EAAKI,iBAAiB,UAAU,KAC9B,GAAIJ,EAAKK,UAAY,EAAG,CACtB,IAAKH,EAAOC,QAAS,CACnB,MAAMG,EAAaJ,EAAOK,WAAWN,cAAc,YACnD,MAAMO,EAAmBC,iBAAiBH,GAC1C,MAAMI,EACJC,OAAOC,SAASJ,EAAiBK,OAAQ,IAAMF,OAAOC,SAASJ,EAAiBM,UAAW,IAC7Fd,EAAKe,MAAML,WAAa,GAAGA,MAC3BR,EAAOC,QAAU,I,MAEd,CACL,GAAID,EAAOC,QAAS,CAClBH,EAAKe,MAAML,WAAa,GACxBR,EAAOC,QAAU,K,MAK3B,Q"}