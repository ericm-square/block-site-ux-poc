{"version":3,"names":["ALIGNMENT_PATTERN_LOCATIONS","Object","freeze","DATA_CAPACITY","LOW","MEDIUM","QUARTER","HIGH","ENCODING","NUMERIC","ALPHANUMERIC","KANJI","BYTE","ERROR_CORRECTION","BitWriter","constructor","length","this","content","Uint8Array","byte","bit","bitsLeft","bytesLeft","codeForAlphaNUMERICal","char","lookIn","index","completeByte","nextPutAlphaNUMERIC","string","last","nextPutBits","int","bits","amount","shift","nextPutByte","byteArray","forEach","nextPutCompleteByte","nextPutKanji","charCode","charCodeAt","lByte","bByte","nextPutNumeric","asNumbers","push","Matrix","withAll","width","height","fill","undefined","row","Array","at","x","y","copy","map","slice","value","top","col","put","BooleanMatrix","forIntegerArray","array","rowInteger","unshift","asIntegerArray","integer","bool","bitAt","fillAlignmentPatternAt","size","fillFinderPatternAt","QRCodeMap","chunkingAt","errorCorrection","version","fromGF256Alpha","polynomial","polynomials","multiplier","factor","product","first","second","firstValue","firstIndex","secondValue","secondIndex","productIndex","entry","toGF256Alpha","quotient","dividend","divisor","dividendIndex","startEntry","alpha","divisorIndex","quotientIndex","masks","maskArray","generator","instance","instances","dimension","AVAILABLE","super","initialize","misdecodeProtectionCodewords","chunking","data","dataWidth","errorCorrectionWidth","errorCorrectionCapacity","chunkingOffsets","chunkingOffset","chunk","arr","i","dataI","numberOfDataCodewords","j","Math","max","errorCorrectionI","numberOfErrorCorrectionCodewords","combined","column","pixels","byteAndChunk","AVOID","position","QRCode","alignmentPatternPositions","pixel","halfOdd","codewordsFor","codewords","bytePosition","withErrorCorrection","dataFor","remainder","subtract","encodedData","isDataPixel","maskedDataFor","mask","masked","GENERATOR_FUNCTIONS","locations","positions","location","finderPatternPositions","far","timingPatternPositions","options","eci","encoding","_encoding","hasEci","hasAlignmentPattern","MAX_VERSION","QRCodeEncoder","contents","code","encode","initializeEncoding","initializeVersion","initializeCodewords","initializeMapping","initializeMasking","writer","bytes","toUtf16Bytes","toUtf8Bytes","test","for","mapCodewords","mapData","choices","dataIndex","lowestPenalty","matrix","penalty","penaltyForMatrix","format","errorCorrections","indexOf","pow","bitVersion","count","includes","versionForLength","versions","capacity","current","run","runTest","finderPattern","lastY","floor","abs","findIndex","allows","qrcode","require$$0","SquareQRCodeEncoder","minimumVersion","PENALTY_FOR_NEGATIVE_CAPACITY","initializeTurtleData","initializeSvg","start","offset","svgOffset","svgDimension","foregroundStyle","svgForegroundStyle","backgroundStyle","svgBackgroundStyle","source","svgTag","svgFinderPattern","svgBackground","svgFinderPatterns","svgTurtle","svg","join","point","turtleData","inverted","invert","hasBorder","border","png","_png","image","Image","imageBlob","Blob","type","src","URL","createObjectURL","decode","canvas","document","createElement","getContext","drawImage","toDataURL","style","cornerRadius","fromOptions","styleBackground","styleForeground","Turtle","element","PENALTY_FOR_LEFTOVER_CAPACITY","visitedLocations","Set","generateElement","clearVisited","fromLocation","_element","startX","startY","startEdge","outsideEdges","edge","tops","rights","bottoms","lefts","add","toLocation","visitLocation","hasPixelAtCoordinate","d","next","now","interior","process","has","filter","hasVisitedLocation","fanOutFrom","hasPixelAtLocation","topRight","topRightX","topRightY","distance","delete","hasVisitedCoordinate","visitCoordinate","squareQrcode","require$$1","JEWEL_VALUE","FALSE","TRUE","UNDECIDED","MarketQRCodeEncoder","getJewel","jewel","logoStyle","svgLogoStyle","svgLogo","logoPosition","isMonochrome","monochrome","messedUpBytes","yData","xData","leftoverCapacity","styleLogo","marketQrcode","qrcodeEncoder","require$$2","marketQrcodeCss","MarketQrcodeStyle0","MarketQrcode","render","encoder","containerStyle","h","Host","key","class","innerHTML"],"sources":["../../node_modules/@square/qrcode-encoder/lib/qrcode.js","../../node_modules/@square/qrcode-encoder/lib/square-qrcode.js","../../node_modules/@square/qrcode-encoder/lib/market-qrcode.js","../../node_modules/@square/qrcode-encoder/index.js","src/components/market-qrcode/market-qrcode.css?tag=market-qrcode&encapsulation=shadow","src/components/market-qrcode/market-qrcode.tsx"],"sourcesContent":["const ALIGNMENT_PATTERN_LOCATIONS = Object.freeze([\n  [],\n  [4, 16],\n  [4, 20],\n  [4, 24],\n  [4, 28],\n  [4, 32],\n  [4, 20, 36],\n  [4, 22, 40],\n  [4, 24, 44],\n  [4, 26, 48],\n  [4, 28, 52],\n  [4, 30, 56],\n  [4, 32, 60],\n  [4, 24, 44, 64],\n  [4, 24, 46, 68],\n  [4, 24, 48, 72],\n  [4, 28, 52, 76],\n  [4, 28, 54, 80],\n  [4, 28, 56, 84],\n  [4, 32, 60, 88],\n  [4, 26, 48, 70, 92],\n  [4, 24, 48, 72, 96],\n  [4, 28, 52, 76, 100],\n  [4, 26, 52, 78, 104],\n  [4, 30, 56, 82, 108],\n  [4, 28, 56, 84, 112],\n  [4, 32, 60, 88, 116],\n  [4, 24, 48, 72, 96, 120],\n  [4, 28, 52, 76, 100, 124],\n  [4, 24, 50, 76, 102, 128],\n  [4, 28, 54, 80, 106, 132],\n  [4, 32, 58, 84, 110, 136],\n  [4, 28, 56, 84, 112, 140],\n  [4, 32, 60, 88, 116, 144],\n  [4, 28, 52, 76, 100, 124, 148],\n  [4, 22, 48, 74, 100, 126, 152],\n  [4, 26, 52, 78, 104, 130, 156],\n  [4, 30, 56, 82, 108, 134, 160],\n  [4, 24, 52, 80, 108, 136, 164],\n  [4, 28, 56, 84, 112, 140, 168],\n]);\nconst DATA_CAPACITY = Object.freeze({\n  LOW: [\n    19, 34, 55, 80, 108, 136, 156, 194, 232, 274, 324, 370, 428, 461, 523, 589, 647, 721, 795, 861, 932, 1006, 1094,\n    1174, 1276, 1370, 1468, 1531, 1631, 1735, 1843, 1955, 2071, 2191, 2306, 2434, 2566, 2702, 2812, 2956,\n  ],\n  MEDIUM: [\n    16, 28, 44, 64, 86, 108, 124, 154, 182, 216, 254, 290, 334, 365, 415, 453, 507, 563, 627, 669, 714, 782, 860, 914,\n    1000, 1062, 1128, 1193, 1267, 1373, 1455, 1541, 1631, 1725, 1812, 1914, 1992, 2102, 2216, 2334,\n  ],\n  QUARTER: [\n    13, 22, 34, 48, 62, 76, 88, 110, 132, 154, 180, 206, 244, 261, 295, 325, 367, 397, 445, 485, 512, 568, 614, 664,\n    718, 754, 808, 871, 911, 985, 1033, 1115, 1171, 1231, 1286, 1354, 1426, 1502, 1582, 1666,\n  ],\n  HIGH: [\n    9, 16, 26, 36, 46, 60, 66, 86, 100, 122, 140, 158, 180, 197, 223, 253, 283, 313, 341, 385, 406, 442, 464, 514, 538,\n    596, 628, 661, 701, 745, 793, 845, 901, 961, 986, 1054, 1096, 1142, 1222, 1276,\n  ],\n});\nconst ENCODING = Object.freeze({\n  NUMERIC: 'NUMERIC',\n  ALPHANUMERIC: 'ALPHANUMERIC',\n  KANJI: 'KANJI',\n  BYTE: 'BYTE',\n});\nconst ERROR_CORRECTION = Object.freeze({\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  QUARTER: 'QUARTER',\n  HIGH: 'HIGH',\n});\n\n/**\n * CLASS BitWriter\n * A internal class for writing bits to an Uint8Array for QRCode encoding.\n */\nclass BitWriter {\n  constructor(length) {\n    this.length = length;\n    this.content = new Uint8Array(length);\n    this.byte = 0;\n    this.bit = 0;\n  }\n\n  get bitsLeft() {\n    return (this.length - this.byte) * 8 - this.bit;\n  }\n\n  get bytesLeft() {\n    return this.bit === 0 ? this.length - this.byte : this.length - this.byte - 1;\n  }\n\n  codeForAlphaNUMERICal(char) {\n    const lookIn = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n    for (let index = 0; index < lookIn.length; index++) {\n      if (lookIn[index] === char) return index;\n    }\n  }\n\n  completeByte() {\n    if (this.bit === 0) return;\n    this.bit = 0;\n    this.byte++;\n  }\n\n  nextPutAlphaNUMERIC(string) {\n    // Two ALPHANUMERICal characters at a time.\n    for (let last = 1; last < string.length; last += 2) {\n      this.nextPutBits(\n        this.codeForAlphaNUMERICal(string[last - 1]) * 45 + this.codeForAlphaNUMERICal(string[last]),\n        11\n      );\n    }\n    if (string.length % 2 === 1) {\n      this.nextPutBits(this.codeForAlphaNUMERICal(string[string.length - 1]), 6);\n    }\n  }\n\n  nextPutBits(int, bits) {\n    if (bits === 0) return;\n    let amount = this.bit + bits;\n    if (amount < 8) {\n      this.content[this.byte] = this.content[this.byte] | (int << (8 - amount));\n      this.bit += bits;\n    } else if (amount === 8) {\n      this.content[this.byte] = this.content[this.byte] | int;\n      this.byte++;\n      this.bit = 0;\n    } else {\n      amount -= 8;\n      let shift = int >> amount;\n      this.content[this.byte] = this.content[this.byte] | shift;\n      shift = int - (shift << amount);\n      this.byte++;\n      this.bit = 0;\n      this.nextPutBits(shift, amount);\n    }\n  }\n\n  nextPutByte(byteArray) {\n    byteArray.forEach((byte) => {\n      this.nextPutBits(byte, 8);\n    });\n  }\n\n  nextPutCompleteByte(byte) {\n    this.completeByte();\n    this.content[this.byte] = byte;\n    this.byte++;\n  }\n\n  nextPutKanji(string) {\n    for (let index = 0; index < string.length; index++) {\n      let charCode = string.charCodeAt(index);\n      if (charCode <= 0x9ffc) {\n        // in the range 0x8140 to 0x9FFC\n        charCode -= 0x8140;\n      } else {\n        // in the range 0xE040 to 0xEBBF\n        charCode -= 0xc140;\n      }\n      let lByte = charCode % 256;\n      let bByte = (charCode - lByte) / 256;\n      this.nextPutBits(bByte * 0xc0 + lByte, 13);\n    }\n  }\n\n  nextPutNumeric(string) {\n    const asNumbers = [];\n    for (let index = 0; index < string.length; index++) {\n      asNumbers.push(string.charCodeAt(index) - 48);\n    }\n    // Three NUMERICal characters at a time.\n    for (let last = 2; last < string.length; last += 3) {\n      this.nextPutBits(asNumbers[last - 2] * 100 + asNumbers[last - 1] * 10 + asNumbers[last], 10);\n    }\n    switch (string.length % 3) {\n      case 0:\n        break;\n      case 1:\n        this.nextPutBits(asNumbers[string.length - 1], 4);\n        break;\n      case 2:\n        this.nextPutBits(asNumbers[string.length - 2] * 10 + asNumbers[string.length - 1], 7);\n        break;\n    }\n  }\n}\n\n/**\n * CLASS Matrix\n * A class for manipulating a 2D array.\n */\nclass Matrix {\n  static withAll(width, height, fill) {\n    const content = [];\n    if (fill === undefined) {\n      for (let row = 0; row < height; row++) {\n        content.push(new Array(width));\n      }\n    } else {\n      for (let row = 0; row < height; row++) {\n        content.push(new Array(width).fill(fill));\n      }\n    }\n    return new this(content);\n  }\n\n  constructor(content) {\n    this.content = content;\n  }\n\n  at(x, y) {\n    return this.content[y][x];\n  }\n\n  copy() {\n    return new this.constructor(this.content.map((row) => row.slice()));\n  }\n\n  fill(x, y, width, height, value) {\n    for (let top = y; top < y + height; top++) {\n      let row = this.content[top];\n      for (let col = x; col < x + width; col++) {\n        row[col] = value;\n      }\n    }\n  }\n\n  get height() {\n    return this.content.length;\n  }\n\n  put(x, y, value) {\n    return (this.content[y][x] = value);\n  }\n\n  get width() {\n    return this.content[0].length;\n  }\n}\n\n/**\n * CLASS BooleanMatrix\n * A class for keeping and manipulating 2D boolean data.\n */\nclass BooleanMatrix extends Matrix {\n  static forIntegerArray(width, height, array) {\n    const content = [];\n    for (let y = 0; y < height; y++) {\n      let rowInteger = array[y];\n      const row = [];\n      for (let x = width - 1; x >= 0; x--) {\n        if (rowInteger % 2 === 1) {\n          row.unshift(true);\n          rowInteger--;\n        } else {\n          row.unshift(false);\n        }\n        rowInteger = rowInteger / 2;\n      }\n      content.push(row);\n    }\n    return new this(content);\n  }\n\n  asIntegerArray() {\n    return this.content.map((row) => {\n      let integer = 0;\n      row.forEach((bool) => {\n        integer *= 2;\n        if (bool === true) integer++;\n      });\n      return integer;\n    });\n  }\n\n  bitAt(x, y) {\n    return this.at(x, y) ? 1 : 0;\n  }\n\n  fillAlignmentPatternAt(x, y) {\n    for (let size = 0; size < 4; size++) {\n      this.content[y][x + size] = true;\n      this.content[y + 4][x + size + 1] = true;\n      this.content[y + 1 + size][x] = true;\n      this.content[y + size][x + 4] = true;\n    }\n    this.content[y + 2][x + 2] = true;\n  }\n\n  fillFinderPatternAt(x, y) {\n    for (let size = 0; size < 6; size++) {\n      this.content[y][x + size] = true;\n      this.content[y + 6][x + size + 1] = true;\n      this.content[y + 1 + size][x] = true;\n      this.content[y + size][x + 6] = true;\n    }\n    this.fill(x + 2, y + 2, 3, 3, true);\n  }\n}\n\n/**\n * CLASS QRCodeMap\n * An instance holds the mapping for a QR code at a version and level of error correction.\n * The instances are cached so they can be reused. The map has the responsibility for adding\n * error correction to the codewords, positioning those codewords as data into a boolean\n * matrix, and masking that matrix. Instances are cached so this can be used as a service.\n */\nclass QRCodeMap extends Matrix {\n  // CHUNKING\n  static chunkingAt(errorCorrection, version) {\n    return {\n      LOW: [\n        [[1, 26, 19]],\n        [[1, 44, 34]],\n        [[1, 70, 55]],\n        [[1, 100, 80]],\n        [[1, 134, 108]],\n        [[2, 86, 68]],\n        [[2, 98, 78]],\n        [[2, 121, 97]],\n        [[2, 146, 116]],\n        [\n          [2, 86, 68],\n          [2, 87, 69],\n        ],\n        [[4, 101, 81]],\n        [\n          [2, 116, 92],\n          [2, 117, 93],\n        ],\n        [[4, 133, 107]],\n        [\n          [3, 145, 115],\n          [1, 146, 116],\n        ],\n        [\n          [5, 109, 87],\n          [1, 110, 88],\n        ],\n        [\n          [5, 122, 98],\n          [1, 123, 99],\n        ],\n        [\n          [1, 135, 107],\n          [5, 136, 108],\n        ],\n        [\n          [5, 150, 120],\n          [1, 151, 121],\n        ],\n        [\n          [3, 141, 113],\n          [4, 142, 114],\n        ],\n        [\n          [3, 135, 107],\n          [5, 136, 108],\n        ],\n        [\n          [4, 144, 116],\n          [4, 145, 117],\n        ],\n        [\n          [2, 139, 111],\n          [7, 140, 112],\n        ],\n        [\n          [4, 151, 121],\n          [5, 152, 122],\n        ],\n        [\n          [6, 147, 117],\n          [4, 148, 118],\n        ],\n        [\n          [8, 132, 106],\n          [4, 133, 107],\n        ],\n        [\n          [10, 142, 114],\n          [2, 143, 115],\n        ],\n        [\n          [8, 152, 122],\n          [4, 153, 123],\n        ],\n        [\n          [3, 147, 117],\n          [10, 148, 118],\n        ],\n        [\n          [7, 146, 116],\n          [7, 147, 117],\n        ],\n        [\n          [5, 145, 115],\n          [10, 146, 116],\n        ],\n        [\n          [13, 145, 115],\n          [3, 146, 116],\n        ],\n        [[17, 145, 115]],\n        [\n          [17, 145, 115],\n          [1, 146, 116],\n        ],\n        [\n          [13, 145, 115],\n          [6, 146, 116],\n        ],\n        [\n          [12, 151, 121],\n          [7, 152, 122],\n        ],\n        [\n          [6, 151, 121],\n          [14, 152, 122],\n        ],\n        [\n          [17, 152, 122],\n          [4, 153, 123],\n        ],\n        [\n          [4, 152, 122],\n          [18, 153, 123],\n        ],\n        [\n          [20, 147, 117],\n          [4, 148, 118],\n        ],\n        [\n          [19, 148, 118],\n          [6, 149, 119],\n        ],\n      ],\n      HIGH: [\n        [[1, 26, 9]],\n        [[1, 44, 16]],\n        [[2, 35, 13]],\n        [[4, 25, 9]],\n        [\n          [2, 33, 11],\n          [2, 34, 12],\n        ],\n        [[4, 43, 15]],\n        [\n          [4, 39, 13],\n          [1, 40, 14],\n        ],\n        [\n          [4, 40, 14],\n          [2, 41, 15],\n        ],\n        [\n          [4, 36, 12],\n          [4, 37, 13],\n        ],\n        [\n          [6, 43, 15],\n          [2, 44, 16],\n        ],\n        [\n          [3, 36, 12],\n          [8, 37, 13],\n        ],\n        [\n          [7, 42, 14],\n          [4, 43, 15],\n        ],\n        [\n          [12, 33, 11],\n          [4, 34, 12],\n        ],\n        [\n          [11, 36, 12],\n          [5, 37, 13],\n        ],\n        [\n          [11, 36, 12],\n          [7, 37, 13],\n        ],\n        [\n          [3, 45, 15],\n          [13, 46, 16],\n        ],\n        [\n          [2, 42, 14],\n          [17, 43, 15],\n        ],\n        [\n          [2, 42, 14],\n          [19, 43, 15],\n        ],\n        [\n          [9, 39, 13],\n          [16, 40, 14],\n        ],\n        [\n          [15, 43, 15],\n          [10, 44, 16],\n        ],\n        [\n          [19, 46, 16],\n          [6, 47, 17],\n        ],\n        [[34, 37, 13]],\n        [\n          [16, 45, 15],\n          [14, 46, 16],\n        ],\n        [\n          [30, 46, 16],\n          [2, 47, 17],\n        ],\n        [\n          [22, 45, 15],\n          [13, 46, 16],\n        ],\n        [\n          [33, 46, 16],\n          [4, 47, 17],\n        ],\n        [\n          [12, 45, 15],\n          [28, 46, 16],\n        ],\n        [\n          [11, 45, 15],\n          [31, 46, 16],\n        ],\n        [\n          [19, 45, 15],\n          [26, 46, 16],\n        ],\n        [\n          [23, 45, 15],\n          [25, 46, 16],\n        ],\n        [\n          [23, 45, 15],\n          [28, 46, 16],\n        ],\n        [\n          [19, 45, 15],\n          [35, 46, 16],\n        ],\n        [\n          [11, 45, 15],\n          [46, 46, 16],\n        ],\n        [\n          [59, 46, 16],\n          [1, 47, 17],\n        ],\n        [\n          [22, 45, 15],\n          [41, 46, 16],\n        ],\n        [\n          [2, 45, 15],\n          [64, 46, 16],\n        ],\n        [\n          [24, 45, 15],\n          [46, 46, 16],\n        ],\n        [\n          [42, 45, 15],\n          [32, 46, 16],\n        ],\n        [\n          [10, 45, 15],\n          [67, 46, 16],\n        ],\n        [\n          [20, 45, 15],\n          [61, 46, 16],\n        ],\n      ],\n      MEDIUM: [\n        [[1, 26, 16]],\n        [[1, 44, 28]],\n        [[1, 70, 44]],\n        [[2, 50, 32]],\n        [[2, 67, 43]],\n        [[4, 43, 27]],\n        [[4, 49, 31]],\n        [\n          [2, 60, 38],\n          [2, 61, 39],\n        ],\n        [\n          [3, 58, 36],\n          [2, 59, 37],\n        ],\n        [\n          [4, 69, 43],\n          [1, 70, 44],\n        ],\n        [\n          [1, 80, 50],\n          [4, 81, 51],\n        ],\n        [\n          [6, 58, 36],\n          [2, 59, 37],\n        ],\n        [\n          [8, 59, 37],\n          [1, 60, 38],\n        ],\n        [\n          [4, 64, 40],\n          [5, 65, 41],\n        ],\n        [\n          [5, 65, 41],\n          [5, 66, 42],\n        ],\n        [\n          [7, 73, 45],\n          [3, 74, 46],\n        ],\n        [\n          [10, 74, 46],\n          [1, 75, 47],\n        ],\n        [\n          [9, 69, 43],\n          [4, 70, 44],\n        ],\n        [\n          [3, 70, 44],\n          [11, 71, 45],\n        ],\n        [\n          [3, 67, 41],\n          [13, 68, 42],\n        ],\n        [[17, 68, 42]],\n        [[17, 74, 46]],\n        [\n          [4, 75, 47],\n          [14, 76, 48],\n        ],\n        [\n          [6, 73, 45],\n          [14, 74, 46],\n        ],\n        [\n          [8, 75, 47],\n          [13, 76, 48],\n        ],\n        [\n          [19, 74, 46],\n          [4, 75, 47],\n        ],\n        [\n          [22, 73, 45],\n          [3, 74, 46],\n        ],\n        [\n          [3, 73, 45],\n          [23, 74, 46],\n        ],\n        [\n          [21, 73, 45],\n          [7, 74, 46],\n        ],\n        [\n          [19, 75, 47],\n          [10, 76, 48],\n        ],\n        [\n          [2, 74, 46],\n          [29, 75, 47],\n        ],\n        [\n          [10, 74, 46],\n          [23, 75, 47],\n        ],\n        [\n          [14, 74, 46],\n          [21, 75, 47],\n        ],\n        [\n          [14, 74, 46],\n          [23, 75, 47],\n        ],\n        [\n          [12, 75, 47],\n          [26, 76, 48],\n        ],\n        [\n          [6, 75, 47],\n          [34, 76, 48],\n        ],\n        [\n          [29, 74, 46],\n          [14, 75, 47],\n        ],\n        [\n          [13, 74, 46],\n          [32, 75, 47],\n        ],\n        [\n          [40, 75, 47],\n          [7, 76, 48],\n        ],\n        [\n          [18, 75, 47],\n          [31, 76, 48],\n        ],\n      ],\n      QUARTER: [\n        [[1, 26, 13]],\n        [[1, 44, 22]],\n        [[2, 35, 17]],\n        [[2, 50, 24]],\n        [\n          [2, 33, 15],\n          [2, 34, 16],\n        ],\n        [[4, 43, 19]],\n        [\n          [2, 32, 14],\n          [4, 33, 15],\n        ],\n        [\n          [4, 40, 18],\n          [2, 41, 19],\n        ],\n        [\n          [4, 36, 16],\n          [4, 37, 17],\n        ],\n        [\n          [6, 43, 19],\n          [2, 44, 20],\n        ],\n        [\n          [4, 50, 22],\n          [4, 51, 23],\n        ],\n        [\n          [4, 46, 20],\n          [6, 47, 21],\n        ],\n        [\n          [8, 44, 20],\n          [4, 45, 21],\n        ],\n        [\n          [11, 36, 16],\n          [5, 37, 17],\n        ],\n        [\n          [5, 54, 24],\n          [7, 55, 25],\n        ],\n        [\n          [15, 43, 19],\n          [2, 44, 20],\n        ],\n        [\n          [1, 50, 22],\n          [15, 51, 23],\n        ],\n        [\n          [17, 50, 22],\n          [1, 51, 23],\n        ],\n        [\n          [17, 47, 21],\n          [4, 48, 22],\n        ],\n        [\n          [15, 54, 24],\n          [5, 55, 25],\n        ],\n        [\n          [17, 50, 22],\n          [6, 51, 23],\n        ],\n        [\n          [7, 54, 24],\n          [16, 55, 25],\n        ],\n        [\n          [11, 54, 24],\n          [14, 55, 25],\n        ],\n        [\n          [11, 54, 24],\n          [16, 55, 25],\n        ],\n        [\n          [7, 54, 24],\n          [22, 55, 25],\n        ],\n        [\n          [28, 50, 22],\n          [6, 51, 23],\n        ],\n        [\n          [8, 53, 23],\n          [26, 54, 24],\n        ],\n        [\n          [4, 54, 24],\n          [31, 55, 25],\n        ],\n        [\n          [1, 53, 23],\n          [37, 54, 24],\n        ],\n        [\n          [15, 54, 24],\n          [25, 55, 25],\n        ],\n        [\n          [42, 54, 24],\n          [1, 55, 25],\n        ],\n        [\n          [10, 54, 24],\n          [35, 55, 25],\n        ],\n        [\n          [29, 54, 24],\n          [19, 55, 25],\n        ],\n        [\n          [44, 54, 24],\n          [7, 55, 25],\n        ],\n        [\n          [39, 54, 24],\n          [14, 55, 25],\n        ],\n        [\n          [46, 54, 24],\n          [10, 55, 25],\n        ],\n        [\n          [49, 54, 24],\n          [10, 55, 25],\n        ],\n        [\n          [48, 54, 24],\n          [14, 55, 25],\n        ],\n        [\n          [43, 54, 24],\n          [22, 55, 25],\n        ],\n        [\n          [34, 54, 24],\n          [34, 55, 25],\n        ],\n      ],\n    }[errorCorrection][version - 1];\n  }\n\n  // GALOIS FIELD POLYNOMIALS\n  static fromGF256Alpha(index) {\n    return [\n      1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6,\n      12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20,\n      40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60,\n      120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17,\n      34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151,\n      51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164,\n      85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246,\n      241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7,\n      14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9,\n      18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131,\n      27, 54, 108, 216, 173, 71, 142,\n    ][index];\n  }\n\n  static polynomial(size) {\n    // cache the polynomials\n    if (this.polynomials.length >= size) {\n      return this.polynomials[size - 1];\n    }\n    let polynomial = this.polynomials[this.polynomials.length - 1];\n    for (let multiplier = this.polynomials.length; multiplier < size; multiplier++) {\n      let factor = new Uint8Array(2);\n      factor[1] = multiplier;\n      polynomial = this.product(polynomial, factor);\n      this.polynomials.push(polynomial);\n    }\n    return polynomial;\n  }\n\n  static product(first, second) {\n    let product = new Uint8Array(first.length + second.length - 1);\n    first.forEach((firstValue, firstIndex) => {\n      second.forEach((secondValue, secondIndex) => {\n        let productIndex = firstIndex + secondIndex;\n        product[productIndex] = this.fromGF256Alpha((firstValue + secondValue) % 255) ^ product[productIndex];\n      });\n    });\n    return product.map((entry) => this.toGF256Alpha(entry));\n  }\n\n  static quotient(dividend, divisor) {\n    let quotient = new Uint8Array(dividend.length + divisor.length - 1);\n    for (let index = 0; index < dividend.length; index++) quotient[index] = dividend[index];\n    for (let dividendIndex = 0; dividendIndex < dividend.length; dividendIndex++) {\n      let startEntry = quotient[dividendIndex];\n      if (startEntry !== 0) {\n        startEntry = this.toGF256Alpha(startEntry);\n        divisor.forEach((alpha, divisorIndex) => {\n          let quotientIndex = dividendIndex + divisorIndex;\n          quotient[quotientIndex] = this.fromGF256Alpha((startEntry + alpha) % 255) ^ quotient[quotientIndex];\n        });\n      }\n    }\n    return quotient.slice(quotient.length - divisor.length + 1);\n  }\n\n  static toGF256Alpha(index) {\n    return [\n      0, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239, 129, 28, 193, 105,\n      248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69, 29, 181, 194, 125,\n      106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16,\n      145, 34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72,\n      126, 110, 107, 58, 40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243,\n      167, 87, 7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38, 184,\n      180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252,\n      190, 97, 242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216, 183, 123, 164,\n      118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90,\n      203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232,\n      116, 214, 244, 234, 168, 80, 88, 175,\n    ][index];\n  }\n\n  // MASKS\n  static get masks() {\n    if (this.maskArray.length === 0) {\n      [\n        (x, y) => (x + y) % 2 === 0,\n        (x, y) => y % 2 === 0,\n        (x) => x % 3 === 0,\n        (x, y) => (x + y) % 3 === 0,\n        (x, y) => ((y - (y % 2)) / 2 + (x - (x % 3)) / 3) % 2 === 0,\n        (x, y) => ((x * y) % 2) + ((x * y) % 3) === 0,\n        (x, y) => (x * y + ((x * y) % 3)) % 2 === 0,\n        (x, y) => (((x * y) % 3) + x + y) % 2 === 0,\n      ].forEach((generator) => {\n        const content = [];\n        for (let y = 0; y < 12; y++) {\n          const row = [];\n          for (let x = 0; x < 12; x++) {\n            row.push(generator(x, y));\n          }\n          content.push(row);\n        }\n        this.maskArray.push(new BooleanMatrix(content));\n      });\n    }\n    return this.maskArray;\n  }\n\n  // INSTANCE CREATION\n  static for(errorCorrection, version) {\n    // cache the instances\n    let instance = this.instances[errorCorrection + version];\n    if (instance === undefined) {\n      const dimension = version * 4 + 17;\n      const content = [];\n      for (let row = 0; row < dimension; row++) {\n        content.push(new Array(dimension).fill(this.AVAILABLE));\n      }\n      instance = new this(content, errorCorrection, version);\n      this.instances[errorCorrection + version] = instance;\n    }\n    return instance;\n  }\n\n  // INSTANCE\n  // chunking\n  // chunkingOffsets          where each chunk can be found in the data\n  // errorCorrection\n  // errorCorrectionCapacity  the number of codewords that can be messed up\n  //                          (1x for erasure, 2x for miscoding) per chunk\n  // version\n  constructor(content, errorCorrection, version) {\n    super(content);\n    this.errorCorrection = errorCorrection;\n    this.version = version;\n    this.initialize();\n  }\n\n  initialize() {\n    // calculate misdecodeProtectionCodewords\n    let misdecodeProtectionCodewords = 0;\n    if (this.errorCorrection === ERROR_CORRECTION.LOW) {\n      if (this.version === 1) {\n        misdecodeProtectionCodewords = 3;\n      } else if (this.version === 2) {\n        misdecodeProtectionCodewords = 2;\n      } else if (this.version === 3) {\n        misdecodeProtectionCodewords = 1;\n      }\n    } else if (this.version === 1) {\n      if (this.errorCorrection === ERROR_CORRECTION.MEDIUM) {\n        misdecodeProtectionCodewords = 2;\n      } else {\n        misdecodeProtectionCodewords = 1;\n      }\n    }\n    // get data and errorCorrection\n    this.chunking = this.constructor.chunkingAt(this.errorCorrection, this.version);\n    const data = [];\n    const errorCorrection = [];\n    let dataWidth = 0;\n    let errorCorrectionWidth = 0;\n    const errorCorrectionCapacity = [];\n    const chunkingOffsets = [];\n    let chunkingOffset = 0;\n    let chunk = 0;\n    this.chunking.forEach((arr) => {\n      for (let i = 0; i < arr[0]; i++) {\n        let byte = 0;\n        chunkingOffsets.push(chunkingOffset * 8);\n        chunkingOffset += arr[1];\n        const dataI = [];\n        const numberOfDataCodewords = arr[2];\n        for (let j = 0; j < numberOfDataCodewords; j++) {\n          dataI.push({ chunk, byte });\n          byte++;\n        }\n        data.push(dataI);\n        dataWidth = Math.max(dataWidth, dataI.length);\n        const errorCorrectionI = [];\n        const numberOfErrorCorrectionCodewords = arr[1] - numberOfDataCodewords;\n        for (let j = 0; j < numberOfErrorCorrectionCodewords; j++) {\n          errorCorrectionI.push({ chunk, byte });\n          byte++;\n        }\n        errorCorrection.push(errorCorrectionI);\n        errorCorrectionWidth = Math.max(errorCorrectionWidth, errorCorrectionI.length);\n        errorCorrectionCapacity.push(numberOfErrorCorrectionCodewords - misdecodeProtectionCodewords);\n        chunk++;\n      }\n    });\n    this.chunkingOffsets = chunkingOffsets;\n    this.errorCorrectionCapacity = errorCorrectionCapacity;\n    // combine the data and errorCorrection\n    const combined = [];\n    for (let column = 0; column < dataWidth; column++) {\n      data.forEach((row) => {\n        if (row.length > column) combined.push(row[column]);\n      });\n    }\n    for (let column = 0; column < errorCorrectionWidth; column++) {\n      errorCorrection.forEach((row) => {\n        if (row.length > column) combined.push(row[column]);\n      });\n    }\n    // create the pixels\n    const pixels = [];\n    combined.forEach((byteAndChunk) => {\n      const byte = byteAndChunk.byte;\n      const chunk = byteAndChunk.chunk;\n      for (let bit = 0; bit < 8; bit++) {\n        pixels.push({ chunk, byte, bit });\n      }\n    });\n    // finder patterns & format information\n    const dimension = this.width;\n    this.fill(0, 0, 9, 9, this.constructor.AVOID);\n    this.fill(dimension - 8, 0, 8, 9, this.constructor.AVOID);\n    this.fill(0, dimension - 8, 9, 8, this.constructor.AVOID);\n    // version information\n    if (this.version > 6) {\n      this.fill(dimension - 11, 0, 3, 6, this.constructor.AVOID);\n      this.fill(0, dimension - 11, 6, 3, this.constructor.AVOID);\n    }\n    // timing patterns\n    this.fill(9, 6, dimension - 17, 1, this.constructor.AVOID);\n    this.fill(6, 9, 1, dimension - 17, this.constructor.AVOID);\n    // alignment patterns\n    for (const position of QRCode.alignmentPatternPositions(this.version)) {\n      this.fill(position.x, position.y, 5, 5, this.constructor.AVOID);\n    }\n    // fill the pixels\n    let x = dimension - 2;\n    let y = dimension;\n    pixels.forEach((pixel) => {\n      // get next position\n      do {\n        let shift;\n        let halfOdd = ((x - (x % 2)) / 2) % 2 === 1;\n        if (x === 6) {\n          shift = false;\n          x = 5;\n        } else if (x < 6) {\n          shift = x % 2 === 1;\n        } else {\n          shift = x % 2 === 0;\n        }\n        if (shift) {\n          x--;\n        } else if (halfOdd) {\n          if (y === 0) {\n            x--;\n          } else {\n            x++;\n            y--;\n          }\n        } else {\n          if (y + 1 === dimension) {\n            x--;\n          } else {\n            x++;\n            y++;\n          }\n        }\n      } while (this.at(x, y) === this.constructor.AVOID && x > -1);\n      // place the bit\n      this.put(x, y, pixel);\n    });\n  }\n\n  codewordsFor(codewords) {\n    let bytePosition = 0;\n    const withErrorCorrection = [];\n    this.chunking.forEach((arr) => {\n      for (let i = 0; i < arr[0]; i++) {\n        const data = codewords.slice(bytePosition, bytePosition + arr[2]);\n        bytePosition += arr[2];\n        const errorCorrection = this.constructor.quotient(data, this.constructor.polynomial(arr[1] - arr[2]));\n        withErrorCorrection.push(...data);\n        withErrorCorrection.push(...errorCorrection);\n      }\n    });\n    return withErrorCorrection;\n  }\n\n  dataFor(codewords) {\n    // convert to bits\n    const bits = [];\n    codewords.forEach((byte) => {\n      let remainder = byte;\n      [128, 64, 32, 16, 8, 4, 2, 1].forEach((subtract) => {\n        if (remainder >= subtract) {\n          bits.push(true);\n          remainder -= subtract;\n        } else {\n          bits.push(false);\n        }\n      });\n    });\n    this.bits = bits;\n    // place bits in matrix\n    const dimension = this.content.length;\n    const encodedData = BooleanMatrix.withAll(dimension, dimension, false);\n    for (let y = 0; y < dimension; y++) {\n      for (let x = 0; x < dimension; x++) {\n        const pixel = this.at(x, y);\n        if (this.isDataPixel(pixel)) {\n          encodedData.put(x, y, bits[this.chunkingOffsets[pixel.chunk] + pixel.byte * 8 + pixel.bit]);\n        }\n      }\n    }\n    return encodedData;\n  }\n\n  isDataPixel(pixel) {\n    return pixel !== this.constructor.AVOID && pixel !== this.constructor.AVAILABLE;\n  }\n\n  maskedDataFor(data) {\n    const dimension = data.height;\n    return this.constructor.masks.map((mask) => {\n      const masked = BooleanMatrix.withAll(dimension, dimension);\n      for (let x = 0; x < dimension; x++) {\n        for (let y = 0; y < dimension; y++) {\n          let value = data.at(x, y);\n          if (this.at(x, y) !== QRCodeMap.AVOID) {\n            if (mask.at(x % 12, y % 12)) value = !value;\n          }\n          masked.put(x, y, value);\n        }\n      }\n      return masked;\n    });\n  }\n\n  // TESTING\n  asIntegerArray() {\n    return this.content.map((row) => {\n      let integer = 0;\n      row.forEach((pixel) => {\n        integer *= 2;\n        if (this.isDataPixel(pixel)) integer++;\n      });\n      return integer;\n    });\n  }\n}\n// static variables\nQRCodeMap.AVAILABLE = 'available';\nQRCodeMap.AVOID = 'avoid';\nQRCodeMap.GENERATOR_FUNCTIONS = [\n  (x, y) => (x + y) % 2 === 0,\n  (x, y) => y % 2 === 0,\n  (x) => x % 3 === 0,\n  (x, y) => (x + y) % 3 === 0,\n  (x, y) => ((y - (y % 2)) / 2 + (x - (x % 3)) / 3) % 2 === 0,\n  (x, y) => ((x * y) % 2) + ((x * y) % 3) === 0,\n  (x, y) => (x * y + ((x * y) % 3)) % 2 === 0,\n  (x, y) => (((x * y) % 3) + x + y) % 2 === 0,\n];\nQRCodeMap.instances = {};\nQRCodeMap.maskArray = [];\nQRCodeMap.polynomials = [new Uint8Array(2)];\n\n/**\n * CLASS QRCode\n * This represents an encoded QRCode based on the following:\n *   content         the string to encode\n *   options         an object with the options, such as the ECI integer and errorCorrection\n * An encoder generates the following:\n *   data            the BooleanMatrix of mapped data, along with the format and version information\n *   eci             (see above)\n *   encoding        'NUMERIC' | 'ALPHANUMERIC' | 'KANJI' | BYTE\n *   errorCorrection (see above)\n *   version         the QRCode version from 1 to 40.\n * It also provides pattern positions and derivative information.\n */\nclass QRCode {\n  static alignmentPatternPositions(version) {\n    let locations = ALIGNMENT_PATTERN_LOCATIONS[version - 1];\n    if (locations.length === 0) return [];\n    const positions = [];\n    // top and left\n    const first = locations[0];\n    locations.slice(1, locations.length - 1).forEach((location) => {\n      positions.push({\n        x: first,\n        y: location,\n      });\n      positions.push({\n        x: location,\n        y: first,\n      });\n    });\n    // others\n    locations = locations.slice(1);\n    locations.forEach((y) => {\n      locations.forEach((x) => {\n        positions.push({ x, y });\n      });\n    });\n    return positions;\n  }\n\n  static finderPatternPositions(version) {\n    const far = 4 * version + 10;\n    return [\n      { x: 0, y: 0 },\n      { x: 0, y: far },\n      { x: far, y: 0 },\n    ];\n  }\n\n  static timingPatternPositions(version) {\n    const positions = [];\n    const far = 4 * version + 9;\n    for (let position = 8; position < far; position += 2) {\n      positions.push({ x: position, y: 6 });\n      positions.push({ x: 6, y: position });\n    }\n    return positions;\n  }\n\n  constructor(content, options) {\n    if (content === undefined || content.length === 0) throw 'no content to encode';\n    this.content = content;\n    this.options = options || {};\n    if ('eci' in this.options) this.eci = this.options.eci;\n    if ('errorCorrection' in this.options) this.errorCorrection = this.options.errorCorrection;\n  }\n\n  get alignmentPatternPositions() {\n    return this.constructor.alignmentPatternPositions(this.version);\n  }\n\n  get dimension() {\n    return this.version * 4 + 17;\n  }\n\n  get encoding() {\n    return this._encoding;\n  }\n\n  set encoding(string) {\n    this._encoding = string;\n  }\n\n  get finderPatternPositions() {\n    return this.constructor.finderPatternPositions(this.version);\n  }\n\n  get hasEci() {\n    return this.eci !== undefined && this.eci !== 3;\n  }\n\n  get hasAlignmentPattern() {\n    return this.version > 1;\n  }\n\n  get timingPatternPositions() {\n    return this.constructor.timingPatternPositions(this.version);\n  }\n}\n// static variables\nQRCode.MAX_VERSION = 40;\n\n/**\n * CLASS QRCodeEncoder\n * This class does the encoding work for the QRCode class, hiding the algorithmic details and\n * intermediate step data. It populates the QRCode with encoding, version, errorCorrection, and data.\n * It is only exported to be used in tests.\n */\nclass QRCodeEncoder {\n  constructor(contents, options) {\n    this.code = new QRCode(contents, options);\n    this.encode();\n  }\n\n  encode() {\n    this.initializeEncoding();\n    this.initializeVersion();\n    this.initializeCodewords();\n    this.initializeMapping();\n    this.initializeMasking();\n  }\n\n  initializeCodewords() {\n    const writer = new BitWriter(DATA_CAPACITY[this.code.errorCorrection][this.code.version - 1]);\n    switch (this.code.encoding) {\n      case ENCODING.NUMERIC:\n        // mode\n        writer.nextPutBits(1, 4);\n        // number of bits\n        if (this.code.version < 10) {\n          writer.nextPutBits(this.length, 10);\n        } else if (this.code.version < 27) {\n          writer.nextPutBits(this.length, 12);\n        } else {\n          writer.nextPutBits(this.length, 14);\n        }\n        // content\n        writer.nextPutNumeric(this.code.content);\n        break;\n      case ENCODING.ALPHANUMERIC:\n        // mode\n        writer.nextPutBits(2, 4);\n        // number of bits\n        if (this.code.version < 10) {\n          writer.nextPutBits(this.length, 9);\n        } else if (this.code.version < 27) {\n          writer.nextPutBits(this.length, 11);\n        } else {\n          writer.nextPutBits(this.length, 13);\n        }\n        // content\n        writer.nextPutAlphaNUMERIC(this.code.content);\n        break;\n      case ENCODING.KANJI:\n        // mode\n        writer.nextPutBits(8, 8);\n        // number of bits\n        if (this.code.version < 10) {\n          writer.nextPutBits(this.length, 8);\n        } else if (this.code.version < 27) {\n          writer.nextPutBits(this.length, 10);\n        } else {\n          writer.nextPutBits(this.length, 12);\n        }\n        // content\n        writer.nextPutKanji(this.code.content);\n        break;\n      case ENCODING.BYTE:\n        if (this.code.hasEci) {\n          // specife ECI mode\n          writer.nextPutBits(7, 4);\n          // Add the ECI assignment number\n          if (this.code.eci < 128) {\n            writer.nextPutBits(0, 1);\n            writer.nextPutBits(this.code.eci, 7);\n          } else if (this.code.eci < 16384) {\n            writer.nextPutBits(2, 2);\n            writer.nextPutBits(this.code.eci, 14);\n          } else {\n            writer.nextPutBits(6, 3);\n            writer.nextPutBits(this.code.eci, 21);\n          }\n        }\n        // mode\n        writer.nextPutBits(4, 4);\n        // number of bits\n        if (this.code.version < 10) {\n          writer.nextPutBits(this.length, 8);\n        } else {\n          writer.nextPutBits(this.length, 16);\n        }\n        // content\n        writer.nextPutByte(this.bytes);\n        break;\n    }\n    // Terminate the sequence / Skip to next byte for error correction\n    if (writer.bitsLeft > 3) writer.nextPutBits(0, 4);\n    // Add error correction sequence, alternating between 11101100 and 00010001\n    const bytesLeft = writer.bytesLeft;\n    for (let index = 0; index < bytesLeft; index++) {\n      writer.nextPutCompleteByte(index % 2 === 0 ? 236 : 17);\n    }\n    this.codewords = writer.content;\n  }\n\n  initializeEncoding() {\n    if (this.code.hasEci) {\n      this.code.encoding = ENCODING.BYTE;\n      if (this.code.eci === 3) {\n        // jis\n        this.length = this.code.content.length;\n        this.bytes = [];\n        for (let i = 0; i < length; i++) {\n          this.bytes.push(this.code.content.charCodeAt(i) % 128);\n        }\n      } else if (this.code.eci === 25) {\n        // utf-16be\n        this.bytes = this.toUtf16Bytes(this.code.content);\n        this.length = this.bytes.length;\n      } else if (this.code.eci === 26) {\n        // utf-8\n        this.bytes = this.toUtf8Bytes(this.code.content);\n        this.length = this.bytes.length;\n      } else {\n        this.length = this.code.content.length;\n        this.bytes = [];\n        for (let i = 0; i < length; i++) {\n          this.bytes.push(this.code.content.charCodeAt(i) % 256);\n        }\n      }\n    } else if (/^\\d*$/.test(this.code.content)) {\n      this.code.encoding = ENCODING.NUMERIC;\n      this.length = this.code.content.length;\n    } else if (/^[A-Z\\d\\dA-Z $%*+-./:]+$/.test(this.code.content)) {\n      this.code.encoding = ENCODING.ALPHANUMERIC;\n      this.length = this.code.content.length;\n    } else if (/^[\\u8140-\\u9ffc\\ue040-\\uebbf]+$/.test(this.code.content)) {\n      this.code.encoding = ENCODING.KANJI;\n      this.length = this.code.content.length;\n    } else {\n      this.code.encoding = ENCODING.BYTE;\n      this.bytes = this.toUtf8Bytes(this.code.content);\n      this.length = this.bytes.length;\n      // use utf-8 encoding if it is needed, jis if that is sufficient\n      this.code.eci = this.length === this.code.content.length ? 3 : 26;\n    }\n  }\n\n  initializeMapping() {\n    this.map = QRCodeMap.for(this.code.errorCorrection, this.code.version);\n    this.mapCodewords = this.map.codewordsFor(this.codewords);\n    this.mapData = this.map.dataFor(this.mapCodewords);\n  }\n\n  initializeMasking() {\n    // Get the masked choices\n    const choices = this.map.maskedDataFor(this.mapData);\n    // Find the one with the lowest penalty\n    let data;\n    let dataIndex;\n    let lowestPenalty = 1000000;\n    choices.forEach((matrix, index) => {\n      const penalty = this.penaltyForMatrix(matrix);\n      if (penalty < lowestPenalty) {\n        lowestPenalty = penalty;\n        data = matrix;\n        dataIndex = index;\n      }\n    });\n    this.lowestPenalty = lowestPenalty;\n    // Generate the format information\n    let format = [1, 0, 3, 2][this.errorCorrections.indexOf(this.code.errorCorrection)];\n    format = (8 * format + dataIndex) * 1024;\n    let errorCorrection = format;\n    for (let i = 14; i >= 10; i--) {\n      if (errorCorrection >= Math.pow(2, i)) {\n        errorCorrection = (Math.pow(2, i - 10) * 1335) ^ errorCorrection;\n      }\n    }\n    format = (format + errorCorrection) ^ 21522;\n    // Place the format information\n    const dimension = this.code.dimension;\n    [\n      [8, 0, dimension - 1, 8],\n      [8, 1, dimension - 2, 8],\n      [8, 2, dimension - 3, 8],\n      [8, 3, dimension - 4, 8],\n      [8, 4, dimension - 5, 8],\n      [8, 5, dimension - 6, 8],\n      [8, 7, dimension - 7, 8],\n      [8, 8, dimension - 8, 8],\n      [7, 8, 8, dimension - 7],\n      [5, 8, 8, dimension - 6],\n      [4, 8, 8, dimension - 5],\n      [3, 8, 8, dimension - 4],\n      [2, 8, 8, dimension - 3],\n      [1, 8, 8, dimension - 2],\n      [0, 8, 8, dimension - 1],\n    ].forEach((arr, index) => {\n      if ((Math.pow(2, index) & format) > 0) {\n        data.put(arr[0], arr[1], true);\n        data.put(arr[2], arr[3], true);\n      }\n    });\n    // Add dark module\n    data.put(8, dimension - 8, true);\n    // Version information\n    if (this.code.version > 6) {\n      // Generate the bitVersion information\n      let bitVersion = this.code.version * 4096;\n      errorCorrection = bitVersion;\n      for (let i = 17; i >= 12; i--) {\n        if (errorCorrection >= Math.pow(2, i)) {\n          errorCorrection = (Math.pow(2, i - 12) * 7973) ^ errorCorrection;\n        }\n      }\n      bitVersion += errorCorrection;\n      // Place the bitVersion information\n      let count = 0;\n      for (let x = 0; x < 6; x++) {\n        for (let y = dimension - 11; y <= dimension - 9; y++) {\n          if ((Math.pow(2, count) & bitVersion) > 0) {\n            data.put(x, y, true);\n            data.put(y, x, true);\n          }\n          count++;\n        }\n      }\n    }\n    // finalize loading of QRCode\n    this.code.data = data;\n  }\n\n  initializeVersion() {\n    if (this.errorCorrections.includes(this.code.errorCorrection)) {\n      // Error correction has already been specified\n      let version = this.versionForLength(this.length, this.code.errorCorrection);\n      if (version > QRCode.MAX_VERSION)\n        throw 'This content is too long to be encoded for the specified error correction.';\n      this.code.version = version;\n    } else {\n      // Choose the error correction that gets the smallest size but the highest error correction\n      let versions = this.errorCorrections.map((errorCorrection) =>\n        this.versionForLength(this.length, errorCorrection)\n      );\n      let version = versions[0];\n      if (version > QRCode.MAX_VERSION) throw 'This string is too long to be encoded.';\n      this.code.version = version;\n      for (let index = 3; index >= 0; index--) {\n        if (versions[index] === version) {\n          this.code.errorCorrection = this.errorCorrections[index];\n          return;\n        }\n      }\n    }\n  }\n\n  capacity(encoding, errorCorrection) {\n    return {\n      NUMERIC: {\n        LOW: [\n          41, 77, 127, 187, 255, 322, 370, 461, 552, 652, 772, 883, 1022, 1101, 1250, 1408, 1548, 1725, 1903, 2061,\n          2232, 2409, 2620, 2812, 3057, 3283, 3517, 3669, 3909, 4158, 4417, 4686, 4965, 5253, 5529, 5836, 6153, 6479,\n          6743, 7089,\n        ],\n        MEDIUM: [\n          34, 63, 101, 149, 202, 255, 293, 365, 432, 513, 604, 691, 796, 871, 991, 1082, 1212, 1346, 1500, 1600, 1708,\n          1872, 2059, 2188, 2395, 2544, 2701, 2857, 3035, 3289, 3486, 3693, 3909, 4134, 4343, 4588, 4775, 5039, 5313,\n          5596,\n        ],\n        QUARTER: [\n          27, 48, 77, 111, 144, 178, 207, 259, 312, 364, 427, 489, 580, 621, 703, 775, 876, 948, 1063, 1159, 1224, 1358,\n          1468, 1588, 1718, 1804, 1933, 2085, 2181, 2358, 2473, 2670, 2805, 2949, 3081, 3244, 3417, 3599, 3791, 3993,\n        ],\n        HIGH: [\n          17, 34, 58, 82, 106, 139, 154, 202, 235, 288, 331, 374, 427, 468, 530, 602, 674, 746, 813, 919, 969, 1056,\n          1108, 1228, 1286, 1425, 1501, 1581, 1677, 1782, 1897, 2022, 2157, 2301, 2361, 2524, 2625, 2735, 2927, 3057,\n        ],\n      },\n      ALPHANUMERIC: {\n        LOW: [\n          25, 47, 77, 114, 154, 195, 224, 279, 335, 395, 468, 535, 619, 667, 758, 854, 938, 1046, 1153, 1249, 1352,\n          1460, 1588, 1704, 1853, 1990, 2132, 2223, 2369, 2520, 2677, 2840, 3009, 3183, 3351, 3537, 3729, 3927, 4087,\n          4296,\n        ],\n        MEDIUM: [\n          20, 38, 61, 90, 122, 154, 178, 221, 262, 311, 366, 419, 483, 528, 600, 656, 734, 816, 909, 970, 1035, 1134,\n          1248, 1326, 1451, 1542, 1637, 1732, 1839, 1994, 2113, 2238, 2369, 2506, 2632, 2780, 2894, 3054, 3220, 3391,\n        ],\n        QUARTER: [\n          16, 29, 47, 67, 87, 108, 125, 157, 189, 221, 259, 296, 352, 376, 426, 470, 531, 574, 644, 702, 742, 823, 890,\n          963, 1041, 1094, 1172, 1263, 1322, 1429, 1499, 1618, 1700, 1787, 1867, 1966, 2071, 2181, 2298, 2420,\n        ],\n        HIGH: [\n          10, 20, 35, 50, 64, 84, 93, 122, 143, 174, 200, 227, 259, 283, 321, 365, 408, 452, 493, 557, 587, 640, 672,\n          744, 779, 864, 910, 958, 1016, 1080, 1150, 1226, 1307, 1394, 1431, 1530, 1591, 1658, 1774, 1852,\n        ],\n      },\n      KANJI: {\n        LOW: [\n          10, 20, 32, 48, 65, 82, 95, 118, 141, 167, 198, 226, 262, 282, 320, 361, 397, 442, 488, 528, 572, 618, 672,\n          721, 784, 842, 902, 940, 1002, 1066, 1132, 1201, 1273, 1347, 1417, 1496, 1577, 1661, 1729, 1817,\n        ],\n        MEDIUM: [\n          8, 16, 26, 38, 52, 65, 75, 93, 111, 131, 155, 177, 204, 223, 254, 277, 310, 345, 384, 410, 438, 480, 528, 561,\n          614, 652, 692, 732, 778, 843, 894, 947, 1002, 1060, 1113, 1176, 1224, 1292, 1362, 1435,\n        ],\n        QUARTER: [\n          7, 12, 20, 28, 37, 45, 53, 66, 80, 93, 109, 125, 149, 159, 180, 198, 224, 243, 272, 297, 314, 348, 376, 407,\n          440, 462, 496, 534, 559, 604, 634, 684, 719, 756, 790, 832, 876, 923, 972, 1024,\n        ],\n        HIGH: [\n          4, 8, 15, 21, 27, 36, 39, 52, 60, 74, 85, 96, 109, 120, 136, 154, 173, 191, 208, 235, 248, 270, 284, 315, 330,\n          365, 385, 405, 430, 457, 486, 518, 553, 590, 605, 647, 673, 701, 750, 784,\n        ],\n      },\n      BYTE: {\n        LOW: [\n          17, 32, 53, 78, 106, 134, 154, 192, 230, 271, 321, 367, 425, 458, 520, 586, 644, 718, 792, 858, 929, 1003,\n          1091, 1171, 1273, 1367, 1465, 1528, 1628, 1732, 1840, 1952, 2068, 2188, 2303, 2431, 2563, 2699, 2809, 2953,\n        ],\n        MEDIUM: [\n          14, 26, 42, 62, 84, 106, 122, 152, 180, 213, 251, 287, 331, 362, 412, 450, 504, 560, 624, 666, 711, 779, 857,\n          911, 997, 1059, 1125, 1190, 1264, 1370, 1452, 1538, 1628, 1722, 1809, 1911, 1989, 2099, 2213, 2331,\n        ],\n        QUARTER: [\n          11, 20, 32, 46, 60, 74, 86, 108, 130, 151, 177, 203, 241, 258, 292, 322, 364, 394, 442, 482, 509, 565, 611,\n          661, 715, 751, 805, 868, 908, 982, 1030, 1112, 1168, 1228, 1283, 1351, 1423, 1499, 1579, 1663,\n        ],\n        HIGH: [\n          7, 14, 24, 34, 44, 58, 64, 84, 98, 119, 137, 155, 177, 194, 220, 250, 280, 310, 338, 382, 403, 439, 461, 511,\n          535, 593, 625, 658, 698, 742, 790, 842, 898, 958, 983, 1051, 1093, 1139, 1219, 1273,\n        ],\n      },\n    }[encoding][errorCorrection];\n  }\n\n  get errorCorrections() {\n    return [ERROR_CORRECTION.LOW, ERROR_CORRECTION.MEDIUM, ERROR_CORRECTION.QUARTER, ERROR_CORRECTION.HIGH];\n  }\n\n  penaltyForMatrix(matrix) {\n    /*\n      Return the penalty score for the symbol, according to the following criteria:\n      Penalty 1: A penalty (n-2) for each group of five or more same-colored modules in a row (or column)\n      Penalty 2: A penalty (3) for each 2x2 area of same-colored modules\n      Penalty 3: A penalty (40) if there are patterns that look similar to the finder patterns\n      Penalty 4: A penalty based on the percentage of tiles that are black / white\n    */\n    let penalty = 0;\n    const dimension = matrix.content.length;\n    let current, last, run, runTest, finderPattern;\n    for (let y = 0; y < dimension - 1; y++) {\n      current = matrix.bitAt(0, y);\n      last = current;\n      run = 1;\n      runTest = current;\n      finderPattern = current;\n      for (let x = 1; x < 10; x++) {\n        current = matrix.bitAt(x, y);\n        if (last === current) {\n          if (matrix.bitAt(x, y + 1) === last && matrix.bitAt(x - 1, y + 1) === last) penalty += 3;\n        } else {\n          last = current;\n        }\n        if (runTest === current) {\n          run++;\n        } else {\n          if (run > 4) penalty += run - 2;\n          run = 1;\n          runTest = current;\n        }\n        finderPattern = finderPattern * 2 + current;\n      }\n      for (let x = 10; x < dimension; x++) {\n        current = matrix.bitAt(x, y);\n        if (last === current) {\n          if (matrix.bitAt(x, y + 1) === last && matrix.bitAt(x - 1, y + 1) === last) penalty += 3;\n        } else {\n          last = current;\n        }\n        if (runTest === current) {\n          run++;\n        } else {\n          if (run > 4) penalty += run - 2;\n          run = 1;\n          runTest = current;\n        }\n        finderPattern = (finderPattern * 2 + current) % 2048;\n        if (finderPattern === 1488 || finderPattern === 93) penalty += 40;\n      }\n      if (run > 4) penalty += run - 2;\n    }\n    // Process the last row without Penalty 2\n    let lastY = dimension - 1;\n    current = matrix.bitAt(0, lastY);\n    run = 1;\n    runTest = current;\n    finderPattern = current;\n    for (let x = 1; x < 10; x++) {\n      current = matrix.bitAt(x, lastY);\n      if (runTest === current) {\n        run++;\n      } else {\n        if (run > 4) penalty += run - 2;\n        run = 1;\n        runTest = current;\n      }\n      finderPattern = finderPattern * 2 + current;\n    }\n    for (let x = 10; x < dimension; x++) {\n      current = matrix.bitAt(x, lastY);\n      if (runTest === current) {\n        run++;\n      } else {\n        if (run > 4) penalty += run - 2;\n        run = 1;\n        runTest = current;\n      }\n      finderPattern = (finderPattern * 2 + current) % 2048;\n      if (finderPattern === 1488 || finderPattern === 93) penalty += 40;\n    }\n    if (run > 4) penalty += run - 2;\n    // Penalty 4\n    let count = 0;\n    for (let x = 0; x < dimension; x++) {\n      current = matrix.bitAt(x, 0);\n      count += current;\n      run = 1;\n      runTest = current;\n      finderPattern = current;\n      for (let y = 1; y < 10; y++) {\n        current = matrix.bitAt(x, y);\n        count += current;\n        if (runTest === current) {\n          run++;\n        } else {\n          if (run > 4) penalty += run - 2;\n          run = 1;\n          runTest = current;\n        }\n        finderPattern = finderPattern * 2 + current;\n      }\n      for (let y = 10; y < dimension; y++) {\n        current = matrix.bitAt(x, y);\n        count += current;\n        if (runTest === current) {\n          run++;\n        } else {\n          if (run > 4) penalty += run - 2;\n          run = 1;\n          runTest = current;\n        }\n        finderPattern = (finderPattern * 2 + current) % 2048;\n        if (finderPattern === 1488 || finderPattern === 93) penalty += 40;\n      }\n      if (run > 4) penalty += run - 2;\n    }\n    penalty += Math.floor(Math.abs(count / (dimension * dimension) - 0.5) * 10);\n    return penalty;\n  }\n\n  toUtf16Bytes(string) {\n    const bytes = [];\n    for (let i = 0; i < string.length; i++) {\n      let code = string.charCodeAt(i);\n      let remainder = code % 256;\n      let quotient = (code - remainder) / 256;\n      bytes.push(quotient);\n      bytes.push(remainder);\n    }\n    return bytes;\n  }\n\n  toUtf8Bytes(string) {\n    const bytes = [];\n    let position = 0;\n    for (let i = 0; i < string.length; i++) {\n      let code = string.charCodeAt(i);\n      if (code < 128) {\n        bytes[position++] = code;\n      } else if (code < 2048) {\n        bytes[position++] = (code >> 6) | 192;\n        bytes[position++] = (code & 63) | 128;\n      } else if ((code & 0xfc00) == 0xd800 && i + 1 < string.length && (string.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\n        // Surrogate Pair\n        code = 0x10000 + ((code & 0x03ff) << 10) + (string.charCodeAt(++i) & 0x03ff);\n        bytes[position++] = (code >> 18) | 240;\n        bytes[position++] = ((code >> 12) & 63) | 128;\n        bytes[position++] = ((code >> 6) & 63) | 128;\n        bytes[position++] = (code & 63) | 128;\n      } else {\n        bytes[position++] = (code >> 12) | 224;\n        bytes[position++] = ((code >> 6) & 63) | 128;\n        bytes[position++] = (code & 63) | 128;\n      }\n    }\n    return bytes;\n  }\n\n  versionForLength(length, errorCorrection) {\n    let capacity;\n    if (this.code.hasEci) {\n      let actualLength = length + 3;\n      if (this.code.eci >= 128) actualLength++;\n      if (this.code.eci >= 16384) actualLength++;\n      capacity = DATA_CAPACITY[errorCorrection];\n      if (actualLength > capacity[8]) {\n        // add a bit for versions 10+\n        actualLength++;\n      }\n    } else {\n      capacity = this.capacity(this.code.encoding, errorCorrection);\n    }\n    let index = capacity.findIndex((allows) => allows >= length);\n    if (index === -1) return 100;\n    return index + 1;\n  }\n}\n\nmodule.exports = {\n  ENCODING,\n  ERROR_CORRECTION,\n  BitWriter,\n  Matrix,\n  BooleanMatrix,\n  QRCodeMap,\n  QRCode,\n  QRCodeEncoder,\n};\n","const { QRCode, QRCodeEncoder } = require('./qrcode');\n\n/**\n * CLASS SquareQRCodeEncoder\n * While it can render an SVG, it mainly provides a base encoder for MarketQRCodeEncoder and EmbedQRCodeEncoder.\n * It adds these features to QRCodeEncoder:\n *   - svg rendering using the Turtle to edge trace data\n *   - hooks for adjusting the data for turtle rendering\n *   - using lowestPenalty calculation to make sure the code can be read\n *   - some base methods for SVG rendering\n * The following options can be specified:\n *   border          boolean (default false) whether to add a 4-pixel quiet zone\n *   invert          boolean (default false) light data on dark background when on\n *   styleBackground string to override style inserted in SVG background rectangle\n *   styleForeground string to override style inserted in SVG foreground data and patterns\n */\nclass SquareQRCodeEncoder extends QRCodeEncoder {\n  encode() {\n    this.initializeEncoding();\n    for (const errorCorrection of this.errorCorrections) {\n      this.code.errorCorrection = errorCorrection;\n      this.initializeVersion();\n      if (this.code.version < this.minimumVersion) continue;\n      this.initializeCodewords();\n      this.initializeMapping();\n      this.initializeMasking();\n      if (this.lowestPenalty < this.constructor.PENALTY_FOR_NEGATIVE_CAPACITY) {\n        this.initializeTurtleData();\n        this.initializeSvg();\n        return;\n      }\n    }\n    // go up in version, keep H errorCorrection\n    const start = Math.max(this.minimumVersion, this.code.version + 1);\n    for (let version = start; version <= QRCode.MAX_VERSION; version++) {\n      this.code.version = version;\n      this.initializeCodewords();\n      this.initializeMapping();\n      this.initializeMasking();\n      if (this.lowestPenalty < this.constructor.PENALTY_FOR_NEGATIVE_CAPACITY) {\n        this.initializeTurtleData();\n        this.initializeSvg();\n        return;\n      }\n    }\n  }\n\n  initializeSvg() {\n    const offset = this.svgOffset;\n    const dimension = this.svgDimension;\n    const foregroundStyle = this.svgForegroundStyle;\n    const backgroundStyle = this.svgBackgroundStyle;\n    const source = [];\n    source.push(this.svgTag(dimension));\n    source.push('<defs>');\n    source.push(this.svgFinderPattern(foregroundStyle));\n    source.push('</defs>');\n    source.push(this.svgBackground(backgroundStyle, dimension, offset === 0 ? undefined : offset / 2));\n    this.svgFinderPatterns(source, offset);\n    this.svgTurtle(source, foregroundStyle, offset);\n    source.push('</svg>');\n    this.svg = source.join('');\n  }\n\n  initializeTurtleData() {\n    // add timing and alignment patterns as data\n    const data = this.code.data.copy();\n    for (const point of this.code.timingPatternPositions) {\n      data.put(point.x, point.y, true);\n    }\n    for (const point of this.code.alignmentPatternPositions) {\n      data.fillAlignmentPatternAt(point.x, point.y);\n    }\n    this.turtleData = data;\n  }\n\n  get inverted() {\n    const inverted = this.code.options.invert;\n    if (inverted === undefined) return false;\n    return inverted;\n  }\n\n  get hasBorder() {\n    const hasBorder = this.code.options.border;\n    if (hasBorder === undefined) return false;\n    return hasBorder;\n  }\n\n  get minimumVersion() {\n    return 1;\n  }\n\n  async png() {\n    if (this._png !== undefined) return this._png;\n    if (this.svg === undefined) throw 'no SVG to convert to PNG';\n    const image = new Image();\n    const imageBlob = new Blob([this.svg], { type: 'image/svg+xml;charset=utf-8' });\n    image.src = URL.createObjectURL(imageBlob);\n    await image.decode();\n    const dimension = this.svgDimension;\n    const canvas = document.createElement('canvas');\n    canvas.width = dimension;\n    canvas.height = dimension;\n    canvas.getContext('2d').drawImage(image, 0, 0, dimension, dimension);\n    this._png = canvas.toDataURL();\n    return this._png;\n  }\n\n  svgBackground(style, dimension, cornerRadius) {\n    if (style === '') return '';\n    return cornerRadius === undefined\n      ? `<rect ${style} x=\"0\" y=\"0\" width=\"${dimension}\" height=\"${dimension}\" />`\n      : `<rect ${style} x=\"0\" y=\"0\" width=\"${dimension}\" height=\"${dimension}\" rx=\"${cornerRadius}\" ry=\"${cornerRadius}\" />`;\n  }\n\n  get svgBackgroundStyle() {\n    const fromOptions = this.code.options.styleBackground;\n    if (fromOptions !== undefined) return fromOptions;\n    return this.inverted ? 'fill=\"black\"' : 'fill=\"white\"';\n  }\n\n  get svgDimension() {\n    return 2 * this.svgOffset + 8 * this.code.dimension;\n  }\n\n  svgFinderPattern(style) {\n    return `<path id=\"f\" ${style} fill-rule=\"evenodd\" d=\"M 0 10 a10,10 0 0 1 10,-10 h36 a10,10 0 0 1 10,10 v36 a10,10 0 0 1 -10,10 h-36 a10,10 0 0 1 -10,-10 Z M 8 10 a2,2 0 0 1 2,-2 h36 a2,2 0 0 1 2,2 v36 a2,2 0 0 1 -2,2 h-36 a2,2 0 0 1 -2,-2 Z M 16 18 a2,2 0 0 1 2,-2 h20 a2,2 0 0 1 2,2 v20 a2,2 0 0 1 -2,2 h-20 a2,2 0 0 1 -2,-2 Z\" />`;\n  }\n\n  svgFinderPatterns(source, offset) {\n    for (const point of this.code.finderPatternPositions) {\n      source.push(`<use xlink:href=\"#f\" x=\"${point.x * 8 + offset}\" y=\"${point.y * 8 + offset}\" />`);\n    }\n  }\n\n  get svgForegroundStyle() {\n    const fromOptions = this.code.options.styleForeground;\n    if (fromOptions !== undefined) return fromOptions;\n    return this.inverted ? 'fill=\"white\"' : 'fill=\"black\"';\n  }\n\n  get svgOffset() {\n    return this.hasBorder ? 32 : 0;\n  }\n\n  svgTag(dimension) {\n    return `<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${dimension}\" height=\"${dimension}\" viewBox=\"0 0 ${dimension} ${dimension}\">`;\n  }\n\n  svgTurtle(source, style, offset) {\n    const dimension = this.code.dimension;\n    for (let y = 0; y < dimension; y++) {\n      for (let x = 0; x < dimension; x++) {\n        if (this.turtleData.at(x, y)) {\n          source.push(new Turtle(this.turtleData, style, offset, x, y).element);\n        }\n      }\n    }\n  }\n}\n// static variables\nSquareQRCodeEncoder.PENALTY_FOR_LEFTOVER_CAPACITY = [32, 16, 8, 4, 2, 1];\nSquareQRCodeEncoder.PENALTY_FOR_NEGATIVE_CAPACITY = 10000;\n\n/**\n * CLASS Turtle\n * This is used to draw a path at a point, drawing both the outline and any cutouts.\n *   data            the BooleanMatrix of encoded data, along with the format and version information\n *   style           injected into the SVG element\n *   offset          how many SVG pixels to offset the topleft corner\n *   x               the x coordinate of the pixel to start from\n *   y               the y coordinate of the pixel to start from\n * It is only exported to be used in tests.\n */\nclass Turtle {\n  constructor(data, style, offset, x, y) {\n    this.data = data;\n    this.dimension = data.width;\n    this.style = style || '';\n    this.offset = offset || 0;\n    this.start = { x, y };\n    this.visitedLocations = new Set();\n    this.generateElement();\n    this.clearVisited();\n  }\n\n  clearVisited() {\n    this.visitedLocations.forEach((location) => {\n      const point = this.fromLocation(location);\n      this.data.put(point.x, point.y, false);\n    });\n  }\n\n  get element() {\n    return this._element;\n  }\n\n  fromLocation(location) {\n    const x = location % this.dimension;\n    const y = (location - x) / this.dimension;\n    return { x, y };\n  }\n\n  generateElement() {\n    // build outside edges\n    const startX = this.start.x;\n    const startY = this.start.y;\n    const startEdge = 'left';\n    let x = startX;\n    let y = startY;\n    const outsideEdges = [];\n    outsideEdges.push(startEdge);\n    let edge = 'top';\n    const tops = new Set();\n    const rights = new Set();\n    const bottoms = new Set();\n    const lefts = new Set();\n    lefts.add(this.toLocation(x, y));\n    while (!(x === startX && y === startY && edge === startEdge)) {\n      outsideEdges.push(edge);\n      const location = this.toLocation(x, y);\n      this.visitLocation(location);\n      switch (edge) {\n        case 'top':\n          tops.add(location);\n          if (!this.hasPixelAtCoordinate(x + 1, y)) {\n            edge = 'right';\n          } else if (this.hasPixelAtCoordinate(x + 1, y - 1)) {\n            x += 1;\n            y -= 1;\n            edge = 'left';\n          } else {\n            x += 1;\n          }\n          break;\n        case 'right':\n          rights.add(location);\n          if (!this.hasPixelAtCoordinate(x, y + 1)) {\n            edge = 'bottom';\n          } else if (this.hasPixelAtCoordinate(x + 1, y + 1)) {\n            x += 1;\n            y += 1;\n            edge = 'top';\n          } else {\n            y += 1;\n          }\n          break;\n        case 'bottom':\n          bottoms.add(location);\n          if (!this.hasPixelAtCoordinate(x - 1, y)) {\n            edge = 'left';\n          } else if (this.hasPixelAtCoordinate(x - 1, y + 1)) {\n            x -= 1;\n            y += 1;\n            edge = 'right';\n          } else {\n            x -= 1;\n          }\n          break;\n        case 'left':\n          lefts.add(location);\n          if (!this.hasPixelAtCoordinate(x, y - 1)) {\n            edge = 'top';\n          } else if (this.hasPixelAtCoordinate(x - 1, y - 1)) {\n            x -= 1;\n            y -= 1;\n            edge = 'bottom';\n          } else {\n            y -= 1;\n          }\n          break;\n      }\n    }\n    // render outside edges\n    if (outsideEdges.length === 4) {\n      // if it only a single pixel, just make it a rectangle\n      this._element = `<rect ${this.style} x=\"${startX * 8 + this.offset}\" y=\"${\n        startY * 8 + this.offset\n      }\" width=\"8\" height=\"8\" rx=\"2\" ry=\"2\" />`;\n      return;\n    }\n    let d = [];\n    d.push(`M${startX * 8 + this.offset + 1} ${startY * 8 + this.offset + 4}`);\n    let next = outsideEdges[0];\n    outsideEdges.push(next);\n    let now;\n    let length = 0;\n    for (let i = 1; i < outsideEdges.length; i++) {\n      now = next;\n      next = outsideEdges[i];\n      if (now === next) {\n        length += 8;\n      } else if (now === 'top' && next === 'right') {\n        if (length !== 0) {\n          d.push(`h${length}`);\n          length = 0;\n        }\n        d.push('a3,3 0 0 1 3,3');\n      } else if (now === 'right' && next === 'bottom') {\n        if (length !== 0) {\n          d.push(`v${length}`);\n          length = 0;\n        }\n        d.push('a3,3 0 0 1 -3,3');\n      } else if (now === 'bottom' && next === 'left') {\n        if (length !== 0) {\n          d.push(`h-${length}`);\n          length = 0;\n        }\n        d.push('a3,3 0 0 1 -3,-3');\n      } else if (now === 'left' && next === 'top') {\n        if (length !== 0) {\n          d.push(`v-${length}`);\n          length = 0;\n        }\n        d.push('a3,3 0 0 1 3,-3');\n      } else if (now === 'top' && next === 'left') {\n        d.push(`h${length + 5}`);\n        length = 5;\n      } else if (now === 'right' && next === 'top') {\n        d.push(`v${length + 5}`);\n        length = 5;\n      } else if (now === 'bottom' && next === 'right') {\n        d.push(`h-${length + 5}`);\n        length = 5;\n      } else if (now === 'left' && next === 'bottom') {\n        d.push(`v-${length + 5}`);\n        length = 5;\n      }\n    }\n    if (length > 0) d.push(`v-${length}`);\n    d.push('z');\n    // determine the interior pixels\n    let interior = new Set();\n    let process = new Set();\n    this.visitedLocations.forEach((location) => {\n      if (!tops.has(location)) process.add(location - this.dimension);\n      if (!lefts.has(location)) process.add(location - 1);\n      if (!bottoms.has(location)) process.add(location + this.dimension);\n      if (!rights.has(location)) process.add(location + 1);\n    });\n    process = [...process].filter((location) => !this.hasVisitedLocation(location));\n    while (process.length > 0) {\n      let fanOutFrom = [];\n      process.forEach((location) => {\n        if (this.hasPixelAtLocation(location)) {\n          this.visitLocation(location);\n          fanOutFrom.push(location);\n        } else {\n          interior.add(location);\n        }\n      });\n      process = new Set();\n      fanOutFrom.forEach((location) => {\n        process.add(location - this.dimension);\n        process.add(location + this.dimension);\n        process.add(location + 1);\n        process.add(location - 1);\n      });\n      process = [...process].filter((location) => !this.hasVisitedLocation(location));\n    }\n    while (interior.size > 0) {\n      // determine and move to the top right\n      let topRight, topRightX, topRightY;\n      interior.forEach((location) => {\n        x = location % this.dimension;\n        y = (location - x) / this.dimension;\n        if (topRight === undefined || y < topRightY || (y === topRightY && x > topRightX)) {\n          topRight = location;\n          topRightX = x;\n          topRightY = y;\n        }\n      });\n      d.push(`M${topRightX * 8 + this.offset + 9} ${topRightY * 8 + this.offset - 1}`);\n      // move counterclockwise to remove interior\n      x = topRightX;\n      y = topRightY;\n      edge = 'top';\n      let distance = 5;\n      while (!(x === topRightX && y === topRightY && edge === 'right')) {\n        const location = this.toLocation(x, y);\n        interior.delete(location);\n        switch (edge) {\n          case 'top':\n            if (!this.hasPixelAtCoordinate(x - 1, y - 1)) {\n              if (distance > 0) d.push(`h-${distance}`);\n              d.push('a3,3 0 0 1 -3,-3');\n              distance = 0;\n              edge = 'right';\n              x--;\n              y--;\n            } else if (!this.hasPixelAtCoordinate(x - 1, y)) {\n              distance += 8;\n              x--;\n            } else {\n              d.push(`h-${distance + 5}`);\n              distance = 5;\n              edge = 'left';\n            }\n            break;\n          case 'left':\n            if (!this.hasPixelAtCoordinate(x - 1, y + 1)) {\n              if (distance > 0) d.push(`v${distance}`);\n              d.push('a3,3 0 0 1 -3,3');\n              distance = 0;\n              edge = 'top';\n              x--;\n              y++;\n            } else if (!this.hasPixelAtCoordinate(x, y + 1)) {\n              distance += 8;\n              y++;\n            } else {\n              d.push(`v${distance + 5}`);\n              distance = 5;\n              edge = 'bottom';\n            }\n            break;\n          case 'bottom':\n            if (!this.hasPixelAtCoordinate(x + 1, y + 1)) {\n              if (distance > 0) d.push(`h${distance}`);\n              d.push('a3,3 0 0 1 3,3');\n              distance = 0;\n              edge = 'left';\n              x++;\n              y++;\n            } else if (!this.hasPixelAtCoordinate(x + 1, y)) {\n              distance += 8;\n              x++;\n            } else {\n              d.push(`h${distance + 5}`);\n              distance = 5;\n              edge = 'right';\n            }\n            break;\n          case 'right':\n            if (!this.hasPixelAtCoordinate(x + 1, y - 1)) {\n              if (distance > 0) d.push(`v-${distance}`);\n              d.push('a3,3 0 0 1 3,-3');\n              distance = 0;\n              edge = 'bottom';\n              x++;\n              y--;\n            } else if (!this.hasPixelAtCoordinate(x, y - 1)) {\n              distance += 8;\n              y--;\n            } else {\n              d.push(`v-${distance + 5}`);\n              distance = 5;\n              edge = 'top';\n            }\n            break;\n        }\n      }\n      d.push(`v-${distance + 5}`);\n      d.push('z');\n    }\n    this._element = `<path ${this.style} d=\"${d.join('')}\" />`;\n  }\n\n  hasPixelAtCoordinate(x, y) {\n    if (x >= this.dimension || x < 0 || y >= this.dimension || y < 0) return false;\n    return this.data.at(x, y);\n  }\n\n  hasPixelAtLocation(location) {\n    const x = location % this.dimension;\n    const y = (location - x) / this.dimension;\n    return this.data.at(x, y);\n  }\n\n  hasVisitedCoordinate(x, y) {\n    return this.hasVisitedLocation(this.toLocation(x, y));\n  }\n\n  hasVisitedLocation(location) {\n    return this.visitedLocations.has(location);\n  }\n\n  toLocation(x, y) {\n    return this.dimension * y + x;\n  }\n\n  visitCoordinate(x, y) {\n    this.visitLocation(this.toLocation(x, y));\n  }\n\n  visitLocation(location) {\n    this.visitedLocations.add(location);\n  }\n}\n\nmodule.exports = { SquareQRCodeEncoder, Turtle };\n","const { Matrix } = require('./qrcode');\nconst { SquareQRCodeEncoder } = require('./square-qrcode');\n\nconst JEWEL_VALUE = Object.freeze({\n  AVAILABLE: 'AVAILABLE',\n  FALSE: 'FALSE',\n  TRUE: 'TRUE',\n  UNDECIDED: 'UNDECIDED',\n});\n\n/**\n * CLASS MarketQRCodeEncoder\n * This is used to generate an SVG for a QR code with a Square logo embedded in the center.\n * Contact #qrcode-design for design specifics\n * The following options can be specified:\n *   border          boolean (default false) whether to add a 6-pixel quiet zone\n *   invert          boolean (default false) light data on dark background when on\n *   monochrome      boolean (default false) whether to make it all black and white\n *                   This is useful for things like thermal printers that only print black\n *   styleBackground string to override style inserted in SVG background rectangle\n *   styleForeground string to override style inserted in SVG foreground data and patterns\n *   styleLogo       string to override style inserted in SVG for Square jewel\n */\nclass MarketQRCodeEncoder extends SquareQRCodeEncoder {\n  static getJewel() {\n    if (this.jewel !== undefined) return this.jewel;\n    const jewel = Matrix.withAll(9, 9, JEWEL_VALUE.UNDECIDED);\n    // corners are available\n    jewel.put(0, 0, JEWEL_VALUE.AVAILABLE);\n    jewel.put(0, 8, JEWEL_VALUE.AVAILABLE);\n    jewel.put(8, 0, JEWEL_VALUE.AVAILABLE);\n    jewel.put(8, 8, JEWEL_VALUE.AVAILABLE);\n    // forced false\n    for (let offset = 0; offset < 7; offset++) {\n      jewel.put(offset + 1, 0, JEWEL_VALUE.FALSE);\n      jewel.put(offset + 1, 8, JEWEL_VALUE.FALSE);\n      jewel.put(0, offset + 1, JEWEL_VALUE.FALSE);\n      jewel.put(8, offset + 1, JEWEL_VALUE.FALSE);\n    }\n    jewel.put(3, 3, JEWEL_VALUE.FALSE);\n    jewel.put(3, 5, JEWEL_VALUE.FALSE);\n    jewel.put(5, 3, JEWEL_VALUE.FALSE);\n    jewel.put(5, 5, JEWEL_VALUE.FALSE);\n    // forced true\n    for (let offset = 0; offset < 6; offset++) {\n      jewel.put(1 + offset, 1, JEWEL_VALUE.TRUE);\n      jewel.put(2 + offset, 7, JEWEL_VALUE.TRUE);\n      jewel.put(7, 1 + offset, JEWEL_VALUE.TRUE);\n      jewel.put(1, 2 + offset, JEWEL_VALUE.TRUE);\n    }\n    jewel.put(4, 4, JEWEL_VALUE.TRUE);\n    this.jewel = jewel;\n    return jewel;\n  }\n\n  initializeSvg() {\n    // generate the SVG\n    const offset = this.svgOffset;\n    const dimension = this.svgDimension;\n    const foregroundStyle = this.svgForegroundStyle;\n    const logoStyle = this.svgLogoStyle;\n    const source = [];\n    source.push(this.svgTag(dimension));\n    source.push('<defs>');\n    source.push(this.svgFinderPattern(foregroundStyle));\n    source.push(this.svgLogo(logoStyle));\n    source.push('</defs>');\n    source.push(this.svgBackground(this.svgBackgroundStyle, dimension, offset === 0 ? undefined : 16));\n    this.svgFinderPatterns(source, offset);\n    this.svgTurtle(source, foregroundStyle, offset);\n    // Square logo\n    const logoPosition = (this.code.dimension - 7) * 4 + offset;\n    source.push(`<use xlink:href=\"#s\" x=\"${logoPosition}\" y=\"${logoPosition}\" />`);\n    // finish\n    source.push('</svg>');\n    this.svg = source.join('');\n  }\n\n  initializeTurtleData() {\n    super.initializeTurtleData();\n    // clear out middle for Square logo\n    const start = (this.code.dimension - 9) / 2;\n    this.turtleData.fill(start, start + 1, 9, 7, false);\n    this.turtleData.fill(start + 1, start, 7, 1, false);\n    this.turtleData.fill(start + 1, start + 8, 7, 1, false);\n  }\n\n  get isMonochrome() {\n    const isMonochrome = this.code.options.monochrome;\n    if (isMonochrome === undefined) return false;\n    return isMonochrome;\n  }\n\n  get minimumVersion() {\n    // if the code version is 1, then the jewel would cut out the timing patterns\n    return 2;\n  }\n\n  penaltyForMatrix(matrix) {\n    const errorCorrectionCapacity = this.map.errorCorrectionCapacity;\n    const messedUpBytes = errorCorrectionCapacity.map(() => new Set());\n    // figure out the messed up bytes based on putting the jewel in the center\n    const jewel = this.constructor.getJewel();\n    const start = (matrix.content.length - 9) / 2;\n    for (let y = 0; y < 9; y++) {\n      const yData = y + start;\n      for (let x = 0; x < 9; x++) {\n        const xData = x + start;\n        const pixel = this.map.at(xData, yData);\n        if (this.map.isDataPixel(pixel)) {\n          switch (jewel.at(x, y)) {\n            case JEWEL_VALUE.FALSE:\n              if (matrix.at(xData, yData) !== false) messedUpBytes[pixel.chunk].add(pixel.byte);\n              break;\n            case JEWEL_VALUE.TRUE:\n              if (matrix.at(xData, yData) !== true) messedUpBytes[pixel.chunk].add(pixel.byte);\n              break;\n            case JEWEL_VALUE.UNDECIDED:\n              messedUpBytes[pixel.chunk].add(pixel.byte);\n              break;\n            default:\n          }\n        }\n      }\n    }\n    // calculate penalty based on how many messed up bytes\n    let penalty = 0;\n    errorCorrectionCapacity.forEach((capacity, index) => {\n      const leftoverCapacity = capacity - messedUpBytes[index].size * 2;\n      if (leftoverCapacity < 0) {\n        penalty += this.constructor.PENALTY_FOR_NEGATIVE_CAPACITY;\n      } else if (leftoverCapacity < this.constructor.PENALTY_FOR_LEFTOVER_CAPACITY.length) {\n        penalty += this.constructor.PENALTY_FOR_LEFTOVER_CAPACITY[leftoverCapacity];\n      }\n    });\n    // add additional penalties on trying to have the corners be filled\n    if (!matrix.at(start, start)) penalty++;\n    if (!matrix.at(start, start + 8)) penalty++;\n    if (!matrix.at(start + 8, start)) penalty++;\n    if (!matrix.at(start + 8, start + 8)) penalty++;\n    return penalty;\n  }\n\n  get svgForegroundStyle() {\n    const fromOptions = this.code.options.styleForeground;\n    if (fromOptions !== undefined) return fromOptions;\n    if (this.inverted) {\n      return this.isMonochrome ? 'fill=\"white\"' : 'fill=\"white\" fill-opacity=\"0.95\"';\n    } else {\n      return this.isMonochrome ? 'fill=\"black\"' : 'fill=\"black\" fill-opacity=\"0.9\"';\n    }\n  }\n\n  get svgLogoStyle() {\n    if (this.isMonochrome) return this.svgForegroundStyle;\n    const fromOptions = this.code.options.styleLogo;\n    if (fromOptions !== undefined) return fromOptions;\n    return 'fill=\"#006AFF\"';\n  }\n\n  svgLogo(style) {\n    return `<path id=\"s\" ${style} fill-rule=\"evenodd\" d=\"M 0 9.8 C 0 3.92 3.92 0 9.8 0 L 46.2 0 C 52.08 0 56 3.92 56 9.8 L 56 46.2 C 56 52.08 52.08 56 46.2 56 L 9.8 56 C 3.92 56 0 52.08 0 46.2 Z M 11.2 14 C 11.2 12.32 12.32 11.2 14 11.2 L 42 11.2 C 43.68 11.2 44.8 12.32 44.8 14 L 44.8 42 C 44.8 43.68 43.68 44.8 42 44.8 L 14 44.8 C 12.32 44.8 11.2 43.68 11.2 42 Z M 21 22.4 C 21 21.7 21.7 21 22.4 21 L 33.6 21 C 34.3 21 35 21.7 35 22.4 L 35 33.6 C 35 34.3 34.3 35 33.6 35 L 22.4 35 C 21.7 35 21 34.3 21 33.6 Z\" />`;\n  }\n\n  get svgOffset() {\n    return this.hasBorder ? 48 : 0;\n  }\n}\n\nmodule.exports = { MarketQRCodeEncoder, JEWEL_VALUE };\n","module.exports = {\n  ...require('./lib/market-qrcode'),\n  ...require('./lib/qrcode'),\n  ...require('./lib/square-qrcode'),\n};\n",":host {\n  display: block;\n\n  svg {\n    .foreground {\n      fill: var(--qrcode-normal-variant-foreground-color);\n    }\n\n    .background {\n      fill: var(--qrcode-normal-variant-background-color);\n    }\n\n    .logo {\n      fill: var(--qrcode-normal-variant-icon-color);\n    }\n  }\n\n  &([monochrome]) {\n    .foreground {\n      fill: var(--qrcode-monochrome-variant-foreground-color);\n    }\n\n    .background {\n      fill: var(--qrcode-monochrome-variant-background-color);\n    }\n\n    .logo {\n      fill: var(--qrcode-monochrome-variant-icon-color);\n    }\n  }\n\n  /* in cases where the size prop is set, the SVG should fill its container */\n  &([size]) {\n    svg {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n","import { MarketQRCodeEncoder } from '@square/qrcode-encoder';\nimport { Component, Host, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'market-qrcode',\n  styleUrl: 'market-qrcode.css',\n  shadow: true,\n})\nexport class MarketQrcode {\n  /**\n   * The URL or other content of the QR code. The QR code is generated using\n   * [@square/qrcode-encoder](https://github.com/squareup/qrcode/blob/master/packages/square-qrcode-encoder/README.md).\n   */\n  @Prop({ reflect: true }) readonly content: string = '';\n\n  /**\n   * By default, QR code size is dependent on the information being encoded.\n   * Use this property to set the QR code's height and width in pixels.\n   */\n  @Prop({ reflect: true }) readonly size: number;\n\n  /**\n   * Include a six data-pixel border around the QR code. When this attribute is\n   * present, the QR code will have a background color (default is transparent\n   * background).\n   */\n  @Prop() readonly border: boolean = false;\n\n  /**\n   * When true, QR code will render all elements in black & white.\n   */\n  @Prop({ reflect: true }) readonly monochrome: boolean = false;\n\n  render() {\n    const encoder = this.content\n      ? new MarketQRCodeEncoder(this.content, {\n          border: this.border,\n          styleBackground: this.border ? 'class=\"background\"' : '',\n          styleForeground: 'class=\"foreground\"',\n          styleLogo: 'class=\"logo\"',\n        })\n      : null;\n\n    const containerStyle =\n      this.size !== undefined\n        ? {\n            height: `${this.size}px`,\n            width: `${this.size}px`,\n          }\n        : null;\n\n    return (\n      <Host class=\"market-qrcode\" aria-hidden=\"true\">\n        <div innerHTML={encoder ? encoder.svg : ''} style={containerStyle}></div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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,GAAI,KAEV,CACE,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,KAEV,CACE,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,KAEV,CACE,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,KAEV,CACE,CAAC,EAAG,GAAI,IACR,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,EAAG,GAAI,IACR,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,EAAG,GAAI,IACR,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,EAAG,GAAI,IACR,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,KAEV,CAAC,CAAC,GAAI,GAAI,KACV,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,KAEV,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,KAEV,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,KAEV,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,EAAG,GAAI,IACR,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEX,CACE,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI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"}