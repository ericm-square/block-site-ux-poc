{"version":3,"names":["marketFilterCss","MarketFilterStyle0","MarketFilter","getFilterType","Promise","resolve","this","filterType","setFocus","value","focused","filterButtonEl","__setAndEmitListValue","listEl","reject","Error","prevValue","_a","marketFilterValueDidChange","emit","name","setDisplayValueFromSlottedElement","__setAndEmitDatePickerValue","datePickerEl","prevStartDate","selectedStartDate","prevEndDate","selectedEndDate","startDate","endDate","handleListSelectionChange","detail","setDisplayValueFromListEvent","prevSelectionValues","length","currentSelectionValues","rawValue","multiselect","dropdownInteraction","expanded","handleDateRangeChange","e","setDisplayValueFromDateEvent","handleDropdownOpened","target","el","defaultPrevented","marketFilterExpandedChanged","preventDefault","marketFilterOpened","handleDropdownClosed","marketFilterClosed","handleDefaultSlotChange","querySelector","getNamespacedTagFor","autoId","uuid","id","popoverId","interactive","initRowObservers","syncRowContent","row","selectedDisplayValue","getTextContentOfRowWithValue","rows","querySelectorAll","forEach","observer","MutationObserver","observe","characterData","subtree","marketRowTag","labelEl","textContent","displayValueEl","hasDisplayValue","Boolean","undefined","valueCount","split","Array","isArray","formatDate","start","Date","end","locale","startAndEndInTheSameYear","getFullYear","startDateString","toLocaleDateString","day","month","dateStyle","endDateString","_b","menuSelection","MENU_SLOT_NAMES","CUSTOM","presetMenuTextContent","_d","_c","shadowRoot","trim","currentSelections","connectedCallback","render","disabled","popoverPlacement","popoverStrategy","size","isMultiselectList","hasDatePicker","interaction","MarketDropdownTagName","MarketPopoverTagName","MarketFilterButtonTagName","h","Host","key","class","active","ref","slot","isValueEmpty","classNames","onSlotchange","bind"],"sources":["src/components/market-filter/market-filter.css?tag=market-filter&encapsulation=shadow","src/components/market-filter/market-filter.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  display: inline-block;\n}\n\n.dropdown,\n.dropdown > .filter-button {\n  width: 100%;\n}\n\n.date-popover {\n  max-width: unset;\n  max-height: unset;\n}\n","import type { Placement, PositioningStrategy } from '@popperjs/core';\nimport { Component, Element, Event, EventEmitter, Host, h, Listen, Method, Prop, State } from '@stencil/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { classNames } from '../../utils/classnames';\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { MENU_SLOT_NAMES } from '../market-date-picker/enums/menu';\nimport { TMarketDateRangeChangedEventDetail } from '../market-date-picker/events';\nimport { TMarketListSelectionsDidChangeEventDetail } from '../market-list/events';\nimport { isValueEmpty } from '../market-list/utils';\n\nimport {\n  TMarketFilterDateRangeValues,\n  TMarketFilterExpandedChangeEventDetail,\n  TMarketFilterValueDidChangeEventDetail,\n} from './events';\nimport { TMarketFilterType } from './types';\n\n/**\n * @slot label - Filter label, using `<label>`\n * @slot display-value - Overwrites the displayed value or feedback\n * @slot - The `<market-list>` or `<market-date-picker>` element\n */\n@Component({\n  tag: 'market-filter',\n  styleUrl: 'market-filter.css',\n  shadow: true,\n})\nexport class MarketFilter {\n  @Element() el: HTMLMarketFilterElement;\n\n  /**\n   * Filter name\n   */\n  @Prop() readonly name!: string;\n\n  /**\n   * Functionally and visually disables the filter button\n   */\n  @Prop() readonly disabled?: boolean;\n\n  /**\n   * Whether or not the button is focused\n   */\n  @Prop({ reflect: true, mutable: true }) focused: boolean = false;\n\n  /**\n   * String for setting filter button size\n   */\n  @Prop() readonly size: 'medium' | 'small' = 'medium';\n\n  /**\n   * Determines whether the filter is expanded or collapsed\n   */\n  @Prop({ mutable: true, reflect: true }) expanded: boolean = false;\n\n  /**\n   * Defines what types of interaction the dropdown should have\n   * (see `market-dropdown` docs for more granular explanation).\n   *\n   * If not defined and the list is multiselect,\n   * the dropdown interaction will be set to `persistent`\n   * so that the dropdown won't automatically close after selecting a row.\n   */\n  @Prop() readonly dropdownInteraction?: HTMLMarketDropdownElement['interaction'];\n\n  /**\n   * Configuration option for Popper.js (used to position `<market-popover>`).\n   * Describes the positioning strategy to use. By default, it is `bottom-start`.\n   * https://popper.js.org/docs/v2/constructors/#strategy\n   */\n  @Prop() readonly popoverPlacement?: Placement = 'bottom-start';\n\n  /**\n   * Configuration option for Popper.js (used to position `<market-popover>`).\n   * Describes the positioning strategy to use. By default, it is absolute. If\n   * your reference element is in a fixed container, use the fixed strategy.\n   * https://popper.js.org/docs/v2/constructors//#strategy\n   */\n  @Prop() readonly popoverStrategy: PositioningStrategy = 'absolute';\n\n  /**\n   * @deprecated\n   * **DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.\n   *\n   * Fired whenever the filter is closed\n   */\n  @Event({ bubbles: true, composed: true }) marketFilterClosed: EventEmitter<void>;\n\n  /**\n   * @deprecated\n   * **DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.\n   *\n   * Fired whenever the filter is opened\n   */\n  @Event({ bubbles: true, composed: true }) marketFilterOpened: EventEmitter<void>;\n\n  /**\n   * Fired whenever the dropdown is expanded/collapsed\n   */\n  @Event({ bubbles: true, composed: true })\n  marketFilterExpandedChanged: EventEmitter<TMarketFilterExpandedChangeEventDetail>;\n\n  /**\n   * Fired by the `marketListSelectionsDidChange` listener.\n   *\n   * @property {string} name - filter name, from `name` prop\n   * @property {string | string[] | TMarketFilterDateRangeValues } prevValue - list: selected value(s); date: `[<startDate>, <endDate>]`\n   * @property {string | string[] | TMarketFilterDateRangeValues } value - list: selected value(s); date: `[<startDate>, <endDate>]`\n   */\n  @Event() marketFilterValueDidChange: EventEmitter<TMarketFilterValueDidChangeEventDetail>;\n\n  /**\n   * Display value inferred from the `<market-list>` or `<market-date-picker>`\n   */\n  @State() selectedDisplayValue: string;\n\n  /**\n   * Reference to the market-filter-button\n   */\n  private filterButtonEl: HTMLMarketFilterButtonElement;\n\n  /**\n   * The selected row's raw value. This is only used for list types.\n   */\n  private rawValue: string | string[];\n\n  /**\n   * Filter type\n   */\n  private filterType: TMarketFilterType;\n\n  /**\n   * Reference to the slotted `<market-date-picker>`\n   */\n  private datePickerEl?: HTMLMarketDatePickerElement;\n\n  /**\n   * Reference to the slotted `<market-list>`\n   */\n  private listEl?: HTMLMarketListElement;\n\n  private popoverId: string;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   *\n   * Get the filter type\n   */\n  @Method()\n  async getFilterType(): Promise<TMarketFilterType> {\n    return Promise.resolve(this.filterType);\n  }\n\n  /**\n   * Toggle focus on the filter button\n   * @param {boolean} [value=true] whether or not focus will be applied or removed\n   * @returns {Promise<boolean>} whether or not the filter was focused or blurred\n   */\n  @Method()\n  async setFocus(value: boolean = true): Promise<boolean> {\n    this.focused = await this.filterButtonEl.setFocus(value);\n    return Promise.resolve(this.focused);\n  }\n\n  /**\n   * @private\n   * *INTERNAL*: Used by `market-filter-dropdown-menu` to reemit events from the cloned datepicker inside the dropdown.\n   *\n   * Sets the value of the list and emits `marketFilterValueDidChange`.\n   *\n   * @param value - The value to set for the market filter.\n   * @returns A promise that resolves when the value is set.\n   */\n  @Method()\n  async __setAndEmitListValue(value: string | string[]) {\n    if (!this.listEl) {\n      return Promise.reject(new Error('No list found.'));\n    }\n    const prevValue = this.listEl?.value;\n    this.listEl.value = value;\n    this.marketFilterValueDidChange.emit({\n      name: this.name,\n      prevValue: prevValue || null,\n      value,\n    });\n    this.setDisplayValueFromSlottedElement();\n    return Promise.resolve();\n  }\n\n  /**\n   * @private\n   * *INTERNAL*: Used by `market-filter-dropdown-menu` to reemit events from the cloned datepicker inside the dropdown.\n   *\n   * Sets the value of the date picker emits `marketFilterValueDidChange`.\n   *\n   * @param value - The new value for the date picker.\n   * @returns A promise that resolves when the value is set.\n   */\n  @Method()\n  async __setAndEmitDatePickerValue(value: TMarketFilterDateRangeValues) {\n    if (!this.datePickerEl) {\n      return Promise.reject(new Error('No date picker found.'));\n    }\n    const prevStartDate = this.datePickerEl.selectedStartDate;\n    const prevEndDate = this.datePickerEl.selectedEndDate;\n    const startDate = (value as TMarketFilterDateRangeValues)?.startDate;\n    const endDate = (value as TMarketFilterDateRangeValues)?.endDate;\n    this.datePickerEl.selectedStartDate = startDate;\n    this.datePickerEl.selectedEndDate = endDate;\n    this.marketFilterValueDidChange.emit({\n      name: this.name,\n      prevValue: {\n        startDate: prevStartDate,\n        endDate: prevEndDate,\n      },\n      value: {\n        startDate,\n        endDate,\n      },\n    });\n    this.setDisplayValueFromSlottedElement();\n    return Promise.resolve();\n  }\n\n  /**\n   * Handle `marketListSelectionsDidChange` emitted by `<market-list>`\n   */\n  @Listen('marketListSelectionsDidChange')\n  handleListSelectionChange({ detail }: CustomEvent<TMarketListSelectionsDidChangeEventDetail>) {\n    this.setDisplayValueFromListEvent(detail);\n\n    const prevValue =\n      detail.prevSelectionValues.length > 1 ? detail.prevSelectionValues : detail.prevSelectionValues[0];\n    const value = (() => {\n      if (detail.currentSelectionValues.length === 0) {\n        return null;\n      } else if (detail.currentSelectionValues.length === 1) {\n        return detail.currentSelectionValues[0] as string;\n      }\n      return detail.currentSelectionValues as string[];\n    })();\n    this.rawValue = value;\n\n    this.marketFilterValueDidChange.emit({\n      name: this.name,\n      prevValue: prevValue || null,\n      value,\n    });\n\n    /**\n     * If the `<market-list>` is mutliselect, prevent the dropdown from collapsing after a selection.\n     * Also prevent from closing when `dropdownInteraction` is provided.\n     */\n    if (!this.listEl?.multiselect && !this.dropdownInteraction) {\n      this.expanded = false;\n    }\n  }\n\n  /**\n   * Handle `marketDateRangeChanged` emitted by `<market-date-picker>`\n   */\n  @Listen('marketDateRangeChanged')\n  handleDateRangeChange(e: CustomEvent<TMarketDateRangeChangedEventDetail>) {\n    const { startDate, endDate, prevStartDate, prevEndDate } = e.detail;\n    this.setDisplayValueFromDateEvent(e);\n\n    this.marketFilterValueDidChange.emit({\n      name: this.name,\n      prevValue: {\n        startDate: prevStartDate,\n        endDate: prevEndDate,\n      },\n      value: {\n        startDate,\n        endDate,\n      },\n    });\n  }\n\n  /**\n   * Handle `marketDropdownOpened` emitted by `<market-dropdown>`\n   */\n  @Listen('marketDropdownOpened')\n  handleDropdownOpened(e: CustomEvent<void>) {\n    if (e.target !== this.el) return;\n\n    const { defaultPrevented } = this.marketFilterExpandedChanged.emit(true);\n    if (defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    // temporary handler for deprecated event\n    if (this.marketFilterOpened.emit().defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    if (!this.dropdownInteraction) {\n      this.expanded = true;\n    }\n  }\n\n  /**\n   * Handle `marketDropdownClosed` emitted by `<market-dropdown>`\n   */\n  @Listen('marketDropdownClosed')\n  handleDropdownClosed(e: CustomEvent<void>) {\n    if (e.target !== this.el) return;\n\n    const { defaultPrevented } = this.marketFilterExpandedChanged.emit(false);\n    if (defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    // temporary handler for deprecated event\n    if (this.marketFilterClosed.emit().defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    if (!this.dropdownInteraction) {\n      this.expanded = false;\n    }\n  }\n\n  /**\n   * Handle default slot changes\n   */\n  handleDefaultSlotChange() {\n    this.datePickerEl = this.el.querySelector(getNamespacedTagFor('market-date-picker'));\n    this.listEl = this.el.querySelector(getNamespacedTagFor('market-list'));\n    const autoId = `popover-${uuid()}`;\n\n    if (this.datePickerEl) {\n      if (!this.datePickerEl.id) {\n        this.datePickerEl.id = autoId;\n        this.popoverId = autoId;\n      } else {\n        this.popoverId = this.datePickerEl.id;\n      }\n      this.filterType = 'date';\n      this.setDisplayValueFromSlottedElement();\n    } else if (this.listEl) {\n      // make sure that the list is interactive\n      if (!this.listEl.interactive) {\n        this.listEl.interactive = true;\n      }\n      if (!this.listEl.id) {\n        this.listEl.id = autoId;\n        this.popoverId = autoId;\n      } else {\n        this.popoverId = this.listEl.id;\n      }\n      this.filterType = 'list';\n      this.setDisplayValueFromSlottedElement();\n    }\n  }\n\n  /**\n   * Listens to changes in row content to ensure that if the selected row's content\n   * is dynamically updated, those changes will be reflected to `selectedDisplayValue`.\n   */\n  private initRowObservers() {\n    /**\n     * Since onSlotchange only fires on changes to the slotted node itself,\n     * we need to use mutation observers to listen to changes to market-list's\n     * slotted market-rows: https://github.com/ionic-team/stencil/issues/232#issuecomment-397871813\n     */\n    const syncRowContent = (row: HTMLMarketRowElement) => {\n      if (typeof this.rawValue === 'string' && row.value === this.rawValue) {\n        this.selectedDisplayValue = this.getTextContentOfRowWithValue(row.value);\n      }\n    };\n\n    const rows: NodeListOf<HTMLMarketRowElement> = this.el.querySelectorAll(\n      `${getNamespacedTagFor('market-list')} ${getNamespacedTagFor('market-row')}`,\n    );\n    rows.forEach((row) => {\n      const observer = new MutationObserver(() => syncRowContent(row));\n      observer.observe(row, { characterData: true, subtree: true });\n    });\n  }\n\n  /**\n   * Gets the `.textContent` of the `<market-row>` with the provided `value`.\n   * This is only used for list types.\n   */\n  private getTextContentOfRowWithValue(value: typeof this.rawValue): string {\n    const marketRowTag = getNamespacedTagFor('market-row');\n    const labelEl = this.listEl.querySelector(`${marketRowTag}[value=\"${value}\"] [slot=\"label\"]`) as HTMLLabelElement;\n    return labelEl?.textContent;\n  }\n\n  /**\n   * Infers the value from the <market-list> or <market-date-picker>\n   */\n  private setDisplayValueFromSlottedElement() {\n    const displayValueEl = this.el.querySelector('[slot=\"display-value\"]');\n    const hasDisplayValue = Boolean(displayValueEl);\n    if (hasDisplayValue) {\n      this.selectedDisplayValue = displayValueEl.textContent;\n      return;\n    }\n\n    if (this.listEl) {\n      if (!this.listEl.value) {\n        this.selectedDisplayValue = undefined;\n        return;\n      }\n      this.rawValue = this.listEl.value;\n\n      if (this.listEl.multiselect) {\n        // if there's more than 1 value selected, get the count of selected values\n        const valueCount = (() => {\n          if (typeof this.listEl.value === 'string') {\n            return this.listEl.value.split(',').length;\n          } else if (Array.isArray(this.listEl.value)) {\n            return this.listEl.value.length;\n          }\n          return undefined; // this will skip the check below and print the raw `value` instead\n        })();\n        if (valueCount > 1) {\n          this.selectedDisplayValue = `${valueCount}`;\n          return;\n        }\n      }\n      // get the selected row's label textContent and set that as the display value\n      this.selectedDisplayValue = this.getTextContentOfRowWithValue(this.listEl.value);\n    } else if (this.datePickerEl) {\n      this.selectedDisplayValue = this.formatDate({\n        startDate: this.datePickerEl.selectedStartDate,\n        endDate: this.datePickerEl.selectedEndDate,\n      });\n    }\n  }\n\n  private formatDate({ startDate, endDate }: TMarketFilterDateRangeValues) {\n    const start = startDate ? new Date(startDate) : undefined;\n    const end = endDate ? new Date(endDate) : undefined;\n    if (!start && !end) {\n      return '';\n    }\n    const locale = this.datePickerEl.locale;\n\n    // If both dates exists and have the same year, show the year only on the end of the range.\n    const startAndEndInTheSameYear = Boolean(start && end && start.getFullYear() === end.getFullYear());\n    const startDateString =\n      start?.toLocaleDateString(\n        locale,\n        startAndEndInTheSameYear && end ? { day: 'numeric', month: 'numeric' } : { dateStyle: 'short' },\n      ) ?? '';\n    const endDateString = end?.toLocaleDateString(locale, { dateStyle: 'short' }) ?? '';\n\n    return `${startDateString}${endDateString ? `–${endDateString}` : ''}`;\n  }\n\n  /**\n   * Calculate the display value from the `marketDateRangeChanged` event of `<market-list>`\n   * Formatting is based on design guidelines:\n   * https://www.notion.so/marketdesignsystem/Filters-78885543b16446f49d5cfa98c6a56648#bb6aac7e29e04f98890ba32042ddae05\n   */\n  private setDisplayValueFromDateEvent(e: CustomEvent<TMarketDateRangeChangedEventDetail>) {\n    const { menuSelection } = e.detail;\n    if (menuSelection === MENU_SLOT_NAMES.CUSTOM) {\n      this.selectedDisplayValue = this.formatDate(e.detail);\n    } else if (menuSelection) {\n      // get the textContent of the menu item\n      const presetMenuTextContent = this.datePickerEl?.shadowRoot\n        ?.querySelector(`${getNamespacedTagFor('market-date-picker-menu')} slot[name=\"${menuSelection}\"]`)\n        ?.textContent?.trim();\n      this.selectedDisplayValue = presetMenuTextContent;\n    }\n  }\n\n  /**\n   * Calculate the display value from the `marketListSelectionsDidChange` event of `<market-list>`\n   */\n  private setDisplayValueFromListEvent({\n    currentSelectionValues,\n    currentSelections,\n  }: TMarketListSelectionsDidChangeEventDetail) {\n    const displayValueEl = this.el.querySelector('[slot=\"display-value\"]');\n    const hasDisplayValue = Boolean(displayValueEl);\n    if (hasDisplayValue) {\n      this.selectedDisplayValue = displayValueEl.textContent;\n      return;\n    }\n\n    if (!currentSelectionValues?.length) {\n      // no selection\n      this.selectedDisplayValue = undefined;\n    } else if (currentSelectionValues.length > 1) {\n      // multiple selections: display the count\n      this.selectedDisplayValue = `${currentSelectionValues.length}`;\n    } else {\n      // single selection: display the selected row's label contents\n      const labelEl = (currentSelections[0] as HTMLMarketRowElement).querySelector(\n        '[slot=\"label\"]',\n      ) as HTMLLabelElement;\n      this.selectedDisplayValue = labelEl.textContent;\n    }\n  }\n\n  connectedCallback() {\n    this.initRowObservers();\n    this.handleDefaultSlotChange();\n  }\n\n  render() {\n    const {\n      datePickerEl,\n      disabled,\n      dropdownInteraction,\n      expanded,\n      handleDefaultSlotChange,\n      listEl,\n      popoverId,\n      popoverPlacement,\n      popoverStrategy,\n      selectedDisplayValue,\n      size,\n    } = this;\n\n    /**\n     * Dropdown interaction will be set as 'persistent' by default if:\n     * - `dropdownInteraction` is not defined; or\n     * - `<market-list>` is provided and is `multiselect`; or\n     * - `<market-date-picker>` is provided\n     */\n    const isMultiselectList = listEl?.multiselect ?? false;\n    const hasDatePicker = Boolean(datePickerEl);\n    const interaction = dropdownInteraction ?? (hasDatePicker || isMultiselectList ? 'persistent' : undefined);\n\n    const MarketDropdownTagName = getNamespacedTagFor('market-dropdown');\n    const MarketPopoverTagName = getNamespacedTagFor('market-popover');\n    const MarketFilterButtonTagName = getNamespacedTagFor('market-filter-button');\n\n    return (\n      <Host class=\"market-filter\">\n        <MarketDropdownTagName\n          class=\"dropdown\"\n          disabled={disabled}\n          expanded={expanded}\n          interaction={interaction}\n          popoverPlacement={popoverPlacement}\n          popoverStrategy={popoverStrategy}\n        >\n          <MarketFilterButtonTagName\n            active={expanded}\n            class=\"filter-button\"\n            disabled={disabled}\n            ref={(el) => (this.filterButtonEl = el)}\n            slot=\"trigger\"\n            size={size}\n            popoverId={popoverId}\n          >\n            <slot name=\"label\"></slot>\n            {!isValueEmpty(selectedDisplayValue) && (\n              <span slot=\"feedback\">\n                <slot name=\"display-value\">{selectedDisplayValue}</slot>\n              </span>\n            )}\n          </MarketFilterButtonTagName>\n          <MarketPopoverTagName class={classNames({ 'date-popover': hasDatePicker })} slot=\"popover\" id={popoverId}>\n            <slot onSlotchange={handleDefaultSlotChange.bind(this)}></slot>\n            {/**\n             * @deprecated\n             * Use the default slot instead of `[slot=\"list\"]`\n             */}\n            <slot name=\"list\" onSlotchange={handleDefaultSlotChange.bind(this)}></slot>\n          </MarketPopoverTagName>\n        </MarketDropdownTagName>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}