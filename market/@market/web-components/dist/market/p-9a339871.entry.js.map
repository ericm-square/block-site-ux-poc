{"version":3,"names":["mapTag","setTag","objectProto","Object","prototype","hasOwnProperty","isEmpty","value","isArrayLike","isArray","splice","isBuffer","isTypedArray","isArguments","length","tag","getTag","size","isPrototype","baseKeys","key","call","isValidRowControl","el","isCheckboxElement","isRadioElement","isToggleElement","marketRowCss","MarketRowStyle0","MarketRow","selectedWatcher","newValue","selected","this","transient","_a","slottedControlEl","setSelection","disabledWatcher","setDisabled","hrefWatcher","variantWatcher","interactive","silentlySelect","Promise","resolve","silentlyDeselect","select","defaultPrevented","marketRowSelected","emit","deselect","marketRowDeselected","toggle","handleControlSlotChange","querySlots","disabled","slottedControlLabel","querySelector","textContent","setAttribute","setControlActive","_b","setActive","setControlHover","setHover","handleClick","e","target","tagName","getNamespacedTagFor","toUpperCase","togglable","type","pointerType","blur","handleKeydown","preventDefault","click","onDragStart","stopPropagation","dragHandlePosition","coords","detail","anchor","drag","Draggable","start","onDragMove","move","onDragEnd","end","destroy","checkIfSideTextIsPresent","sideTextEl","hasSideText","Boolean","querySelectorAll","find","determineRowRole","href","undefined","connectedCallback","variant","componentWillLoad","componentDidUpdate","classList","contains","asyncRequestAnimationFrame","remove","render","controlPosition","dragEnabled","tabindex","ContainerTag","ContainerTagAttrs","leadingControl","MarketDragHandleTagName","MarketIconTagName","drillIconName","ROW_SMALL_SIZE_CARET_ICON_ASSET","ROW_MEDIUM_SIZE_CARET_ICON_ASSET","h","Host","role","toString","class","classNames","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onClick","onKeydown","onMarketDragHandleDragStart","onMarketDragHandleDragMove","onMarketDragHandleDragEnd","assign","part","name","onSlotchange","hidden"],"sources":["../../node_modules/lodash-es/isEmpty.js","src/components/market-row/utils.ts","src/components/market-row/styles/market-row.css?tag=market-row&encapsulation=shadow","src/components/market-row/market-row.tsx"],"sourcesContent":["import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import { isCheckboxElement, isRadioElement, isToggleElement } from '../../utils/element-type-guard';\n\nimport { TMarketRowValidControlElement } from './types';\n\n/**\n * @param {unknown} el - Element to be checked\n * @returns {boolean} Whether `el` is a `TMarketRowValidControlElement`\n */\nexport function isValidRowControl(el: unknown): el is TMarketRowValidControlElement {\n  return isCheckboxElement(el) || isRadioElement(el) || isToggleElement(el);\n}\n","@import \"./market-row.base.css\";\n@import \"./market-row.drag.css\";\n@import \"./market-row.small.css\";\n@import \"./market-row.medium.css\";\n@import \"./market-row.interactive.css\";\n@import \"./market-row.destructive.css\";\n","import { Component, Element, Event, EventEmitter, h, Host, Method, Prop, State, Watch } from '@stencil/core';\nimport { isEmpty } from 'lodash-es';\nimport {\n  ROW_MEDIUM_SIZE_CARET_ICON_ASSET,\n  ROW_SMALL_SIZE_CARET_ICON_ASSET,\n} from '@market/market-theme/js/cjs/index.js';\n\nimport { classNames } from '../../utils/classnames';\nimport { Draggable } from '../../utils/draggable';\nimport { TMarketDragCoords } from '../../utils/gesture/types';\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { asyncRequestAnimationFrame } from '../../utils/raf';\n\nimport { TMarketRowDeselectedEventDetail, TMarketRowSelectedEventDetail } from './events';\nimport { TMarketRowValidControlElement } from './types';\nimport { isValidRowControl } from './utils';\n\n/**\n * @slot label - Text label for the row\n * @slot subtext - Secondary text for the row\n * @slot side-label - Additional text label to display on the side of the row\n * @slot side-subtext - Secondary text to display on the side of the row\n * @slot control - An interactive control, intended for use with `<market-checkbox>`, `<market-radio>`, or `<market-toggle>`.\n * The row's `selected` prop will set the control's selection state.\n * @slot leading-accessory - An icon set on the left side of the row; intended for use with `<market-accessory>`\n * @slot trailing-accessory - An icon set on the right side of the row; intended for use with `<market-accessory>`\n * @slot - Default slot can take any content, intended as an \"escape hatch\" for\n * scenarios where rows need to contain more complex HTML content stylable from\n * the light DOM.\n *\n * @part container - Wraps the main and side areas (see below). The outer padding of the row is specified on this element.\n * @part main - Wraps the label and subtext slots, can be used for styling purposes as needed.\n * @part side - Wraps the side-label and side-subtext slots, can be used for styling purposes as needed.\n * @part drag-handle - the drag handle when `dragEnabled` is true.\n */\n@Component({\n  tag: 'market-row',\n  shadow: {\n    delegatesFocus: true,\n  },\n  styleUrl: './styles/market-row.css',\n})\nexport class MarketRow {\n  @State() slottedControlEl: TMarketRowValidControlElement;\n\n  @Element() el: HTMLMarketRowElement;\n\n  /**\n   * Whether the row is currently selected. Used by `<market-list>` and `<market-select>`.\n   * Also sets the selection state for slotted controls (`<market-checkbox>`, `<market-radio>`, or `<market-toggle>`),\n   * if present.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  /**\n   * The value for the row.\n   */\n  @Prop({ reflect: true }) readonly value: string;\n\n  /**\n   * Whether the row is disabled.\n   * Also disables slotted controls (`<market-checkbox>`, `<market-radio>`, or `<market-toggle>`), if present.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * Determines the form factor of the row.\n   */\n  @Prop({ reflect: true }) readonly size: 'small' | 'medium' = 'medium';\n\n  /**\n   * Whether or not the row is interactive. Results in rows receiving hover\n   * and active styling when hovered/clicked.\n   *\n   * Automatically set to `true` when using the drill variant\n   * or passing in a slotted control (checkbox/radio/toggle).<br>\n   *\n   * Automatically be set to reflect the list's `interactive`\n   * value if used inside of `<market-list>`.\n   */\n  @Prop({ reflect: true, mutable: true }) interactive: boolean = false;\n\n  /**\n   * When set to `true`, rows will not persist selected state on click.\n   * Only takes effect when `interactive` is true.\n   */\n  @Prop({ reflect: true, mutable: true }) transient: boolean = false;\n\n  /**\n   * By default, row selection is toggled on click. There are some cases, such\n   * as selects, where we instead want the row to stay active on subsequent\n   * clicks. Setting `togglable` to `false` enables this behavior. Can be set\n   * by `<market-list>` and `<market-select>`.\n   */\n  @Prop() readonly togglable: boolean = true;\n\n  /**\n   * The style of row you want to use. The default is \"regular\", which allows\n   * you to optionally slot a checkbox, radio, or (in the future) toggle control.\n   * The other option is \"drill\", which functions more like a link that you can\n   * use to drill through a series of action card sets.\n   */\n  @Prop() readonly variant: 'regular' | 'drill' = 'regular';\n\n  /**\n   * Gives the row destructive styling.\n   */\n  @Prop({ reflect: true }) readonly destructive: boolean = false;\n\n  /**\n   * Whether the slotted control appears to the left or right of the main content.\n   */\n  @Prop() readonly controlPosition: 'trailing' | 'leading' = 'trailing';\n\n  /**\n   * A link that this row should navigate to on click.\n   * If this property is set, an anchor tag will be rendered.\n   */\n  @Prop() readonly href: string | undefined;\n\n  /**\n   * Specifies where to display the linked URL.\n   * Only applies when an `href` is provided.\n   * See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.\n   */\n  @Prop() readonly target: '_blank' | '_self' | '_parent' | '_top' | undefined;\n\n  /**\n   * Whether the row is drag & drop enabled\n   */\n  @Prop({ reflect: true }) readonly dragEnabled: boolean = false;\n\n  /**\n   * Whether the drag handle appears to the left or right.\n   */\n  @Prop({ reflect: true }) readonly dragHandlePosition: 'leading' | 'trailing' = 'trailing';\n\n  /**\n   * Fired whenever a row is selected.\n   */\n  @Event({ bubbles: true, composed: true }) marketRowSelected: EventEmitter<TMarketRowSelectedEventDetail>;\n\n  /**\n   * Fired whenever a row is deselected.\n   */\n  @Event({ bubbles: true, composed: true }) marketRowDeselected: EventEmitter<TMarketRowDeselectedEventDetail>;\n\n  @State() hasSideText: boolean = false;\n\n  /**\n   * If a control gets slotted in, set the value to match that of the row\n   */\n  @Watch('selected')\n  selectedWatcher(newValue: boolean) {\n    // prevent the row from being selected if it is transient\n    const selected = newValue && this.transient ? false : newValue;\n    this.selected = selected;\n    this.slottedControlEl?.setSelection(selected);\n  }\n\n  /**\n   * If a control gets slotted in, set the value to match that of the row\n   */\n  @Watch('disabled')\n  disabledWatcher(newValue: typeof this.disabled) {\n    this.slottedControlEl?.setDisabled(newValue);\n  }\n\n  /**\n   * Link rows should not be selectable\n   */\n  @Watch('href')\n  hrefWatcher(newValue: typeof this.href) {\n    if (!isEmpty(newValue)) {\n      this.transient = true;\n    }\n  }\n\n  /**\n   * Drill rows are interactive and transient\n   */\n  @Watch('variant')\n  variantWatcher(newValue: typeof this.variant) {\n    if (newValue === 'drill') {\n      this.interactive = true;\n      this.transient = true;\n    }\n  }\n\n  /**\n   * @internal\n   * @private\n   *\n   * Used for setting the selection state to true without emiting the `marketRowSelected` event.\n   */\n  @Method()\n  async silentlySelect() {\n    this.selected = true;\n    return Promise.resolve();\n  }\n\n  /**\n   * @internal\n   * @private\n   *\n   * Used for setting the selection state to false without emiting the `marketRowDeselected` event.\n   */\n  @Method()\n  async silentlyDeselect() {\n    this.selected = false;\n    return Promise.resolve();\n  }\n\n  /**\n   * @internal\n   * @private\n   *\n   * Used for manually setting `selected` to true. Generally speaking, it\n   * is preferable to avoid using this method and allow `market-row` to\n   * manage its own selection state based on user interaction. It should only\n   * be used for parent components that need to manage a group of rows, such as\n   * `market-list`.\n   */\n  @Method()\n  select() {\n    this.selected = true;\n    const { defaultPrevented } = this.marketRowSelected.emit({ value: this.value });\n    if (defaultPrevented) {\n      this.selected = false;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * @internal\n   * @private\n   *\n   * Used for manually setting `selected` to false. Generally speaking, it\n   * is preferable to avoid using this method and allow `market-row` to\n   * manage its own selection state based on user interaction. It should only\n   * be used for parent components that need to manage a group of rows, such as\n   * `market-list`.\n   */\n  @Method()\n  deselect() {\n    this.selected = false;\n    const { defaultPrevented } = this.marketRowDeselected.emit({ value: this.value });\n    if (defaultPrevented) {\n      this.selected = true;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * @internal\n   * @private\n   *\n   * Used for toggling the row's selected state.\n   */\n  @Method()\n  toggle() {\n    return !this.selected ? this.select() : this.deselect();\n  }\n\n  handleControlSlotChange() {\n    this.querySlots();\n    if (this.slottedControlEl) {\n      this.interactive = true;\n      this.selectedWatcher(this.selected);\n      this.disabledWatcher(this.disabled);\n\n      const slottedControlLabel = this.el.querySelector('[slot=\"label\"]')?.textContent;\n      this.slottedControlEl.setAttribute('aria-label', slottedControlLabel);\n    }\n  }\n\n  setControlActive(value: boolean) {\n    this.slottedControlEl?.setActive?.(value);\n  }\n\n  setControlHover(value: boolean) {\n    this.slottedControlEl?.setHover?.(value);\n  }\n\n  async handleClick(e: MouseEvent) {\n    // clicks on links inside row content shouldn't select the row itself\n    if (\n      this.disabled ||\n      this.transient ||\n      !this.interactive ||\n      (e.target as Element).tagName === 'A' ||\n      (e.target as Element).tagName === 'BUTTON' ||\n      (e.target as Element).tagName === getNamespacedTagFor('market-button').toUpperCase() ||\n      (e.target as Element).tagName === getNamespacedTagFor('market-link').toUpperCase()\n    ) {\n      return;\n    }\n\n    if (this.togglable) {\n      await this.toggle();\n    } else if (!this.selected) {\n      await this.select();\n    }\n\n    // fixes a weird UI bug where the row keeps its focus when clicked using a mouse\n    if (e.type === 'click' && (e as PointerEvent).pointerType === 'mouse') {\n      this.el.blur();\n    }\n  }\n\n  handleKeydown(e: KeyboardEvent) {\n    // don't intercept keydown of descendant elements\n    // e.g. when typing into nested input fields (gross)\n    if (e.target !== this.el) {\n      return;\n    }\n\n    if (e.key === ' ') {\n      e.preventDefault(); // spacebar should not scroll page\n      this.el.click();\n    }\n\n    if (e.key === 'Enter') {\n      this.el.click();\n    }\n  }\n\n  // market drag utils\n  drag: Draggable;\n\n  async onDragStart(e: CustomEvent<TMarketDragCoords>) {\n    e.stopPropagation();\n    const { el, dragHandlePosition } = this;\n    const coords: TMarketDragCoords = e.detail;\n    const anchor = dragHandlePosition === 'leading' ? 'left' : 'right';\n    const drag = new Draggable(el, { anchor });\n    this.drag = drag;\n    await drag.start(coords);\n  }\n\n  onDragMove(e: CustomEvent<TMarketDragCoords>) {\n    e.stopPropagation();\n    const coords: TMarketDragCoords = e.detail;\n    this.drag.move(coords);\n  }\n\n  async onDragEnd(e: CustomEvent<TMarketDragCoords>) {\n    e.stopPropagation();\n    const coords: TMarketDragCoords = e.detail;\n    await this.drag.end(coords);\n    this.drag.destroy();\n  }\n\n  checkIfSideTextIsPresent() {\n    const sideTextEl = this.el.querySelector('[slot=\"side-label\"], [slot=\"side-subtext\"]');\n    this.hasSideText = Boolean(sideTextEl);\n  }\n\n  querySlots() {\n    this.slottedControlEl = [...this.el.querySelectorAll('[slot=\"control\"]')].find(isValidRowControl);\n    this.checkIfSideTextIsPresent();\n  }\n\n  determineRowRole() {\n    // Should only apply an a11y role if the row acts as a button.\n    // Links are covered with the anchor tag, and option roles are handled by market-list.\n    if (this.interactive && this.transient && !this.href) {\n      return 'button';\n    }\n    return undefined;\n  }\n\n  connectedCallback() {\n    this.querySlots();\n\n    this.selectedWatcher(this.selected);\n    this.disabledWatcher(this.disabled);\n    this.hrefWatcher(this.href);\n    this.variantWatcher(this.variant);\n  }\n\n  componentWillLoad() {\n    this.checkIfSideTextIsPresent();\n  }\n\n  async componentDidUpdate() {\n    // remove preload class (used to manage slotted control transitions)\n    if (this.el.classList.contains('preload')) {\n      await asyncRequestAnimationFrame();\n      this.el.classList.remove('preload');\n    }\n  }\n\n  render() {\n    const {\n      controlPosition,\n      disabled,\n      href,\n      interactive,\n      selected,\n      slottedControlEl,\n      target,\n      variant,\n      hasSideText,\n      dragEnabled,\n      dragHandlePosition,\n      size,\n      el,\n    } = this;\n\n    /*\n     * a11y: If the row has a slotted control, we want to tab directly to the inner control element.\n     * Doing this ensures we don't violate the \"no nested interactive\" rule:\n     * https://dequeuniversity.com/rules/axe/html/4.3/nested-interactive\n     */\n    const tabindex = interactive && !disabled && !slottedControlEl ? '0' : null;\n    const ContainerTag: string = href === undefined ? 'div' : 'a';\n    const ContainerTagAttrs = ContainerTag === 'a' ? { href, target } : {};\n    ContainerTagAttrs['role'] = this.determineRowRole();\n    const leadingControl = controlPosition === 'leading';\n\n    const MarketDragHandleTagName = getNamespacedTagFor('market-drag-handle');\n    const MarketIconTagName = getNamespacedTagFor('market-icon');\n    const drillIconName = size === 'small' ? ROW_SMALL_SIZE_CARET_ICON_ASSET : ROW_MEDIUM_SIZE_CARET_ICON_ASSET;\n\n    return (\n      <Host\n        tabindex={tabindex}\n        aria-selected={el.role === 'option' ? Boolean(selected).toString() : undefined}\n        class={classNames('market-row', 'preload', {\n          'has-slotted-control': typeof slottedControlEl !== 'undefined',\n          'has-leading-control': leadingControl,\n        })}\n        onMouseDown={() => this.setControlActive(true)}\n        onMouseUp={() => this.setControlActive(false)}\n        onMouseEnter={() => this.setControlHover(true)}\n        onMouseLeave={() => this.setControlHover(false)}\n        onClick={(e: MouseEvent) => this.handleClick(e)}\n        onKeydown={(e: KeyboardEvent) => this.handleKeydown(e)}\n        onMarketDragHandleDragStart={(e: CustomEvent<TMarketDragCoords>) => this.onDragStart(e)}\n        onMarketDragHandleDragMove={(e: CustomEvent<TMarketDragCoords>) => this.onDragMove(e)}\n        onMarketDragHandleDragEnd={(e: CustomEvent<TMarketDragCoords>) => this.onDragEnd(e)}\n      >\n        <ContainerTag part=\"container\" class=\"container\" tabindex={tabindex} {...ContainerTagAttrs}>\n          {dragEnabled && dragHandlePosition === 'leading' && (\n            <MarketDragHandleTagName part=\"drag-handle\"></MarketDragHandleTagName>\n          )}\n          {leadingControl && <slot name=\"control\" onSlotchange={() => this.handleControlSlotChange()}></slot>}\n          <slot name=\"leading-accessory\"></slot>\n          <div class=\"main\" part=\"main\">\n            <slot name=\"label\"></slot>\n            <slot name=\"subtext\"></slot>\n            <slot></slot>\n          </div>\n          <div part=\"side\" class={classNames('side', { hidden: !hasSideText })}>\n            <slot name=\"side-label\" onSlotchange={() => this.checkIfSideTextIsPresent()}></slot>\n            <slot name=\"side-subtext\" onSlotchange={() => this.checkIfSideTextIsPresent()}></slot>\n          </div>\n          <slot name=\"trailing-accessory\"></slot>\n          {variant === 'regular' && !leadingControl && (\n            <slot name=\"control\" onSlotchange={() => this.handleControlSlotChange()}></slot>\n          )}\n\n          {variant === 'drill' && <MarketIconTagName class=\"drill-icon\" name={drillIconName}></MarketIconTagName>}\n          {dragEnabled && dragHandlePosition === 'trailing' && (\n            <MarketDragHandleTagName part=\"drag-handle\"></MarketDragHandleTagName>\n          )}\n        </ContainerTag>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}