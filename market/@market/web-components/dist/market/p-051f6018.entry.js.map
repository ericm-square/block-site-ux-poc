{"version":3,"names":["isDate","value","requiredArgs","arguments","Date","_typeof","Object","prototype","toString","call","isValid","dirtyDate","date","toDate","isNaN","Number","MILLISECONDS_IN_DAY","getUTCDayOfYear","timestamp","getTime","setUTCMonth","setUTCHours","startOfYearTimestamp","difference","Math","floor","addLeadingZeros","number","targetLength","sign","output","abs","length","formatters","y","token","signedYear","getUTCFullYear","year","M","month","getUTCMonth","String","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","fractionalSeconds","pow","formatters$3","dayPeriodEnum","am","pm","midnight","noon","morning","afternoon","evening","night","G","localize","era","width","ordinalNumber","unit","lightFormatters","Y","options","signedWeekYear","getUTCWeekYear","weekYear","twoDigitYear","R","isoWeekYear","getUTCISOWeekYear","u","Q","quarter","ceil","context","q","L","w","week","getUTCWeek","I","isoWeek","getUTCISOWeek","D","dayOfYear","E","dayOfWeek","getUTCDay","day","e","localDayOfWeek","weekStartsOn","c","i","isoDayOfWeek","hours","dayPeriod","toLowerCase","b","B","K","k","X","_localize","originalDate","_originalDate","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","dirtyDelimiter","absOffset","minutes","delimiter","formatters$1","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","format","dirtyFormatStr","_ref","_options$locale","_ref2","_ref3","_ref4","_options$firstWeekCon","_options$locale2","_options$locale2$opti","_defaultOptions$local","_defaultOptions$local2","_ref5","_ref6","_ref7","_options$weekStartsOn","_options$locale3","_options$locale3$opti","_defaultOptions$local3","_defaultOptions$local4","formatStr","defaultOptions","getDefaultOptions","locale","defaultLocale","firstWeekContainsDate","toInteger","RangeError","formatLong","getTimezoneOffsetInMilliseconds","utcDate","subMilliseconds","formatterOptions","result","match","map","substring","firstCharacter","longFormatter","longFormatters","join","cleanEscapedString","formatter","useAdditionalWeekYearTokens","isProtectedWeekYearToken","throwProtectedError","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","input","matched","replace","parseISO","argument","_options$additionalDi","additionalDigits","NaN","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","time","parseTime","timezone","parseTimezone","setFullYear","setHours","patterns","dateTimeDelimiter","timeZoneDelimiter","dateRegex","timeRegex","timezoneRegex","dateString","array","split","timeString","test","substr","exec","regex","RegExp","captures","parseInt","century","slice","isWeekDate","parseDateUnit","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","setUTCFullYear","max","parseTimeUnit","seconds","validateTime","millisecondsInHour","millisecondsInMinute","parseFloat","timezoneString","validateTimezone","fourthOfJanuaryDay","diff","setUTCDate","daysInMonths","isLeapYearIndex","_year","_hours","marketDatePickerInputDateCss","MarketDatePickerInputDateStyle0","MarketDateInputDate","emitInvalidStateEvent","this","marketDatePickerInputDateInvalidStateChanged","emit","invalid","isRangeInvalid","formatDate","isTime","dateObj","isInvalidDateForTimeframe","today","isFutureDate","timeframe","isBefore","isSameDay","isPastDate","isAfter","updateInvalidState","start","selectedStartDate","end","selectedEndDate","isDateInvalid","isDateDisabled","emitDateSetStart","ev","emitDateSet","emitDateSetEnd","emitDateSetStartTime","emitDateSetEndTime","timeInput","preventDefault","stopPropagation","target","valueToSubmit","withTime","realLength","marketDatePickerInputDateSet","componentWillRender","render","MarketInputTextTagName","getNamespacedTagFor","MarketBannerTagName","inputWrapper","type","key","class","dateInput","name","onInput","bind","htmlFor","range","Host","variant"],"sources":["../../node_modules/date-fns/esm/isDate/index.js","../../node_modules/date-fns/esm/isValid/index.js","../../node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","../../node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","../../node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","../../node_modules/date-fns/esm/_lib/format/formatters/index.js","../../node_modules/date-fns/esm/format/index.js","../../node_modules/date-fns/esm/parseISO/index.js","src/components/market-date-picker/subcomponents/market-date-picker-input-date/market-date-picker-input-date.css?tag=market-date-picker-input-date&encapsulation=shadow","src/components/market-date-picker/subcomponents/market-date-picker-input-date/market-date-picker-input-date.tsx"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\nvar formatters = {\n  // Year\n  y: function y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    var signedYear = date.getUTCFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function M(date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function d(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function a(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n      case 'aaa':\n        return dayPeriodEnumValue;\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function H(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function m(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function s(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function G(date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function y(date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function Y(date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function R(date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function u(date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function Q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function M(date, token, localize) {\n    var month = date.getUTCMonth();\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function L(date, token, localize) {\n    var month = date.getUTCMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function w(date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function I(date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function d(date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function D(date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function E(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function e(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function c(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function i(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function a(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function b(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function B(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function H(date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function K(date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function k(date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function m(date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function s(date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function X(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function x(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function O(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function z(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function t(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function T(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, dirtyDelimiter);\n}\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\nexport default formatters;","import isValid from \"../isValid/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, options) {\n  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n  var originalDate = toDate(dirtyDate);\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong);\n    }\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n    var firstCharacter = substring[0];\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n    var formatter = formatters[firstCharacter];\n    if (formatter) {\n      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));\n      }\n      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));\n      }\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n    return substring;\n  }).join('');\n  return result;\n}\nfunction cleanEscapedString(input) {\n  var matched = input.match(escapedStringRegExp);\n  if (!matched) {\n    return input;\n  }\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport default function parseISO(argument, options) {\n  var _options$additionalDi;\n  requiredArgs(1, arguments);\n  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n  var dateStrings = splitDateString(argument);\n  var date;\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time);\n    // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n  return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","/* TODO: Update to use design tokens */\n\n.input-row {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 8px;\n}\n\n.input-wrapper {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.start-input:not(:last-child) {\n  margin-right: 16px;\n}\n\n.time-input,\n.date-input {\n  box-sizing: border-box; /* Include padding and border in the total width */\n  width: 100%; /* Make sure both inputs take up the full width */\n  margin-top: 16px;\n}\n\n.market-banner {\n  margin-top: 16px;\n}\n","import { Component, Prop, h, Event, EventEmitter, Host, State, Watch } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../../../utils/namespace';\nimport { format, isAfter, isBefore, isSameDay, isValid, parseISO } from 'date-fns';\n\n@Component({\n  tag: 'market-date-picker-input-date',\n  styleUrl: 'market-date-picker-input-date.css',\n  shadow: true,\n})\nexport class MarketDateInputDate {\n  /**\n   * Whether to use date-time input instead of date-only\n   * @type {boolean}\n   * @memberof MarketDateInputDate\n   * @default false\n   */\n  @Prop() readonly withTime: boolean = false;\n\n  /**\n   * The selected start date\n   * @type {string}\n   * @memberof MarketDateInputDate\n   * @default ''\n   */\n  @Prop() readonly selectedStartDate: string;\n\n  /**\n   * The selected end date\n   * @type {string}\n   * @memberof MarketDateInputDate\n   * @default ''\n   */\n  @Prop() readonly selectedEndDate: string;\n\n  /**\n   * A function that returns true if the date should be disabled\n   * @type {(day: Date) => boolean}\n   * @memberof MarketDateInputDate\n   * @default undefined\n   */\n  @Prop() readonly isDateDisabled: (day: Date) => boolean;\n\n  /**\n   * The timeframe to restrict the date picker to\n   * @type {'past' | 'future' | 'present'}\n   * @memberof MarketDateInputDate\n   * @default 'present'\n   */\n  @Prop() readonly timeframe: 'past' | 'future' | 'present' = 'present';\n\n  /**\n   * Whether the date picker is a range\n   * @type {boolean}\n   * @memberof MarketDateInputDate\n   * @default false\n   */\n  @Prop() readonly range: boolean = false;\n\n  /**\n   * Emitted when the date picker date is selected\n   */\n  @Event() marketDatePickerInputDateSet: EventEmitter<{ date: string; input: string }>;\n\n  /**\n   * Emitted when the date selection changes validity\n   */\n  @Event() marketDatePickerInputDateInvalidStateChanged: EventEmitter<{ invalid: boolean }>;\n\n  /*\n   * Whether or not the entire date range is invalid\n   */\n  @State() isRangeInvalid: boolean = false;\n\n  @Watch('isRangeInvalid')\n  emitInvalidStateEvent() {\n    this.marketDatePickerInputDateInvalidStateChanged.emit({\n      invalid: this.isRangeInvalid,\n    });\n  }\n\n  private formatDate(date: string, isTime: boolean = false): string {\n    if (!date) return '';\n\n    const dateObj = new Date(date);\n    if (!isValid(dateObj)) {\n      return '';\n    }\n    const formatStr = isTime ? 'HH:mm' : 'yyyy-MM-dd';\n    return format(dateObj, formatStr);\n  }\n\n  private isInvalidDateForTimeframe(dateObj: Date, today: Date = new Date()): boolean {\n    const isFutureDate = this.timeframe === 'future' && isBefore(dateObj, today) && !isSameDay(dateObj, today);\n    const isPastDate = this.timeframe === 'past' && isAfter(dateObj, today) && !isSameDay(dateObj, today);\n\n    return isFutureDate || isPastDate;\n  }\n\n  private updateInvalidState(start: string = this.selectedStartDate, end: string = this.selectedEndDate): boolean {\n    if (this.isDateInvalid(start) || this.isDateInvalid(end)) {\n      this.isRangeInvalid = true;\n      return;\n    }\n\n    // If end date is set, check if start date is after end date\n    if (end) {\n      this.isRangeInvalid = isAfter(new Date(start), new Date(end));\n      return;\n    }\n\n    this.isRangeInvalid = false;\n  }\n\n  private isDateInvalid(date: string): boolean {\n    if (!date) return false;\n    const dateObj = parseISO(date);\n    if (dateObj.toString() === 'Invalid Date') return true;\n\n    if (this.isDateDisabled && this.isDateDisabled(dateObj)) {\n      return true;\n    }\n\n    if (this.timeframe && this.isInvalidDateForTimeframe(dateObj)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  emitDateSetStart(ev: Event) {\n    this.emitDateSet(ev, 'start');\n  }\n\n  emitDateSetEnd(ev: Event) {\n    this.emitDateSet(ev, 'end');\n  }\n\n  emitDateSetStartTime(ev: Event) {\n    this.emitDateSet(ev, 'start', true);\n  }\n\n  emitDateSetEndTime(ev: Event) {\n    this.emitDateSet(ev, 'end', true);\n  }\n\n  emitDateSet(ev: Event, input: string, timeInput: boolean = false) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    const { value } = ev.target as HTMLInputElement;\n    let valueToSubmit = value;\n\n    // If time is set, add the time to the date\n    if (this.withTime) {\n      if (timeInput) {\n        const date = this.formatDate(input === 'start' ? this.selectedStartDate : this.selectedEndDate);\n        const time = value.slice(0, 5);\n        valueToSubmit = `${date}T${time}`;\n      } else {\n        const time = this.formatDate(input === 'start' ? this.selectedStartDate : this.selectedEndDate, true);\n        valueToSubmit = `${value}T${time}`;\n      }\n    }\n    // Remove leading zeros\n    const realLength = valueToSubmit.replace(/^0+/, '').length;\n    // Only emit if length is (yyyy-mm-dd) or (yyyy-mm-ddThh:mm) and is valid\n    if (realLength === 10 || realLength === 16) {\n      this.marketDatePickerInputDateSet.emit({ date: valueToSubmit, input });\n    }\n  }\n\n  componentWillRender() {\n    this.updateInvalidState();\n  }\n\n  render() {\n    const MarketInputTextTagName = getNamespacedTagFor('market-input-text');\n    const MarketBannerTagName = getNamespacedTagFor('market-banner');\n\n    const inputWrapper = (type) => (\n      <div class={`input-wrapper ${type === 'start' ? 'start-input' : ''}`}>\n        {type === 'start' && dateInput('start')}\n        {type === 'start' && this.withTime && timeInput('start')}\n        {type === 'end' && dateInput('end')}\n        {type === 'end' && this.withTime && timeInput('end')}\n      </div>\n    );\n\n    const dateInput = (type: string) => (\n      <MarketInputTextTagName\n        type=\"date\"\n        class={`date-input`}\n        name={`date-picker-date-${type}`}\n        invalid={this.isRangeInvalid}\n        value={this.formatDate(type === 'start' ? this.selectedStartDate : this.selectedEndDate)}\n        onInput={type === 'start' ? this.emitDateSetStart.bind(this) : this.emitDateSetEnd.bind(this)}\n      >\n        <label htmlFor={`date-picker-${type}`}>\n          <slot name={`${type}-date`}>{this.range && (type === 'start' ? 'Start' : 'End')} Date</slot>\n        </label>\n      </MarketInputTextTagName>\n    );\n\n    const timeInput = (type: string) => (\n      <MarketInputTextTagName\n        type=\"time\"\n        class={`time-input`}\n        name={`date-picker-time-${type}`}\n        invalid={this.isRangeInvalid}\n        value={this.formatDate(type === 'start' ? this.selectedStartDate : this.selectedEndDate, true)}\n        onInput={type === 'start' ? this.emitDateSetStartTime.bind(this) : this.emitDateSetEndTime.bind(this)}\n      >\n        <label htmlFor={`date-picker-time-${type}`}>\n          <slot name={`${type}-time`}>{this.range && (type === 'start' ? 'Start' : 'End')} Time</slot>\n        </label>\n      </MarketInputTextTagName>\n    );\n\n    return (\n      <Host class=\"market-date-picker-input-date\">\n        {this.range ? (\n          <div class=\"input-row\">\n            {inputWrapper('start')}\n            {inputWrapper('end')}\n          </div>\n        ) : (\n          <div>{inputWrapper('start')}</div>\n        )}\n        {this.isRangeInvalid && (\n          <MarketBannerTagName variant=\"critical\">\n            <slot name=\"range-error\">Enter a valid date range</slot>\n          </MarketBannerTagName>\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":"uUAkCe,SAASA,EAAOC,GAC7BC,EAAa,EAAGC,WAChB,OAAOF,aAAiBG,MAAQC,EAAQJ,KAAW,UAAYK,OAAOC,UAAUC,SAASC,KAAKR,KAAW,eAC3G,CCHe,SAASS,EAAQC,GAC9BT,EAAa,EAAGC,WAChB,IAAKH,EAAOW,WAAqBA,IAAc,SAAU,CACvD,OAAO,KACX,CACE,IAAIC,EAAOC,EAAOF,GAClB,OAAQG,MAAMC,OAAOH,GACvB,CCvCA,IAAII,EAAsB,MACX,SAASC,EAAgBN,GACtCT,EAAa,EAAGC,WAChB,IAAIS,EAAOC,EAAOF,GAClB,IAAIO,EAAYN,EAAKO,UACrBP,EAAKQ,YAAY,EAAG,GACpBR,EAAKS,YAAY,EAAG,EAAG,EAAG,GAC1B,IAAIC,EAAuBV,EAAKO,UAChC,IAAII,EAAaL,EAAYI,EAC7B,OAAOE,KAAKC,MAAMF,EAAaP,GAAuB,CACxD,CCZe,SAASU,EAAgBC,EAAQC,GAC9C,IAAIC,EAAOF,EAAS,EAAI,IAAM,GAC9B,IAAIG,EAASN,KAAKO,IAAIJ,GAAQnB,WAC9B,MAAOsB,EAAOE,OAASJ,EAAc,CACnCE,EAAS,IAAMA,CACnB,CACE,OAAOD,EAAOC,CAChB,CCMA,IAAIG,EAAa,CAEfC,EAAG,SAASA,EAAEtB,EAAMuB,GAUlB,IAAIC,EAAaxB,EAAKyB,iBAEtB,IAAIC,EAAOF,EAAa,EAAIA,EAAa,EAAIA,EAC7C,OAAOV,EAAgBS,IAAU,KAAOG,EAAO,IAAMA,EAAMH,EAAMH,OACrE,EAEEO,EAAG,SAASA,EAAE3B,EAAMuB,GAClB,IAAIK,EAAQ5B,EAAK6B,cACjB,OAAON,IAAU,IAAMO,OAAOF,EAAQ,GAAKd,EAAgBc,EAAQ,EAAG,EAC1E,EAEEG,EAAG,SAASA,EAAE/B,EAAMuB,GAClB,OAAOT,EAAgBd,EAAKgC,aAAcT,EAAMH,OACpD,EAEEa,EAAG,SAASA,EAAEjC,EAAMuB,GAClB,IAAIW,EAAqBlC,EAAKmC,cAAgB,IAAM,EAAI,KAAO,KAC/D,OAAQZ,GACN,IAAK,IACL,IAAK,KACH,OAAOW,EAAmBE,cAC5B,IAAK,MACH,OAAOF,EACT,IAAK,QACH,OAAOA,EAAmB,GAC5B,IAAK,OACL,QACE,OAAOA,IAAuB,KAAO,OAAS,OAEtD,EAEEG,EAAG,SAASA,EAAErC,EAAMuB,GAClB,OAAOT,EAAgBd,EAAKmC,cAAgB,IAAM,GAAIZ,EAAMH,OAChE,EAEEkB,EAAG,SAASA,EAAEtC,EAAMuB,GAClB,OAAOT,EAAgBd,EAAKmC,cAAeZ,EAAMH,OACrD,EAEEmB,EAAG,SAASA,EAAEvC,EAAMuB,GAClB,OAAOT,EAAgBd,EAAKwC,gBAAiBjB,EAAMH,OACvD,EAEEqB,EAAG,SAASA,EAAEzC,EAAMuB,GAClB,OAAOT,EAAgBd,EAAK0C,gBAAiBnB,EAAMH,OACvD,EAEEuB,EAAG,SAASA,EAAE3C,EAAMuB,GAClB,IAAIqB,EAAiBrB,EAAMH,OAC3B,IAAIyB,EAAe7C,EAAK8C,qBACxB,IAAIC,EAAoBnC,KAAKC,MAAMgC,EAAejC,KAAKoC,IAAI,GAAIJ,EAAiB,IAChF,OAAO9B,EAAgBiC,EAAmBxB,EAAMH,OACpD,GAEA,MAAA6B,EAAe5B,ECxEf,IAAI6B,EAAgB,CAClBC,GAAI,KACJC,GAAI,KACJC,SAAU,WACVC,KAAM,OACNC,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,MAAO,SAgDT,IAAIrC,EAAa,CAEfsC,EAAG,SAASA,EAAE3D,EAAMuB,EAAOqC,GACzB,IAAIC,EAAM7D,EAAKyB,iBAAmB,EAAI,EAAI,EAC1C,OAAQF,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOqC,EAASC,IAAIA,EAAK,CACvBC,MAAO,gBAGX,IAAK,QACH,OAAOF,EAASC,IAAIA,EAAK,CACvBC,MAAO,WAGX,IAAK,OACL,QACE,OAAOF,EAASC,IAAIA,EAAK,CACvBC,MAAO,SAGjB,EAEExC,EAAG,SAASA,EAAEtB,EAAMuB,EAAOqC,GAEzB,GAAIrC,IAAU,KAAM,CAClB,IAAIC,EAAaxB,EAAKyB,iBAEtB,IAAIC,EAAOF,EAAa,EAAIA,EAAa,EAAIA,EAC7C,OAAOoC,EAASG,cAAcrC,EAAM,CAClCsC,KAAM,QAEd,CACI,OAAOC,EAAgB3C,EAAEtB,EAAMuB,EACnC,EAEE2C,EAAG,SAASA,EAAElE,EAAMuB,EAAOqC,EAAUO,GACnC,IAAIC,EAAiBC,EAAerE,EAAMmE,GAE1C,IAAIG,EAAWF,EAAiB,EAAIA,EAAiB,EAAIA,EAGzD,GAAI7C,IAAU,KAAM,CAClB,IAAIgD,EAAeD,EAAW,IAC9B,OAAOxD,EAAgByD,EAAc,EAC3C,CAGI,GAAIhD,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAcO,EAAU,CACtCN,KAAM,QAEd,CAGI,OAAOlD,EAAgBwD,EAAU/C,EAAMH,OAC3C,EAEEoD,EAAG,SAASA,EAAExE,EAAMuB,GAClB,IAAIkD,EAAcC,EAAkB1E,GAGpC,OAAOc,EAAgB2D,EAAalD,EAAMH,OAC9C,EAUEuD,EAAG,SAASA,EAAE3E,EAAMuB,GAClB,IAAIG,EAAO1B,EAAKyB,iBAChB,OAAOX,EAAgBY,EAAMH,EAAMH,OACvC,EAEEwD,EAAG,SAASA,EAAE5E,EAAMuB,EAAOqC,GACzB,IAAIiB,EAAUjE,KAAKkE,MAAM9E,EAAK6B,cAAgB,GAAK,GACnD,OAAQN,GAEN,IAAK,IACH,OAAOO,OAAO+C,GAEhB,IAAK,KACH,OAAO/D,EAAgB+D,EAAS,GAElC,IAAK,KACH,OAAOjB,EAASG,cAAcc,EAAS,CACrCb,KAAM,YAGV,IAAK,MACH,OAAOJ,EAASiB,QAAQA,EAAS,CAC/Bf,MAAO,cACPiB,QAAS,eAGb,IAAK,QACH,OAAOnB,EAASiB,QAAQA,EAAS,CAC/Bf,MAAO,SACPiB,QAAS,eAGb,IAAK,OACL,QACE,OAAOnB,EAASiB,QAAQA,EAAS,CAC/Bf,MAAO,OACPiB,QAAS,eAGnB,EAEEC,EAAG,SAASA,EAAEhF,EAAMuB,EAAOqC,GACzB,IAAIiB,EAAUjE,KAAKkE,MAAM9E,EAAK6B,cAAgB,GAAK,GACnD,OAAQN,GAEN,IAAK,IACH,OAAOO,OAAO+C,GAEhB,IAAK,KACH,OAAO/D,EAAgB+D,EAAS,GAElC,IAAK,KACH,OAAOjB,EAASG,cAAcc,EAAS,CACrCb,KAAM,YAGV,IAAK,MACH,OAAOJ,EAASiB,QAAQA,EAAS,CAC/Bf,MAAO,cACPiB,QAAS,eAGb,IAAK,QACH,OAAOnB,EAASiB,QAAQA,EAAS,CAC/Bf,MAAO,SACPiB,QAAS,eAGb,IAAK,OACL,QACE,OAAOnB,EAASiB,QAAQA,EAAS,CAC/Bf,MAAO,OACPiB,QAAS,eAGnB,EAEEpD,EAAG,SAASA,EAAE3B,EAAMuB,EAAOqC,GACzB,IAAIhC,EAAQ5B,EAAK6B,cACjB,OAAQN,GACN,IAAK,IACL,IAAK,KACH,OAAO0C,EAAgBtC,EAAE3B,EAAMuB,GAEjC,IAAK,KACH,OAAOqC,EAASG,cAAcnC,EAAQ,EAAG,CACvCoC,KAAM,UAGV,IAAK,MACH,OAAOJ,EAAShC,MAAMA,EAAO,CAC3BkC,MAAO,cACPiB,QAAS,eAGb,IAAK,QACH,OAAOnB,EAAShC,MAAMA,EAAO,CAC3BkC,MAAO,SACPiB,QAAS,eAGb,IAAK,OACL,QACE,OAAOnB,EAAShC,MAAMA,EAAO,CAC3BkC,MAAO,OACPiB,QAAS,eAGnB,EAEEE,EAAG,SAASA,EAAEjF,EAAMuB,EAAOqC,GACzB,IAAIhC,EAAQ5B,EAAK6B,cACjB,OAAQN,GAEN,IAAK,IACH,OAAOO,OAAOF,EAAQ,GAExB,IAAK,KACH,OAAOd,EAAgBc,EAAQ,EAAG,GAEpC,IAAK,KACH,OAAOgC,EAASG,cAAcnC,EAAQ,EAAG,CACvCoC,KAAM,UAGV,IAAK,MACH,OAAOJ,EAAShC,MAAMA,EAAO,CAC3BkC,MAAO,cACPiB,QAAS,eAGb,IAAK,QACH,OAAOnB,EAAShC,MAAMA,EAAO,CAC3BkC,MAAO,SACPiB,QAAS,eAGb,IAAK,OACL,QACE,OAAOnB,EAAShC,MAAMA,EAAO,CAC3BkC,MAAO,OACPiB,QAAS,eAGnB,EAEEG,EAAG,SAASA,EAAElF,EAAMuB,EAAOqC,EAAUO,GACnC,IAAIgB,EAAOC,EAAWpF,EAAMmE,GAC5B,GAAI5C,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAcoB,EAAM,CAClCnB,KAAM,QAEd,CACI,OAAOlD,EAAgBqE,EAAM5D,EAAMH,OACvC,EAEEiE,EAAG,SAASA,EAAErF,EAAMuB,EAAOqC,GACzB,IAAI0B,EAAUC,EAAcvF,GAC5B,GAAIuB,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAcuB,EAAS,CACrCtB,KAAM,QAEd,CACI,OAAOlD,EAAgBwE,EAAS/D,EAAMH,OAC1C,EAEEW,EAAG,SAASA,EAAE/B,EAAMuB,EAAOqC,GACzB,GAAIrC,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAc/D,EAAKgC,aAAc,CAC/CgC,KAAM,QAEd,CACI,OAAOC,EAAgBlC,EAAE/B,EAAMuB,EACnC,EAEEiE,EAAG,SAASA,EAAExF,EAAMuB,EAAOqC,GACzB,IAAI6B,EAAYpF,EAAgBL,GAChC,GAAIuB,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAc0B,EAAW,CACvCzB,KAAM,aAEd,CACI,OAAOlD,EAAgB2E,EAAWlE,EAAMH,OAC5C,EAEEsE,EAAG,SAASA,EAAE1F,EAAMuB,EAAOqC,GACzB,IAAI+B,EAAY3F,EAAK4F,YACrB,OAAQrE,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOqC,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,cACPiB,QAAS,eAGb,IAAK,QACH,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,SACPiB,QAAS,eAGb,IAAK,SACH,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,QACPiB,QAAS,eAGb,IAAK,OACL,QACE,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,OACPiB,QAAS,eAGnB,EAEEe,EAAG,SAASA,EAAE9F,EAAMuB,EAAOqC,EAAUO,GACnC,IAAIwB,EAAY3F,EAAK4F,YACrB,IAAIG,GAAkBJ,EAAYxB,EAAQ6B,aAAe,GAAK,GAAK,EACnE,OAAQzE,GAEN,IAAK,IACH,OAAOO,OAAOiE,GAEhB,IAAK,KACH,OAAOjF,EAAgBiF,EAAgB,GAEzC,IAAK,KACH,OAAOnC,EAASG,cAAcgC,EAAgB,CAC5C/B,KAAM,QAEV,IAAK,MACH,OAAOJ,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,cACPiB,QAAS,eAGb,IAAK,QACH,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,SACPiB,QAAS,eAGb,IAAK,SACH,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,QACPiB,QAAS,eAGb,IAAK,OACL,QACE,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,OACPiB,QAAS,eAGnB,EAEEkB,EAAG,SAASA,EAAEjG,EAAMuB,EAAOqC,EAAUO,GACnC,IAAIwB,EAAY3F,EAAK4F,YACrB,IAAIG,GAAkBJ,EAAYxB,EAAQ6B,aAAe,GAAK,GAAK,EACnE,OAAQzE,GAEN,IAAK,IACH,OAAOO,OAAOiE,GAEhB,IAAK,KACH,OAAOjF,EAAgBiF,EAAgBxE,EAAMH,QAE/C,IAAK,KACH,OAAOwC,EAASG,cAAcgC,EAAgB,CAC5C/B,KAAM,QAEV,IAAK,MACH,OAAOJ,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,cACPiB,QAAS,eAGb,IAAK,QACH,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,SACPiB,QAAS,eAGb,IAAK,SACH,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,QACPiB,QAAS,eAGb,IAAK,OACL,QACE,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,OACPiB,QAAS,eAGnB,EAEEmB,EAAG,SAASA,EAAElG,EAAMuB,EAAOqC,GACzB,IAAI+B,EAAY3F,EAAK4F,YACrB,IAAIO,EAAeR,IAAc,EAAI,EAAIA,EACzC,OAAQpE,GAEN,IAAK,IACH,OAAOO,OAAOqE,GAEhB,IAAK,KACH,OAAOrF,EAAgBqF,EAAc5E,EAAMH,QAE7C,IAAK,KACH,OAAOwC,EAASG,cAAcoC,EAAc,CAC1CnC,KAAM,QAGV,IAAK,MACH,OAAOJ,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,cACPiB,QAAS,eAGb,IAAK,QACH,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,SACPiB,QAAS,eAGb,IAAK,SACH,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,QACPiB,QAAS,eAGb,IAAK,OACL,QACE,OAAOnB,EAASiC,IAAIF,EAAW,CAC7B7B,MAAO,OACPiB,QAAS,eAGnB,EAEE9C,EAAG,SAASA,EAAEjC,EAAMuB,EAAOqC,GACzB,IAAIwC,EAAQpG,EAAKmC,cACjB,IAAID,EAAqBkE,EAAQ,IAAM,EAAI,KAAO,KAClD,OAAQ7E,GACN,IAAK,IACL,IAAK,KACH,OAAOqC,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,cACPiB,QAAS,eAEb,IAAK,MACH,OAAOnB,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,cACPiB,QAAS,eACRuB,cACL,IAAK,QACH,OAAO1C,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,SACPiB,QAAS,eAEb,IAAK,OACL,QACE,OAAOnB,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,OACPiB,QAAS,eAGnB,EAEEwB,EAAG,SAASA,EAAEvG,EAAMuB,EAAOqC,GACzB,IAAIwC,EAAQpG,EAAKmC,cACjB,IAAID,EACJ,GAAIkE,IAAU,GAAI,CAChBlE,EAAqBgB,EAAcI,IACzC,MAAW,GAAI8C,IAAU,EAAG,CACtBlE,EAAqBgB,EAAcG,QACzC,KAAW,CACLnB,EAAqBkE,EAAQ,IAAM,EAAI,KAAO,IACpD,CACI,OAAQ7E,GACN,IAAK,IACL,IAAK,KACH,OAAOqC,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,cACPiB,QAAS,eAEb,IAAK,MACH,OAAOnB,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,cACPiB,QAAS,eACRuB,cACL,IAAK,QACH,OAAO1C,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,SACPiB,QAAS,eAEb,IAAK,OACL,QACE,OAAOnB,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,OACPiB,QAAS,eAGnB,EAEEyB,EAAG,SAASA,EAAExG,EAAMuB,EAAOqC,GACzB,IAAIwC,EAAQpG,EAAKmC,cACjB,IAAID,EACJ,GAAIkE,GAAS,GAAI,CACflE,EAAqBgB,EAAcO,OACzC,MAAW,GAAI2C,GAAS,GAAI,CACtBlE,EAAqBgB,EAAcM,SACzC,MAAW,GAAI4C,GAAS,EAAG,CACrBlE,EAAqBgB,EAAcK,OACzC,KAAW,CACLrB,EAAqBgB,EAAcQ,KACzC,CACI,OAAQnC,GACN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOqC,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,cACPiB,QAAS,eAEb,IAAK,QACH,OAAOnB,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,SACPiB,QAAS,eAEb,IAAK,OACL,QACE,OAAOnB,EAASyC,UAAUnE,EAAoB,CAC5C4B,MAAO,OACPiB,QAAS,eAGnB,EAEE1C,EAAG,SAASA,EAAErC,EAAMuB,EAAOqC,GACzB,GAAIrC,IAAU,KAAM,CAClB,IAAI6E,EAAQpG,EAAKmC,cAAgB,GACjC,GAAIiE,IAAU,EAAGA,EAAQ,GACzB,OAAOxC,EAASG,cAAcqC,EAAO,CACnCpC,KAAM,QAEd,CACI,OAAOC,EAAgB5B,EAAErC,EAAMuB,EACnC,EAEEe,EAAG,SAASA,EAAEtC,EAAMuB,EAAOqC,GACzB,GAAIrC,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAc/D,EAAKmC,cAAe,CAChD6B,KAAM,QAEd,CACI,OAAOC,EAAgB3B,EAAEtC,EAAMuB,EACnC,EAEEkF,EAAG,SAASA,EAAEzG,EAAMuB,EAAOqC,GACzB,IAAIwC,EAAQpG,EAAKmC,cAAgB,GACjC,GAAIZ,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAcqC,EAAO,CACnCpC,KAAM,QAEd,CACI,OAAOlD,EAAgBsF,EAAO7E,EAAMH,OACxC,EAEEsF,EAAG,SAASA,EAAE1G,EAAMuB,EAAOqC,GACzB,IAAIwC,EAAQpG,EAAKmC,cACjB,GAAIiE,IAAU,EAAGA,EAAQ,GACzB,GAAI7E,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAcqC,EAAO,CACnCpC,KAAM,QAEd,CACI,OAAOlD,EAAgBsF,EAAO7E,EAAMH,OACxC,EAEEmB,EAAG,SAASA,EAAEvC,EAAMuB,EAAOqC,GACzB,GAAIrC,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAc/D,EAAKwC,gBAAiB,CAClDwB,KAAM,UAEd,CACI,OAAOC,EAAgB1B,EAAEvC,EAAMuB,EACnC,EAEEkB,EAAG,SAASA,EAAEzC,EAAMuB,EAAOqC,GACzB,GAAIrC,IAAU,KAAM,CAClB,OAAOqC,EAASG,cAAc/D,EAAK0C,gBAAiB,CAClDsB,KAAM,UAEd,CACI,OAAOC,EAAgBxB,EAAEzC,EAAMuB,EACnC,EAEEoB,EAAG,SAASA,EAAE3C,EAAMuB,GAClB,OAAO0C,EAAgBtB,EAAE3C,EAAMuB,EACnC,EAEEoF,EAAG,SAASA,EAAE3G,EAAMuB,EAAOqF,EAAWzC,GACpC,IAAI0C,EAAe1C,EAAQ2C,eAAiB9G,EAC5C,IAAI+G,EAAiBF,EAAaG,oBAClC,GAAID,IAAmB,EAAG,CACxB,MAAO,GACb,CACI,OAAQxF,GAEN,IAAK,IACH,OAAO0F,EAAkCF,GAK3C,IAAK,OACL,IAAK,KAEH,OAAOG,EAAeH,GAKxB,IAAK,QACL,IAAK,MACL,QACE,OAAOG,EAAeH,EAAgB,KAE9C,EAEEI,EAAG,SAASA,EAAEnH,EAAMuB,EAAOqF,EAAWzC,GACpC,IAAI0C,EAAe1C,EAAQ2C,eAAiB9G,EAC5C,IAAI+G,EAAiBF,EAAaG,oBAClC,OAAQzF,GAEN,IAAK,IACH,OAAO0F,EAAkCF,GAK3C,IAAK,OACL,IAAK,KAEH,OAAOG,EAAeH,GAKxB,IAAK,QACL,IAAK,MACL,QACE,OAAOG,EAAeH,EAAgB,KAE9C,EAEEK,EAAG,SAASA,EAAEpH,EAAMuB,EAAOqF,EAAWzC,GACpC,IAAI0C,EAAe1C,EAAQ2C,eAAiB9G,EAC5C,IAAI+G,EAAiBF,EAAaG,oBAClC,OAAQzF,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,MAAO,MAAQ8F,EAAoBN,EAAgB,KAErD,IAAK,OACL,QACE,MAAO,MAAQG,EAAeH,EAAgB,KAEtD,EAEEO,EAAG,SAASA,EAAEtH,EAAMuB,EAAOqF,EAAWzC,GACpC,IAAI0C,EAAe1C,EAAQ2C,eAAiB9G,EAC5C,IAAI+G,EAAiBF,EAAaG,oBAClC,OAAQzF,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,MAAO,MAAQ8F,EAAoBN,EAAgB,KAErD,IAAK,OACL,QACE,MAAO,MAAQG,EAAeH,EAAgB,KAEtD,EAEEQ,EAAG,SAASA,EAAEvH,EAAMuB,EAAOqF,EAAWzC,GACpC,IAAI0C,EAAe1C,EAAQ2C,eAAiB9G,EAC5C,IAAIM,EAAYM,KAAKC,MAAMgG,EAAatG,UAAY,KACpD,OAAOO,EAAgBR,EAAWiB,EAAMH,OAC5C,EAEEoG,EAAG,SAASA,EAAExH,EAAMuB,EAAOqF,EAAWzC,GACpC,IAAI0C,EAAe1C,EAAQ2C,eAAiB9G,EAC5C,IAAIM,EAAYuG,EAAatG,UAC7B,OAAOO,EAAgBR,EAAWiB,EAAMH,OAC5C,GAEA,SAASiG,EAAoBI,EAAQC,GACnC,IAAIzG,EAAOwG,EAAS,EAAI,IAAM,IAC9B,IAAIE,EAAY/G,KAAKO,IAAIsG,GACzB,IAAIrB,EAAQxF,KAAKC,MAAM8G,EAAY,IACnC,IAAIC,EAAUD,EAAY,GAC1B,GAAIC,IAAY,EAAG,CACjB,OAAO3G,EAAOa,OAAOsE,EACzB,CACE,IAAIyB,EAAYH,GAAkB,GAClC,OAAOzG,EAAOa,OAAOsE,GAASyB,EAAY/G,EAAgB8G,EAAS,EACrE,CACA,SAASX,EAAkCQ,EAAQC,GACjD,GAAID,EAAS,KAAO,EAAG,CACrB,IAAIxG,EAAOwG,EAAS,EAAI,IAAM,IAC9B,OAAOxG,EAAOH,EAAgBF,KAAKO,IAAIsG,GAAU,GAAI,EACzD,CACE,OAAOP,EAAeO,EAAQC,EAChC,CACA,SAASR,EAAeO,EAAQC,GAC9B,IAAIG,EAAYH,GAAkB,GAClC,IAAIzG,EAAOwG,EAAS,EAAI,IAAM,IAC9B,IAAIE,EAAY/G,KAAKO,IAAIsG,GACzB,IAAIrB,EAAQtF,EAAgBF,KAAKC,MAAM8G,EAAY,IAAK,GACxD,IAAIC,EAAU9G,EAAgB6G,EAAY,GAAI,GAC9C,OAAO1G,EAAOmF,EAAQyB,EAAYD,CACpC,CACA,MAAAE,EAAezG,EC9uBf,IAAI0G,EAAyB,wDAI7B,IAAIC,EAA6B,oCACjC,IAAIC,EAAsB,eAC1B,IAAIC,EAAoB,MACxB,IAAIC,EAAgC,WAsSrB,SAASC,EAAOrI,EAAWsI,EAAgBlE,GACxD,IAAImE,EAAMC,EAAiBC,EAAOC,EAAOC,EAAOC,EAAuBC,EAAkBC,EAAuBC,EAAuBC,EAAwBC,EAAOC,EAAOC,EAAOC,EAAuBC,EAAkBC,EAAuBC,EAAwBC,EAC5QjK,EAAa,EAAGC,WAChB,IAAIiK,EAAY1H,OAAOuG,GACvB,IAAIoB,EAAiBC,IACrB,IAAIC,GAAUrB,GAAQC,EAAkBpE,IAAY,MAAQA,SAAiB,OAAS,EAAIA,EAAQwF,UAAY,MAAQpB,SAAyB,EAAIA,EAAkBkB,EAAeE,UAAY,MAAQrB,SAAc,EAAIA,EAAOsB,EACjO,IAAIC,EAAwBC,GAAWtB,GAASC,GAASC,GAASC,EAAwBxE,IAAY,MAAQA,SAAiB,OAAS,EAAIA,EAAQ0F,yBAA2B,MAAQlB,SAA+B,EAAIA,EAAwBxE,IAAY,MAAQA,SAAiB,OAAS,GAAKyE,EAAmBzE,EAAQwF,UAAY,MAAQf,SAA0B,OAAS,GAAKC,EAAwBD,EAAiBzE,WAAa,MAAQ0E,SAA+B,OAAS,EAAIA,EAAsBgB,yBAA2B,MAAQnB,SAAe,EAAIA,EAAQe,EAAeI,yBAA2B,MAAQpB,SAAe,EAAIA,GAASK,EAAwBW,EAAeE,UAAY,MAAQb,SAA+B,OAAS,GAAKC,EAAyBD,EAAsB3E,WAAa,MAAQ4E,SAAgC,OAAS,EAAIA,EAAuBc,yBAA2B,MAAQrB,SAAe,EAAIA,EAAQ,GAGt7B,KAAMqB,GAAyB,GAAKA,GAAyB,GAAI,CAC/D,MAAM,IAAIE,WAAW,4DACzB,CACE,IAAI/D,EAAe8D,GAAWd,GAASC,GAASC,GAASC,EAAwBhF,IAAY,MAAQA,SAAiB,OAAS,EAAIA,EAAQ6B,gBAAkB,MAAQmD,SAA+B,EAAIA,EAAwBhF,IAAY,MAAQA,SAAiB,OAAS,GAAKiF,EAAmBjF,EAAQwF,UAAY,MAAQP,SAA0B,OAAS,GAAKC,EAAwBD,EAAiBjF,WAAa,MAAQkF,SAA+B,OAAS,EAAIA,EAAsBrD,gBAAkB,MAAQkD,SAAe,EAAIA,EAAQO,EAAezD,gBAAkB,MAAQiD,SAAe,EAAIA,GAASK,EAAyBG,EAAeE,UAAY,MAAQL,SAAgC,OAAS,GAAKC,EAAyBD,EAAuBnF,WAAa,MAAQoF,SAAgC,OAAS,EAAIA,EAAuBvD,gBAAkB,MAAQgD,SAAe,EAAIA,EAAQ,GAG54B,KAAMhD,GAAgB,GAAKA,GAAgB,GAAI,CAC7C,MAAM,IAAI+D,WAAW,mDACzB,CACE,IAAKJ,EAAO/F,SAAU,CACpB,MAAM,IAAImG,WAAW,wCACzB,CACE,IAAKJ,EAAOK,WAAY,CACtB,MAAM,IAAID,WAAW,0CACzB,CACE,IAAIlD,EAAe5G,EAAOF,GAC1B,IAAKD,EAAQ+G,GAAe,CAC1B,MAAM,IAAIkD,WAAW,qBACzB,CAKE,IAAIhD,EAAiBkD,EAAgCpD,GACrD,IAAIqD,EAAUC,EAAgBtD,EAAcE,GAC5C,IAAIqD,EAAmB,CACrBP,sBAAuBA,EACvB7D,aAAcA,EACd2D,OAAQA,EACR7C,cAAeD,GAEjB,IAAIwD,EAASb,EAAUc,MAAMtC,GAA4BuC,KAAI,SAAUC,GACrE,IAAIC,EAAiBD,EAAU,GAC/B,GAAIC,IAAmB,KAAOA,IAAmB,IAAK,CACpD,IAAIC,EAAgBC,EAAeF,GACnC,OAAOC,EAAcF,EAAWb,EAAOK,WAC7C,CACI,OAAOQ,CACX,IAAKI,KAAK,IAAIN,MAAMvC,GAAwBwC,KAAI,SAAUC,GAEtD,GAAIA,IAAc,KAAM,CACtB,MAAO,GACb,CACI,IAAIC,EAAiBD,EAAU,GAC/B,GAAIC,IAAmB,IAAK,CAC1B,OAAOI,EAAmBL,EAChC,CACI,IAAIM,EAAYzJ,EAAWoJ,GAC3B,GAAIK,EAAW,CACb,KAAM3G,IAAY,MAAQA,SAAiB,GAAKA,EAAQ4G,8BAAgCC,EAAyBR,GAAY,CAC3HS,EAAoBT,EAAWnC,EAAgBvG,OAAO/B,GAC9D,CACM,KAAMoE,IAAY,MAAQA,SAAiB,GAAKA,EAAQ+G,+BAAiCC,EAA0BX,GAAY,CAC7HS,EAAoBT,EAAWnC,EAAgBvG,OAAO/B,GAC9D,CACM,OAAO+K,EAAUZ,EAASM,EAAWb,EAAO/F,SAAUwG,EAC5D,CACI,GAAIK,EAAeH,MAAMnC,GAAgC,CACvD,MAAM,IAAI4B,WAAW,iEAAmEU,EAAiB,IAC/G,CACI,OAAOD,CACX,IAAKI,KAAK,IACR,OAAOP,CACT,CACA,SAASQ,EAAmBO,GAC1B,IAAIC,EAAUD,EAAMd,MAAMrC,GAC1B,IAAKoD,EAAS,CACZ,OAAOD,CACX,CACE,OAAOC,EAAQ,GAAGC,QAAQpD,EAAmB,IAC/C,CC9We,SAASqD,EAASC,EAAUrH,GACzC,IAAIsH,EACJnM,EAAa,EAAGC,WAChB,IAAImM,EAAmB5B,GAAW2B,EAAwBtH,IAAY,MAAQA,SAAiB,OAAS,EAAIA,EAAQuH,oBAAsB,MAAQD,SAA+B,EAAIA,EAAwB,GAC7M,GAAIC,IAAqB,GAAKA,IAAqB,GAAKA,IAAqB,EAAG,CAC9E,MAAM,IAAI3B,WAAW,qCACzB,CACE,YAAayB,IAAa,UAAY9L,OAAOC,UAAUC,SAASC,KAAK2L,KAAc,mBAAoB,CACrG,OAAO,IAAIhM,KAAKmM,IACpB,CACE,IAAIC,EAAcC,EAAgBL,GAClC,IAAIxL,EACJ,GAAI4L,EAAY5L,KAAM,CACpB,IAAI8L,EAAkBC,EAAUH,EAAY5L,KAAM0L,GAClD1L,EAAOgM,EAAUF,EAAgBG,eAAgBH,EAAgBpK,KACrE,CACE,IAAK1B,GAAQE,MAAMF,EAAKO,WAAY,CAClC,OAAO,IAAIf,KAAKmM,IACpB,CACE,IAAIrL,EAAYN,EAAKO,UACrB,IAAI2L,EAAO,EACX,IAAIzE,EACJ,GAAImE,EAAYM,KAAM,CACpBA,EAAOC,GAAUP,EAAYM,MAC7B,GAAIhM,MAAMgM,GAAO,CACf,OAAO,IAAI1M,KAAKmM,IACtB,CACA,CACE,GAAIC,EAAYQ,SAAU,CACxB3E,EAAS4E,GAAcT,EAAYQ,UACnC,GAAIlM,MAAMuH,GAAS,CACjB,OAAO,IAAIjI,KAAKmM,IACtB,CACA,KAAS,CACL,IAAI5L,EAAY,IAAIP,KAAKc,EAAY4L,GAMrC,IAAI7B,EAAS,IAAI7K,KAAK,GACtB6K,EAAOiC,YAAYvM,EAAU0B,iBAAkB1B,EAAU8B,cAAe9B,EAAUiC,cAClFqI,EAAOkC,SAASxM,EAAUoC,cAAepC,EAAUyC,gBAAiBzC,EAAU2C,gBAAiB3C,EAAU+C,sBACzG,OAAOuH,CACX,CACE,OAAO,IAAI7K,KAAKc,EAAY4L,EAAOzE,EACrC,CACA,IAAI+E,EAAW,CACbC,kBAAmB,OACnBC,kBAAmB,QACnBN,SAAU,cAEZ,IAAIO,EAAY,gEAChB,IAAIC,EAAY,4EAChB,IAAIC,EAAgB,gCACpB,SAAShB,EAAgBiB,GACvB,IAAIlB,EAAc,GAClB,IAAImB,EAAQD,EAAWE,MAAMR,EAASC,mBACtC,IAAIQ,EAIJ,GAAIF,EAAM3L,OAAS,EAAG,CACpB,OAAOwK,CACX,CACE,GAAI,IAAIsB,KAAKH,EAAM,IAAK,CACtBE,EAAaF,EAAM,EACvB,KAAS,CACLnB,EAAY5L,KAAO+M,EAAM,GACzBE,EAAaF,EAAM,GACnB,GAAIP,EAASE,kBAAkBQ,KAAKtB,EAAY5L,MAAO,CACrD4L,EAAY5L,KAAO8M,EAAWE,MAAMR,EAASE,mBAAmB,GAChEO,EAAaH,EAAWK,OAAOvB,EAAY5L,KAAKoB,OAAQ0L,EAAW1L,OACzE,CACA,CACE,GAAI6L,EAAY,CACd,IAAI1L,EAAQiL,EAASJ,SAASgB,KAAKH,GACnC,GAAI1L,EAAO,CACTqK,EAAYM,KAAOe,EAAW3B,QAAQ/J,EAAM,GAAI,IAChDqK,EAAYQ,SAAW7K,EAAM,EACnC,KAAW,CACLqK,EAAYM,KAAOe,CACzB,CACA,CACE,OAAOrB,CACT,CACA,SAASG,EAAUe,EAAYpB,GAC7B,IAAI2B,EAAQ,IAAIC,OAAO,wBAA0B,EAAI5B,GAAoB,uBAAyB,EAAIA,GAAoB,QAC1H,IAAI6B,EAAWT,EAAWxC,MAAM+C,GAEhC,IAAKE,EAAU,MAAO,CACpB7L,KAAMiK,IACNM,eAAgB,IAElB,IAAIvK,EAAO6L,EAAS,GAAKC,SAASD,EAAS,IAAM,KACjD,IAAIE,EAAUF,EAAS,GAAKC,SAASD,EAAS,IAAM,KAGpD,MAAO,CACL7L,KAAM+L,IAAY,KAAO/L,EAAO+L,EAAU,IAC1CxB,eAAgBa,EAAWY,OAAOH,EAAS,IAAMA,EAAS,IAAInM,QAElE,CACA,SAAS4K,EAAUc,EAAYpL,GAE7B,GAAIA,IAAS,KAAM,OAAO,IAAIlC,KAAKmM,KACnC,IAAI4B,EAAWT,EAAWxC,MAAMqC,GAEhC,IAAKY,EAAU,OAAO,IAAI/N,KAAKmM,KAC/B,IAAIgC,IAAeJ,EAAS,GAC5B,IAAI9H,EAAYmI,GAAcL,EAAS,IACvC,IAAI3L,EAAQgM,GAAcL,EAAS,IAAM,EACzC,IAAI1H,EAAM+H,GAAcL,EAAS,IACjC,IAAIpI,EAAOyI,GAAcL,EAAS,IAClC,IAAI5H,EAAYiI,GAAcL,EAAS,IAAM,EAC7C,GAAII,EAAY,CACd,IAAKE,GAAiBnM,EAAMyD,EAAMQ,GAAY,CAC5C,OAAO,IAAInG,KAAKmM,IACtB,CACI,OAAOmC,GAAiBpM,EAAMyD,EAAMQ,EACxC,KAAS,CACL,IAAI3F,EAAO,IAAIR,KAAK,GACpB,IAAKuO,GAAarM,EAAME,EAAOiE,KAASmI,GAAsBtM,EAAM+D,GAAY,CAC9E,OAAO,IAAIjG,KAAKmM,IACtB,CACI3L,EAAKiO,eAAevM,EAAME,EAAOhB,KAAKsN,IAAIzI,EAAWI,IACrD,OAAO7F,CACX,CACA,CACA,SAAS4N,GAAcvO,GACrB,OAAOA,EAAQmO,SAASnO,GAAS,CACnC,CACA,SAAS8M,GAAUc,GACjB,IAAIM,EAAWN,EAAW3C,MAAMsC,GAChC,IAAKW,EAAU,OAAO5B,IAEtB,IAAIvF,EAAQ+H,GAAcZ,EAAS,IACnC,IAAI3F,EAAUuG,GAAcZ,EAAS,IACrC,IAAIa,EAAUD,GAAcZ,EAAS,IACrC,IAAKc,GAAajI,EAAOwB,EAASwG,GAAU,CAC1C,OAAOzC,GACX,CACE,OAAOvF,EAAQkI,EAAqB1G,EAAU2G,EAAuBH,EAAU,GACjF,CACA,SAASD,GAAc9O,GACrB,OAAOA,GAASmP,WAAWnP,EAAMiM,QAAQ,IAAK,OAAS,CACzD,CACA,SAASe,GAAcoC,GACrB,GAAIA,IAAmB,IAAK,OAAO,EACnC,IAAIlB,EAAWkB,EAAenE,MAAMuC,GACpC,IAAKU,EAAU,OAAO,EACtB,IAAItM,EAAOsM,EAAS,KAAO,KAAO,EAAI,EACtC,IAAInH,EAAQoH,SAASD,EAAS,IAC9B,IAAI3F,EAAU2F,EAAS,IAAMC,SAASD,EAAS,KAAO,EACtD,IAAKmB,GAAiBtI,EAAOwB,GAAU,CACrC,OAAO+D,GACX,CACE,OAAO1K,GAAQmF,EAAQkI,EAAqB1G,EAAU2G,EACxD,CACA,SAAST,GAAiBrJ,EAAaU,EAAMU,GAC3C,IAAI7F,EAAO,IAAIR,KAAK,GACpBQ,EAAKiO,eAAexJ,EAAa,EAAG,GACpC,IAAIkK,EAAqB3O,EAAK4F,aAAe,EAC7C,IAAIgJ,GAAQzJ,EAAO,GAAK,EAAIU,EAAM,EAAI8I,EACtC3O,EAAK6O,WAAW7O,EAAKgC,aAAe4M,GACpC,OAAO5O,CACT,CAKA,IAAI8O,GAAe,CAAC,GAAI,KAAM,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAClE,SAASC,GAAgBrN,GACvB,OAAOA,EAAO,MAAQ,GAAKA,EAAO,IAAM,GAAKA,EAAO,MAAQ,CAC9D,CACA,SAASqM,GAAarM,EAAME,EAAO5B,GACjC,OAAO4B,GAAS,GAAKA,GAAS,IAAM5B,GAAQ,GAAKA,IAAS8O,GAAalN,KAAWmN,GAAgBrN,GAAQ,GAAK,IACjH,CACA,SAASsM,GAAsBtM,EAAM+D,GACnC,OAAOA,GAAa,GAAKA,IAAcsJ,GAAgBrN,GAAQ,IAAM,IACvE,CACA,SAASmM,GAAiBmB,EAAO7J,EAAMU,GACrC,OAAOV,GAAQ,GAAKA,GAAQ,IAAMU,GAAO,GAAKA,GAAO,CACvD,CACA,SAASwI,GAAajI,EAAOwB,EAASwG,GACpC,GAAIhI,IAAU,GAAI,CAChB,OAAOwB,IAAY,GAAKwG,IAAY,CACxC,CACE,OAAOA,GAAW,GAAKA,EAAU,IAAMxG,GAAW,GAAKA,EAAU,IAAMxB,GAAS,GAAKA,EAAQ,EAC/F,CACA,SAASsI,GAAiBO,EAAQrH,GAChC,OAAOA,GAAW,GAAKA,GAAW,EACpC,CCnOA,MAAMsH,GAA+B,+SACrC,MAAAC,GAAeD,G,MCQFE,GAAmB,M,6NAOO,M,6GAgCuB,U,WAQ1B,M,oBAeC,K,CAGnC,qBAAAC,GACEC,KAAKC,6CAA6CC,KAAK,CACrDC,QAASH,KAAKI,gB,CAIV,UAAAC,CAAW3P,EAAc4P,EAAkB,OACjD,IAAK5P,EAAM,MAAO,GAElB,MAAM6P,EAAU,IAAIrQ,KAAKQ,GACzB,IAAKF,EAAQ+P,GAAU,CACrB,MAAO,E,CAET,MAAMrG,EAAYoG,EAAS,QAAU,aACrC,OAAOxH,EAAOyH,EAASrG,E,CAGjB,yBAAAsG,CAA0BD,EAAeE,EAAc,IAAIvQ,MACjE,MAAMwQ,EAAeV,KAAKW,YAAc,UAAYC,EAASL,EAASE,KAAWI,EAAUN,EAASE,GACpG,MAAMK,EAAad,KAAKW,YAAc,QAAUI,EAAQR,EAASE,KAAWI,EAAUN,EAASE,GAE/F,OAAOC,GAAgBI,C,CAGjB,kBAAAE,CAAmBC,EAAgBjB,KAAKkB,kBAAmBC,EAAcnB,KAAKoB,iBACpF,GAAIpB,KAAKqB,cAAcJ,IAAUjB,KAAKqB,cAAcF,GAAM,CACxDnB,KAAKI,eAAiB,KACtB,M,CAIF,GAAIe,EAAK,CACPnB,KAAKI,eAAiBW,EAAQ,IAAI7Q,KAAK+Q,GAAQ,IAAI/Q,KAAKiR,IACxD,M,CAGFnB,KAAKI,eAAiB,K,CAGhB,aAAAiB,CAAc3Q,GACpB,IAAKA,EAAM,OAAO,MAClB,MAAM6P,EAAUtE,EAASvL,GACzB,GAAI6P,EAAQjQ,aAAe,eAAgB,OAAO,KAElD,GAAI0P,KAAKsB,gBAAkBtB,KAAKsB,eAAef,GAAU,CACvD,OAAO,I,CAGT,GAAIP,KAAKW,WAAaX,KAAKQ,0BAA0BD,GAAU,CAC7D,OAAO,I,CAGT,OAAO,K,CAGT,gBAAAgB,CAAiBC,GACfxB,KAAKyB,YAAYD,EAAI,Q,CAGvB,cAAAE,CAAeF,GACbxB,KAAKyB,YAAYD,EAAI,M,CAGvB,oBAAAG,CAAqBH,GACnBxB,KAAKyB,YAAYD,EAAI,QAAS,K,CAGhC,kBAAAI,CAAmBJ,GACjBxB,KAAKyB,YAAYD,EAAI,MAAO,K,CAG9B,WAAAC,CAAYD,EAAW1F,EAAe+F,EAAqB,OACzDL,EAAGM,iBACHN,EAAGO,kBACH,MAAMhS,MAAEA,GAAUyR,EAAGQ,OACrB,IAAIC,EAAgBlS,EAGpB,GAAIiQ,KAAKkC,SAAU,CACjB,GAAIL,EAAW,CACb,MAAMnR,EAAOsP,KAAKK,WAAWvE,IAAU,QAAUkE,KAAKkB,kBAAoBlB,KAAKoB,iBAC/E,MAAMxE,EAAO7M,EAAMqO,MAAM,EAAG,GAC5B6D,EAAgB,GAAGvR,KAAQkM,G,KACtB,CACL,MAAMA,EAAOoD,KAAKK,WAAWvE,IAAU,QAAUkE,KAAKkB,kBAAoBlB,KAAKoB,gBAAiB,MAChGa,EAAgB,GAAGlS,KAAS6M,G,EAIhC,MAAMuF,EAAaF,EAAcjG,QAAQ,MAAO,IAAIlK,OAEpD,GAAIqQ,IAAe,IAAMA,IAAe,GAAI,CAC1CnC,KAAKoC,6BAA6BlC,KAAK,CAAExP,KAAMuR,EAAenG,S,EAIlE,mBAAAuG,GACErC,KAAKgB,oB,CAGP,MAAAsB,GACE,MAAMC,EAAyBC,EAAoB,qBACnD,MAAMC,EAAsBD,EAAoB,iBAEhD,MAAME,EAAgBC,GACpB5P,EAAA,OAAA6P,IAAA,2CAAKC,MAAO,iBAAiBF,IAAS,QAAU,cAAgB,MAC7DA,IAAS,SAAWG,EAAU,SAC9BH,IAAS,SAAW3C,KAAKkC,UAAYL,EAAU,SAC/Cc,IAAS,OAASG,EAAU,OAC5BH,IAAS,OAAS3C,KAAKkC,UAAYL,EAAU,QAIlD,MAAMiB,EAAaH,GACjB5P,EAACwP,EAAsB,CAAAK,IAAA,2CACrBD,KAAK,OACLE,MAAO,aACPE,KAAM,oBAAoBJ,IAC1BxC,QAASH,KAAKI,eACdrQ,MAAOiQ,KAAKK,WAAWsC,IAAS,QAAU3C,KAAKkB,kBAAoBlB,KAAKoB,iBACxE4B,QAASL,IAAS,QAAU3C,KAAKuB,iBAAiB0B,KAAKjD,MAAQA,KAAK0B,eAAeuB,KAAKjD,OAExFjN,EAAA,SAAA6P,IAAA,2CAAOM,QAAS,eAAeP,KAC7B5P,EAAA,QAAA6P,IAAA,2CAAMG,KAAM,GAAGJ,UAAc3C,KAAKmD,QAAUR,IAAS,QAAU,QAAU,OAAM,WAKrF,MAAMd,EAAac,GACjB5P,EAACwP,EAAsB,CAAAK,IAAA,2CACrBD,KAAK,OACLE,MAAO,aACPE,KAAM,oBAAoBJ,IAC1BxC,QAASH,KAAKI,eACdrQ,MAAOiQ,KAAKK,WAAWsC,IAAS,QAAU3C,KAAKkB,kBAAoBlB,KAAKoB,gBAAiB,MACzF4B,QAASL,IAAS,QAAU3C,KAAK2B,qBAAqBsB,KAAKjD,MAAQA,KAAK4B,mBAAmBqB,KAAKjD,OAEhGjN,EAAA,SAAA6P,IAAA,2CAAOM,QAAS,oBAAoBP,KAClC5P,EAAA,QAAA6P,IAAA,2CAAMG,KAAM,GAAGJ,UAAc3C,KAAKmD,QAAUR,IAAS,QAAU,QAAU,OAAM,WAKrF,OACE5P,EAACqQ,EAAI,CAAAR,IAAA,2CAACC,MAAM,iCACT7C,KAAKmD,MACJpQ,EAAA,OAAK8P,MAAM,aACRH,EAAa,SACbA,EAAa,QAGhB3P,EAAA,WAAM2P,EAAa,UAEpB1C,KAAKI,gBACJrN,EAAC0P,EAAmB,CAAAG,IAAA,2CAACS,QAAQ,YAC3BtQ,EAAA,QAAA6P,IAAA,2CAAMG,KAAK,eAAa,6B"}