{"version":3,"names":["marketFilterDropdownMenuCss","MarketFilterDropdownMenuStyle0","MarketFilterDropdownMenu","handleDropdownOpened","e","target","this","el","deselectFilter","isDropdownActive","handleDropdownClosed","handleHeaderNavigate","hasSelectedFilter","handleOverflowFiltersSlotChange","filterEls","querySelector","assignedNodes","createRowsFromFilters","calculateFiltersWithSelectedValue","_a","length","_b","filterRowEls","forEach","filterRowEl","remove","filterRowElsByValue","_c","reduce","result","rowEl","value","filterNames","Set","rowsByName","filterEl","name","add","currentRowEl","newRowEl","document","createElement","getNamespacedTagFor","variant","interactive","transient","size","addEventListener","async","handleFilterSelection","label","filterLabelEl","appendChild","cloneNode","disabled","setAttribute","_d","has","map","find","labelEl","clonedLabelEl","getFilterType","datePickerEl","clonedDatePickerEl","handleDatePickerFilterSelection","listEl","clonedListEl","handleListFilterSelection","multiselect","startDate","endDate","detail","__setAndEmitDatePickerValue","currentSelectionValues","__setAndEmitListValue","filtersWithSelectedValue","count","list","isValueEmpty","datePicker","selectedStartDate","componentDidLoad","render","MarketButtonTagName","MarketDropdownTagName","MarketFilterButtonTagName","MarketHeaderTagName","MarketListTagName","MarketPopoverTagName","MarketAccessoryTagName","h","Host","key","class","classNames","interaction","popoverPlacement","active","iconOnly","slot","Fragment","rank","width","height","viewBox","xmlns","d","onSlotchange","bind"],"sources":["src/components/market-filter-group/subcomponents/market-filter-dropdown-menu/market-filter-dropdown-menu.css?tag=market-filter-dropdown-menu&encapsulation=shadow","src/components/market-filter-group/subcomponents/market-filter-dropdown-menu/market-filter-dropdown-menu.tsx"],"sourcesContent":["@import \"../../../../styles/mixins/component-base.css\";\n@import \"../../../../styles/mixins/typography.css\";\n\n::slotted([slot=\"filter-title\"]) {\n  @extend %heading-20;\n}\n\n/**\n * Temporary container so we don't \"flash\" filters that are being moved around\n * But we don't want to set `display: none` nor `width: 0`\n * since we need to measure the filters' widths\n */\n.overflow-filters {\n  overflow: hidden;\n  height: 0;\n}\n\n.popover {\n  display: flex;\n  flex-direction: column;\n}\n\n.selection-header::part(heading) {\n  /* TODO: add design token */\n  --filter-overflow-heading-margin-top-size: var(--core-metrics-spacing-200);\n\n  margin-top: var(--filter-overflow-heading-margin-top-size);\n}\n\n/* width + negative left and right margin added to offset the native scrollbars */\n.filter-options-container {\n  /* TODO: add design token */\n  --filter-overflow-filter-options-container-margin-top-size: var(--core-metrics-spacing-100);\n\n  display: flex;\n  flex: 1;\n  overflow-y: auto;\n  width:\n    calc(\n      100% +\n      var(--modal-popover-wide-viewport-padding-left-size) +\n      var(--modal-popover-wide-viewport-padding-right-size)\n    );\n  margin:\n    var(--filter-overflow-filter-options-container-margin-top-size)\n    calc(var(--modal-popover-wide-viewport-padding-right-size) * -1)\n    calc(var(--modal-popover-wide-viewport-padding-bottom-size) * -1)\n    calc(var(--modal-popover-wide-viewport-padding-left-size) * -1);\n  padding-left: var(--modal-popover-wide-viewport-padding-left-size);\n\n  ::slotted(.market-list[slot=\"filter-options\"]) {\n    width: calc(100% - var(--modal-popover-wide-viewport-padding-right-size));\n\n    /* acts as the bottom padding within the scrollable content */\n    &::after {\n      content: \"\";\n      display: block;\n      width: 100%;\n      height: var(--core-metrics-spacing-100);\n    }\n  }\n\n  ::slotted(.market-date-picker[slot=\"filter-options\"]) {\n    width: auto;\n    min-width: var(--date-picker-minimum-width);\n    padding-right: var(--modal-popover-wide-viewport-padding-right-size);\n\n    /* acts as the bottom padding within the scrollable content */\n    &::after {\n      content: \"\";\n      display: block;\n      width: 100%;\n      height: var(--core-metrics-spacing-300);\n    }\n  }\n\n  ::slotted(.market-date-picker[slot=\"filter-options\"][display-menu]) {\n    height: calc(100%);\n  }\n}\n","import { Component, Element, Fragment, Host, h, Listen, Prop, State } from '@stencil/core';\n\nimport { classNames } from '../../../../utils/classnames';\nimport { getNamespacedTagFor } from '../../../../utils/namespace';\nimport { TMarketDateRangeChangedEventDetail } from '../../../market-date-picker/events';\nimport { TMarketListSelectionsDidChangeEventDetail } from '../../../market-list/events';\nimport { isValueEmpty } from '../../../market-list/utils';\n\n/**\n * @slot search - Search input, using `<market-input-search>`\n * @slot filters - Filters, using `<market-filter>`\n * @slot settings - Filter settings, using `<market-filter>`\n * @slot visible-filters - INTERNAL ONLY: Used by `<market-filter-group>` when programmatically arranging visible vs overflow\n * buttons based on available space.\n */\n@Component({\n  tag: 'market-filter-dropdown-menu',\n  styleUrl: 'market-filter-dropdown-menu.css',\n  shadow: true,\n})\nexport class MarketFilterDropdownMenu {\n  @Element() el: HTMLMarketFilterDropdownMenuElement;\n\n  /**\n   * The `<market-filter>` elements\n   */\n  private filterEls: HTMLMarketFilterElement[];\n\n  /**\n   * The filter rows\n   */\n  private filterRowEls: HTMLMarketRowElement[];\n\n  /**\n   * String for setting filter button size\n   */\n  @Prop({ reflect: true }) readonly size: 'medium' | 'small' = 'medium';\n\n  /**\n   * Display the number of filters with a selected value as feedback\n   */\n  @State() private filtersWithSelectedValue: number;\n\n  /**\n   * Active filter's `name` prop\n   */\n  @State() private hasSelectedFilter: boolean;\n\n  /**\n   * Is market-dropdown active\n   */\n  @State() private isDropdownActive: boolean;\n\n  /**\n   * Handle `marketDropdownOpened` emitted by `<market-dropdown>`\n   */\n  @Listen('marketDropdownOpened')\n  handleDropdownOpened(e: CustomEvent<void>) {\n    if (e.target !== this.el) return;\n    this.deselectFilter();\n    this.isDropdownActive = true;\n  }\n\n  /**\n   * Handle `marketDropdownClosed` emitted by `<market-dropdown>`\n   */\n  @Listen('marketDropdownClosed')\n  handleDropdownClosed(e: CustomEvent<void>) {\n    if (e.target !== this.el) return;\n    this.isDropdownActive = false;\n  }\n\n  /**\n   * Handle `marketHeaderNavigate` emitted by `<market-button>` when clicking the back button\n   */\n  @Listen('marketHeaderNavigate')\n  handleHeaderNavigate() {\n    this.deselectFilter();\n  }\n\n  /**\n   * Deselect filter\n   */\n  private deselectFilter() {\n    this.hasSelectedFilter = false;\n  }\n\n  /**\n   * Handle overflow-filters slot change\n   */\n  private handleOverflowFiltersSlotChange() {\n    this.filterEls = this.el\n      .querySelector<HTMLSlotElement>('[slot=\"overflow-filters\"]')\n      .assignedNodes() as HTMLMarketFilterElement[];\n\n    // create <market-row>s; and calculate how many filters have set `values`\n    this.createRowsFromFilters();\n    this.calculateFiltersWithSelectedValue();\n  }\n\n  /**\n   * Create rows from filter slots\n   */\n  private createRowsFromFilters() {\n    // no more filters, remove rows if they exist\n    if (!this.filterEls?.length) {\n      this.filterRowEls?.forEach((filterRowEl) => {\n        filterRowEl.remove();\n      });\n      return;\n    }\n\n    const filterRowElsByValue: { [value: string]: HTMLMarketRowElement } = (this.filterRowEls ?? []).reduce(\n      (result, rowEl) => {\n        result[rowEl.value] = rowEl;\n        return result;\n      },\n      {},\n    );\n    const filterNames = new Set<string>();\n    const rowsByName: { [key: string]: HTMLMarketRowElement } = {};\n\n    this.filterEls.forEach((filterEl) => {\n      const name = filterEl.name;\n      filterNames.add(name);\n\n      const currentRowEl = filterRowElsByValue[name];\n      if (currentRowEl) {\n        // recycle filter row with the same name if it exists\n        rowsByName[name] = currentRowEl;\n      } else {\n        // create new row element\n        const newRowEl = document.createElement(getNamespacedTagFor('market-row')) as HTMLMarketRowElement;\n        newRowEl.variant = 'drill';\n        newRowEl.interactive = true;\n        newRowEl.transient = true;\n        newRowEl.value = name;\n        newRowEl.size = this.size;\n        newRowEl.addEventListener('click', async () => {\n          await this.handleFilterSelection(newRowEl);\n        });\n        rowsByName[name] = newRowEl;\n      }\n\n      // create the row label\n      const label = rowsByName[name]?.querySelector('label');\n      label?.remove();\n      const filterLabelEl = filterEl.querySelector('label');\n      if (filterLabelEl) {\n        rowsByName[name].appendChild(filterLabelEl.cloneNode(true));\n      }\n\n      // disable the row if the filter is disabled\n      if (filterEl.disabled) {\n        rowsByName[name].disabled = true;\n      }\n\n      // assign the slot\n      rowsByName[name].setAttribute('slot', 'filter-row');\n    });\n\n    // remove rows that should not exist anymore\n    this.filterRowEls?.forEach((filterRowEl) => {\n      if (!filterNames.has(filterRowEl.value)) {\n        filterRowEl.remove();\n      }\n    });\n\n    // add the new rows to the DOM\n    this.filterRowEls = [...this.filterEls].map(({ name }) => rowsByName[name]);\n    this.filterRowEls.forEach((filterRowEl) => {\n      filterRowEl.setAttribute('slot', 'filter-rows');\n      this.el.appendChild(filterRowEl);\n    });\n  }\n\n  /**\n   * When a filter is selected, the popover content will show\n   * the selected filter's title and list selection\n   */\n  private async handleFilterSelection(rowEl: HTMLMarketRowElement) {\n    const value = rowEl.value;\n    this.hasSelectedFilter = true;\n\n    const filterEl: HTMLMarketFilterElement = this.filterEls.find((filterEl) => filterEl.name === value);\n\n    // clone the label\n    const labelEl = filterEl.querySelector('label');\n    const clonedLabelEl = labelEl.cloneNode(true) as HTMLLabelElement;\n    clonedLabelEl.setAttribute('slot', 'filter-title');\n\n    this.el.querySelector('[slot=\"filter-title\"]')?.remove();\n    this.el.appendChild(clonedLabelEl);\n\n    switch (await filterEl.getFilterType()) {\n      case 'date': {\n        // clone the date picker\n        const datePickerEl = filterEl.querySelector<HTMLMarketDatePickerDateElement>(\n          getNamespacedTagFor('market-date-picker'),\n        );\n        const clonedDatePickerEl = datePickerEl.cloneNode(true) as HTMLMarketDatePickerElement;\n        clonedDatePickerEl.setAttribute('slot', 'filter-options');\n        clonedDatePickerEl.addEventListener(\n          'marketDateRangeChanged',\n          (e: CustomEvent<TMarketDateRangeChangedEventDetail>) => {\n            this.handleDatePickerFilterSelection(e, filterEl);\n          },\n        );\n\n        this.el.querySelector('[slot=\"filter-options\"]')?.remove();\n        this.el.appendChild(clonedDatePickerEl);\n        break;\n      }\n      case 'list': {\n        // clone the list\n        const listEl = filterEl.querySelector<HTMLMarketListElement>(getNamespacedTagFor('market-list'));\n        const clonedListEl = listEl.cloneNode(true) as HTMLMarketListElement;\n        clonedListEl.setAttribute('slot', 'filter-options');\n        clonedListEl.addEventListener(\n          'marketListSelectionsDidChange',\n          (e: CustomEvent<TMarketListSelectionsDidChangeEventDetail>) => {\n            this.handleListFilterSelection(e, filterEl, listEl);\n          },\n        );\n\n        clonedListEl.setAttribute('interactive', '');\n        listEl.multiselect && clonedLabelEl.setAttribute('multiselect', '');\n\n        this.el.querySelector('[slot=\"filter-options\"]')?.remove();\n        this.el.appendChild(clonedListEl);\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  private async handleDatePickerFilterSelection(\n    e: CustomEvent<TMarketDateRangeChangedEventDetail>,\n    filterEl: HTMLMarketFilterElement,\n  ) {\n    const { startDate, endDate } = e.detail;\n\n    await filterEl.__setAndEmitDatePickerValue({ startDate, endDate });\n\n    // after selecting, recalculate what we display as feedback\n    this.calculateFiltersWithSelectedValue();\n  }\n\n  private async handleListFilterSelection(\n    e: CustomEvent<TMarketListSelectionsDidChangeEventDetail>,\n    filterEl: HTMLMarketFilterElement,\n    listEl: HTMLMarketListElement,\n  ) {\n    // set the filter value, then automatically deselect if the list is not multiselect\n    const { currentSelectionValues } = e.detail;\n\n    await filterEl.__setAndEmitListValue(currentSelectionValues);\n    if (!listEl.multiselect) {\n      this.deselectFilter();\n    }\n\n    // after selecting, recalculate what we display as feedback\n    this.calculateFiltersWithSelectedValue();\n  }\n\n  /**\n   * Count how many filters with selected value\n   * and that count is displayed as feedback.\n   */\n  private calculateFiltersWithSelectedValue() {\n    this.filtersWithSelectedValue = [...(this.filterEls || [])].reduce((count, filterEl) => {\n      const list = filterEl.querySelector<HTMLMarketListElement>(getNamespacedTagFor('market-list'));\n      if (!isValueEmpty(list?.value)) {\n        return count + 1;\n      }\n      const datePicker = filterEl.querySelector<HTMLMarketDatePickerElement>(getNamespacedTagFor('market-date-picker'));\n      if (datePicker?.selectedStartDate) {\n        return count + 1;\n      }\n      return count;\n    }, 0);\n  }\n\n  componentDidLoad() {\n    this.handleOverflowFiltersSlotChange();\n  }\n\n  render() {\n    const { filtersWithSelectedValue, handleOverflowFiltersSlotChange, hasSelectedFilter, isDropdownActive, size } =\n      this;\n\n    const MarketButtonTagName = getNamespacedTagFor('market-button');\n    const MarketDropdownTagName = getNamespacedTagFor('market-dropdown');\n    const MarketFilterButtonTagName = getNamespacedTagFor('market-filter-button');\n    const MarketHeaderTagName = getNamespacedTagFor('market-header');\n    const MarketListTagName = getNamespacedTagFor('market-list');\n    const MarketPopoverTagName = getNamespacedTagFor('market-popover');\n    const MarketAccessoryTagName = getNamespacedTagFor('market-accessory');\n\n    return (\n      <Host class={classNames('market-filter-dropdown-menu', { 'show-options': hasSelectedFilter })}>\n        <MarketDropdownTagName interaction=\"persistent\" popoverPlacement=\"bottom-end\">\n          <MarketFilterButtonTagName active={isDropdownActive} iconOnly size={size} slot=\"trigger\">\n            {filtersWithSelectedValue && <span slot=\"feedback\">{filtersWithSelectedValue}</span>}\n          </MarketFilterButtonTagName>\n          <MarketPopoverTagName class=\"popover\" slot=\"popover\">\n            {!hasSelectedFilter ? (\n              <MarketListTagName class=\"filter-list\" interactive>\n                <slot name=\"filter-rows\"></slot>\n              </MarketListTagName>\n            ) : (\n              <Fragment>\n                <MarketHeaderTagName class=\"selection-header\">\n                  <MarketButtonTagName rank=\"secondary\" size=\"small\" slot=\"navigation\">\n                    <MarketAccessoryTagName slot=\"icon\">\n                      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                          fill-rule=\"evenodd\"\n                          clip-rule=\"evenodd\"\n                          d=\"M4.29289 11.293C3.90237 11.6835 3.90237 12.3167 4.29289 12.7072L11.2929 19.7072L12.7071 18.293L7.41421 13.0001L19 13.0001V11.0001L7.41421 11.0001L12.7071 5.70718L11.2929 4.29297L4.29289 11.293Z\"\n                        />\n                      </svg>\n                    </MarketAccessoryTagName>\n                  </MarketButtonTagName>\n                  <slot name=\"filter-title\"></slot>\n                </MarketHeaderTagName>\n                <div class=\"filter-options-container\">\n                  <slot name=\"filter-options\"></slot>\n                </div>\n              </Fragment>\n            )}\n          </MarketPopoverTagName>\n        </MarketDropdownTagName>\n        {/**\n         * This is an invisible container where overflow filters are initially.\n         * Then they are \"moved\" to [slot=\"filter-rows\"] as <market-row>s\n         */}\n        <div class=\"overflow-filters\">\n          <slot name=\"overflow-filters\" onSlotchange={handleOverflowFiltersSlotChange.bind(this)}></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}