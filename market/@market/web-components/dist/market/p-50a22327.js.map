{"version":3,"names":["ListItemSelectableType","isValueEmpty","value","undefined","Array","isArray","length","isValidControl","control","tagName","_a","toLocaleLowerCase","validControlTags","getNamespacedTagFor","includes","getRowSelectableType","row","interactive","variant","Boolean","href","transient","slottedControl","querySelector","SELECTABLE_WITHOUT_CONTROL","isElementWithTagName","CHECKBOX","RADIO","SWITCH","getItemSelectableType","item","innerRow"],"sources":["src/components/market-list/types.ts","src/components/market-list/utils.ts"],"sourcesContent":["export type TMarketListItem = HTMLMarketRowElement | HTMLMarketActionCardElement;\nexport type TMarketListValidControlRowInputElement =\n  | HTMLMarketCheckboxElement\n  | HTMLMarketToggleElement\n  | HTMLMarketRadioElement;\nexport type TMarketListFilterStrategyPropCallback = (attrs: {\n  item: TMarketListItem;\n  label: string;\n  query: string;\n  textContent: string;\n  value: string;\n}) => boolean;\nexport type TMarketListFilterStrategyPropTypes =\n  | 'label'\n  | 'textcontent'\n  | 'value'\n  | TMarketListFilterStrategyPropCallback;\nexport enum ListItemSelectableType {\n  RADIO,\n  CHECKBOX,\n  SWITCH,\n  SELECTABLE_WITHOUT_CONTROL,\n}\n","import { getNamespacedTagFor, isElementWithTagName } from '../../utils/namespace';\nimport { ListItemSelectableType, TMarketListItem, TMarketListValidControlRowInputElement } from './types';\n\n/**\n * Check if the value is considered empty\n * @param {unknown} value\n */\nexport function isValueEmpty(value: unknown): boolean {\n  // Note: we don't check for 0 here because it's a valid value, so _.isEmpty() is not used\n  return value === '' || value === null || value === undefined || (Array.isArray(value) && value.length === 0);\n}\n\n/**\n * Check if the slotted control in <market-row slot=\"control-row> is a valid control row input\n * @param {unknown} control\n */\nexport function isValidControl(control: unknown): control is TMarketListValidControlRowInputElement {\n  if (!control) {\n    return false;\n  }\n  const tagName = (control as HTMLElement).tagName?.toLocaleLowerCase();\n  const validControlTags = [\n    getNamespacedTagFor('market-checkbox').toLocaleLowerCase(),\n    getNamespacedTagFor('market-radio').toLocaleLowerCase(),\n    getNamespacedTagFor('market-toggle').toLocaleLowerCase(),\n  ] as string[];\n  return validControlTags.includes(tagName);\n}\n\nfunction getRowSelectableType(row: HTMLMarketRowElement): ListItemSelectableType | undefined {\n  if (!row.interactive || row.variant === 'drill' || Boolean(row.href) || (row.interactive && row.transient)) {\n    return undefined;\n  }\n\n  const slottedControl = row.querySelector('[slot=\"control\"]') as TMarketListValidControlRowInputElement;\n\n  if (!slottedControl) {\n    return ListItemSelectableType.SELECTABLE_WITHOUT_CONTROL;\n  }\n  if (isElementWithTagName(slottedControl, 'market-checkbox')) {\n    return ListItemSelectableType.CHECKBOX;\n  }\n  if (isElementWithTagName(slottedControl, 'market-radio')) {\n    return ListItemSelectableType.RADIO;\n  }\n  if (isElementWithTagName(slottedControl, 'market-toggle')) {\n    return ListItemSelectableType.SWITCH;\n  }\n  return undefined;\n}\n\n/**\n * Get the selectable type (radio, checkbox, etc.) from a list item, which is either a market-row or market-action-card\n * @param {TMarketListItem} item\n */\nexport function getItemSelectableType(item: TMarketListItem): ListItemSelectableType | undefined {\n  if (isElementWithTagName(item, 'market-action-card')) {\n    const innerRow = item.querySelector(getNamespacedTagFor('market-row'));\n    if (innerRow) {\n      return getRowSelectableType(innerRow);\n    }\n    return ListItemSelectableType.SELECTABLE_WITHOUT_CONTROL;\n  }\n\n  if (isElementWithTagName(item, 'market-row')) {\n    return getRowSelectableType(item as HTMLMarketRowElement);\n  }\n\n  return undefined;\n}\n"],"mappings":"+CAiBYA,GAAZ,SAAYA,GACVA,IAAA,oBACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,6DACD,EALD,CAAYA,MAAsB,K,SCVlBC,EAAaC,GAE3B,OAAOA,IAAU,IAAMA,IAAU,MAAQA,IAAUC,WAAcC,MAAMC,QAAQH,IAAUA,EAAMI,SAAW,CAC5G,C,SAMgBC,EAAeC,G,MAC7B,IAAKA,EAAS,CACZ,OAAO,K,CAET,MAAMC,GAAUC,EAACF,EAAwBC,WAAO,MAAAC,SAAA,SAAAA,EAAEC,oBAClD,MAAMC,EAAmB,CACvBC,EAAoB,mBAAmBF,oBACvCE,EAAoB,gBAAgBF,oBACpCE,EAAoB,iBAAiBF,qBAEvC,OAAOC,EAAiBE,SAASL,EACnC,CAEA,SAASM,EAAqBC,GAC5B,IAAKA,EAAIC,aAAeD,EAAIE,UAAY,SAAWC,QAAQH,EAAII,OAAUJ,EAAIC,aAAeD,EAAIK,UAAY,CAC1G,OAAOlB,S,CAGT,MAAMmB,EAAiBN,EAAIO,cAAc,oBAEzC,IAAKD,EAAgB,CACnB,OAAOtB,EAAuBwB,0B,CAEhC,GAAIC,EAAqBH,EAAgB,mBAAoB,CAC3D,OAAOtB,EAAuB0B,Q,CAEhC,GAAID,EAAqBH,EAAgB,gBAAiB,CACxD,OAAOtB,EAAuB2B,K,CAEhC,GAAIF,EAAqBH,EAAgB,iBAAkB,CACzD,OAAOtB,EAAuB4B,M,CAEhC,OAAOzB,SACT,C,SAMgB0B,EAAsBC,GACpC,GAAIL,EAAqBK,EAAM,sBAAuB,CACpD,MAAMC,EAAWD,EAAKP,cAAcV,EAAoB,eACxD,GAAIkB,EAAU,CACZ,OAAOhB,EAAqBgB,E,CAE9B,OAAO/B,EAAuBwB,0B,CAGhC,GAAIC,EAAqBK,EAAM,cAAe,CAC5C,OAAOf,EAAqBe,E,CAG9B,OAAO3B,SACT,Q"}