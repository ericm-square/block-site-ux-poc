{"version":3,"names":["isEqual","value","other","baseIsEqual","parsedGridTemplateColumnValues","cssPropertyValue","array","split","unsupportedValues","matches","filter","includes","unsupportedValuesText","length","map","match","join","console","warn","output","i","repeatedColCount","item","Number","parseInt","toString","endOfRepeatFunctionIndex","findIndex","index","repeatedValues","slice","replace","j","push","marketTableCss","MarketTableStyle0","RESIZE_DEBOUNCE_DURATION","MarketTable","this","observers","throttledDetectStyleDeclaration","throttle","detectStyleDeclaration","bind","styleDeclarationObserver","newValue","oldValue","getPropertyValue","gridColumnTemplate","gridTemplateColumnsValue","gridTemplateObserver","setColumnWidths","updateGridLayout","allColumnsObserver","columns","forwardColumnPropertiesToCells","allColumns","allRowsObserver","rows","updateStickyRows","stuckRowsObserver","allRows","row","classList","remove","rowsStuckTop","add","rowsUnstuck","rowsStuckBottom","marketTableHeaderLoadedEventHandler","detail","checkColumnVisibility","marketTableRowStickEventHandler","target","position","slot","marketTableRowUnstickEventHandler","originalSlot","removeAttribute","marketTableColumnStickEventHandler","Promise","all","async","_stickColumn","name","marketTableColumnUnstickEventHandler","_unstickColumn","marketTableColumnVisibilityChangeHandler","forEach","_syncColumnVisibilityWithCells","columnName","hidden","visibleColumns","column","gridTemplate","width","tableColumns","columnsUnstuck","stickTo","columnsStuckLeft","columnsStuckRight","mainGrid","leftGrid","rightGrid","gridTemplateMain","gridTemplateLeft","gridTemplateRight","sticky","header","footer","handleSlotChange","el","querySelectorAll","getNamespacedTagFor","hasAccordionElements","children","some","element","tagName","toLowerCase","hasAccordionRows","Array","prototype","indexOf","call","nested","styleDeclaration","window","getComputedStyle","initResizeObserver","resize","ResizeObserver","requestAnimationFrame","observe","initInlineStyleObserver","inlineStyle","MutationObserver","attributes","attributeFilter","initContentObserver","content","childList","subtree","characterData","componentWillLoad","componentDidLoad","render","MarketTableAreaTagName","h","Host","key","class","role","onSlotchange","orientation","active","disconnectedCallback","Object","values","observer","disconnect"],"sources":["../../node_modules/lodash-es/isEqual.js","src/components/market-table/utils.ts","src/components/market-table/market-table.css?tag=market-table&encapsulation=shadow","src/components/market-table/market-table.tsx"],"sourcesContent":["import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","/**\n * Parses a CSS grid-template-columns declaration and attempts to return an array with one entry for each column.\n *\n * @param {string} cssPropertyValue - Value of the `grid-template-columns` property.\n *\n * Example inputs and outputs:\n * '100px 80px 50px' --> ['100px', '80px', '50px']\n * '100px repeat(2, 80px)' --> ['100px', '80px', '80px']\n * '100px repeat(3, 50px, 75px)' --> ['100px', '50px', '75px', '50px']\n * 'repeat(2, 80px) repeat(3, 50px, 75px) 100px' --> ['80px', '80px', '50px', '75px', '50px', '100px']\n *\n * Why do we need this?\n * `market-table` has a `styleDeclaration` watcher which checks the CSS styles applied to the table. this gets used to\n * determine the grid template definition for the table (`this.gridColumnTemplate`), which in turn is used to set column\n * widths and update the grid layout. however, in situations where `grid-template-columns` is defined using the\n * `repeat()` function, we need to parse the value to ensure that we have a width explicitly specified for each column.\n * this ensures consistent column sizing and behavior when columns are being stuck/unstuck to the left/right.\n *\n * Cases where this will break:\n * 1. If user is using <auto-repeat> values (\"auto-fill\", \"auto-fit\") instead of explicit widths\n * 2. If user is using a CSS function other than `repeat()` (ex. `minmax()`, `fit-content()`)\n * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns\n * https://developer.mozilla.org/en-US/docs/Web/CSS/repeat\n */\nexport const parsedGridTemplateColumnValues = (cssPropertyValue: string): string[] => {\n  const array: string[] = cssPropertyValue.split(' '); // ex. '100px repeat(2, 80px)' --> ['100px', 'repeat(2', '80px)']\n\n  // error handling for unsupported cases\n  const unsupportedValues = ['auto-fill', 'auto-fit', 'minmax', 'fit-content'];\n  const matches = unsupportedValues.filter((value) => cssPropertyValue.includes(value));\n  const unsupportedValuesText = `${matches.length > 0 ? 'features' : 'feature'} ${matches\n    .map((match) => `\\`${match}\\``)\n    .join(', ')}`;\n\n  if (matches.length > 0) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `<market-table>'s grid layout is not built to support the use of the CSS ${unsupportedValuesText}.\nTo avoid potential column layout issues, try using explicitly defined \\`grid-template-column\\` widths using length, percentage, or flex units.`,\n    );\n\n    // while this seems wonky (will return an array like ['repeat(auto-fill,', '250px)']), it means that table rows will\n    // inherit the parent table's `grid-template-columns` declaration and will look as intended except for in situations\n    // where columns are being stuck/unstuck.\n    return array;\n  }\n\n  const output: string[] = [];\n  let i = 0;\n  let repeatedColCount: number = null;\n\n  for (i = 0; i < array.length; i++) {\n    const item = array[i];\n\n    // check to see if we are at the start of a `repeat` block\n    if (item.includes('repeat(')) {\n      // get number of repeats, ex. \"repeat(4\" --> 4)\n      repeatedColCount = Number.parseInt(item.match(/\\d+/).toString(), 10);\n\n      // figure out what's being repeated\n      // look ahead from current index to the next index containing \")\" (the end of the repeat block)\n      const endOfRepeatFunctionIndex = array.findIndex((item, index) => index > i && item.includes(')'));\n      // slice grid-template-columns values into their own array and strip parens/commas\n      const repeatedValues = array.slice(i + 1, endOfRepeatFunctionIndex + 1).map((item) => item.replace(/\\W/, ''));\n\n      // push as many values from the set of repeating column sizes as are needed\n      for (let j = 0; j < repeatedColCount; j++) {\n        output.push(repeatedValues[j % repeatedValues.length].toString());\n      }\n\n      // reset repeatedColCount bc we're done w/ the repeat block\n      repeatedColCount = null;\n\n      // increment for loop to skip all the items we just dealt with\n      i += repeatedValues.length;\n    } else if (!repeatedColCount) {\n      // if not in a `repeat()` block, save value as normal\n      output.push(item);\n    }\n  }\n\n  return output;\n};\n",":host {\n  position: relative;\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: rows;\n  overflow-x: clip; /* columns hidden using grid-template-columns should not be visible */\n  height: auto;\n}\n\n/* Last row in the table doesn't need a bottom border */\n::slotted(.market-table-row:last-of-type:not([slot=\"header\"])),\n::slotted(.market-table-row.buffer-row) {\n  border-bottom: none !important; /* stylelint-disable-line declaration-no-important */\n}\n","import { Component, Host, Element, State, Watch, Listen, h } from '@stencil/core';\nimport { isEqual, throttle } from 'lodash-es';\n\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { parsedGridTemplateColumnValues } from './utils';\n\nconst RESIZE_DEBOUNCE_DURATION = 16; // 60fps\n\n/**\n * @slot - Default slot for all rows\n *\n * @slot header - Slot for header rows at the top of the table. Slotting a header row is required to set custom column\n * widths.\n *\n * **NOTE:** slotting rows into this area will not sticky rows to the top. Use `sticky` or\n * `stick-to=\"top\"` on the row element instead.\n *\n * @slot footer - Slot for footer rows at the bottom of the table\n *\n * **NOTE:** slotting rows into this area will not sticky rows to the bottom. Use `sticky` or\n * `stick-to=\"bottom\"` on the row element instead.\n */\n@Component({\n  tag: 'market-table',\n  styleUrl: 'market-table.css',\n  shadow: true,\n})\nexport class MarketTable {\n  @Element() el: HTMLMarketTableElement;\n\n  // CSSStyleDeclaration representing the HTMLMarketTableElement's currently computed styles\n  @State() styleDeclaration: CSSStyleDeclaration;\n\n  // An array of grid template values set by the consumer on the table itself\n  @State() gridColumnTemplate: Array<string>;\n\n  @State() allColumns: Array<HTMLMarketTableColumnElement> = [];\n  @State() visibleColumns: Array<HTMLMarketTableColumnElement> = [];\n  @State() columnsStuckLeft: Array<HTMLMarketTableColumnElement> = [];\n  @State() columnsStuckRight: Array<HTMLMarketTableColumnElement> = [];\n  @State() columnsUnstuck: Array<HTMLMarketTableColumnElement> = [];\n\n  @State() allRows: Array<HTMLMarketTableRowElement> = [];\n  @State() rowsStuckTop: Array<HTMLMarketTableRowElement> = [];\n  @State() rowsStuckBottom: Array<HTMLMarketTableRowElement> = [];\n  @State() rowsUnstuck: Array<HTMLMarketTableRowElement> = [];\n  @State() hasAccordionRows: boolean = false;\n\n  observers: {\n    resize?: ResizeObserver;\n    inlineStyle?: MutationObserver;\n    content?: MutationObserver;\n  } = {};\n\n  /* Everytime the computed CSS style for this element is updated, we want to\n    mutate the grid template definition, and save whatever template they have set\n    to our grid definition so we know what size the columns are */\n  @Watch('styleDeclaration')\n  styleDeclarationObserver(newValue: CSSStyleDeclaration, oldValue: CSSStyleDeclaration) {\n    /* lodash's `isEqual` should not be used on CSSStyleDeclaration as it's vulnerable to prototype pollution causing false negatives\n    and modifying the data in place. More at https://square.slack.com/archives/C06RMPM072N/p1717600186722089 */\n    if (newValue !== oldValue) {\n      /* unset this.gridColumnTemplate value when there is no explicit grid-template-columns style\n        in this situation, the computed value of grid-template-columns === the width of the element\n        https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value */\n      if (newValue.getPropertyValue('grid-template-columns') === newValue.getPropertyValue('width')) {\n        this.gridColumnTemplate = [];\n        return;\n      }\n\n      /* when there is an explicit grid-template-columns style, update this.gridColumnTemplate */\n      const gridTemplateColumnsValue = parsedGridTemplateColumnValues(\n        newValue.getPropertyValue('grid-template-columns'),\n      );\n      if (!isEqual(gridTemplateColumnsValue, this.gridColumnTemplate)) {\n        this.gridColumnTemplate = gridTemplateColumnsValue;\n      }\n    }\n  }\n\n  /* When the grid template changes, forward it's value to the child sections.\n  Use an observer instead of binding in the template to prevent polluting\n  the DOM with unneeded attributes */\n  @Watch('gridColumnTemplate')\n  gridTemplateObserver(newValue: Array<string>, oldValue?: Array<string>) {\n    if (newValue !== oldValue) {\n      this.setColumnWidths(newValue);\n      this.updateGridLayout();\n    }\n  }\n\n  /* If the columns change, forward their values to the child rows, and update\n  the column count */\n  @Watch('allColumns')\n  @Watch('visibleColumns')\n  allColumnsObserver(columns: Array<HTMLMarketTableColumnElement>, oldValue?: Array<HTMLMarketTableColumnElement>) {\n    if (columns && (!oldValue || columns !== oldValue)) {\n      this.setColumnWidths(this.gridColumnTemplate);\n      this.forwardColumnPropertiesToCells(this.allColumns);\n      this.updateGridLayout();\n    }\n  }\n\n  @Watch('allRows')\n  allRowsObserver(rows: Array<HTMLMarketTableRowElement>, oldValue?: Array<HTMLMarketTableRowElement>) {\n    if (rows !== oldValue && rows) {\n      this.updateGridLayout();\n      this.forwardColumnPropertiesToCells(this.allColumns);\n      this.updateStickyRows();\n    }\n  }\n\n  @Watch('rowsStuckTop')\n  @Watch('rowsStuckBottom')\n  @Watch('rowsUnstuck')\n  stuckRowsObserver(newValue: Array<HTMLMarketTableRowElement>, oldValue: Array<HTMLMarketTableRowElement>) {\n    if (newValue !== oldValue) {\n      this.allRows.map((row) => row.classList.remove('buffer-row'));\n\n      if (this.rowsStuckTop.length > 0) {\n        this.rowsStuckTop[this.rowsStuckTop.length - 1].classList.add('buffer-row');\n      }\n      if (this.rowsUnstuck.length > 0 && this.rowsStuckBottom.length > 0) {\n        this.rowsUnstuck[this.rowsUnstuck.length - 1].classList.add('buffer-row');\n      }\n    }\n  }\n\n  @Listen('marketTableHeaderLoaded')\n  marketTableHeaderLoadedEventHandler({ detail }) {\n    this.allColumns = [...detail.columns];\n    this.checkColumnVisibility();\n  }\n\n  @Listen('marketTableRowStick')\n  marketTableRowStickEventHandler({ target, detail }) {\n    switch (detail.position) {\n      case 'top':\n        target.slot = 'sticky-header';\n        break;\n      case 'bottom':\n        target.slot = 'sticky-footer';\n        break;\n      default:\n        // eslint-disable-next-line no-console\n        console.warn('could not stick row to an unknown position');\n        break;\n    }\n    this.updateStickyRows();\n  }\n\n  @Listen('marketTableRowUnstick')\n  marketTableRowUnstickEventHandler({ target }) {\n    /* If the row was originally in a named slot, we want to put the\n    row back into that slot */\n    if (target.originalSlot) {\n      target.slot = target.originalSlot;\n\n      /* Otherwise we just remove the slot attribute so it will return\n    to the default slot */\n    } else {\n      target.removeAttribute('slot');\n    }\n    this.updateStickyRows();\n  }\n\n  @Listen('marketTableColumnStick')\n  async marketTableColumnStickEventHandler({ target, detail }) {\n    // Stick each cell to the correct side in the row\n    await Promise.all(\n      [...this.allRows].map(async (row) => {\n        await row._stickColumn(target.name, detail.position);\n      }),\n    );\n\n    this.updateGridLayout();\n  }\n\n  @Listen('marketTableColumnUnstick')\n  async marketTableColumnUnstickEventHandler({ target }) {\n    await Promise.all(\n      [...this.allRows].map(async (row) => {\n        await row._unstickColumn(target.name);\n      }),\n    );\n\n    this.updateGridLayout();\n  }\n\n  @Listen('marketTableColumnVisibilityChange')\n  marketTableColumnVisibilityChangeHandler({ detail }) {\n    this.checkColumnVisibility();\n    this.allRows.forEach((row) => row._syncColumnVisibilityWithCells(detail.columnName, detail.hidden));\n    this.detectStyleDeclaration();\n  }\n\n  checkColumnVisibility() {\n    this.visibleColumns = this.allColumns.filter((column) => !column.hidden);\n  }\n\n  setColumnWidths(gridTemplate: Array<string>) {\n    if (this.allColumns.length > 0) {\n      this.visibleColumns.forEach((column, i) => {\n        column.width = gridTemplate[i];\n      });\n    }\n  }\n\n  forwardColumnPropertiesToCells(columns) {\n    this.allRows.forEach((row) => (row.tableColumns = columns));\n  }\n\n  updateGridLayout() {\n    if (this.allColumns.length > 0) {\n      this.columnsUnstuck = this.visibleColumns.filter((column) => !column.stickTo);\n      this.columnsStuckLeft = this.visibleColumns.filter((column) => column.stickTo === 'left');\n      this.columnsStuckRight = this.visibleColumns.filter((column) => column.stickTo === 'right');\n\n      const mainGrid = this.columnsUnstuck.map((column) => column.width);\n      const leftGrid = this.columnsStuckLeft.map((column) => column.width);\n      const rightGrid = this.columnsStuckRight.map((column) => column.width);\n\n      if (this.allRows.length > 0) {\n        this.allRows.forEach((row) => {\n          row.gridTemplateMain = mainGrid;\n          row.gridTemplateLeft = leftGrid;\n          row.gridTemplateRight = rightGrid;\n        });\n      }\n    }\n  }\n\n  updateStickyRows() {\n    this.rowsStuckTop = this.allRows.filter((row) => (row.sticky && row.header) || row.stickTo === 'top');\n    this.rowsStuckBottom = this.allRows.filter((row) => (row.sticky && row.footer) || row.stickTo === 'bottom');\n    this.rowsUnstuck = this.allRows.filter((row) => !row.stickTo && !row.sticky);\n  }\n\n  /* If the slotted content of the table changes, we need to update\n  our saved copy of the section and column children */\n  handleSlotChange() {\n    // Get all the child rows\n    this.allRows = [...this.el.querySelectorAll<HTMLMarketTableRowElement>(getNamespacedTagFor('market-table-row'))];\n\n    // Check for root accordion fields or default to passed in prop\n    const hasAccordionElements =\n      [...this.el.children].some((element: HTMLMarketAccordionItemElement | HTMLMarketTableRowElement) => {\n        return element.tagName.toLowerCase() === getNamespacedTagFor('market-accordion-item');\n      }) || this.hasAccordionRows;\n\n    /* Set an index for each row so we have some sort of id and can track it\n    this will perhaps come in useful later when we need to add a row re-ordering\n    drag & drop feature (although we probably need some conditional, or to set\n    the index somewhere else than here) - jbiggs */\n    this.allRows.forEach((row) => {\n      row.index = Array.prototype.indexOf.call(this.allRows, row);\n      row.nested = hasAccordionElements;\n    });\n  }\n\n  /**\n   * Gets current CSSStyleDeclaration object for this.el (see styleDeclarationObserver)\n   */\n  private detectStyleDeclaration() {\n    this.styleDeclaration = window.getComputedStyle(this.el as HTMLElement);\n  }\n\n  private throttledDetectStyleDeclaration = throttle(this.detectStyleDeclaration.bind(this), RESIZE_DEBOUNCE_DURATION);\n\n  /**\n   * Supports setting dynamic column sizes using CSS media queries by recalculating column width on table resize\n   */\n  private initResizeObserver() {\n    if (!this.observers.resize) {\n      this.observers.resize = new ResizeObserver(() => {\n        window.requestAnimationFrame(() => {\n          this.throttledDetectStyleDeclaration();\n        });\n      });\n      this.observers.resize.observe(this.el);\n    }\n  }\n\n  /**\n   * Supports setting dynamic column widths by updating inline styles\n   */\n  private initInlineStyleObserver() {\n    if (!this.observers.inlineStyle) {\n      this.observers.inlineStyle = new MutationObserver(() => this.detectStyleDeclaration());\n      this.observers.inlineStyle.observe(this.el, {\n        attributes: true,\n        attributeFilter: ['style'],\n      });\n    }\n  }\n\n  /**\n   * since onSlotchange only fires on changes to the <Host> node itself (not changes to the child slots of the\n   * <market-table-area>s), we're using a mutation observer to listen for added rows or changes in row content\n   * https://github.com/ionic-team/stencil/issues/232#issuecomment-397871813\n   */\n  private initContentObserver() {\n    if (!this.observers.content) {\n      this.observers.content = new MutationObserver(() => this.handleSlotChange());\n      this.observers.content.observe(this.el, {\n        childList: true,\n        subtree: true,\n        characterData: true,\n      });\n    }\n  }\n\n  /* When the component loads, we need to check for a grid-template-columns\n  CSS declaration on the table, and also read the column children\n  Setting both of these will trigger watcher functions which forward these\n  values to the row children */\n  componentWillLoad() {\n    this.detectStyleDeclaration();\n    this.handleSlotChange();\n  }\n\n  componentDidLoad() {\n    this.initResizeObserver();\n    this.initInlineStyleObserver();\n    this.initContentObserver();\n  }\n\n  render() {\n    const MarketTableAreaTagName = getNamespacedTagFor('market-table-area');\n\n    return (\n      <Host class=\"market-table\" role=\"table\" onSlotchange={() => this.handleSlotChange()}>\n        <MarketTableAreaTagName orientation=\"horizontal\" stick-to=\"top\" active={this.rowsStuckTop.length > 0}>\n          <slot name=\"sticky-header\"></slot>\n        </MarketTableAreaTagName>\n        <MarketTableAreaTagName orientation=\"horizontal\" active>\n          <slot name=\"header\"></slot>\n          <slot></slot>\n          <slot name=\"footer\"></slot>\n        </MarketTableAreaTagName>\n        <MarketTableAreaTagName orientation=\"horizontal\" stick-to=\"bottom\" active={this.rowsStuckBottom.length > 0}>\n          <slot name=\"sticky-footer\"></slot>\n        </MarketTableAreaTagName>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    Object.values(this.observers).forEach((observer) => {\n      observer?.disconnect();\n    });\n  }\n}\n"],"mappings":"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"}