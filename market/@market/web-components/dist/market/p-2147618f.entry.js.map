{"version":3,"names":["marketTileCss","MarketTileStyle0","MarketTile","this","hasTrailingAccessorySlot","hasIndicatorTextSlot","onSizeChange","adjustSlottedLabels","setSelected","newValue","Promise","resolve","selected","defaultPrevented","marketTileSelectedChanged","emit","value","handleClick","event","disabled","interactive","preventDefault","handleRemoveActionKeydown","key","handleRemoveActionClick","stopPropagation","marketTileRemoveClicked","renderDefaultRemoveAction","h","class","onClick","bind","onKeyUp","slot","width","height","viewBox","fill","xmlns","d","stroke","handleKeydown","target","el","size","hint","querySelector","label","subtext","labelLineClamp","style","setProperty","toString","checkSlottedMedia","hasSlottedMedia","Boolean","componentWillLoad","render","showActions","tabindex","Host","e","onKeydown","classNames","onSlotchange","name"],"sources":["src/components/market-tile/market-tile.css?tag=market-tile&encapsulation=shadow","src/components/market-tile/market-tile.tsx"],"sourcesContent":["@import \"../../styles/mixins/typography.css\";\n\n/**\n * This component uses CSS Grid areas to handle the differences in rendering size=\"small\" tiles and\n * size=\"medium\" tiles. The areas are set up to look like this in a medium tile:\n * LA = leading-accessory\n * TA = trailing-accessory\n * C = content\n * ------------------\n * | LA    _     TA |\n * |                |\n * | C     C      C |\n * |________________|\n * But in a small tile, the areas are shifted:\n * ------------------\n * | LA    C     TA |\n * |________________|\n */\n\n:host {\n  --item-tile-text-color: black;\n  --focus-ring-color:\n    color-mix(\n      in srgb,\n      var(--item-tile-focus-ring-color, var(--core-focus-ring-color)) 100%,\n      transparent\n    );\n\n  position: relative;\n  z-index: 1;\n  display: grid;\n  grid-template-areas:\n    \"leading-accessory _ trailing-accessory\"\n    \"content content content\";\n  grid-template-columns: minmax(0, max-content) 1fr auto;\n  box-sizing: border-box;\n  width: var(--item-tile-width, 200px);\n  height: var(--item-tile-medium-height, 124px);\n  padding: var(--item-tile-medium-padding, var(--core-metrics-spacing-150));\n  border-radius: var(--item-tile-border-radius, 6px);\n  background: var(--item-tile-fill-color, var(--core-fill-40-color));\n  user-select: none;\n\n  &([interactive]) {\n    cursor: pointer;\n  }\n\n  &([size=\"small\"]) {\n    grid-template-areas: \"leading-accessory content trailing-accessory\";\n    grid-template-columns: max-content 1fr minmax(0, max-content);\n    height: var(--item-tile-small-height, 56px);\n    padding:\n      var(--item-tile-small-padding-vertical, var(--core-metrics-spacing-50))\n      var(--item-tile-small-padding-horizontal, var(--core-metrics-spacing-150));\n    column-gap: var(--core-metrics-spacing-100);\n\n    ::slotted([slot=\"leading-accessory\"]),\n    .trailing-accessory-container {\n      align-items: center;\n    }\n\n    .content {\n      justify-content: center;\n      align-items: start;\n    }\n\n    /** When size=\"small\", if position is absolute, the label runs over the remove button */\n    .remove-button {\n      position: relative;\n    }\n  }\n\n  &([aria-disabled]) {\n    opacity: 20%;\n    cursor: not-allowed;\n\n    .remove-button {\n      cursor: not-allowed;\n\n      &:hover {\n        background: var(--item-tile-remove-button-fill, #fff);\n      }\n    }\n  }\n\n  &([aria-selected=\"true\"]) {\n    box-shadow:\n      inset 0 0 0 var(--item-tile-selected-value-border-width, 2px)\n      var(--item-tile-selected-value-border-color, var(--core-emphasis-fill-color));\n  }\n\n  &(:focus-visible) {\n    outline: var(--item-tile-focus-ring-border-size, var(--core-focus-ring-border-size)) solid var(--focus-ring-color);\n    outline-offset: var(--item-tile-focus-ring-buffer-size, var(--core-focus-ring-buffer-size));\n  }\n}\n\n.background-image {\n  display: none;\n}\n\n.background-image.has-slotted-media,\n.background-image ::slotted([slot=\"media\"]) {\n  --item-tile-text-color: white;\n\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  display: block;\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n  border-radius: var(--item-tile-border-radius, 6px);\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: var(--item-tile-border-radius, 6px);\n    background-image:\n      var(\n        --item-tile-background-image-gradient,\n        linear-gradient(180.98deg, rgb(0 0 0 / 4%) 0.84%, rgb(0 0 0 / 40%) 99.16%)\n      );\n  }\n}\n\n::slotted([slot=\"leading-accessory\"]) {\n  z-index: 2;\n  display: flex;\n  grid-area: leading-accessory;\n  align-items: flex-start;\n}\n\n.trailing-accessory-container {\n  z-index: 3;\n  display: flex;\n  grid-area: trailing-accessory;\n  justify-content: flex-end;\n\n  .remove-button {\n    position: absolute;\n    width: var(--item-tile-remove-button-width, 24px);\n    height: var(--item-tile-remove-button-height, 24px);\n    border: none;\n    border-radius: 100px;\n    background: var(--item-tile-remove-button-fill, var(--core-surface-30-color));\n    box-shadow: var(--elevation-10-shadow);\n    cursor: pointer;\n\n    &:hover {\n      background: var(--item-tile-remove-button-hover-state-background-color, #ffe5ea);\n    }\n\n    &:active {\n      background: var(--item-time-remove-button-active-state-background-color, #ffccd5);\n    }\n\n    svg {\n      position: absolute;\n      top: 0;\n      left: 0;\n      padding: var(--core-metrics-spacing-50);\n    }\n  }\n\n  ::slotted([slot=\"indicator\"]) {\n    @extend %semibold-10;\n\n    height: var(--core-metrics-spacing-200);\n    padding: 0 var(--core-metrics-spacing-100);\n    border-radius: 100px;\n    background: var(--core-fill-10-dark-mode-color);\n    color: black;\n    box-shadow: var(--elevation-10-shadow);\n  }\n}\n\n.content {\n  z-index: 2;\n  display: flex;\n  flex-direction: column;\n  grid-area: content;\n  justify-content: flex-end;\n  min-width: 0;\n}\n\n::slotted([slot=\"hint\"]) {\n  @extend %display-10;\n}\n\n::slotted([slot=\"label\"]) {\n  @extend %medium-30;\n\n  display: -webkit-box; /* stylelint-disable-line value-no-vendor-prefix */\n  overflow-y: hidden;\n  min-width: 0;\n  -webkit-line-clamp: var(--item-tile-label-line-clamp, 1);\n  -webkit-box-orient: vertical;\n}\n\n::slotted([slot=\"subtext\"]) {\n  @extend %paragraph-10;\n\n  display: -webkit-box; /* stylelint-disable-line value-no-vendor-prefix */\n  overflow-y: hidden;\n  min-width: 0;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n}\n","import { Component, Element, Event, EventEmitter, Host, Method, Prop, h, State, Watch } from '@stencil/core';\nimport { TMarketTileSelectedChanged } from './events';\nimport { classNames } from '../../utils/classnames';\n\n/**\n * @slot media - When provided, replaces the solid color background with a background image and applies a slight gradient.\n * @slot leading-accessory - An icon set on the top-left corner of the tile.\n * @slot actions - Optional slot to customize action(s) in the top-right corner of the tile. Renders a remove button by default.\n * @slot indicator - Text to render in a pill-like element on the top-right corner of the slot.\n * Is overridden by `actions`.\n * @slot hint - Large text set in the center of a medium-sized tile. Intended to be one or two letters.\n * @slot label - Text set beneath the hint slot.\n * @slot subtext - Smaller text set beneath the label slot.\n */\n@Component({\n  tag: 'market-tile',\n  styleUrl: 'market-tile.css',\n  shadow: true,\n})\nexport class MarketTile {\n  @Element() el: HTMLMarketTileElement;\n  hasTrailingAccessorySlot = false;\n  hasIndicatorTextSlot = false;\n\n  /**\n   * Whether to disable the tile.\n   */\n  @Prop({ reflect: true, attribute: 'aria-disabled' }) readonly disabled: boolean = false;\n\n  /**\n   * Enables interactivity.\n   */\n  @Prop() readonly interactive: boolean = false;\n\n  /**\n   * Whether to render the markup in the action slot.\n   */\n  @Prop() readonly showActions: boolean = false;\n\n  /**\n   * What size tile to render.\n   */\n  @Prop({ reflect: true }) readonly size: 'small' | 'medium' = 'medium';\n\n  /**\n   * Value for the tile.\n   */\n  @Prop({ reflect: true }) readonly value: string;\n\n  /**\n   * Whether the tile is currently selected\n   */\n  @Prop({ reflect: true, mutable: true }) selected: boolean = false;\n\n  /**\n   * Whether or not `[slot=\"media\"]` is provided\n   */\n  @State() hasSlottedMedia = false;\n\n  /**\n   * Fired whenever the tile is selected.\n   */\n  @Event() marketTileSelectedChanged: EventEmitter<TMarketTileSelectedChanged>;\n\n  /**\n   * Fired whenever the remove button is clicked\n   */\n  @Event() marketTileRemoveClicked: EventEmitter;\n\n  @Watch('size')\n  onSizeChange() {\n    this.adjustSlottedLabels();\n  }\n\n  /**\n   * Allows external elements to set selected value.\n   */\n  @Method()\n  setSelected(newValue: boolean) {\n    if (typeof newValue !== 'boolean') {\n      return Promise.resolve();\n    }\n\n    if (this.selected !== newValue) {\n      const { defaultPrevented } = this.marketTileSelectedChanged.emit({\n        selected: this.selected,\n        value: this.value,\n      });\n\n      if (!defaultPrevented) {\n        this.selected = newValue;\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n  handleClick(event: MouseEvent | KeyboardEvent) {\n    if (this.disabled || !this.interactive) {\n      return;\n    }\n\n    this.selected = !this.selected;\n    event.preventDefault();\n    this.marketTileSelectedChanged.emit({ selected: this.selected, value: this.value });\n  }\n\n  handleRemoveActionKeydown(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'Enter':\n      case ' ':\n        this.handleRemoveActionClick(event);\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleRemoveActionClick(event: MouseEvent | KeyboardEvent) {\n    if (this.disabled || !this.interactive) {\n      return;\n    }\n\n    event.stopPropagation();\n    this.marketTileRemoveClicked.emit();\n  }\n\n  renderDefaultRemoveAction() {\n    const { disabled, handleRemoveActionClick, handleRemoveActionKeydown } = this;\n\n    return (\n      <button\n        class=\"remove-button\"\n        disabled={disabled}\n        onClick={handleRemoveActionClick.bind(this)}\n        onKeyUp={handleRemoveActionKeydown.bind(this)}\n      >\n        <svg\n          slot=\"icon\"\n          width=\"16\"\n          height=\"16\"\n          viewBox=\"0 0 16 16\"\n          fill=\"var(--core-critical-text-color)\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M12.8318 7.3335V7.1685H12.6668H3.3335H3.1685V7.3335V8.66683V8.83183H3.3335H12.6668H12.8318V8.66683V7.3335Z\"\n            fill=\"var(--core-critical-text-color)\"\n            stroke=\"var(--core-critical-text-color)\"\n            stroke-width=\"0.33\"\n          />\n        </svg>\n      </button>\n    );\n  }\n\n  handleKeydown(event: KeyboardEvent) {\n    // don't intercept keydown of descendant elements\n    // e.g. remove button\n    if (event.target !== this.el) {\n      return;\n    }\n\n    switch (event.key) {\n      case 'Enter':\n      case ' ':\n        this.handleClick(event);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * This function determines the number of lines the `label` slot text should clamp to.\n   * It should clamp to a single line if the hint slot exists or if the subtext slot exists\n   * and the element `size` prop is set to \"small\".\n   */\n  adjustSlottedLabels() {\n    const { size, el } = this;\n    const hint = el.querySelector('[slot=\"hint\"]');\n    const label = el.querySelector('[slot=\"label\"]');\n    const subtext = el.querySelector('[slot=\"subtext\"]');\n\n    if (!label) {\n      return;\n    }\n\n    const labelLineClamp = hint || (subtext && size === 'small') ? 1 : 2;\n\n    el.style.setProperty('--item-tile-label-line-clamp', labelLineClamp.toString());\n  }\n\n  checkSlottedMedia() {\n    this.hasSlottedMedia = Boolean(this.el.querySelector('[slot=\"media\"]'));\n  }\n\n  componentWillLoad() {\n    this.checkSlottedMedia();\n    this.hasIndicatorTextSlot = Boolean(this.el.querySelector('[slot=\"indicator\"]'));\n  }\n\n  render() {\n    const { disabled, size, hasSlottedMedia, hasIndicatorTextSlot, interactive, showActions, selected } = this;\n    const tabindex = interactive && !disabled ? '0' : null;\n    return (\n      <Host\n        class=\"market-tile\"\n        tabindex={tabindex}\n        aria-selected={selected.toString()}\n        onClick={(e) => this.handleClick(e)}\n        onKeydown={(e) => this.handleKeydown(e)}\n      >\n        <div class={classNames('background-image', { 'has-slotted-media': hasSlottedMedia })}>\n          <slot onSlotchange={() => this.checkSlottedMedia()} name=\"media\"></slot>\n        </div>\n        <slot name=\"leading-accessory\"></slot>\n        <div class=\"trailing-accessory-container\">\n          {showActions && <slot name=\"actions\">{this.renderDefaultRemoveAction()}</slot>}\n          {!showActions && hasIndicatorTextSlot && <slot name=\"indicator\"></slot>}\n        </div>\n        <div class=\"content\">\n          {size !== 'small' && <slot onSlotchange={() => this.adjustSlottedLabels()} name=\"hint\"></slot>}\n          <slot onSlotchange={() => this.adjustSlottedLabels()} name=\"label\"></slot>\n          <slot onSlotchange={() => this.adjustSlottedLabels()} name=\"subtext\"></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}