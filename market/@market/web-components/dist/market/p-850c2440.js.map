{"version":3,"names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","_element$getRootNode","call","ownerDocument","isInert","node","lookUp","_node$getAttribute","inertAtt","getAttribute","inert","result","parentNode","isContentEditable","_node$getAttribute2","attValue","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","content","children","nestedCandidates","flatten","push","scopeParent","validCandidate","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","_nestedCandidates","hasTabIndex","isNaN","parseInt","getTabIndex","Error","tabIndex","test","getSortOrderTabIndex","isScope","sortOrderedTabbables","a","b","documentOrder","isInput","isHiddenInput","type","isDetailsWithSummary","r","some","child","getCheckedRadio","nodes","form","i","checked","isTabbableRadio","name","radioScope","queryRadios","radioSet","window","CSS","escape","err","console","error","message","isRadio","isNonTabbableRadio","isNodeAttached","_nodeRoot","nodeRoot","nodeRootHost","host","attached","_nodeRootHost","_nodeRootHost$ownerDo","_node$ownerDocument","contains","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","isDirectSummary","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","getClientRects","isDisabledFromFieldset","disabled","item","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","candidateTabindex","sort","reduce","acc","sortable","concat","tabbable","container","bind","focusable","isTabbable","focusableCandidateSelector","isFocusable","ownKeys","e","t","Object","keys","getOwnPropertySymbols","o","getOwnPropertyDescriptor","enumerable","_objectSpread2","arguments","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","key","value","_toPropertyKey","configurable","writable","_toPrimitive","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","String","Number","arg","activeFocusTraps","activateTrap","trapStack","trap","activeTrap","pause","trapIndex","indexOf","splice","deactivateTrap","unpause","isSelectableInput","toLowerCase","select","isEscapeEvent","keyCode","isTabEvent","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","_len","params","_key","getActualTarget","event","target","composedPath","internalTrapStack","createFocusTrap","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","recentNavEvent","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","tabbableNodes","find","getNodeForOption","optionValue","_len2","_key2","querySelector","getInitialFocusNode","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","focusableNodes","lastTabbableNode","firstDomTabbableNode","lastDomTabbableNode","reverse","posTabIndexesFound","nextTabbableNode","forward","nodeIdx","group","g","getActiveElement","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","findNextNavNode","_ref2","_ref2$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref3","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref4","_destinationGroupIndex","_destinationGroup","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","nextNode","navAcrossContainers","mruContainerIdx","mruTabIdx","n","checkKeyNav","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","checkDomRemoval","mutations","isFocusedNodeRemoved","mutation","removedNodes","mutationObserver","MutationObserver","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean","createAndActivateFocusTrap","focusTrap\n            .createFocusTrap","assign","warn"],"sources":["../../node_modules/tabbable/dist/index.esm.js","../../node_modules/focus-trap/dist/focus-trap.esm.js","src/utils/focus-trap.ts"],"sourcesContent":["/*!\n* tabbable 6.2.0\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n  if (lookUp === void 0) {\n    lookUp = true;\n  }\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2;\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      var shadowRoot = element.shadowRoot ||\n      // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nvar hasTabIndex = function hasTabIndex(node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nvar getTabIndex = function getTabIndex(node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {\n      return 0;\n    }\n  }\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nvar getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {\n  var tabIndex = getTabIndex(node);\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n  return tabIndex;\n};\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n  var radioScope = node.form || getRootNode(node);\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n  var radioSet;\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot;\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  var attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n  return attached;\n};\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n    width = _node$getBoundingClie.width,\n    height = _node$getBoundingClie.height;\n  return width === 0 && height === 0;\n};\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n    getShadowRoot = _ref.getShadowRoot;\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled ||\n  // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) ||\n  // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n  return true;\n};\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n  return true;\n};\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getSortOrderTabIndex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\nvar tabbable = function tabbable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n  return sortByOrder(candidates);\n};\nvar focusable = function focusable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n  return candidates;\n};\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, getTabIndex, isFocusable, isTabbable, tabbable };\n//# sourceMappingURL=index.esm.js.map\n","/*!\n* focus-trap 7.5.4\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { isFocusable, tabbable, focusable, isTabbable, getTabIndex } from 'tabbable';\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || ( // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  var getActiveElement = function getActiveElement(el) {\n    var activeElement = el.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {\n      return getActiveElement(activeElement.shadowRoot);\n    }\n    return activeElement;\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === getActiveElement(document)) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref2) {\n    var target = _ref2.target,\n      event = _ref2.event,\n      _ref2$isBackward = _ref2.isBackward,\n      isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var firstTabbableNode = _ref3.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref4) {\n          var lastTabbableNode = _ref4.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 || onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 || onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 || onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 || onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 || onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 || onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };\n//# sourceMappingURL=focus-trap.esm.js.map\n","import * as focusTrap from 'focus-trap';\n\nexport type FocusTrap = focusTrap.FocusTrap;\nexport type FocusTrapOptions = focusTrap.Options;\nexport type FocusTrapActivateOptions = focusTrap.ActivateOptions;\nexport type FocusTrapDeactivateOptions = focusTrap.DeactivateOptions;\n\nexport const createAndActivateFocusTrap = ({\n  activateOptions,\n  el,\n  options,\n}: {\n  activateOptions?: FocusTrapActivateOptions;\n  el: HTMLElement;\n  options?: FocusTrapOptions;\n}): FocusTrap | undefined => {\n  // Prevent runtime errors when attempting to activate focus trap\n  try {\n    return focusTrap\n      .createFocusTrap(el, {\n        allowOutsideClick: true,\n        document,\n        escapeDeactivates: false,\n        ...options,\n        tabbableOptions: {\n          getShadowRoot: true, // enables shadow DOM support\n          ...options?.tabbableOptions,\n        },\n      })\n      .activate(activateOptions);\n  } catch (e) {\n    console.warn(e); // eslint-disable-line no-console\n  }\n  return undefined;\n};\n"],"mappings":"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"}