{"version":3,"names":["marketBladeCss","MarketBladeStyle0","MarketBlade","this","type","skipAnimation","CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION","CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION","reenableAnimation","headerNavigateEventHandler","event","detail","target","action","closest","getDialogSelector","el","dismiss","dismissOptions","defaultPrevented","marketDialogDismissed","emit","dialog","origin","hidden","setTimeout","marketDialogDidDismiss","animationExitDuration","Promise","resolve","onTrapFocusChanged","newValue","oldValue","activateFocusTrap","deactivateFocusTrap","options","activateOptions","focusTrap","activate","trapFocus","createAndActivateFocusTrap","deactivateOptions","deactivate","Object","assign","returnFocus","checkCanReturnFocus","trigger","setFocus","undefined","connectedCallback","marketDialogLoaded","animationEnterDuration","componentWillLoad","header","querySelector","getNamespacedTagFor","showNavigation","setupDialogCompactHandler","disconnectedCallback","render","h","Host","key","role","class","classNames"],"sources":["src/components/market-blade/market-blade.css?tag=market-blade&encapsulation=shadow","src/components/market-blade/market-blade.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/modals.css\";\n\n:host {\n  @extend %modal;\n\n  position: fixed;\n  top: 0;\n  right: 0;\n  width: 100%;\n  max-width: var(--modal-blade-maximum-width-size);\n  height: 100vh;\n  padding-top: var(--modal-blade-regular-vertical-size-class-vertical-padding);\n  padding-bottom: var(--modal-blade-regular-vertical-size-class-vertical-padding);\n  background-color: var(--modal-blade-background-color);\n  box-shadow: var(--elevation-20-shadow);\n\n  /* Enter animation */\n  animation-name: market-slide-left-enter;\n  animation-duration:\n    var(\n      --blade-animation-enter-transition-duration,\n      var(--core-animation-enter-transition-moderate-speed-duration)\n    );\n  animation-timing-function:\n    var(\n      --blade-animation-enter-transition-easing,\n      var(--core-animation-enter-transition-easing)\n    );\n  animation-fill-mode: forwards;\n\n  ::slotted(*) {\n    padding-right: var(--modal-blade-regular-horizontal-size-class-horizontal-padding);\n    padding-left: var(--modal-blade-regular-horizontal-size-class-horizontal-padding);\n  }\n\n  /* Exit animation */\n  &([hidden]) {\n    animation-name: market-slide-left-exit;\n    animation-duration:\n      var(\n        --blade-animation-exit-transition-duration,\n        var(--core-animation-exit-transition-moderate-speed-duration)\n      );\n    animation-timing-function:\n      var(\n        --blade-animation-exit-transition-easing,\n        var(--core-animation-exit-transition-easing)\n      );\n  }\n\n  /* Used to skip exit animation if blade loads w/ hidden attribute */\n  &([hidden].skip-animation) {\n    transform: translateX(100%);\n    animation: none;\n  }\n}\n\n@media only screen and (min-width: 1200px) {\n  :host {\n    max-width: var(--modal-blade-wide-viewport-width-size);\n    padding-top: var(--modal-blade-wide-viewport-padding-top-size);\n    padding-bottom: var(--modal-blade-wide-viewport-padding-bottom-size);\n  }\n\n  ::slotted(*) {\n    padding-right: var(--modal-blade-wide-viewport-padding-right-size);\n    padding-left: var(--modal-blade-wide-viewport-padding-left-size);\n  }\n}\n","// TODO: use blade design tokens for animation speeds when they exist\nimport {\n  CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION,\n  CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION,\n} from '@market/market-theme/js/cjs/index.js';\nimport { Component, Host, Prop, Element, Listen, Method, Event, EventEmitter, h, Watch } from '@stencil/core';\n\nimport {\n  DialogDismissedEvent,\n  DialogLoadedEvent,\n  DialogType,\n  setupDialogCompactHandler,\n  getDialogSelector,\n} from '../../utils/dialog';\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport {\n  createAndActivateFocusTrap,\n  FocusTrap,\n  FocusTrapActivateOptions,\n  FocusTrapDeactivateOptions,\n  FocusTrapOptions,\n} from '../../utils/focus-trap';\nimport { classNames } from '../../utils/classnames';\nimport { TMarketHeaderNavigateEventDetail } from '../market-header/events';\n\n/**\n * @slot - The main content of the blade. Use `<section class=\"main\">` tag.\n */\n@Component({\n  tag: 'market-blade',\n  styleUrl: 'market-blade.css',\n  shadow: true,\n})\nexport class MarketBlade {\n  @Element() el: HTMLMarketBladeElement;\n  type: DialogType = 'blade';\n  focusTrap: FocusTrap;\n\n  /**\n   * INTERNAL ONLY: Used in CSS to trigger start and stop animations\n   */\n  @Prop({ mutable: true, reflect: true }) hidden: boolean = false;\n\n  /**\n   * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal\n   */\n  @Prop({ reflect: true, attribute: 'data-dialog-id' }) readonly dialogID: string;\n\n  /**\n   * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place\n   * in the stack\n   */\n  @Prop({ reflect: true, attribute: 'data-dialog-index' }) readonly index: number;\n\n  /**\n   * DEPRECATED: The duration for the blade enter/exit animations, set from design tokens\n   */\n  @Prop() readonly animationDuration: number = CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION;\n\n  /**\n   * The duration for the modal enter animation, set from design tokens\n   */\n  @Prop() readonly animationEnterDuration: number = CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION;\n\n  /**\n   * The duration for the modal exit animation, set from design tokens\n   */\n  @Prop() readonly animationExitDuration: number = CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION;\n\n  /**\n   * Enforces focus trapping on the modal\n   */\n  @Prop({ mutable: true }) trapFocus: boolean = false;\n\n  /* Used to skip the exit animation for <market-blade hidden> on load */\n  skipAnimation: boolean = false;\n\n  /**\n   * Triggered when the blade finishes loading\n   */\n  @Event() marketDialogLoaded: EventEmitter<DialogLoadedEvent>;\n\n  /**\n   * Triggered when the blade is dismissed, handled by context manager\n   */\n  @Event() marketDialogDismissed: EventEmitter<DialogDismissedEvent>;\n\n  /**\n   * Triggered when the dialog is fully dismissed\n   */\n  @Event() marketDialogDidDismiss: EventEmitter<DialogDismissedEvent>;\n\n  @Watch('hidden')\n  reenableAnimation() {\n    this.skipAnimation = false;\n  }\n\n  /**\n   * Listen to the marketHeaderNavigate event emitted by a market-header child component\n   * so we can emit a close event if needed\n   */\n  @Listen('marketHeaderNavigate')\n  headerNavigateEventHandler(event: CustomEvent<TMarketHeaderNavigateEventDetail>) {\n    const { detail, target } = event;\n    // TODO: 'close' should probably come from an enum of some sort\n    if (detail.action === 'close') {\n      // only dismiss if this is the first ancestor dialog\n      if ((target as HTMLElement).closest(getDialogSelector()) === this.el) {\n        this.dismiss();\n      }\n    }\n  }\n\n  /**\n   * Emits the dismiss event\n   * The parent context will handle actually removing elements from the DOM,\n   * All the blade needs to do it emit an event so actually closing it can be\n   * some other elements problem\n   */\n  @Method()\n  dismiss(dismissOptions?: Partial<DialogDismissedEvent>) {\n    const { defaultPrevented } = this.marketDialogDismissed.emit({\n      dialog: this.el,\n      type: this.type,\n      origin: dismissOptions?.origin || this.el,\n    });\n\n    if (!defaultPrevented) {\n      this.hidden = true;\n\n      /**\n       * Emit a marketDialogDidDismiss event when modal gets fully dismissed (after animation).\n       */\n      setTimeout(() => {\n        this.marketDialogDidDismiss.emit({\n          dialog: this.el,\n          type: this.type,\n          origin: this.el,\n        });\n      }, this.animationExitDuration);\n    }\n\n    return Promise.resolve();\n  }\n\n  @Watch('trapFocus')\n  onTrapFocusChanged(newValue: boolean, oldValue: boolean) {\n    // only activate/deactivate when the `trapFocus` prop value changes\n    if (newValue !== oldValue) {\n      if (newValue) {\n        this.activateFocusTrap();\n      } else {\n        this.deactivateFocusTrap();\n      }\n    }\n  }\n\n  /**\n   * Activates the focus trap\n   *\n   * See [`focus-trap.ts`](../../utils/focus-trap.ts) for default options\n   *\n   * @param {Object} [options] [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)\n   * @param {Object} [activateOptions] set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)\n   */\n  @Method()\n  activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) {\n    if (this.focusTrap) {\n      this.focusTrap.activate(activateOptions ?? {});\n      if (!this.trapFocus) {\n        this.trapFocus = true;\n      }\n    } else {\n      this.focusTrap = createAndActivateFocusTrap({\n        activateOptions,\n        el: this.el,\n        options,\n      });\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Deactivates the focus trap\n   *\n   * @param {FocusTrapDeactivateOptions} [deactivateOptions] set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)\n   */\n  @Method()\n  deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) {\n    if (this.focusTrap) {\n      this.focusTrap.deactivate({\n        returnFocus: true,\n        checkCanReturnFocus: (trigger) =>\n          new Promise((resolve) => {\n            if (typeof (trigger as any)?.setFocus === 'function') {\n              (trigger as any).setFocus();\n            } else {\n              resolve(); // node.focus(); will be called by focus-trap\n            }\n          }),\n        ...deactivateOptions,\n      });\n      this.focusTrap = undefined;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Emit a marketDialogLoaded event when the component connects.\n   * Need this so the context manager isn't rummaging around it's DOM\n   * to try and find the dialog that was just appended\n   */\n  connectedCallback() {\n    setTimeout(() => {\n      this.marketDialogLoaded.emit({\n        dialog: this.el,\n        type: this.type,\n      });\n\n      if (this.trapFocus) {\n        this.activateFocusTrap();\n      }\n    }, this.animationEnterDuration);\n  }\n\n  componentWillLoad() {\n    const header = this.el.querySelector<HTMLMarketHeaderElement>(getNamespacedTagFor('market-header'));\n    if (header) {\n      // We want to force the header to be navigable when slotted into blade\n      header.showNavigation = true;\n    }\n\n    if (this.hidden) {\n      this.skipAnimation = true;\n    }\n\n    setupDialogCompactHandler(this.el);\n  }\n\n  disconnectedCallback() {\n    this.deactivateFocusTrap();\n  }\n\n  render() {\n    return (\n      <Host\n        role=\"dialog\"\n        class={classNames('market-blade', {\n          'skip-animation': this.skipAnimation,\n        })}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"2PAAA,MAAMA,EAAiB,smGACvB,MAAAC,EAAeD,E,MCgCFE,EAAW,M,4MAEtBC,KAAAC,KAAmB,QAwCnBD,KAAAE,cAAyB,M,YAlCiC,M,oEAgBbC,0D,4BAKKA,0D,2BAKDC,yD,eAKH,K,CAqB9C,iBAAAC,GACEL,KAAKE,cAAgB,K,CAQvB,0BAAAI,CAA2BC,GACzB,MAAMC,OAAEA,EAAMC,OAAEA,GAAWF,EAE3B,GAAIC,EAAOE,SAAW,QAAS,CAE7B,GAAKD,EAAuBE,QAAQC,OAAyBZ,KAAKa,GAAI,CACpEb,KAAKc,S,GAYX,OAAAA,CAAQC,GACN,MAAMC,iBAAEA,GAAqBhB,KAAKiB,sBAAsBC,KAAK,CAC3DC,OAAQnB,KAAKa,GACbZ,KAAMD,KAAKC,KACXmB,QAAQL,IAAc,MAAdA,SAAc,SAAdA,EAAgBK,SAAUpB,KAAKa,KAGzC,IAAKG,EAAkB,CACrBhB,KAAKqB,OAAS,KAKdC,YAAW,KACTtB,KAAKuB,uBAAuBL,KAAK,CAC/BC,OAAQnB,KAAKa,GACbZ,KAAMD,KAAKC,KACXmB,OAAQpB,KAAKa,IACb,GACDb,KAAKwB,sB,CAGV,OAAOC,QAAQC,S,CAIjB,kBAAAC,CAAmBC,EAAmBC,GAEpC,GAAID,IAAaC,EAAU,CACzB,GAAID,EAAU,CACZ5B,KAAK8B,mB,KACA,CACL9B,KAAK+B,qB,GAcX,iBAAAD,CAAkBE,EAA4BC,GAC5C,GAAIjC,KAAKkC,UAAW,CAClBlC,KAAKkC,UAAUC,SAASF,IAAe,MAAfA,SAAe,EAAfA,EAAmB,IAC3C,IAAKjC,KAAKoC,UAAW,CACnBpC,KAAKoC,UAAY,I,MAEd,CACLpC,KAAKkC,UAAYG,EAA2B,CAC1CJ,kBACApB,GAAIb,KAAKa,GACTmB,W,CAGJ,OAAOP,QAAQC,S,CASjB,mBAAAK,CAAoBO,GAClB,GAAItC,KAAKkC,UAAW,CAClBlC,KAAKkC,UAAUK,WAAUC,OAAAC,OAAA,CACvBC,YAAa,KACbC,oBAAsBC,GACpB,IAAInB,SAASC,IACX,UAAYkB,IAAe,MAAfA,SAAO,SAAPA,EAAiBC,YAAa,WAAY,CACnDD,EAAgBC,U,KACZ,CACLnB,G,MAGHY,IAELtC,KAAKkC,UAAYY,S,CAEnB,OAAOrB,QAAQC,S,CAQjB,iBAAAqB,GACEzB,YAAW,KACTtB,KAAKgD,mBAAmB9B,KAAK,CAC3BC,OAAQnB,KAAKa,GACbZ,KAAMD,KAAKC,OAGb,GAAID,KAAKoC,UAAW,CAClBpC,KAAK8B,mB,IAEN9B,KAAKiD,uB,CAGV,iBAAAC,GACE,MAAMC,EAASnD,KAAKa,GAAGuC,cAAuCC,EAAoB,kBAClF,GAAIF,EAAQ,CAEVA,EAAOG,eAAiB,I,CAG1B,GAAItD,KAAKqB,OAAQ,CACfrB,KAAKE,cAAgB,I,CAGvBqD,EAA0BvD,KAAKa,G,CAGjC,oBAAA2C,GACExD,KAAK+B,qB,CAGP,MAAA0B,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CACHC,KAAK,SACLC,MAAOC,EAAW,eAAgB,CAChC,iBAAkB/D,KAAKE,iBAGzBwD,EAAA,QAAAE,IAAA,6C"}