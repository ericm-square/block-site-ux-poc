{"version":3,"names":["marketTableRowCss","MarketTableRowStyle0","MarketTableRow","this","componentLoaded","formNewGridTemplate","gridTemplate","gridTemplateLeft","gridTemplateMain","gridTemplateRight","tableAreaLeft","placement","length","tableAreaMain","tableAreaRight","gridTemplateObserver","newValue","oldValue","el","style","gridTemplateColumns","join","stickyObserver","emitStickyEvents","columnsObserver","columns","setCellColumnProperties","updateCellProperties","oldCellList","newCellList","tableColumns","updateFirstCellProperties","_setFirstCellProperties","updateNestedRowButton","nestedRowToggleButton","ariaExpanded","expanded","svgElement","querySelector","transform","updateSlottedControlCheckedValue","_a","slottedControl","setSelection","selected","updateSlottedControlDisabledValue","setDisabled","disabled","handleMarketCheckboxValueChange","event","target","detail","current","stick","position","stickTo","header","footer","sticky","Promise","resolve","unstick","_stickColumn","column","cell","_stickSelf","console","warn","_unstickColumn","_unstickSelf","_syncColumnVisibilityWithCells","columnName","hidden","cells","isStylableCell","_c","_b","_updateFirstCellProperties","call","setLeadingIndentation","leadingIndentation","toggleNestedRow","marketAccordionToggled","emit","marketNestedRowToggled","_updateColumnRelatedProperties","undefined","forEach","i","marketTableRowStick","index","marketTableRowUnstick","componentWillLoad","originalSlot","slot","querySelectorAll","getNamespacedTagFor","handleSlotChange","marketTableHeaderLoaded","_getMarketRowElement","element","_addCaretButtonToFirstCell","document","createElement","Object","assign","type","onclick","innerHTML","append","_registerSlottedControl","componentDidRender","accordionElement","closest","parentRow","parentAccordionElement","parentElement","children","find","child","componentDidLoad","handleClick","e","ignoredElementTagNames","shouldIgnoreClick","some","tagname","interactive","marketTableRowClicked","handleKeydown","key","preventDefault","render","MarketTableAreaTagName","h","Host","Boolean","toString","class","role","tabindex","onClick","onKeydown","orientation","ref","name","active","onSlotchange"],"sources":["src/components/market-table-row/market-table-row.css?tag=market-table-row&encapsulation=shadow","src/components/market-table-row/market-table-row.tsx"],"sourcesContent":["/* TODO: add design tokens for table components */\n\n:host {\n  --transition-duration: 0.2s; /* TODO: design token when design finalizes spec */\n\n  position: relative;\n  display: grid;\n  grid-column: 1 / -1;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  border-bottom: var(--table-border-width, 1px) solid var(--table-row-border-color, var(--core-divider-20-color));\n  transition: background-color var(--transition-duration);\n\n  @media (hover: hover) {\n    /* media query is to suppress hover styles on mobile devices */\n    &([interactive]:hover) ::slotted(.market-table-cell) {\n      background-color: var(--table-cell-hover-state-background-color, var(--core-fill-50-color));\n    }\n  }\n\n  &([header]) {\n    border-bottom: var(--table-border-width, 1px) solid var(--table-heading-border-color, var(--core-divider-10-color));\n  }\n\n  /* TODO This should be moved into market-table cell and\n  use :host-context() for conditional header/footer styling\n  when that selector has better brower support */\n  &([footer]) ::slotted(.market-table-cell) {\n    border-bottom: none;\n    font-weight: var(--table-footing-primary-text-font-weight, 500);\n    font-size: var(--table-footing-primary-text-font-size, var(--core-type-semibold-20-size));\n    line-height: var(--table-footing-primary-text-line-height, var(--core-type-semibold-20-leading));\n  }\n\n  /* [interactive] is the interactive version */\n  &([interactive]) ::slotted(.market-table-cell) {\n    cursor: pointer;\n  }\n\n  &([active]) ::slotted(.market-table-cell),\n  &([interactive]:active) ::slotted(.market-table-cell) {\n    background-color: var(--table-cell-pressed-state-background-color, var(--core-emphasis-40-color));\n  }\n\n  &([interactive]:focus) {\n    outline: none; /* override default browser focus styles */\n  }\n\n  &([interactive]:not([disabled]):focus) ::slotted(.market-table-cell) {\n    background-color: var(--table-cell-focus-state-background-color, var(--core-fill-50-color));\n  }\n\n  &([interactive][disabled]) {\n    pointer-events: none;\n  }\n\n  &([disabled]) ::slotted(.market-table-cell) {\n    background-color: transparent;\n    color: var(--table-cell-disabled-state-text-color, var(--core-text-30-color));\n    pointer-events: none;\n  }\n\n  &([nested]) ::slotted(.market-table-cell:first-of-type) {\n    padding-left:\n      calc(\n        (\n          var(--cell-indent-level) *\n          var(--table-row-indentation-padding, 40px)\n        ) +\n        var(--table-cell-padding, 8px) +\n        var(--table-accordion-content-width, 30px)\n      );\n  }\n\n  &([slot='custom-trigger']) ::slotted(.market-table-cell:first-of-type),\n  &([slot='header']) ::slotted(.market-table-cell:first-of-type),\n  &([slot='footer']) ::slotted(.market-table-cell:first-of-type) {\n    padding-left: var(--table-cell-padding, 8px);\n  }\n}\n\n:host ::slotted(.market-table-cell:first-of-type) {\n  padding-left:\n    calc(\n      var(--table-cell-padding, 8px) +\n      (var(--cell-indent-level) * var(--table-row-indentation-padding, 40px))\n    );\n}\n","import { Component, Host, Prop, Element, Watch, Event, EventEmitter, Method, State, h, Listen } from '@stencil/core';\n\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { MarketCheckboxCustomEvent, MarketToggleCustomEvent } from '../../components';\n\nexport type TCell = HTMLMarketTableCellElement | HTMLMarketTableColumnElement;\n\n/**\n * @slot - Default slot for all cells\n * @slot control - Intended for use with a market table cell or market table column that contain a control element.\n */\n@Component({\n  tag: 'market-table-row',\n  styleUrl: 'market-table-row.css',\n  shadow: true,\n})\nexport class MarketTableRow {\n  private tableAreaLeft!: HTMLMarketTableAreaElement;\n  private tableAreaRight!: HTMLMarketTableAreaElement;\n  private tableAreaMain!: HTMLMarketTableAreaElement;\n  private slottedControl: HTMLMarketCheckboxElement | HTMLMarketToggleElement;\n\n  @Element() el: HTMLMarketTableRowElement;\n\n  // ----------- Consumer-defined props -------------\n\n  /**\n   * Optional: Level of leading indentation\n   * This will be multiplied by the default indentation size (40px) for uniform indentation\n   * levels\n   */\n  @Prop({ mutable: true, reflect: true }) leadingIndentation: number = 0;\n\n  /**\n   * Optional: The edge of the table to fix this row to.\n   */\n  @Prop({ mutable: true, reflect: true }) stickTo: false | 'top' | 'bottom' = false;\n\n  /**\n   * Optional: When present, can be used instead of `stickTo` in combination\n   * with `header` or `footer` to determine the edge of the table to stick this\n   * row to. (`header` elements with `[sticky]` will be attached to the top, and\n   * `footer` elements to the bottom)\n   */\n  @Prop({ mutable: true, reflect: true }) sticky: boolean;\n\n  /**\n   * Whether the row is currently active.\n   */\n  @Prop({ reflect: true }) readonly active: boolean = false;\n\n  /**\n   * Whether or not the row is interactive. Results in row receiving\n   * hover and active styling when hovered/clicked.\n   */\n  @Prop({ reflect: true }) readonly interactive: boolean = false;\n\n  /**\n   * Whether the row is disabled.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * Whether the row is selected. Used by control element.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  // --------------- Internal props -----------------\n\n  /**\n   * Gives this row header styling\n   */\n  @Prop({ mutable: true, reflect: true }) header: boolean = false;\n\n  /**\n   * Gives this row footer styling\n   */\n  @Prop({ mutable: true, reflect: true }) footer: boolean = false;\n\n  /**\n   * The slot this row was originally placed in\n   */\n  @Prop({ mutable: true, reflect: false }) originalSlot: string;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * The order of this row in the DOM\n   */\n  @Prop({ reflect: false }) readonly index: number = 0;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * A list of the market-table-column elements, set from the parent table so\n   * we can assign this row's cells some properties based on the columns\n   */\n  @Prop({ reflect: false }) readonly tableColumns: Array<HTMLMarketTableColumnElement>;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * This row's slotted market-table-cell elements\n   */\n  @Prop({ mutable: true, reflect: false }) cells: NodeListOf<TCell>;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used to set the CSS grid template for the main column group (market-table-area)\n   * in the row. Set by the parent table element\n   */\n  @Prop({ mutable: false, reflect: false }) readonly gridTemplateMain: Array<string> = [];\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used to set the CSS grid template for the fixed left column group (market-table-area)\n   * in the row. Set by the parent table element\n   */\n  @Prop({ mutable: false, reflect: false }) readonly gridTemplateLeft: Array<string> = [];\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used to set the CSS grid template for the fixed right column group (market-table-area)\n   * in the row. Set by the parent table element\n   */\n  @Prop({ mutable: false, reflect: false }) readonly gridTemplateRight: Array<string> = [];\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used to set aria-expanded on the nested button for animation\n   */\n  @Prop({ mutable: true, reflect: false }) expanded: boolean = false;\n\n  /**\n   * Used to determine if the table has accordion rows. When true,\n   * it will add extra spacing at the beginning of the row. This will\n   * keep the row's contents aligned with the accordion rows. This is\n   * set from the market-table component.\n   *\n   * This property can be overriden when the content does not need\n   * the extra accordion spacing.\n   */\n  @Prop({ mutable: true, reflect: true }) nested: boolean = false;\n\n  /** This is a CSSStyleDeclaration object\n   * https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\n   */\n  @State() styleDeclaration: any;\n\n  /**\n   * Used to set the CSS grid template for the row itself\n   */\n  @State() gridTemplate: Array<string> = [];\n\n  /**\n   * Used to update the button's aria-expanded\n   */\n  @State() nestedRowToggleButton: HTMLButtonElement;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * If this is a header row with column children, emit an event when this row loads\n   * so the parent table can read the column data\n   */\n  @Event() marketTableHeaderLoaded: EventEmitter<{ columns: NodeListOf<HTMLMarketTableColumnElement> }>;\n\n  /**\n   * Fired whenever an interactive row is clicked.\n   */\n  @Event({ bubbles: true, composed: true }) marketTableRowClicked: EventEmitter;\n\n  /**\n   * Emitted when this row is stuck to a table edge\n   * Can be fired when stick-to or sticky changes, the .stick() method is called directly\n   * or when this row is first rendered or slotted\n   */\n  @Event() marketTableRowStick: EventEmitter<{\n    position: 'left' | 'right';\n    index: number;\n  }>;\n\n  /**\n   * Emitted when this row is unstuck from a table edge\n   * Can be fired when stick-to or sticky changes, the .unstick() method is called directly\n   * or when this row is first rendered or slotted\n   */\n  @Event() marketTableRowUnstick: EventEmitter<{\n    position: 'left' | 'right';\n    index: number;\n  }>;\n\n  /**\n   * Emitted when the nested row button is toggled\n   */\n  @Event() marketAccordionToggled: EventEmitter<{ expanded: boolean }>;\n\n  /**\n   * Emitted when the nested row button is toggled\n   */\n  @Event() marketNestedRowToggled: EventEmitter<{ expanded: boolean }>;\n\n  @Watch('gridTemplateMain')\n  @Watch('gridTemplateLeft')\n  @Watch('gridTemplateRight')\n  formNewGridTemplate() {\n    this.gridTemplate = [...this.gridTemplateLeft, ...this.gridTemplateMain, ...this.gridTemplateRight];\n\n    if (this.tableAreaLeft) {\n      this.tableAreaLeft.placement = [1, this.gridTemplateLeft.length];\n    }\n\n    if (this.tableAreaMain) {\n      this.tableAreaMain.placement = [this.gridTemplateLeft.length + 1, this.gridTemplateMain.length];\n    }\n\n    if (this.tableAreaRight) {\n      this.tableAreaRight.placement = [\n        this.gridTemplateLeft.length + this.gridTemplateMain.length + 1,\n        this.gridTemplateRight.length,\n      ];\n    }\n  }\n\n  @Watch('gridTemplate')\n  gridTemplateObserver(newValue: Array<string>, oldValue: Array<string>) {\n    if (newValue !== oldValue) {\n      this.el.style.gridTemplateColumns = newValue.join(' ');\n    }\n  }\n\n  @Watch('stickTo')\n  @Watch('sticky')\n  stickyObserver(newValue: string | boolean, oldValue: string | boolean) {\n    if (newValue !== oldValue) {\n      this.emitStickyEvents();\n    }\n  }\n\n  @Watch('tableColumns')\n  columnsObserver(columns: Array<HTMLMarketTableColumnElement>) {\n    this.setCellColumnProperties(columns);\n  }\n\n  @Watch('cells')\n  updateCellProperties(\n    oldCellList: NodeListOf<HTMLMarketTableCellElement>,\n    newCellList: NodeListOf<HTMLMarketTableCellElement>,\n  ) {\n    if (oldCellList !== newCellList) {\n      this.setCellColumnProperties(this.tableColumns);\n    }\n  }\n\n  @Watch('leadingIndentation')\n  updateFirstCellProperties() {\n    this._setFirstCellProperties();\n  }\n\n  @Watch('expanded')\n  updateNestedRowButton() {\n    if (this.nestedRowToggleButton) {\n      this.nestedRowToggleButton.ariaExpanded = `${this.expanded}`;\n\n      // We cannot access the svg from the css files in the current state,\n      // so we have to do it through JS. I figured this was the best place\n      // to do it since the rotation depends on expansion for now. We should\n      // find a better way to access this svg in the style sheets. -lindamr\n      const svgElement = this.nestedRowToggleButton.querySelector('svg');\n      if (svgElement) {\n        if (this.expanded) {\n          svgElement.style.transform = 'rotate(-180deg)';\n        } else {\n          svgElement.style.transform = 'rotate(0deg)';\n        }\n      }\n    }\n  }\n\n  @Watch('selected')\n  updateSlottedControlCheckedValue() {\n    this.slottedControl?.setSelection(this.selected);\n  }\n\n  @Watch('disabled')\n  updateSlottedControlDisabledValue() {\n    this.slottedControl?.setDisabled(this.disabled);\n  }\n\n  @Listen('marketCheckboxValueChange')\n  @Listen('marketToggleChange')\n  handleMarketCheckboxValueChange(\n    event: MarketCheckboxCustomEvent<{ current: boolean }> | MarketToggleCustomEvent<{ current: boolean }>,\n  ) {\n    // Update selected value if event is triggered by slottedControl\n    if (event.target !== this.slottedControl) {\n      return;\n    }\n    this.selected = event.detail.current;\n  }\n\n  /**\n   * Sticks this row to the provided edge (position) of the table\n   */\n  @Method()\n  stick(position?: 'top' | 'bottom') {\n    if (position) {\n      this.stickTo = position;\n    } else if (this.header || this.footer) {\n      this.sticky = true;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Unsticks this row from any edge of the table\n   */\n  @Method()\n  unstick() {\n    this.sticky = false;\n    this.stickTo = false;\n    return Promise.resolve();\n  }\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used by the parent table to support fixing columns to either side of the table\n   */\n  @Method()\n  async _stickColumn(column: string, position: 'left' | 'right') {\n    const cell = this.el.querySelector(`[name=\"${column}\"], [column=\"${column}\"]`) as HTMLMarketTableCellElement;\n    if (cell) {\n      await cell._stickSelf(position);\n    } else {\n      console.warn('cannot stick cell to unknown position'); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Used by the parent table to support fixing columns to either side of the table\n   */\n  @Method()\n  async _unstickColumn(column: string) {\n    const cell = this.el.querySelector(`[name=\"${column}\"], [column=\"${column}\"]`) as HTMLMarketTableCellElement;\n    if (cell) {\n      await cell._unstickSelf();\n    } else {\n      console.warn('cannot unstick cell from unknown position'); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Sets the hidden prop on market-table-cell. Used by market-table to allow market-table-column\n   * to control the hidden/visible state of its associated table cells.\n   */\n  @Method()\n  _syncColumnVisibilityWithCells(columnName, hidden) {\n    const cell = this.el.querySelector(\n      `[name=\"${columnName}\"], [column=\"${columnName}\"]`,\n    ) as HTMLMarketTableCellElement;\n    if (cell) {\n      cell.hidden = hidden;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Sets properties computed or specified on the row on the first\n   * cell to keep the table rows from shifting\n   */\n  @Method()\n  _setFirstCellProperties() {\n    // Setting indentation on the first cell of the row to not mess\n    // with the table grid\n    if (this.cells?.length && this.isStylableCell(this.cells[0])) {\n      this.cells[0]._updateFirstCellProperties?.(this.el);\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets the leadingIndentation\n   * @param leadingIndentation\n   */\n  @Method()\n  setLeadingIndentation(leadingIndentation: number) {\n    this.leadingIndentation = leadingIndentation;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets expanded property and emits nested row toggle event\n   */\n  @Method()\n  toggleNestedRow() {\n    this.expanded = !this.expanded;\n    this.marketAccordionToggled.emit({ expanded: this.expanded });\n    this.marketNestedRowToggled.emit({ expanded: this.expanded });\n    return Promise.resolve();\n  }\n\n  /**\n   * Checks type of cell to make Typescript happy about using functions that are only on\n   * HTMLMarketTableCellElement and not HTMLMarketTableColumnElement\n   * @param cell\n   * @returns\n   */\n  isStylableCell(cell: TCell): cell is HTMLMarketTableCellElement {\n    return (\n      (cell as HTMLMarketTableCellElement)._updateColumnRelatedProperties !== undefined &&\n      (cell as HTMLMarketTableCellElement)._updateFirstCellProperties !== undefined\n    );\n  }\n\n  setCellColumnProperties(columns: Array<HTMLMarketTableColumnElement>) {\n    if (this.cells && columns && columns.length > 0) {\n      this.cells.forEach((cell, i) => {\n        if (this.isStylableCell(cell)) {\n          const column = columns[i];\n          cell._updateColumnRelatedProperties(column);\n        }\n      });\n    }\n  }\n\n  emitStickyEvents() {\n    let position;\n\n    if (this.stickTo) {\n      position = this.stickTo;\n    } else if (this.header) {\n      position = 'top';\n    } else if (this.footer) {\n      position = 'bottom';\n    }\n\n    if (this.sticky || this.stickTo) {\n      // emit a stick event\n      this.marketTableRowStick.emit({\n        position,\n        index: this.index,\n      });\n    } else if (this.componentLoaded) {\n      // Emit an unstick event\n      this.marketTableRowUnstick.emit({\n        position,\n        index: this.index,\n      });\n    }\n  }\n\n  componentWillLoad() {\n    // setting row properties based on whether row is using a named slot\n    this.originalSlot = this.el.slot;\n    this.header = this.originalSlot === 'header';\n    this.footer = this.originalSlot === 'footer';\n    // prettier wants (typeof this.cells)[0] but that change seems wrong\n    // prettier-ignore\n    this.cells = this.el.querySelectorAll<typeof this.cells[0]>(getNamespacedTagFor('market-table-cell'));\n  }\n\n  handleSlotChange() {\n    this.cells = this.el.querySelectorAll(\n      `${getNamespacedTagFor('market-table-cell')}, ${getNamespacedTagFor('market-table-column')}`,\n    );\n\n    // If this is our header row, meaning we have column children, then emit an\n    // event that sends the columns to the table parent\n    if (this.header) {\n      this.marketTableHeaderLoaded.emit({\n        columns: this.el.querySelectorAll<HTMLMarketTableColumnElement>(getNamespacedTagFor('market-table-column')),\n      });\n    }\n\n    this.emitStickyEvents();\n  }\n\n  _getMarketRowElement(element: any) {\n    return element.querySelector(getNamespacedTagFor('market-table-row'));\n  }\n\n  // prevents unstick events from being fired on the slotchange before componentDidLoad\n  componentLoaded: Boolean = false;\n\n  _addCaretButtonToFirstCell() {\n    if (this.cells && this.cells[0]) {\n      this.nestedRowToggleButton = document.createElement('button');\n      Object.assign(this.nestedRowToggleButton, {\n        slot: 'nested-row-indicator',\n        type: 'button',\n        ariaExpanded: `${this.expanded}`,\n        onclick: () => this.toggleNestedRow(),\n      });\n      this.nestedRowToggleButton.innerHTML = `<svg class=\"caret\" width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\" style=\"transition-duration:300ms;\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M7.70715 7.70711C7.31663 8.09763 6.68346 8.09763 6.29294 7.70711L0.29294 1.70711L1.70715 0.292892L7.00005 5.58579L12.2929 0.292893L13.7072 1.70711L7.70715 7.70711Z\"\n            fill=\"currentColor\"\n          />\n        </svg>`;\n\n      // Get the first table cell child element and append the this.nestedRowToggleButtonElement to it. Because it has the nested-row-indicator slot, it should appear in the correct place\n      this.cells[0].append(this.nestedRowToggleButton);\n    }\n  }\n\n  _registerSlottedControl() {\n    this.slottedControl = this.el.querySelector<typeof this.slottedControl>(\n      [\n        `[slot=\"control\"] ${getNamespacedTagFor('market-checkbox')}`,\n        `[slot=\"control\"] ${getNamespacedTagFor('market-toggle')}`,\n      ].join(','),\n    );\n    if (this.slottedControl) {\n      this.slottedControl.setDisabled(this.disabled);\n      this.slottedControl.setSelection(this.selected);\n    }\n  }\n\n  componentDidRender() {\n    // Get accordion parent\n    const accordionElement = this.el.closest(getNamespacedTagFor('market-accordion-item'));\n    if (accordionElement) {\n      let parentRow: HTMLMarketTableRowElement;\n      if (this.el.slot === 'custom-trigger') {\n        // If current row has nested row, we need to look a level above for\n        // the correct indentation.\n        const parentAccordionElement = accordionElement.parentElement?.closest(\n          getNamespacedTagFor('market-accordion-item'),\n        );\n\n        // If there is a parent accordion element, find the trigger row\n        // to get previous level indentation and set the current one.\n        // Otherwise, the current row is at top level and indentaion will\n        // remain as 0.\n        if (parentAccordionElement) {\n          parentRow = [...parentAccordionElement.children].find(\n            (child) => child.slot === 'custom-trigger',\n          ) as HTMLMarketTableRowElement;\n        }\n      } else {\n        // Find the the trigger row within same level to set indentation\n        parentRow = [...accordionElement.children].find(\n          (child) => child.slot === 'custom-trigger',\n        ) as HTMLMarketTableRowElement;\n      }\n\n      // Set indentation\n      this.leadingIndentation = parentRow ? (parentRow.leadingIndentation ?? 0) + 1 : 0;\n    }\n\n    // Set indentation on the first cell of the row to not mess\n    // with the table grid\n    this._setFirstCellProperties();\n  }\n\n  componentDidLoad() {\n    this.componentLoaded = true;\n\n    if (this.el.slot === 'custom-trigger') {\n      // Add caret button\n      this._addCaretButtonToFirstCell();\n\n      // If accordion is expanded when component is loaded, we have to\n      // we have to make sure the caret is facing the correct way\n      const svgElement = this.nestedRowToggleButton.querySelector('svg');\n      if (svgElement && this.expanded) {\n        svgElement.style.transform = 'rotate(-180deg)';\n      }\n    }\n  }\n\n  handleClick(e) {\n    const ignoredElementTagNames = [\n      getNamespacedTagFor('market-accessory'),\n      getNamespacedTagFor('market-button'),\n      getNamespacedTagFor('market-button-dropdown'),\n      getNamespacedTagFor('market-checkbox'),\n      getNamespacedTagFor('market-link'),\n      getNamespacedTagFor('market-toggle'),\n      'button',\n      'a',\n      // add more interactive element tag names here\n    ];\n\n    // If the element clicked was one of the ignoredElementTagNames or anything inside of them,\n    // do not trigger marketTableRowClicked\n    const shouldIgnoreClick = ignoredElementTagNames.some((tagname) => e.target.closest(tagname));\n    if (shouldIgnoreClick) {\n      return;\n    }\n    if (this.interactive) {\n      this.marketTableRowClicked.emit();\n    }\n  }\n\n  handleKeydown(e) {\n    // don't intercept keydown of descendant elements\n    // e.g. when typing into nested input fields (gross)\n    if (e.target !== this.el) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'Enter':\n        this.handleClick(e);\n        break;\n      case ' ':\n        this.handleClick(e);\n        e.preventDefault(); // spacebar should not scroll page\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      disabled,\n      footer,\n      gridTemplateLeft,\n      gridTemplateMain,\n      gridTemplateRight,\n      header,\n      interactive,\n      selected,\n      slottedControl,\n    } = this;\n    const MarketTableAreaTagName = getNamespacedTagFor('market-table-area');\n\n    return (\n      <Host\n        aria-selected={slottedControl ? Boolean(selected).toString() : null}\n        class=\"market-table-row\"\n        role=\"row\"\n        tabindex={interactive && !disabled ? '0' : null}\n        header={header}\n        footer={footer}\n        onClick={(e) => this.handleClick(e)}\n        onKeydown={(e) => this.handleKeydown(e)}\n      >\n        <MarketTableAreaTagName\n          orientation=\"vertical\"\n          stick-to=\"left\"\n          gridTemplate={gridTemplateLeft}\n          ref={(el) => (this.tableAreaLeft = el)}\n        >\n          <slot name=\"sticky-left\"></slot>\n        </MarketTableAreaTagName>\n        <MarketTableAreaTagName\n          orientation=\"vertical\"\n          gridTemplate={gridTemplateMain}\n          ref={(el) => (this.tableAreaMain = el)}\n          active\n        >\n          <slot name=\"control\" onSlotchange={() => this._registerSlottedControl()}></slot>\n          <slot onSlotchange={() => this.handleSlotChange()}></slot>\n        </MarketTableAreaTagName>\n        <MarketTableAreaTagName\n          orientation=\"vertical\"\n          stick-to=\"right\"\n          gridTemplate={gridTemplateRight}\n          ref={(el) => (this.tableAreaRight = el)}\n        >\n          <slot name=\"sticky-right\"></slot>\n        </MarketTableAreaTagName>\n      </Host>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAoB,yzEAC1B,MAAAC,EAAeD,E,MCeFE,EAAc,M,2YAidzBC,KAAAC,gBAA2B,M,wBAlc0C,E,aAKO,M,kCAaxB,M,iBAMK,M,cAKH,M,cAKM,M,YAOF,M,YAKA,M,uCAWP,E,uEAoBkC,G,sBAOA,G,uBAOC,G,cAMzB,M,YAWH,M,kDAUnB,G,qCAoDvC,mBAAAC,GACEF,KAAKG,aAAe,IAAIH,KAAKI,oBAAqBJ,KAAKK,oBAAqBL,KAAKM,mBAEjF,GAAIN,KAAKO,cAAe,CACtBP,KAAKO,cAAcC,UAAY,CAAC,EAAGR,KAAKI,iBAAiBK,O,CAG3D,GAAIT,KAAKU,cAAe,CACtBV,KAAKU,cAAcF,UAAY,CAACR,KAAKI,iBAAiBK,OAAS,EAAGT,KAAKK,iBAAiBI,O,CAG1F,GAAIT,KAAKW,eAAgB,CACvBX,KAAKW,eAAeH,UAAY,CAC9BR,KAAKI,iBAAiBK,OAAST,KAAKK,iBAAiBI,OAAS,EAC9DT,KAAKM,kBAAkBG,O,EAM7B,oBAAAG,CAAqBC,EAAyBC,GAC5C,GAAID,IAAaC,EAAU,CACzBd,KAAKe,GAAGC,MAAMC,oBAAsBJ,EAASK,KAAK,I,EAMtD,cAAAC,CAAeN,EAA4BC,GACzC,GAAID,IAAaC,EAAU,CACzBd,KAAKoB,kB,EAKT,eAAAC,CAAgBC,GACdtB,KAAKuB,wBAAwBD,E,CAI/B,oBAAAE,CACEC,EACAC,GAEA,GAAID,IAAgBC,EAAa,CAC/B1B,KAAKuB,wBAAwBvB,KAAK2B,a,EAKtC,yBAAAC,GACE5B,KAAK6B,yB,CAIP,qBAAAC,GACE,GAAI9B,KAAK+B,sBAAuB,CAC9B/B,KAAK+B,sBAAsBC,aAAe,GAAGhC,KAAKiC,WAMlD,MAAMC,EAAalC,KAAK+B,sBAAsBI,cAAc,OAC5D,GAAID,EAAY,CACd,GAAIlC,KAAKiC,SAAU,CACjBC,EAAWlB,MAAMoB,UAAY,iB,KACxB,CACLF,EAAWlB,MAAMoB,UAAY,c,IAOrC,gCAAAC,G,OACEC,EAAAtC,KAAKuC,kBAAc,MAAAD,SAAA,SAAAA,EAAEE,aAAaxC,KAAKyC,S,CAIzC,iCAAAC,G,OACEJ,EAAAtC,KAAKuC,kBAAc,MAAAD,SAAA,SAAAA,EAAEK,YAAY3C,KAAK4C,S,CAKxC,+BAAAC,CACEC,GAGA,GAAIA,EAAMC,SAAW/C,KAAKuC,eAAgB,CACxC,M,CAEFvC,KAAKyC,SAAWK,EAAME,OAAOC,O,CAO/B,KAAAC,CAAMC,GACJ,GAAIA,EAAU,CACZnD,KAAKoD,QAAUD,C,MACV,GAAInD,KAAKqD,QAAUrD,KAAKsD,OAAQ,CACrCtD,KAAKuD,OAAS,I,CAEhB,OAAOC,QAAQC,S,CAOjB,OAAAC,GACE1D,KAAKuD,OAAS,MACdvD,KAAKoD,QAAU,MACf,OAAOI,QAAQC,S,CAQjB,kBAAME,CAAaC,EAAgBT,GACjC,MAAMU,EAAO7D,KAAKe,GAAGoB,cAAc,UAAUyB,iBAAsBA,OACnE,GAAIC,EAAM,OACFA,EAAKC,WAAWX,E,KACjB,CACLY,QAAQC,KAAK,wC,EASjB,oBAAMC,CAAeL,GACnB,MAAMC,EAAO7D,KAAKe,GAAGoB,cAAc,UAAUyB,iBAAsBA,OACnE,GAAIC,EAAM,OACFA,EAAKK,c,KACN,CACLH,QAAQC,KAAK,4C,EAUjB,8BAAAG,CAA+BC,EAAYC,GACzC,MAAMR,EAAO7D,KAAKe,GAAGoB,cACnB,UAAUiC,iBAA0BA,OAEtC,GAAIP,EAAM,CACRA,EAAKQ,OAASA,C,CAEhB,OAAOb,QAAQC,S,CASjB,uBAAA5B,G,UAGE,KAAIS,EAAAtC,KAAKsE,SAAK,MAAAhC,SAAA,SAAAA,EAAE7B,SAAUT,KAAKuE,eAAevE,KAAKsE,MAAM,IAAK,EAC5DE,GAAAC,EAAAzE,KAAKsE,MAAM,IAAGI,8BAA0B,MAAAF,SAAA,SAAAA,EAAAG,KAAAF,EAAGzE,KAAKe,G,CAElD,OAAOyC,QAAQC,S,CAQjB,qBAAAmB,CAAsBC,GACpB7E,KAAK6E,mBAAqBA,EAC1B,OAAOrB,QAAQC,S,CAOjB,eAAAqB,GACE9E,KAAKiC,UAAYjC,KAAKiC,SACtBjC,KAAK+E,uBAAuBC,KAAK,CAAE/C,SAAUjC,KAAKiC,WAClDjC,KAAKiF,uBAAuBD,KAAK,CAAE/C,SAAUjC,KAAKiC,WAClD,OAAOuB,QAAQC,S,CASjB,cAAAc,CAAeV,GACb,OACGA,EAAoCqB,iCAAmCC,WACvEtB,EAAoCa,6BAA+BS,S,CAIxE,uBAAA5D,CAAwBD,GACtB,GAAItB,KAAKsE,OAAShD,GAAWA,EAAQb,OAAS,EAAG,CAC/CT,KAAKsE,MAAMc,SAAQ,CAACvB,EAAMwB,KACxB,GAAIrF,KAAKuE,eAAeV,GAAO,CAC7B,MAAMD,EAAStC,EAAQ+D,GACvBxB,EAAKqB,+BAA+BtB,E,MAM5C,gBAAAxC,GACE,IAAI+B,EAEJ,GAAInD,KAAKoD,QAAS,CAChBD,EAAWnD,KAAKoD,O,MACX,GAAIpD,KAAKqD,OAAQ,CACtBF,EAAW,K,MACN,GAAInD,KAAKsD,OAAQ,CACtBH,EAAW,Q,CAGb,GAAInD,KAAKuD,QAAUvD,KAAKoD,QAAS,CAE/BpD,KAAKsF,oBAAoBN,KAAK,CAC5B7B,WACAoC,MAAOvF,KAAKuF,O,MAET,GAAIvF,KAAKC,gBAAiB,CAE/BD,KAAKwF,sBAAsBR,KAAK,CAC9B7B,WACAoC,MAAOvF,KAAKuF,O,EAKlB,iBAAAE,GAEEzF,KAAK0F,aAAe1F,KAAKe,GAAG4E,KAC5B3F,KAAKqD,OAASrD,KAAK0F,eAAiB,SACpC1F,KAAKsD,OAAStD,KAAK0F,eAAiB,SAGpC1F,KAAKsE,MAAQtE,KAAKe,GAAG6E,iBAAuCC,EAAoB,qB,CAGlF,gBAAAC,GACE9F,KAAKsE,MAAQtE,KAAKe,GAAG6E,iBACnB,GAAGC,EAAoB,yBAAyBA,EAAoB,0BAKtE,GAAI7F,KAAKqD,OAAQ,CACfrD,KAAK+F,wBAAwBf,KAAK,CAChC1D,QAAStB,KAAKe,GAAG6E,iBAA+CC,EAAoB,yB,CAIxF7F,KAAKoB,kB,CAGP,oBAAA4E,CAAqBC,GACnB,OAAOA,EAAQ9D,cAAc0D,EAAoB,oB,CAMnD,0BAAAK,GACE,GAAIlG,KAAKsE,OAAStE,KAAKsE,MAAM,GAAI,CAC/BtE,KAAK+B,sBAAwBoE,SAASC,cAAc,UACpDC,OAAOC,OAAOtG,KAAK+B,sBAAuB,CACxC4D,KAAM,uBACNY,KAAM,SACNvE,aAAc,GAAGhC,KAAKiC,WACtBuE,QAAS,IAAMxG,KAAK8E,oBAEtB9E,KAAK+B,sBAAsB0E,UAAY,wdAUvCzG,KAAKsE,MAAM,GAAGoC,OAAO1G,KAAK+B,sB,EAI9B,uBAAA4E,GACE3G,KAAKuC,eAAiBvC,KAAKe,GAAGoB,cAC5B,CACE,oBAAoB0D,EAAoB,qBACxC,oBAAoBA,EAAoB,oBACxC3E,KAAK,MAET,GAAIlB,KAAKuC,eAAgB,CACvBvC,KAAKuC,eAAeI,YAAY3C,KAAK4C,UACrC5C,KAAKuC,eAAeC,aAAaxC,KAAKyC,S,EAI1C,kBAAAmE,G,QAEE,MAAMC,EAAmB7G,KAAKe,GAAG+F,QAAQjB,EAAoB,0BAC7D,GAAIgB,EAAkB,CACpB,IAAIE,EACJ,GAAI/G,KAAKe,GAAG4E,OAAS,iBAAkB,CAGrC,MAAMqB,GAAyB1E,EAAAuE,EAAiBI,iBAAa,MAAA3E,SAAA,SAAAA,EAAEwE,QAC7DjB,EAAoB,0BAOtB,GAAImB,EAAwB,CAC1BD,EAAY,IAAIC,EAAuBE,UAAUC,MAC9CC,GAAUA,EAAMzB,OAAS,kB,MAGzB,CAELoB,EAAY,IAAIF,EAAiBK,UAAUC,MACxCC,GAAUA,EAAMzB,OAAS,kB,CAK9B3F,KAAK6E,mBAAqBkC,IAAatC,EAAAsC,EAAUlC,sBAAkB,MAAAJ,SAAA,EAAAA,EAAI,GAAK,EAAI,C,CAKlFzE,KAAK6B,yB,CAGP,gBAAAwF,GACErH,KAAKC,gBAAkB,KAEvB,GAAID,KAAKe,GAAG4E,OAAS,iBAAkB,CAErC3F,KAAKkG,6BAIL,MAAMhE,EAAalC,KAAK+B,sBAAsBI,cAAc,OAC5D,GAAID,GAAclC,KAAKiC,SAAU,CAC/BC,EAAWlB,MAAMoB,UAAY,iB,GAKnC,WAAAkF,CAAYC,GACV,MAAMC,EAAyB,CAC7B3B,EAAoB,oBACpBA,EAAoB,iBACpBA,EAAoB,0BACpBA,EAAoB,mBACpBA,EAAoB,eACpBA,EAAoB,iBACpB,SACA,KAMF,MAAM4B,EAAoBD,EAAuBE,MAAMC,GAAYJ,EAAExE,OAAO+D,QAAQa,KACpF,GAAIF,EAAmB,CACrB,M,CAEF,GAAIzH,KAAK4H,YAAa,CACpB5H,KAAK6H,sBAAsB7C,M,EAI/B,aAAA8C,CAAcP,GAGZ,GAAIA,EAAExE,SAAW/C,KAAKe,GAAI,CACxB,M,CAGF,OAAQwG,EAAEQ,KACR,IAAK,QACH/H,KAAKsH,YAAYC,GACjB,MACF,IAAK,IACHvH,KAAKsH,YAAYC,GACjBA,EAAES,iBACF,M,CAMN,MAAAC,GACE,MAAMrF,SACJA,EAAQU,OACRA,EAAMlD,iBACNA,EAAgBC,iBAChBA,EAAgBC,kBAChBA,EAAiB+C,OACjBA,EAAMuE,YACNA,EAAWnF,SACXA,EAAQF,eACRA,GACEvC,KACJ,MAAMkI,EAAyBrC,EAAoB,qBAEnD,OACEsC,EAACC,EAAI,CAAAL,IAAA,2DACYxF,EAAiB8F,QAAQ5F,GAAU6F,WAAa,KAC/DC,MAAM,mBACNC,KAAK,MACLC,SAAUb,IAAgBhF,EAAW,IAAM,KAC3CS,OAAQA,EACRC,OAAQA,EACRoF,QAAUnB,GAAMvH,KAAKsH,YAAYC,GACjCoB,UAAYpB,GAAMvH,KAAK8H,cAAcP,IAErCY,EAACD,EAAsB,CAAAH,IAAA,2CACrBa,YAAY,WAAU,WACb,OACTzI,aAAcC,EACdyI,IAAM9H,GAAQf,KAAKO,cAAgBQ,GAEnCoH,EAAA,QAAAJ,IAAA,2CAAMe,KAAK,iBAEbX,EAACD,EAAsB,CAAAH,IAAA,2CACrBa,YAAY,WACZzI,aAAcE,EACdwI,IAAM9H,GAAQf,KAAKU,cAAgBK,EACnCgI,OAAM,MAENZ,EAAA,QAAAJ,IAAA,2CAAMe,KAAK,UAAUE,aAAc,IAAMhJ,KAAK2G,4BAC9CwB,EAAA,QAAAJ,IAAA,2CAAMiB,aAAc,IAAMhJ,KAAK8F,sBAEjCqC,EAACD,EAAsB,CAAAH,IAAA,2CACrBa,YAAY,WAAU,WACb,QACTzI,aAAcG,EACduI,IAAM9H,GAAQf,KAAKW,eAAiBI,GAEpCoH,EAAA,QAAAJ,IAAA,2CAAMe,KAAK,kB"}