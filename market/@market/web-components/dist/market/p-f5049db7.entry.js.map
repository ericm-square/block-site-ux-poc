{"version":3,"names":["addDays","dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","isNaN","Date","NaN","setDate","getDate","addMonths","dayOfMonth","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","startOfWeek","options","_ref","_ref2","_ref3","_options$weekStartsOn","_options$locale","_options$locale$optio","_defaultOptions$local","_defaultOptions$local2","defaultOptions","getDefaultOptions","weekStartsOn","locale","RangeError","day","getDay","diff","setHours","addWeeks","days","addYears","startOfMonth","startOfYear","cleanDate","endOfWeek","lastDayOfMonth","month","lastDayOfYear","year","startOfYesterday","now","subMonths","subWeeks","subYears","marketDatePickerCss","MarketDatePickerStyle0","Day","constructor","this","selected","selection","today","disabled","MarketDatePicker","yearViewMonthList","navigator","language","buildWeekdays","displayedWeekdays","weekday","getLocaleFirstDayOfWeek","weekdayText","d","toLocaleDateString","startsWith","slice","push","intl","Intl","Locale","firstDay","_e","_b","_a","weekInfo","_d","_c","getWeekInfo","call","addHoveredDateRangeStyling","currentDate","datePickerDay","hoveredDate","currentStartDate","selectedStartDate","selectedEndDate","isBefore","isAfter","isSameDay","addDateSelectionAttributes","calendarDate","currentEndDate","selectionType","buildCalendar","currentDisplayedDate","displayedDate","calendar","firstDayOffset","toString","isDateDisabled","timeframe","clearDateSelections","navigateMonth","increment","toISOString","dateInputDateSet","detail","input","newDate","time","split","newYear","newMonth","newDay","map","Number","hour","minute","withInputs","_selectDate","selectDate","dateElement","type","updateDisplayedHeader","hoverDate","mousedOutDate","selectMenuRow","e","menuOption","menuSelection","marketMenuSelectionChanged","emit","prevStartDate","prevEndDate","_setMenuRowOption","MENU_SLOT_NAMES","CUSTOM","marketDateRangeChanged","startDate","endDate","setInvalidState","invalid","TODAY","YESTERDAY","THIS_WEEK","LAST_WEEK","lastWeekDate","THIS_MONTH","LAST_MONTH","lastMonthDate","THIS_YEAR","LAST_YEAR","lastYearDate","checkedMonth","getHours","getMinutes","displayMenu","menu","el","shadowRoot","querySelector","getNamespacedTagFor","_selectCustomRow","toggleCaret","yearViewActive","validateDisplayedDate","buildInitialYearView","currentYear","yearViewYearsList","i","monthName","updateDisplayedYearList","value","updatedDate","monthDate","monthValue","componentWillLoad","presetMenuOption","datePickerLabel","uuid","componentWillRender","displayedMonth","toLocaleString","render","MarketDatePickerMenuTagName","MarketDatePickerDateTagName","MarketDatePickerInputDateTagName","MarketButtonTagName","MarketIconTagName","MarketDividerTagName","DATE_PICKER_BUTTON_PREVIOUS_YEAR_ICON_ASSET","DATE_PICKER_BUTTON_NEXT_YEAR_ICON_ASSET","DATE_PICKER_BUTTON_PREVIOUS_MONTH_ICON_ASSET","DATE_PICKER_BUTTON_NEXT_MONTH_ICON_ASSET","h","Host","key","class","excludeMenuItems","name","slot","size","onClick","caret","rank","id","role","text","range","withTime"],"sources":["../../node_modules/date-fns/esm/addDays/index.js","../../node_modules/date-fns/esm/addMonths/index.js","../../node_modules/date-fns/esm/startOfWeek/index.js","../../node_modules/date-fns/esm/addWeeks/index.js","../../node_modules/date-fns/esm/addYears/index.js","../../node_modules/date-fns/esm/startOfMonth/index.js","../../node_modules/date-fns/esm/startOfYear/index.js","../../node_modules/date-fns/esm/endOfWeek/index.js","../../node_modules/date-fns/esm/lastDayOfMonth/index.js","../../node_modules/date-fns/esm/lastDayOfYear/index.js","../../node_modules/date-fns/esm/startOfYesterday/index.js","../../node_modules/date-fns/esm/subMonths/index.js","../../node_modules/date-fns/esm/subWeeks/index.js","../../node_modules/date-fns/esm/subYears/index.js","src/components/market-date-picker/market-date-picker.css?tag=market-date-picker&encapsulation=shadow","src/components/market-date-picker/market-date-picker.tsx"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function startOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfMonth\n * @category Month Helpers\n * @summary Return the last day of a month for the given date.\n *\n * @description\n * Return the last day of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a month for 2 September 2014 11:55:00:\n * const result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\nexport default function lastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfYear\n * @category Year Helpers\n * @summary Return the last day of a year for the given date.\n *\n * @description\n * Return the last day of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a year for 2 September 2014 11:55:00:\n * const result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 00:00:00\n */\nexport default function lastDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","/**\n * @name startOfYesterday\n * @category Day Helpers\n * @summary Return the start of yesterday.\n * @pure false\n *\n * @description\n * Return the start of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * @returns {Date} the start of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfYesterday()\n * //=> Sun Oct 5 2014 00:00:00\n */\nexport default function startOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addWeeks from \"../addWeeks/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * const result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\nexport default function subWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addWeeks(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addYears from \"../addYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}",":host {\n  display: flex;\n}\n\n@media only screen and (max-width: 800px) {\n  :host([mobile-menu-position=\"top\"]) {\n    flex-direction: column;\n\n    list-view {\n      margin-bottom: var(--date-picker-menu-vertical-spacing);\n    }\n  }\n\n  :host([mobile-menu-position=\"bottom\"]) {\n    flex-direction: column-reverse;\n\n    list-view {\n      margin-top: var(--date-picker-menu-vertical-spacing);\n    }\n  }\n}\n\nheader {\n  height: var(--date-picker-header-minimum-height);\n  margin-bottom: var(--date-picker-header-vertical-spacing);\n}\n\nnav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n:host([year-view-active]) nav {\n  justify-content: center;\n}\n\n[id^=\"date-picker-label-\"] {\n  margin: 0;\n}\n\n.year-view-button {\n  color: var(--date-picker-month-year-label-color, var(--core-text-10-color));\n\n  &:hover,\n  &:active {\n    background-color: transparent;\n    color: var(--core-emphasis-text-color);\n  }\n}\n\n.caret {\n  margin-left: var(--date-picker-header-button-padding);\n\n  :host([year-view-active]) & {\n    transform: rotate(-180deg);\n  }\n}\n\ncalendar {\n  min-width: var(--date-picker-minimum-width);\n}\n\nmonth-view {\n  display: grid;\n  grid-template-rows: repeat(auto-fill, 1fr);\n  grid-template-columns: repeat(7, 1fr);\n  gap: var(--date-picker-grid-item-vertical-padding) var(--date-picker-grid-item-horizontal-padding);\n  box-sizing: border-box;\n}\n\nyear-section {\n  display: flex;\n\n  /* TODO: ADD DESIGN TOKENS (UI-6038) */\n  gap:\n    var(--date-picker-grid-item-year-button-vertical-padding, 0)\n    var(--date-picker-grid-item-year-button-horizontal-padding, 12.5px);\n  box-sizing: border-box;\n\n  .market-icon {\n    width: var(--date-picker-grid-item-year-button-icon-size, var(--accessory-icon-variant-medium-size-height));\n  }\n}\n\nmonth-section {\n  display: grid;\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-columns: repeat(4, 1fr);\n\n  /* TODO: ADD DESIGN TOKENS (UI-6038) */\n  gap:\n    var(--date-picker-grid-item-month-button-vertical-padding, 16px)\n    var(--date-picker-grid-item-month-button-horizontal-padding, 26.67px);\n  box-sizing: border-box;\n}\n","import { Component, Host, h, Prop, Element, State, Listen, Event, EventEmitter } from '@stencil/core';\nimport {\n  endOfWeek,\n  isAfter,\n  isBefore,\n  isSameDay,\n  lastDayOfMonth,\n  startOfMonth,\n  startOfWeek,\n  subMonths,\n  subWeeks,\n  startOfYesterday,\n  startOfYear,\n  lastDayOfYear,\n  subYears,\n} from 'date-fns';\nimport { v4 as uuid } from 'uuid';\n\nimport { MENU_SLOT_NAMES } from './enums/menu';\nimport { TMarketDateRangeChangedEventDetail, TMarketDatePickerMenuSelectionChangedEventDetail } from './events';\n\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n/**\n * Object class to hold necessary date information when building out each market-date-picker-date for the calendar\n */\nclass Day {\n  date: string = '';\n  month: number = null;\n  year: number = null;\n\n  // For market-date-picker-date props\n  selected: boolean = false;\n  selection: 'none' | 'single' | 'range-first' | 'range-middle' | 'range-last' = 'none';\n  today: boolean = false;\n  disabled: boolean = false;\n}\n\n@Component({\n  tag: 'market-date-picker',\n  styleUrl: 'market-date-picker.css',\n  shadow: true,\n})\nexport class MarketDatePicker {\n  @Element() el: HTMLMarketDatePickerElement;\n\n  /**\n   * Whether the date picker allows selection of a single date or a date range\n   */\n  @Prop() readonly selectionType: 'single' | 'range' = 'single';\n\n  /**\n   * User selected single date or start date for a range saved as an ISO formatted string.\n   * Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format\n   * Example: `YYYY-MM-DDT08:00`.\n   */\n  @Prop({ reflect: true, mutable: true }) selectedStartDate: string;\n\n  /**\n   * User selected end date for a range saved as an ISO formatted string.\n   * Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format\n   * Example: `YYYY-MM-DDT08:00`.\n   */\n  @Prop({ reflect: true, mutable: true }) selectedEndDate: string;\n\n  /**\n   * Preset menu option to populate date picker range.\n   * Presetting `custom` should be used with `selectedStartDate` and `selectedEndDate` props.\n   * Otherwise if both `selectedStartDate/selectedEndDate` and `presetMenuOption` are given, `presetMenuOption` takes precedence.\n   */\n  @Prop() readonly presetMenuOption: MENU_SLOT_NAMES;\n\n  /**\n   * Whether or not the side market-date-picker-menu is shown.\n   * To pass in translation supported text, use slots available for each option.\n   */\n  @Prop() readonly displayMenu: boolean = false;\n\n  /**\n   * Position of menu on a mobile screen, if market-date-picker-menu is shown.\n   */\n  @Prop({ reflect: true }) readonly mobileMenuPosition: 'top' | 'bottom' = 'top';\n\n  /**\n   * A list of market-date-picker-menu items that will be excluded from appearing on the menu list.\n   * i.e. `this-year,last-year` or `today,this-week,last-week,custom`\n   * The menu names are lowercase and hyphenated strings, found here:\n   * https://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx\n   *\n   * This works in conjunction with timeframe,\n   * i.e. \"timeframe=past\", excludes dates in the future in addition to the ones here.\n   * This is written as items separated by ','.\n   */\n  @Prop() readonly excludeMenuItems: string = '';\n\n  /**\n   * String for setting timeframe type to select which market-date-picker-menu items to show.\n   * Past means only past dates available, future is only current and future dates, and present is the default for all shown.\n   */\n  @Prop() readonly timeframe: 'past' | 'present' | 'future' = 'present';\n\n  /**\n   * A function that takes a datestring and returns a boolean determining if it should be disabled.\n   * This does not override disabled dates based on the timeframe prop.\n   * See https://ionicframework.com/docs/api/datetime#advanced-date-constraints for examples of passing in a function as a Stencil component prop.\n   */\n  @Prop() readonly isDateDisabled: (day: Date) => boolean;\n\n  /**\n   * Date picker locale. Defaults to browser locale. If that cannot be determined, defaults to 'en-US'.\n   */\n  @Prop() readonly locale: string = navigator.language || 'en-US';\n\n  /**\n   * The ISO formatted string that determines the displayed month on the calendar.\n   * Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format\n   * Example: `YYYY-MM-DDT08:00`.\n   * Note: Omitting the time portion defaults to UTC, so this may display as a day behind on your calendar!\n   * If you add hours it will default to your timezone, like the above example.\n   * Invalid date strings default to today's date.\n   */\n  @Prop({ mutable: true }) displayedDate: string;\n\n  /**\n   * This enables the input field for the date picker.\n   */\n  @Prop({ reflect: true, mutable: true }) withInputs: '' | 'date' | 'date-and-time' = '';\n\n  /**\n   * Whether the selected dates are invalid.\n   * It should not be possible to click on invalid dates, so this occurs through date inputs.\n   */\n  @Prop({ reflect: true, mutable: true }) invalid: boolean = false;\n\n  /**\n   * Displays a clickable caret in the month/year header.\n   * If it is up, we show the month/year selection view instead of dates.\n   */\n  @Prop({ reflect: true, mutable: true }) yearViewActive: boolean = false;\n\n  /**\n   * Fired whenever the selected date range is changed.\n   */\n  @Event({ bubbles: true, composed: true }) marketDateRangeChanged: EventEmitter<TMarketDateRangeChangedEventDetail>;\n\n  /**\n   * @deprecated\n   * **DEPRECATED (v4.5.0)** Use `marketDatePickerMenuSelectionChanged` instead.\n   *\n   * Fired whenever the menu selection is changed. Indicates which menu option is currently selected.\n   * Possible values are found here:\n   * https://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx\n   */\n  @Event({ bubbles: true, composed: true })\n  marketMenuSelectionChanged: EventEmitter<TMarketDatePickerMenuSelectionChangedEventDetail>;\n\n  /**\n   * Current displayed month and year for the calendar view. This can be updated with month or locale changes.\n   */\n  @State() displayedMonth: string;\n\n  /**\n   * Current displayed weekday header for the calendar view. This can be updated with locale changes.\n   */\n  @State() displayedWeekdays: Array<string> = [];\n\n  /**\n   * Current displayed years for the calendar year view. This can be updated with the left and right chevron buttons.\n   */\n  @State() yearViewYearsList: Array<string> = [];\n\n  /**\n   * Currently hovered date. Only used for date range calendar styling to highlight potential ranges.\n   */\n  @State() hoveredDate: Date;\n\n  /**\n   * Array holding our Day objects to build out calendar view.\n   */\n  private days: Array<Day>;\n\n  /**\n   * Current displayed months for the calendar year view. This can be updated with locale changes.\n   */\n  private yearViewMonthList: Array<string> = [];\n\n  /**\n   * Unique id for date picker label for a11y\n   */\n  private datePickerLabel: string;\n\n  /**\n   * Build out the weekday headers based on locale for the calendar view.\n   */\n  buildWeekdays() {\n    this.displayedWeekdays = [];\n\n    // Grab start of the week\n    const weekday = startOfWeek(new Date(), { weekStartsOn: this.getLocaleFirstDayOfWeek() });\n    let weekdayText;\n\n    for (let d: number = 0; d < 7; d++) {\n      weekdayText = weekday.toLocaleDateString(this.locale, { weekday: 'short' });\n\n      // Shorten English based weekday headers by one\n      if (this.locale.startsWith('en-')) {\n        weekdayText = weekdayText.slice(0, -1);\n      }\n      this.displayedWeekdays.push(weekdayText);\n      weekday.setDate(weekday.getDate() + 1);\n    }\n  }\n\n  getLocaleFirstDayOfWeek() {\n    const intl = new Intl.Locale(this.locale) as any;\n\n    // Chrome uses weekInfo as a property, Safari uses getWeekInfo() as a fn on the locale to get week info.\n    // This is not yet supported in Firefox, so default to Sunday if no first day info is found.\n    const firstDay = intl?.weekInfo?.firstDay ?? intl?.getWeekInfo?.()?.firstDay ?? 0;\n\n    // Translates the \"Sunday\" case, which weekInfo sets to 7\n    return (firstDay % 7) as 0 | 1 | 2 | 3 | 4 | 5 | 6;\n  }\n\n  /**\n   * Compares current hovered date to selected dates to determine correct styling for selection.\n   */\n  addHoveredDateRangeStyling(currentDate: Date, datePickerDay: Day) {\n    if (!this.hoveredDate) {\n      return;\n    }\n\n    const currentStartDate = new Date(this.selectedStartDate);\n    // Set the day to be in the middle of a range when there is a start date and no end date,\n    // and the day in question is between the start date and hovered date.\n    if (\n      this.selectedStartDate &&\n      !this.selectedEndDate &&\n      isBefore(currentDate, this.hoveredDate) &&\n      isAfter(currentDate, currentStartDate)\n    ) {\n      datePickerDay.selection = 'range-middle';\n    }\n\n    if (!isSameDay(this.hoveredDate, currentDate)) {\n      return;\n    }\n\n    // If there's no start date, or a date range is selected, or the hovered date is before or the same as the start date,\n    // the hovered button should be the start of a new range.\n    if (\n      !this.selectedStartDate ||\n      (this.selectedStartDate && this.selectedEndDate) ||\n      !isAfter(this.hoveredDate, currentStartDate)\n    ) {\n      datePickerDay.selection = 'range-first';\n    } else {\n      datePickerDay.selection = 'range-last';\n    }\n  }\n\n  /**\n   * Helper function to add selection metadata to the date object being processed in buildCalendar.\n   */\n  addDateSelectionAttributes(day, calendarDate, currentStartDate, currentEndDate) {\n    // Checks for start date comparison (for both single/range types)\n    if (currentStartDate && isSameDay(calendarDate, currentStartDate)) {\n      day.selected = true;\n      day.selection = this.selectionType === 'single' ? 'single' : 'range-first';\n    }\n\n    // For range types only, check for dates within a selected range, or ends in a range\n    if (this.selectionType === 'range') {\n      this.addHoveredDateRangeStyling(calendarDate, day);\n\n      if (\n        currentStartDate &&\n        currentEndDate &&\n        isAfter(calendarDate, currentStartDate) &&\n        isBefore(calendarDate, currentEndDate)\n      ) {\n        day.selected = true;\n        day.selection = 'range-middle';\n      }\n\n      if (currentEndDate && isSameDay(calendarDate, currentEndDate)) {\n        day.selected = true;\n        day.selection = 'range-last';\n      }\n    }\n  }\n\n  /**\n   * The main chunk of this component is building out the calendar view.\n   * Ensures correct styling and formatting is placed on each date component.\n   * Adapted from: https://ionicframework.com/blog/building-with-stencil-calendar-component/\n   */\n  buildCalendar() {\n    const today: Date = new Date();\n    const currentDisplayedDate = new Date(this.displayedDate);\n\n    // Calendar used in iteration\n    const calendar: Date = new Date(currentDisplayedDate.getFullYear(), currentDisplayedDate.getMonth(), 1);\n\n    // First day of month may not be first day of week\n    // Roll back until first day of week\n\n    // First day can either start at Sunday or Monday, so if it is Monday, subtract a day at the start of the calendar\n    const firstDayOffset = this.getLocaleFirstDayOfWeek();\n\n    // Handles edge case where a locale with Monday as the first day, starts on Sunday\n    // This case builds the calendar with 6 blank squares in front of the first day (as expected)\n    if (calendar.getDay() === 0 && firstDayOffset === 1) {\n      calendar.setDate(calendar.getDate() - 6);\n    } else {\n      calendar.setDate(calendar.getDate() - (calendar.getDay() - firstDayOffset));\n    }\n\n    // Clear days to be rendered\n    this.days = [];\n\n    // Create date objects from selected dates if they exist\n    const currentStartDate = this.selectedStartDate && new Date(this.selectedStartDate);\n    const currentEndDate = this.selectedEndDate && new Date(this.selectedEndDate);\n\n    for (let d: number = 0; d < 42; d++) {\n      // Day to be rendered\n      // Seed with current date in iteration\n      const day: Day = new Day();\n      day.year = calendar.getFullYear();\n      day.month = calendar.getMonth();\n\n      // Populate day in month\n      // Undefined date properties are not rendered\n      if (\n        calendar.getFullYear() === currentDisplayedDate.getFullYear() &&\n        calendar.getMonth() === currentDisplayedDate.getMonth()\n      ) {\n        day.date = calendar.getDate().toString();\n      }\n\n      // Check for today\n      if (isSameDay(calendar, today)) {\n        day.today = true;\n      }\n\n      // Check for selection types\n      this.addDateSelectionAttributes(day, calendar, currentStartDate, currentEndDate);\n\n      // Check for disabled dates\n      if (day.date && this.isDateDisabled) {\n        day.disabled = this.isDateDisabled(calendar);\n      }\n\n      if (this.timeframe === 'future' && isBefore(calendar, today) && !isSameDay(calendar, today)) {\n        day.disabled = true;\n      }\n\n      if (this.timeframe === 'past' && isAfter(calendar, today) && !isSameDay(calendar, today)) {\n        day.disabled = true;\n      }\n\n      // Add to days to be rendered\n      this.days.push(day);\n\n      // Move to next date\n      calendar.setDate(calendar.getDate() + 1);\n\n      // Do not render the last week\n      // Depending on calendar layout\n      // Some months require five weeks\n      // Others six weeks (see May 2021)\n      if (calendar.getDay() === 0 + firstDayOffset && calendar.getMonth() !== currentDisplayedDate.getMonth()) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Helper function to clear date selections.\n   */\n  clearDateSelections() {\n    this.selectedStartDate = null;\n    this.selectedEndDate = null;\n  }\n\n  /**\n   * Used for the navigation arrows in the market-date-picker header, moves the calendar forward/backward by increment.\n   * Currently only used for +1/-1 month.\n   */\n  navigateMonth(increment) {\n    const currentDisplayedDate = new Date(this.displayedDate);\n    this.displayedDate = new Date(\n      currentDisplayedDate.getFullYear(),\n      currentDisplayedDate.getMonth() + increment,\n      1,\n    ).toISOString();\n  }\n\n  /**\n   *  When ever an event changes the selected date, this updates the calendar view.\n   *  The event receives a date string in the yyyy-mm-dd or yyy-mm-ddThh:mm format.\n   *  this then checks what parts of the date have changed and only sends the changed parts to the\n   * _selectDate function that receives (day, month, year)\n   */\n  @Listen('marketDatePickerInputDateSet')\n  dateInputDateSet({ detail: { date, input } }) {\n    const [newDate, time] = date.split('T');\n    const [newYear, newMonth, newDay] = newDate.split('-').map(Number);\n    this.displayedDate = new Date(newYear, newMonth - 1, 1).toString();\n\n    // fallback to undefined, to prevent overwriting if time was initialized but withTime is disabled.\n    const [hour, minute] = this.withInputs === 'date-and-time' ? time.split(':').map(Number) : [];\n    this._selectDate({\n      day: newDay,\n      month: newMonth - 1,\n      year: newYear,\n      hour,\n      minute,\n      input,\n    });\n  }\n\n  /**\n   * Whenever a market-date-picker-date is selected, this updates the selected date props, which then updates the calendar view.\n   */\n  @Listen('marketDatePickerDateSelected')\n  selectDate({ detail: { date: dateElement } }) {\n    if (dateElement.type !== 'day') {\n      this.updateDisplayedHeader(dateElement.type, dateElement.day);\n    } else {\n      this._selectDate({ day: dateElement.day });\n    }\n  }\n\n  /**\n   * Whenever a market-date-picker-date is moused over or hovered, this updates the hovered date to update the calendar view.\n   */\n  @Listen('marketDatePickerDateMousedOver')\n  hoverDate({ detail: { date: dateElement } }) {\n    const currentDisplayedDate = new Date(this.displayedDate);\n    this.hoveredDate = new Date(currentDisplayedDate.getFullYear(), currentDisplayedDate.getMonth(), dateElement.day);\n  }\n\n  /**\n   * Whenever a market-date-picker-date is moused out, clear any hovering styling in the calendar view.\n   */\n  @Listen('marketDatePickerDateMousedOut')\n  mousedOutDate() {\n    this.hoveredDate = null;\n  }\n\n  /**\n   * Whenever a market-row within market-date-picker-menu is selected, this ensures we move the current selected dates\n   * to whichever option the user has selected.\n   */\n  @Listen('marketDatePickerMenuSelectionChanged')\n  selectMenuRow(e: CustomEvent<TMarketDatePickerMenuSelectionChangedEventDetail>) {\n    const menuOption = e.detail.menuSelection;\n    if (!menuOption) {\n      return;\n    }\n    this.marketMenuSelectionChanged.emit({\n      menuSelection: menuOption,\n    });\n\n    const prevStartDate = this.selectedStartDate;\n    const prevEndDate = this.selectedEndDate;\n    this._setMenuRowOption(menuOption);\n\n    if (menuOption !== MENU_SLOT_NAMES.CUSTOM) {\n      this.marketDateRangeChanged.emit({\n        prevStartDate,\n        prevEndDate,\n        startDate: this.selectedStartDate,\n        endDate: this.selectedEndDate,\n        menuSelection: menuOption,\n      });\n    }\n  }\n\n  /**\n   * Updates invalid state of date picker based on date input selections\n   */\n  @Listen('marketDatePickerInputDateInvalidStateChanged')\n  setInvalidState({ detail: { invalid } }) {\n    this.invalid = invalid;\n  }\n\n  private _setMenuRowOption(menuOption: `${MENU_SLOT_NAMES}`) {\n    const today = new Date();\n\n    switch (menuOption) {\n      case MENU_SLOT_NAMES.TODAY:\n        this.clearDateSelections();\n        this.selectedStartDate = today.toISOString();\n        break;\n\n      case MENU_SLOT_NAMES.YESTERDAY:\n        this.clearDateSelections();\n        this.selectedStartDate = startOfYesterday().toISOString();\n        break;\n\n      case MENU_SLOT_NAMES.THIS_WEEK:\n        this.selectedStartDate = startOfWeek(today).toISOString();\n        if (this.selectionType === 'range') {\n          this.selectedEndDate = endOfWeek(today).toISOString();\n        }\n        break;\n\n      case MENU_SLOT_NAMES.LAST_WEEK: {\n        const lastWeekDate = subWeeks(today, 1);\n\n        this.selectedStartDate = startOfWeek(lastWeekDate).toISOString();\n        if (this.selectionType === 'range') {\n          this.selectedEndDate = endOfWeek(lastWeekDate).toISOString();\n        }\n        break;\n      }\n\n      case MENU_SLOT_NAMES.THIS_MONTH:\n        this.selectedStartDate = startOfMonth(today).toISOString();\n        if (this.selectionType === 'range') {\n          this.selectedEndDate = lastDayOfMonth(today).toISOString();\n        }\n        break;\n\n      case MENU_SLOT_NAMES.LAST_MONTH: {\n        const lastMonthDate = subMonths(today, 1);\n\n        this.selectedStartDate = startOfMonth(lastMonthDate).toISOString();\n        if (this.selectionType === 'range') {\n          this.selectedEndDate = lastDayOfMonth(lastMonthDate).toISOString();\n        }\n        break;\n      }\n\n      case MENU_SLOT_NAMES.THIS_YEAR:\n        this.selectedStartDate = startOfYear(today).toISOString();\n        if (this.selectionType === 'range') {\n          this.selectedEndDate = lastDayOfYear(today).toISOString();\n        }\n        break;\n\n      case MENU_SLOT_NAMES.LAST_YEAR: {\n        const lastYearDate = subYears(today, 1);\n\n        this.selectedStartDate = startOfYear(lastYearDate).toISOString();\n        if (this.selectionType === 'range') {\n          this.selectedEndDate = lastDayOfYear(lastYearDate).toISOString();\n        }\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    // Update displayed date to selected date\n    if (menuOption !== MENU_SLOT_NAMES.CUSTOM) {\n      this.displayedDate = this.selectedStartDate;\n    }\n  }\n\n  _selectDate(options: {\n    day?: number;\n    month?: number;\n    year?: number;\n    hour?: number;\n    minute?: number;\n    input?: string;\n  }) {\n    const prevStartDate = this.selectedStartDate;\n    const prevEndDate = this.selectedEndDate;\n\n    const currentDisplayedDate = new Date(this.displayedDate);\n\n    // Handles case where month is January, represented by 0\n    const checkedMonth = options.month ?? currentDisplayedDate.getMonth();\n\n    const day = new Date(\n      options.year || currentDisplayedDate.getFullYear(),\n      checkedMonth,\n      options.day || currentDisplayedDate.getDate(),\n      options.hour || currentDisplayedDate.getHours(),\n      options.minute || currentDisplayedDate.getMinutes(),\n    ).toISOString();\n\n    if (this.displayMenu && !isSameDay(new Date(this.selectedStartDate), new Date(day))) {\n      // Select custom menu row if it exists when calendar is updated\n      const menu = this.el.shadowRoot.querySelector<HTMLMarketDatePickerMenuElement>(\n        getNamespacedTagFor('market-date-picker-menu'),\n      );\n      menu._selectCustomRow();\n    }\n\n    if (this.selectionType === 'single') {\n      this.clearDateSelections();\n      this.selectedStartDate = day;\n    } else {\n      // Date range logic\n      if (this.selectedStartDate && !this.selectedEndDate && day >= this.selectedStartDate) {\n        // if new day is equal or after selected start date, and end date isn't set, update end date.\n        this.selectedEndDate = day;\n      } else {\n        if (options.input) {\n          if (options.input === 'start') this.selectedStartDate = day;\n          if (options.input === 'end') this.selectedEndDate = day;\n        } else {\n          this.clearDateSelections();\n          this.selectedStartDate = day;\n        }\n      }\n    }\n\n    this.marketDateRangeChanged.emit({\n      prevStartDate,\n      prevEndDate,\n      startDate: this.selectedStartDate,\n      endDate: this.selectedEndDate,\n      menuSelection: MENU_SLOT_NAMES.CUSTOM,\n    });\n  }\n\n  // MONTH & YEAR VIEW FUNCTIONS\n  toggleCaret() {\n    this.yearViewActive = !this.yearViewActive;\n  }\n\n  validateDisplayedDate(date: string) {\n    // Handles invalid dates passed in to displayed date\n    if (new Date(date).toString() === 'Invalid Date') {\n      this.displayedDate = new Date().toISOString();\n    }\n  }\n\n  buildInitialYearView() {\n    this.validateDisplayedDate(this.displayedDate);\n\n    const currentDisplayedDate = new Date(this.displayedDate);\n    const currentYear = currentDisplayedDate.getFullYear();\n    this.yearViewYearsList = [(currentYear - 1).toString(), currentYear.toString(), (currentYear + 1).toString()];\n\n    for (let i = 0; i < 12; i++) {\n      const monthName = new Date(2024, i).toLocaleDateString(this.locale, { month: 'short' });\n      this.yearViewMonthList.push(monthName);\n    }\n  }\n\n  updateDisplayedYearList(increment: number) {\n    this.yearViewYearsList = this.yearViewYearsList.map((year) => {\n      return (Number(year) + increment).toString();\n    });\n  }\n\n  updateDisplayedHeader(type: string, value: string) {\n    let updatedDate;\n    if (type === 'year') {\n      updatedDate = { year: value };\n    }\n\n    if (type === 'month') {\n      const monthDate = new Date(`${value} 1`);\n      const monthValue = monthDate.toLocaleDateString(this.locale, { month: 'numeric' });\n\n      updatedDate = { month: Number(monthValue) - 1 };\n\n      // Close the year view if month is selected\n      this.toggleCaret();\n    }\n\n    const currentDisplayedDate = new Date(this.displayedDate);\n\n    // Handles case where month is January, represented by 0\n    const checkedMonth = updatedDate?.month ?? currentDisplayedDate.getMonth();\n    const day = new Date(updatedDate.year || currentDisplayedDate.getFullYear(), checkedMonth, 1).toISOString();\n\n    this.displayedDate = day;\n  }\n\n  componentWillLoad() {\n    if (this.presetMenuOption) {\n      this._setMenuRowOption(this.presetMenuOption);\n    }\n\n    this.buildInitialYearView();\n    this.datePickerLabel = `date-picker-label-${uuid()}`;\n  }\n\n  /**\n   * Core function called whenever props or states are changed to update the calendar view.\n   */\n  componentWillRender() {\n    this.validateDisplayedDate(this.displayedDate);\n    this.displayedMonth = new Date(this.displayedDate).toLocaleString(this.locale, { month: 'short', year: 'numeric' });\n    this.buildWeekdays();\n    this.buildCalendar();\n  }\n\n  render() {\n    const MarketDatePickerMenuTagName = getNamespacedTagFor('market-date-picker-menu');\n    const MarketDatePickerDateTagName = getNamespacedTagFor('market-date-picker-date');\n    const MarketDatePickerInputDateTagName = getNamespacedTagFor('market-date-picker-input-date');\n    const MarketButtonTagName = getNamespacedTagFor('market-button');\n    const MarketIconTagName = getNamespacedTagFor('market-icon');\n    const MarketDividerTagName = getNamespacedTagFor('market-divider');\n\n    // TODO: remove when design tokens are added (UI-6454)\n    const DATE_PICKER_BUTTON_PREVIOUS_YEAR_ICON_ASSET = 'chevron-left';\n    const DATE_PICKER_BUTTON_NEXT_YEAR_ICON_ASSET = 'chevron-right';\n    const DATE_PICKER_BUTTON_PREVIOUS_MONTH_ICON_ASSET = 'arrow-left';\n    const DATE_PICKER_BUTTON_NEXT_MONTH_ICON_ASSET = 'arrow-right';\n\n    return (\n      <Host class=\"market-date-picker\">\n        {/* DATE PICKER MENU */}\n        {this.displayMenu && (\n          <list-view>\n            <MarketDatePickerMenuTagName\n              timeframe={this.timeframe}\n              excludeMenuItems={this.excludeMenuItems}\n              presetMenuOption={this.presetMenuOption}\n            >\n              <slot name={MENU_SLOT_NAMES.TODAY} slot={MENU_SLOT_NAMES.TODAY}>\n                Today\n              </slot>\n              <slot name={MENU_SLOT_NAMES.YESTERDAY} slot={MENU_SLOT_NAMES.YESTERDAY}>\n                Yesterday\n              </slot>\n              <slot name={MENU_SLOT_NAMES.THIS_WEEK} slot={MENU_SLOT_NAMES.THIS_WEEK}>\n                This week\n              </slot>\n              <slot name={MENU_SLOT_NAMES.LAST_WEEK} slot={MENU_SLOT_NAMES.LAST_WEEK}>\n                Last week\n              </slot>\n              <slot name={MENU_SLOT_NAMES.THIS_MONTH} slot={MENU_SLOT_NAMES.THIS_MONTH}>\n                This month\n              </slot>\n              <slot name={MENU_SLOT_NAMES.LAST_MONTH} slot={MENU_SLOT_NAMES.LAST_MONTH}>\n                Last month\n              </slot>\n              <slot name={MENU_SLOT_NAMES.THIS_YEAR} slot={MENU_SLOT_NAMES.THIS_YEAR}>\n                This year\n              </slot>\n              <slot name={MENU_SLOT_NAMES.LAST_YEAR} slot={MENU_SLOT_NAMES.LAST_YEAR}>\n                Last year\n              </slot>\n              <slot name={MENU_SLOT_NAMES.CUSTOM} slot={MENU_SLOT_NAMES.CUSTOM}>\n                Custom\n              </slot>\n            </MarketDatePickerMenuTagName>\n          </list-view>\n        )}\n\n        {/* DATE PICKER CALENDAR VIEW */}\n        <calendar>\n          {/* DATE PICKER HEADER */}\n          <header>\n            <nav>\n              {!this.yearViewActive && (\n                <MarketButtonTagName\n                  class=\"left-nav\"\n                  size=\"small\"\n                  aria-label=\"Previous month\"\n                  onClick={() => this.navigateMonth(-1)}\n                >\n                  <MarketIconTagName\n                    slot=\"icon\"\n                    name={DATE_PICKER_BUTTON_PREVIOUS_MONTH_ICON_ASSET}\n                  ></MarketIconTagName>\n                </MarketButtonTagName>\n              )}\n              <MarketButtonTagName\n                class=\"year-view-button\"\n                aria-label={'Toggle year view'}\n                onClick={() => this.toggleCaret()}\n                caret={this.yearViewActive ? 'up' : 'down'}\n                rank=\"tertiary\"\n              >\n                <h2 id={this.datePickerLabel}>{this.displayedMonth}</h2>\n              </MarketButtonTagName>\n              {!this.yearViewActive && (\n                <MarketButtonTagName size=\"small\" aria-label=\"Next month\" onClick={() => this.navigateMonth(1)}>\n                  <MarketIconTagName slot=\"icon\" name={DATE_PICKER_BUTTON_NEXT_MONTH_ICON_ASSET}></MarketIconTagName>\n                </MarketButtonTagName>\n              )}\n            </nav>\n          </header>\n\n          {/* DATE PICKER GROUP VIEW */}\n          {!this.yearViewActive && (\n            <month-view role=\"grid\" aria-labelledby={this.datePickerLabel}>\n              {\n                // Set the weekdays header for the date picker calendar\n                this.displayedWeekdays.map((text) => (\n                  <MarketDatePickerDateTagName\n                    class={'weekday-header'}\n                    disabled={true}\n                    day={text}\n                  ></MarketDatePickerDateTagName>\n                ))\n              }\n              {\n                // Set the available dates\n                this.days.map((day: Day) => (\n                  <MarketDatePickerDateTagName\n                    disabled={day.disabled}\n                    selection={day.selection}\n                    today={day.today}\n                    selected={day.selected}\n                    day={day.date || null}\n                    type=\"day\"\n                  ></MarketDatePickerDateTagName>\n                ))\n              }\n            </month-view>\n          )}\n          {this.yearViewActive && (\n            <year-view aria-labelledby={this.datePickerLabel}>\n              {/* add chevrons for year updates */}\n              <year-section>\n                <MarketButtonTagName\n                  size=\"small\"\n                  rank=\"tertiary\"\n                  aria-label=\"Previous year\"\n                  onClick={() => this.updateDisplayedYearList(-1)}\n                >\n                  <MarketIconTagName slot=\"icon\" name={DATE_PICKER_BUTTON_PREVIOUS_YEAR_ICON_ASSET}></MarketIconTagName>\n                </MarketButtonTagName>\n                {this.yearViewYearsList.map((year) => (\n                  <MarketDatePickerDateTagName day={year} type=\"year\"></MarketDatePickerDateTagName>\n                ))}\n                <MarketButtonTagName\n                  size=\"small\"\n                  rank=\"tertiary\"\n                  aria-label=\"Next year\"\n                  onClick={() => this.updateDisplayedYearList(1)}\n                >\n                  <MarketIconTagName slot=\"icon\" name={DATE_PICKER_BUTTON_NEXT_YEAR_ICON_ASSET}></MarketIconTagName>\n                </MarketButtonTagName>\n              </year-section>\n              <MarketDividerTagName size=\"thin\"></MarketDividerTagName>\n              <month-section role=\"grid\">\n                {this.yearViewMonthList.map((monthName: string) => (\n                  <MarketDatePickerDateTagName day={monthName} type=\"month\"></MarketDatePickerDateTagName>\n                ))}\n              </month-section>\n            </year-view>\n          )}\n          {this.withInputs && (\n            <MarketDatePickerInputDateTagName\n              class=\"date-input-top-margin\"\n              range={this.selectionType === 'range'}\n              isDateDisabled={this.isDateDisabled}\n              selectedStartDate={this.selectedStartDate}\n              selectedEndDate={this.selectedEndDate}\n              withTime={this.withInputs === 'date-and-time'}\n              timeframe={this.timeframe}\n            >\n              <slot name=\"start-date\" slot=\"start-date\">\n                {this.selectionType === 'range' ? 'Start ' : ''}Date\n              </slot>\n              <slot name=\"end-date\" slot=\"end-date\">\n                End Date\n              </slot>\n              <slot name=\"start-time\" slot=\"start-time\">\n                {this.selectionType === 'range' ? 'Start ' : ''}Time\n              </slot>\n              <slot name=\"end-time\" slot=\"end-time\">\n                End Time\n              </slot>\n              <slot name=\"range-error\" slot=\"range-error\">\n                Enter a valid date range\n              </slot>\n            </MarketDatePickerInputDateTagName>\n          )}\n        </calendar>\n      </Host>\n    );\n  }\n}\n"],"mappings":"uRAqBe,SAASA,EAAQC,EAAWC,GACzCC,EAAa,EAAGC,WAChB,IAAIC,EAAOC,EAAOL,GAClB,IAAIM,EAASC,EAAUN,GACvB,GAAIO,MAAMF,GAAS,CACjB,OAAO,IAAIG,KAAKC,IACpB,CACE,IAAKJ,EAAQ,CAEX,OAAOF,CACX,CACEA,EAAKO,QAAQP,EAAKQ,UAAYN,GAC9B,OAAOF,CACT,CCbe,SAASS,EAAUb,EAAWC,GAC3CC,EAAa,EAAGC,WAChB,IAAIC,EAAOC,EAAOL,GAClB,IAAIM,EAASC,EAAUN,GACvB,GAAIO,MAAMF,GAAS,CACjB,OAAO,IAAIG,KAAKC,IACpB,CACE,IAAKJ,EAAQ,CAEX,OAAOF,CACX,CACE,IAAIU,EAAaV,EAAKQ,UAUtB,IAAIG,EAAoB,IAAIN,KAAKL,EAAKY,WACtCD,EAAkBE,SAASb,EAAKc,WAAaZ,EAAS,EAAG,GACzD,IAAIa,EAAcJ,EAAkBH,UACpC,GAAIE,GAAcK,EAAa,CAG7B,OAAOJ,CACX,KAAS,CAQLX,EAAKgB,YAAYL,EAAkBM,cAAeN,EAAkBG,WAAYJ,GAChF,OAAOV,CACX,CACA,CC7Be,SAASkB,EAAYtB,EAAWuB,GAC7C,IAAIC,EAAMC,EAAOC,EAAOC,EAAuBC,EAAiBC,EAAuBC,EAAuBC,EAC9G7B,EAAa,EAAGC,WAChB,IAAI6B,EAAiBC,IACrB,IAAIC,EAAe3B,GAAWiB,GAAQC,GAASC,GAASC,EAAwBJ,IAAY,MAAQA,SAAiB,OAAS,EAAIA,EAAQW,gBAAkB,MAAQP,SAA+B,EAAIA,EAAwBJ,IAAY,MAAQA,SAAiB,OAAS,GAAKK,EAAkBL,EAAQY,UAAY,MAAQP,SAAyB,OAAS,GAAKC,EAAwBD,EAAgBL,WAAa,MAAQM,SAA+B,OAAS,EAAIA,EAAsBK,gBAAkB,MAAQR,SAAe,EAAIA,EAAQM,EAAeE,gBAAkB,MAAQT,SAAe,EAAIA,GAASK,EAAwBE,EAAeG,UAAY,MAAQL,SAA+B,OAAS,GAAKC,EAAyBD,EAAsBP,WAAa,MAAQQ,SAAgC,OAAS,EAAIA,EAAuBG,gBAAkB,MAAQV,SAAc,EAAIA,EAAO,GAGn4B,KAAMU,GAAgB,GAAKA,GAAgB,GAAI,CAC7C,MAAM,IAAIE,WAAW,mDACzB,CACE,IAAIhC,EAAOC,EAAOL,GAClB,IAAIqC,EAAMjC,EAAKkC,SACf,IAAIC,GAAQF,EAAMH,EAAe,EAAI,GAAKG,EAAMH,EAChD9B,EAAKO,QAAQP,EAAKQ,UAAY2B,GAC9BnC,EAAKoC,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOpC,CACT,CC1Be,SAASqC,EAASzC,EAAWC,GAC1CC,EAAa,EAAGC,WAChB,IAAIG,EAASC,EAAUN,GACvB,IAAIyC,EAAOpC,EAAS,EACpB,OAAOP,EAAQC,EAAW0C,EAC5B,CCLe,SAASC,EAAS3C,EAAWC,GAC1CC,EAAa,EAAGC,WAChB,IAAIG,EAASC,EAAUN,GACvB,OAAOY,EAAUb,EAAWM,EAAS,GACvC,CCLe,SAASsC,EAAa5C,GACnCE,EAAa,EAAGC,WAChB,IAAIC,EAAOC,EAAOL,GAClBI,EAAKO,QAAQ,GACbP,EAAKoC,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOpC,CACT,CCNe,SAASyC,EAAY7C,GAClCE,EAAa,EAAGC,WAChB,IAAI2C,EAAYzC,EAAOL,GACvB,IAAII,EAAO,IAAIK,KAAK,GACpBL,EAAKgB,YAAY0B,EAAUzB,cAAe,EAAG,GAC7CjB,EAAKoC,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOpC,CACT,CCIe,SAAS2C,EAAU/C,EAAWuB,GAC3C,IAAIC,EAAMC,EAAOC,EAAOC,EAAuBC,EAAiBC,EAAuBC,EAAuBC,EAC9G7B,EAAa,EAAGC,WAChB,IAAI6B,EAAiBC,IACrB,IAAIC,EAAe3B,GAAWiB,GAAQC,GAASC,GAASC,EAAwBJ,IAAY,MAAQA,SAAiB,OAAS,EAAIA,EAAQW,gBAAkB,MAAQP,SAA+B,EAAIA,EAAwBJ,IAAY,MAAQA,SAAiB,OAAS,GAAKK,EAAkBL,EAAQY,UAAY,MAAQP,SAAyB,OAAS,GAAKC,EAAwBD,EAAgBL,WAAa,MAAQM,SAA+B,OAAS,EAAIA,EAAsBK,gBAAkB,MAAQR,SAAe,EAAIA,EAAQM,EAAeE,gBAAkB,MAAQT,SAAe,EAAIA,GAASK,EAAwBE,EAAeG,UAAY,MAAQL,SAA+B,OAAS,GAAKC,EAAyBD,EAAsBP,WAAa,MAAQQ,SAAgC,OAAS,EAAIA,EAAuBG,gBAAkB,MAAQV,SAAc,EAAIA,EAAO,GAGn4B,KAAMU,GAAgB,GAAKA,GAAgB,GAAI,CAC7C,MAAM,IAAIE,WAAW,mDACzB,CACE,IAAIhC,EAAOC,EAAOL,GAClB,IAAIqC,EAAMjC,EAAKkC,SACf,IAAIC,GAAQF,EAAMH,GAAgB,EAAI,GAAK,GAAKG,EAAMH,GACtD9B,EAAKO,QAAQP,EAAKQ,UAAY2B,GAC9BnC,EAAKoC,SAAS,GAAI,GAAI,GAAI,KAC1B,OAAOpC,CACT,CC3Be,SAAS4C,EAAehD,GACrCE,EAAa,EAAGC,WAChB,IAAIC,EAAOC,EAAOL,GAClB,IAAIiD,EAAQ7C,EAAKc,WACjBd,EAAKgB,YAAYhB,EAAKiB,cAAe4B,EAAQ,EAAG,GAChD7C,EAAKoC,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOpC,CACT,CCPe,SAAS8C,EAAclD,GACpCE,EAAa,EAAGC,WAChB,IAAIC,EAAOC,EAAOL,GAClB,IAAImD,EAAO/C,EAAKiB,cAChBjB,EAAKgB,YAAY+B,EAAO,EAAG,EAAG,GAC9B/C,EAAKoC,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOpC,CACT,CCRe,SAASgD,IACtB,IAAIC,EAAM,IAAI5C,KACd,IAAI0C,EAAOE,EAAIhC,cACf,IAAI4B,EAAQI,EAAInC,WAChB,IAAImB,EAAMgB,EAAIzC,UACd,IAAIR,EAAO,IAAIK,KAAK,GACpBL,EAAKgB,YAAY+B,EAAMF,EAAOZ,EAAM,GACpCjC,EAAKoC,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOpC,CACT,CCPe,SAASkD,EAAUtD,EAAWC,GAC3CC,EAAa,EAAGC,WAChB,IAAIG,EAASC,EAAUN,GACvB,OAAOY,EAAUb,GAAYM,EAC/B,CCJe,SAASiD,EAASvD,EAAWC,GAC1CC,EAAa,EAAGC,WAChB,IAAIG,EAASC,EAAUN,GACvB,OAAOwC,EAASzC,GAAYM,EAC9B,CCJe,SAASkD,EAASxD,EAAWC,GAC1CC,EAAa,EAAGC,WAChB,IAAIG,EAASC,EAAUN,GACvB,OAAO0C,EAAS3C,GAAYM,EAC9B,CCzBA,MAAMmD,EAAsB,uzDAC5B,MAAAC,EAAeD,ECyBf,MAAME,EAAN,WAAAC,GACEC,KAAAzD,KAAe,GACfyD,KAAAZ,MAAgB,KAChBY,KAAAV,KAAe,KAGfU,KAAAC,SAAoB,MACpBD,KAAAE,UAA+E,OAC/EF,KAAAG,MAAiB,MACjBH,KAAAI,SAAoB,K,QAQTC,EAAgB,M,+JA6InBL,KAAAM,kBAAmC,G,mBAvIU,S,iHA2Bb,M,wBAKiC,M,sBAY7B,G,eAMgB,U,0CAY1BC,UAAUC,UAAY,Q,6CAe4B,G,aAMzB,M,oBAMO,M,qDA0BtB,G,uBAKA,G,2BAyB5C,aAAAC,GACET,KAAKU,kBAAoB,GAGzB,MAAMC,EAAUlD,EAAY,IAAIb,KAAQ,CAAEyB,aAAc2B,KAAKY,4BAC7D,IAAIC,EAEJ,IAAK,IAAIC,EAAY,EAAGA,EAAI,EAAGA,IAAK,CAClCD,EAAcF,EAAQI,mBAAmBf,KAAK1B,OAAQ,CAAEqC,QAAS,UAGjE,GAAIX,KAAK1B,OAAO0C,WAAW,OAAQ,CACjCH,EAAcA,EAAYI,MAAM,GAAI,E,CAEtCjB,KAAKU,kBAAkBQ,KAAKL,GAC5BF,EAAQ7D,QAAQ6D,EAAQ5D,UAAY,E,EAIxC,uBAAA6D,G,cACE,MAAMO,EAAO,IAAIC,KAAKC,OAAOrB,KAAK1B,QAIlC,MAAMgD,GAAWC,GAAAC,GAAAC,EAAAN,IAAI,MAAJA,SAAI,SAAJA,EAAMO,YAAQ,MAAAD,SAAA,SAAAA,EAAEH,YAAQ,MAAAE,SAAA,EAAAA,GAAIG,GAAAC,EAAAT,IAAI,MAAJA,SAAI,SAAJA,EAAMU,eAAW,MAAAD,SAAA,SAAAA,EAAAE,KAAAX,MAAI,MAAAQ,SAAA,SAAAA,EAAEL,YAAQ,MAAAC,SAAA,EAAAA,EAAI,EAGhF,OAAQD,EAAW,C,CAMrB,0BAAAS,CAA2BC,EAAmBC,GAC5C,IAAKjC,KAAKkC,YAAa,CACrB,M,CAGF,MAAMC,EAAmB,IAAIvF,KAAKoD,KAAKoC,mBAGvC,GACEpC,KAAKoC,oBACJpC,KAAKqC,iBACNC,EAASN,EAAahC,KAAKkC,cAC3BK,EAAQP,EAAaG,GACrB,CACAF,EAAc/B,UAAY,c,CAG5B,IAAKsC,EAAUxC,KAAKkC,YAAaF,GAAc,CAC7C,M,CAKF,IACGhC,KAAKoC,mBACLpC,KAAKoC,mBAAqBpC,KAAKqC,kBAC/BE,EAAQvC,KAAKkC,YAAaC,GAC3B,CACAF,EAAc/B,UAAY,a,KACrB,CACL+B,EAAc/B,UAAY,Y,EAO9B,0BAAAuC,CAA2BjE,EAAKkE,EAAcP,EAAkBQ,GAE9D,GAAIR,GAAoBK,EAAUE,EAAcP,GAAmB,CACjE3D,EAAIyB,SAAW,KACfzB,EAAI0B,UAAYF,KAAK4C,gBAAkB,SAAW,SAAW,a,CAI/D,GAAI5C,KAAK4C,gBAAkB,QAAS,CAClC5C,KAAK+B,2BAA2BW,EAAclE,GAE9C,GACE2D,GACAQ,GACAJ,EAAQG,EAAcP,IACtBG,EAASI,EAAcC,GACvB,CACAnE,EAAIyB,SAAW,KACfzB,EAAI0B,UAAY,c,CAGlB,GAAIyC,GAAkBH,EAAUE,EAAcC,GAAiB,CAC7DnE,EAAIyB,SAAW,KACfzB,EAAI0B,UAAY,Y,GAUtB,aAAA2C,GACE,MAAM1C,EAAc,IAAIvD,KACxB,MAAMkG,EAAuB,IAAIlG,KAAKoD,KAAK+C,eAG3C,MAAMC,EAAiB,IAAIpG,KAAKkG,EAAqBtF,cAAesF,EAAqBzF,WAAY,GAMrG,MAAM4F,EAAiBjD,KAAKY,0BAI5B,GAAIoC,EAASvE,WAAa,GAAKwE,IAAmB,EAAG,CACnDD,EAASlG,QAAQkG,EAASjG,UAAY,E,KACjC,CACLiG,EAASlG,QAAQkG,EAASjG,WAAaiG,EAASvE,SAAWwE,G,CAI7DjD,KAAKnB,KAAO,GAGZ,MAAMsD,EAAmBnC,KAAKoC,mBAAqB,IAAIxF,KAAKoD,KAAKoC,mBACjE,MAAMO,EAAiB3C,KAAKqC,iBAAmB,IAAIzF,KAAKoD,KAAKqC,iBAE7D,IAAK,IAAIvB,EAAY,EAAGA,EAAI,GAAIA,IAAK,CAGnC,MAAMtC,EAAW,IAAIsB,EACrBtB,EAAIc,KAAO0D,EAASxF,cACpBgB,EAAIY,MAAQ4D,EAAS3F,WAIrB,GACE2F,EAASxF,gBAAkBsF,EAAqBtF,eAChDwF,EAAS3F,aAAeyF,EAAqBzF,WAC7C,CACAmB,EAAIjC,KAAOyG,EAASjG,UAAUmG,U,CAIhC,GAAIV,EAAUQ,EAAU7C,GAAQ,CAC9B3B,EAAI2B,MAAQ,I,CAIdH,KAAKyC,2BAA2BjE,EAAKwE,EAAUb,EAAkBQ,GAGjE,GAAInE,EAAIjC,MAAQyD,KAAKmD,eAAgB,CACnC3E,EAAI4B,SAAWJ,KAAKmD,eAAeH,E,CAGrC,GAAIhD,KAAKoD,YAAc,UAAYd,EAASU,EAAU7C,KAAWqC,EAAUQ,EAAU7C,GAAQ,CAC3F3B,EAAI4B,SAAW,I,CAGjB,GAAIJ,KAAKoD,YAAc,QAAUb,EAAQS,EAAU7C,KAAWqC,EAAUQ,EAAU7C,GAAQ,CACxF3B,EAAI4B,SAAW,I,CAIjBJ,KAAKnB,KAAKqC,KAAK1C,GAGfwE,EAASlG,QAAQkG,EAASjG,UAAY,GAMtC,GAAIiG,EAASvE,WAAa,EAAIwE,GAAkBD,EAAS3F,aAAeyF,EAAqBzF,WAAY,CACvG,K,GAQN,mBAAAgG,GACErD,KAAKoC,kBAAoB,KACzBpC,KAAKqC,gBAAkB,I,CAOzB,aAAAiB,CAAcC,GACZ,MAAMT,EAAuB,IAAIlG,KAAKoD,KAAK+C,eAC3C/C,KAAK+C,cAAgB,IAAInG,KACvBkG,EAAqBtF,cACrBsF,EAAqBzF,WAAakG,EAClC,GACAC,a,CAUJ,gBAAAC,EAAmBC,QAAQnH,KAAEA,EAAIoH,MAAEA,KACjC,MAAOC,EAASC,GAAQtH,EAAKuH,MAAM,KACnC,MAAOC,EAASC,EAAUC,GAAUL,EAAQE,MAAM,KAAKI,IAAIC,QAC3DnE,KAAK+C,cAAgB,IAAInG,KAAKmH,EAASC,EAAW,EAAG,GAAGd,WAGxD,MAAOkB,EAAMC,GAAUrE,KAAKsE,aAAe,gBAAkBT,EAAKC,MAAM,KAAKI,IAAIC,QAAU,GAC3FnE,KAAKuE,YAAY,CACf/F,IAAKyF,EACL7E,MAAO4E,EAAW,EAClB1E,KAAMyE,EACNK,OACAC,SACAV,S,CAQJ,UAAAa,EAAad,QAAUnH,KAAMkI,KAC3B,GAAIA,EAAYC,OAAS,MAAO,CAC9B1E,KAAK2E,sBAAsBF,EAAYC,KAAMD,EAAYjG,I,KACpD,CACLwB,KAAKuE,YAAY,CAAE/F,IAAKiG,EAAYjG,K,EAQxC,SAAAoG,EAAYlB,QAAUnH,KAAMkI,KAC1B,MAAM3B,EAAuB,IAAIlG,KAAKoD,KAAK+C,eAC3C/C,KAAKkC,YAAc,IAAItF,KAAKkG,EAAqBtF,cAAesF,EAAqBzF,WAAYoH,EAAYjG,I,CAO/G,aAAAqG,GACE7E,KAAKkC,YAAc,I,CAQrB,aAAA4C,CAAcC,GACZ,MAAMC,EAAaD,EAAErB,OAAOuB,cAC5B,IAAKD,EAAY,CACf,M,CAEFhF,KAAKkF,2BAA2BC,KAAK,CACnCF,cAAeD,IAGjB,MAAMI,EAAgBpF,KAAKoC,kBAC3B,MAAMiD,EAAcrF,KAAKqC,gBACzBrC,KAAKsF,kBAAkBN,GAEvB,GAAIA,IAAeO,EAAgBC,OAAQ,CACzCxF,KAAKyF,uBAAuBN,KAAK,CAC/BC,gBACAC,cACAK,UAAW1F,KAAKoC,kBAChBuD,QAAS3F,KAAKqC,gBACd4C,cAAeD,G,EASrB,eAAAY,EAAkBlC,QAAQmC,QAAEA,KAC1B7F,KAAK6F,QAAUA,C,CAGT,iBAAAP,CAAkBN,GACxB,MAAM7E,EAAQ,IAAIvD,KAElB,OAAQoI,GACN,KAAKO,EAAgBO,MACnB9F,KAAKqD,sBACLrD,KAAKoC,kBAAoBjC,EAAMqD,cAC/B,MAEF,KAAK+B,EAAgBQ,UACnB/F,KAAKqD,sBACLrD,KAAKoC,kBAAoB7C,IAAmBiE,cAC5C,MAEF,KAAK+B,EAAgBS,UACnBhG,KAAKoC,kBAAoB3E,EAAY0C,GAAOqD,cAC5C,GAAIxD,KAAK4C,gBAAkB,QAAS,CAClC5C,KAAKqC,gBAAkBnD,EAAUiB,GAAOqD,a,CAE1C,MAEF,KAAK+B,EAAgBU,UAAW,CAC9B,MAAMC,EAAexG,EAASS,EAAO,GAErCH,KAAKoC,kBAAoB3E,EAAYyI,GAAc1C,cACnD,GAAIxD,KAAK4C,gBAAkB,QAAS,CAClC5C,KAAKqC,gBAAkBnD,EAAUgH,GAAc1C,a,CAEjD,K,CAGF,KAAK+B,EAAgBY,WACnBnG,KAAKoC,kBAAoBrD,EAAaoB,GAAOqD,cAC7C,GAAIxD,KAAK4C,gBAAkB,QAAS,CAClC5C,KAAKqC,gBAAkBlD,EAAegB,GAAOqD,a,CAE/C,MAEF,KAAK+B,EAAgBa,WAAY,CAC/B,MAAMC,EAAgB5G,EAAUU,EAAO,GAEvCH,KAAKoC,kBAAoBrD,EAAasH,GAAe7C,cACrD,GAAIxD,KAAK4C,gBAAkB,QAAS,CAClC5C,KAAKqC,gBAAkBlD,EAAekH,GAAe7C,a,CAEvD,K,CAGF,KAAK+B,EAAgBe,UACnBtG,KAAKoC,kBAAoBpD,EAAYmB,GAAOqD,cAC5C,GAAIxD,KAAK4C,gBAAkB,QAAS,CAClC5C,KAAKqC,gBAAkBhD,EAAcc,GAAOqD,a,CAE9C,MAEF,KAAK+B,EAAgBgB,UAAW,CAC9B,MAAMC,EAAe7G,EAASQ,EAAO,GAErCH,KAAKoC,kBAAoBpD,EAAYwH,GAAchD,cACnD,GAAIxD,KAAK4C,gBAAkB,QAAS,CAClC5C,KAAKqC,gBAAkBhD,EAAcmH,GAAchD,a,CAErD,K,EAQJ,GAAIwB,IAAeO,EAAgBC,OAAQ,CACzCxF,KAAK+C,cAAgB/C,KAAKoC,iB,EAI9B,WAAAmC,CAAY7G,G,MAQV,MAAM0H,EAAgBpF,KAAKoC,kBAC3B,MAAMiD,EAAcrF,KAAKqC,gBAEzB,MAAMS,EAAuB,IAAIlG,KAAKoD,KAAK+C,eAG3C,MAAM0D,GAAehF,EAAA/D,EAAQ0B,SAAK,MAAAqC,SAAA,EAAAA,EAAIqB,EAAqBzF,WAE3D,MAAMmB,EAAM,IAAI5B,KACdc,EAAQ4B,MAAQwD,EAAqBtF,cACrCiJ,EACA/I,EAAQc,KAAOsE,EAAqB/F,UACpCW,EAAQ0G,MAAQtB,EAAqB4D,WACrChJ,EAAQ2G,QAAUvB,EAAqB6D,cACvCnD,cAEF,GAAIxD,KAAK4G,cAAgBpE,EAAU,IAAI5F,KAAKoD,KAAKoC,mBAAoB,IAAIxF,KAAK4B,IAAO,CAEnF,MAAMqI,EAAO7G,KAAK8G,GAAGC,WAAWC,cAC9BC,EAAoB,4BAEtBJ,EAAKK,kB,CAGP,GAAIlH,KAAK4C,gBAAkB,SAAU,CACnC5C,KAAKqD,sBACLrD,KAAKoC,kBAAoB5D,C,KACpB,CAEL,GAAIwB,KAAKoC,oBAAsBpC,KAAKqC,iBAAmB7D,GAAOwB,KAAKoC,kBAAmB,CAEpFpC,KAAKqC,gBAAkB7D,C,KAClB,CACL,GAAId,EAAQiG,MAAO,CACjB,GAAIjG,EAAQiG,QAAU,QAAS3D,KAAKoC,kBAAoB5D,EACxD,GAAId,EAAQiG,QAAU,MAAO3D,KAAKqC,gBAAkB7D,C,KAC/C,CACLwB,KAAKqD,sBACLrD,KAAKoC,kBAAoB5D,C,GAK/BwB,KAAKyF,uBAAuBN,KAAK,CAC/BC,gBACAC,cACAK,UAAW1F,KAAKoC,kBAChBuD,QAAS3F,KAAKqC,gBACd4C,cAAeM,EAAgBC,Q,CAKnC,WAAA2B,GACEnH,KAAKoH,gBAAkBpH,KAAKoH,c,CAG9B,qBAAAC,CAAsB9K,GAEpB,GAAI,IAAIK,KAAKL,GAAM2G,aAAe,eAAgB,CAChDlD,KAAK+C,eAAgB,IAAInG,MAAO4G,a,EAIpC,oBAAA8D,GACEtH,KAAKqH,sBAAsBrH,KAAK+C,eAEhC,MAAMD,EAAuB,IAAIlG,KAAKoD,KAAK+C,eAC3C,MAAMwE,EAAczE,EAAqBtF,cACzCwC,KAAKwH,kBAAoB,EAAED,EAAc,GAAGrE,WAAYqE,EAAYrE,YAAaqE,EAAc,GAAGrE,YAElG,IAAK,IAAIuE,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAY,IAAI9K,KAAK,KAAM6K,GAAG1G,mBAAmBf,KAAK1B,OAAQ,CAAEc,MAAO,UAC7EY,KAAKM,kBAAkBY,KAAKwG,E,EAIhC,uBAAAC,CAAwBpE,GACtBvD,KAAKwH,kBAAoBxH,KAAKwH,kBAAkBtD,KAAK5E,IAC3C6E,OAAO7E,GAAQiE,GAAWL,Y,CAItC,qBAAAyB,CAAsBD,EAAckD,G,MAClC,IAAIC,EACJ,GAAInD,IAAS,OAAQ,CACnBmD,EAAc,CAAEvI,KAAMsI,E,CAGxB,GAAIlD,IAAS,QAAS,CACpB,MAAMoD,EAAY,IAAIlL,KAAK,GAAGgL,OAC9B,MAAMG,EAAaD,EAAU/G,mBAAmBf,KAAK1B,OAAQ,CAAEc,MAAO,YAEtEyI,EAAc,CAAEzI,MAAO+E,OAAO4D,GAAc,GAG5C/H,KAAKmH,a,CAGP,MAAMrE,EAAuB,IAAIlG,KAAKoD,KAAK+C,eAG3C,MAAM0D,GAAehF,EAAAoG,IAAW,MAAXA,SAAW,SAAXA,EAAazI,SAAK,MAAAqC,SAAA,EAAAA,EAAIqB,EAAqBzF,WAChE,MAAMmB,EAAM,IAAI5B,KAAKiL,EAAYvI,MAAQwD,EAAqBtF,cAAeiJ,EAAc,GAAGjD,cAE9FxD,KAAK+C,cAAgBvE,C,CAGvB,iBAAAwJ,GACE,GAAIhI,KAAKiI,iBAAkB,CACzBjI,KAAKsF,kBAAkBtF,KAAKiI,iB,CAG9BjI,KAAKsH,uBACLtH,KAAKkI,gBAAkB,qBAAqBC,K,CAM9C,mBAAAC,GACEpI,KAAKqH,sBAAsBrH,KAAK+C,eAChC/C,KAAKqI,eAAiB,IAAIzL,KAAKoD,KAAK+C,eAAeuF,eAAetI,KAAK1B,OAAQ,CAAEc,MAAO,QAASE,KAAM,YACvGU,KAAKS,gBACLT,KAAK6C,e,CAGP,MAAA0F,GACE,MAAMC,EAA8BvB,EAAoB,2BACxD,MAAMwB,EAA8BxB,EAAoB,2BACxD,MAAMyB,EAAmCzB,EAAoB,iCAC7D,MAAM0B,EAAsB1B,EAAoB,iBAChD,MAAM2B,EAAoB3B,EAAoB,eAC9C,MAAM4B,EAAuB5B,EAAoB,kBAGjD,MAAM6B,EAA8C,eACpD,MAAMC,EAA0C,gBAChD,MAAMC,EAA+C,aACrD,MAAMC,EAA2C,cAEjD,OACEC,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAM,sBAETrJ,KAAK4G,aACJsC,EAAA,aAAAE,IAAA,4CACEF,EAACV,EAA2B,CAAAY,IAAA,2CAC1BhG,UAAWpD,KAAKoD,UAChBkG,iBAAkBtJ,KAAKsJ,iBACvBrB,iBAAkBjI,KAAKiI,kBAEvBiB,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBO,MAAO0D,KAAMjE,EAAgBO,OAAK,SAG9DoD,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBQ,UAAWyD,KAAMjE,EAAgBQ,WAAS,aAGtEmD,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBS,UAAWwD,KAAMjE,EAAgBS,WAAS,aAGtEkD,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBU,UAAWuD,KAAMjE,EAAgBU,WAAS,aAGtEiD,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBY,WAAYqD,KAAMjE,EAAgBY,YAAU,cAGxE+C,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBa,WAAYoD,KAAMjE,EAAgBa,YAAU,cAGxE8C,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBe,UAAWkD,KAAMjE,EAAgBe,WAAS,aAGtE4C,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBgB,UAAWiD,KAAMjE,EAAgBgB,WAAS,aAGtE2C,EAAA,QAAAE,IAAA,2CAAMG,KAAMhE,EAAgBC,OAAQgE,KAAMjE,EAAgBC,QAAM,YAQtE0D,EAAA,YAAAE,IAAA,4CAEEF,EAAA,UAAAE,IAAA,4CACEF,EAAA,OAAAE,IAAA,6CACIpJ,KAAKoH,gBACL8B,EAACP,EAAmB,CAAAS,IAAA,2CAClBC,MAAM,WACNI,KAAK,QAAO,aACD,iBACXC,QAAS,IAAM1J,KAAKsD,eAAe,IAEnC4F,EAACN,EAAiB,CAAAQ,IAAA,2CAChBI,KAAK,OACLD,KAAMP,KAIZE,EAACP,EAAmB,CAAAS,IAAA,2CAClBC,MAAM,mBAAkB,aACZ,mBACZK,QAAS,IAAM1J,KAAKmH,cACpBwC,MAAO3J,KAAKoH,eAAiB,KAAO,OACpCwC,KAAK,YAELV,EAAA,MAAAE,IAAA,2CAAIS,GAAI7J,KAAKkI,iBAAkBlI,KAAKqI,kBAEpCrI,KAAKoH,gBACL8B,EAACP,EAAmB,CAAAS,IAAA,2CAACK,KAAK,QAAO,aAAY,aAAaC,QAAS,IAAM1J,KAAKsD,cAAc,IAC1F4F,EAACN,EAAiB,CAAAQ,IAAA,2CAACI,KAAK,OAAOD,KAAMN,QAO3CjJ,KAAKoH,gBACL8B,EAAA,cAAAE,IAAA,2CAAYU,KAAK,OAAM,kBAAkB9J,KAAKkI,iBAG1ClI,KAAKU,kBAAkBwD,KAAK6F,GAC1Bb,EAACT,EAA2B,CAC1BY,MAAO,iBACPjJ,SAAU,KACV5B,IAAKuL,MAMT/J,KAAKnB,KAAKqF,KAAK1F,GACb0K,EAACT,EAA2B,CAC1BrI,SAAU5B,EAAI4B,SACdF,UAAW1B,EAAI0B,UACfC,MAAO3B,EAAI2B,MACXF,SAAUzB,EAAIyB,SACdzB,IAAKA,EAAIjC,MAAQ,KACjBmI,KAAK,WAMd1E,KAAKoH,gBACJ8B,EAAA,aAAAE,IAAA,6DAA4BpJ,KAAKkI,iBAE/BgB,EAAA,gBAAAE,IAAA,4CACEF,EAACP,EAAmB,CAAAS,IAAA,2CAClBK,KAAK,QACLG,KAAK,WAAU,aACJ,gBACXF,QAAS,IAAM1J,KAAK2H,yBAAyB,IAE7CuB,EAACN,EAAiB,CAAAQ,IAAA,2CAACI,KAAK,OAAOD,KAAMT,KAEtC9I,KAAKwH,kBAAkBtD,KAAK5E,GAC3B4J,EAACT,EAA2B,CAACjK,IAAKc,EAAMoF,KAAK,WAE/CwE,EAACP,EAAmB,CAAAS,IAAA,2CAClBK,KAAK,QACLG,KAAK,WAAU,aACJ,YACXF,QAAS,IAAM1J,KAAK2H,wBAAwB,IAE5CuB,EAACN,EAAiB,CAAAQ,IAAA,2CAACI,KAAK,OAAOD,KAAMR,MAGzCG,EAACL,EAAoB,CAAAO,IAAA,2CAACK,KAAK,SAC3BP,EAAA,iBAAAE,IAAA,2CAAeU,KAAK,QACjB9J,KAAKM,kBAAkB4D,KAAKwD,GAC3BwB,EAACT,EAA2B,CAACjK,IAAKkJ,EAAWhD,KAAK,cAKzD1E,KAAKsE,YACJ4E,EAACR,EAAgC,CAAAU,IAAA,2CAC/BC,MAAM,wBACNW,MAAOhK,KAAK4C,gBAAkB,QAC9BO,eAAgBnD,KAAKmD,eACrBf,kBAAmBpC,KAAKoC,kBACxBC,gBAAiBrC,KAAKqC,gBACtB4H,SAAUjK,KAAKsE,aAAe,gBAC9BlB,UAAWpD,KAAKoD,WAEhB8F,EAAA,QAAAE,IAAA,2CAAMG,KAAK,aAAaC,KAAK,cAC1BxJ,KAAK4C,gBAAkB,QAAU,SAAW,GAAE,QAEjDsG,EAAA,QAAAE,IAAA,2CAAMG,KAAK,WAAWC,KAAK,YAAU,YAGrCN,EAAA,QAAAE,IAAA,2CAAMG,KAAK,aAAaC,KAAK,cAC1BxJ,KAAK4C,gBAAkB,QAAU,SAAW,GAAE,QAEjDsG,EAAA,QAAAE,IAAA,2CAAMG,KAAK,WAAWC,KAAK,YAAU,YAGrCN,EAAA,QAAAE,IAAA,2CAAMG,KAAK,cAAcC,KAAK,eAAa,8B"}