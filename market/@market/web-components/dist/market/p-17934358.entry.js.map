{"version":3,"names":["marketCodeInputCss","MarketCodeInputStyle0","MarketCodeInput","valueChangeHandler","value","sanitized","this","sanitizeValue","setInputsFromValue","setFocus","focused","focusFirstEmptyInput","_a","el","shadowRoot","activeElement","blur","Promise","resolve","isNumber","test","isValidChar","char","includes","type","inputs","querySelectorAll","input","forEach","i","length","focus","initCode","_code","split","padding","Array","from","fill","slice","filter","join","getValueFromInputs","prevChar","removeAttribute","tabIndex","spreadChars","e","target","data","chars","insertChars","nextElementSibling","first","rest","updateValue","previousValue","newValue","defaultPrevented","marketCodeInputValueChange","emit","code","onInput","onFocus","select","onBlur","onKeyDown","key","previousElementSibling","preventDefault","onKeyUp","onHostClick","componentWillLoad","render","index","tabindex","push","h","required","inputmode","autocomplete","maxlength","readOnly","readonly","disabled","placeholder","Host","class","name","onClick"],"sources":["src/components/market-code-input/market-code-input.css?tag=market-code-input&encapsulation=shadow","src/components/market-code-input/market-code-input.tsx"],"sourcesContent":["/* TODO: add design tokens for this component */\n\n@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/field.css\";\n@import \"../../styles/mixins/field-states.css\";\n\n:host {\n  @extend %field;\n  @extend %field-states;\n\n  display: flex;\n  align-items: center;\n  height: var(--input-code-height, 64px);\n\n  input {\n    font-weight: var(--input-code-font-weight, var(--core-type-bold-weight));\n    font-family: var(--core-type-mono-font-family, monospace);\n    text-align: center;\n  }\n\n  input:-webkit-autofill,\n  input:-webkit-autofill:hover,\n  input:-webkit-autofill:focus {\n    box-shadow: 0 0 0 calc(var(--input-code-height, 64px) / 2) var(--field-normal-state-background-color) inset;\n  }\n}\n\n.code-input-container {\n  display: flex; /* container is already displaying children using flexbox */\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n\n  /* add pseudoelements before/after the input elements */\n  &::before,\n  &::after {\n    content: \"\";\n    flex-basis: 100%;\n    pointer-events: none;\n  }\n}\n\n::slotted([slot=\"trailing-accessory\"]) {\n  margin-right: var(--input-code-trailing-accessory-spacing, 12px);\n}\n\ninput::placeholder {\n  color: var(--input-code-placeholder-color, var(--core-fill-30-color));\n  font-size: var(--input-code-placeholder-font-size, 24px);\n}\n","import { Component, Host, h, Element, Prop, State, Method, Watch, EventEmitter, Event } from '@stencil/core';\n\n/**\n * @slot trailing-accessory - An icon set on the right side of the input.\n */\n@Component({\n  tag: 'market-code-input',\n  styleUrl: 'market-code-input.css',\n  shadow: true,\n})\nexport class MarketCodeInput {\n  @Element() el: HTMLMarketCodeInputElement;\n\n  /**\n   * A string specifying the type of input to render (text or numeric)\n   */\n  @Prop({ reflect: true }) readonly type: 'text' | 'number' | 'password' = 'number';\n\n  /**\n   * A string specifying a name for the code input.\n   */\n  @Prop() readonly name: string;\n\n  /**\n   * A number specifying the length of the code\n   */\n  @Prop() readonly length: number = 4;\n\n  /**\n   * A boolean representing whether the code input is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * A string representing a default value (code) that can be passed in to be rendered\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /**\n   * A boolean representing whether the input is readonly or not.\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean = false;\n\n  /**\n   * A boolean representing whether the input is invalid or not.\n   * This represents error states.\n   */\n  @Prop({ reflect: true }) readonly invalid: boolean = false;\n\n  /**\n   * A boolean representing whether the input is disabled or not.\n   * This visually and functionally will disable the input.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  // Internal array representation of the code\n  @State() _code: Array<string>;\n\n  /**\n   * Emitted whenever any of the input values change.\n   */\n  @Event() marketCodeInputValueChange: EventEmitter<{ code: string }>;\n\n  @Watch('value')\n  valueChangeHandler(value: string) {\n    const sanitized = this.sanitizeValue(value);\n    if (this.value !== sanitized) {\n      this.value = sanitized;\n    }\n    this.setInputsFromValue(this.value);\n  }\n\n  /**\n   * Trigger focus styling on `<market-input-text>`\n   * and focus the cursor on the first empty `<input />`.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    this.focused = value;\n    if (value) {\n      this.focusFirstEmptyInput();\n    } else {\n      (this.el.shadowRoot.activeElement as HTMLInputElement)?.blur();\n    }\n    return Promise.resolve();\n  }\n\n  isNumber(value: string): boolean {\n    return /^\\d+$/.test(value);\n  }\n\n  isValidChar(char) {\n    // no whitespace\n    if (/\\s/.test(char)) return false;\n    // number check\n    return ['text', 'password'].includes(this.type) || this.isNumber(char);\n  }\n\n  focusFirstEmptyInput() {\n    const inputs = this.el.shadowRoot.querySelectorAll('input');\n    let input;\n    inputs.forEach((i) => {\n      if (!i.value && !input) input = i;\n    });\n    if (!input) input = inputs[this.length - 1];\n    input.focus();\n  }\n\n  /**\n   * Inits this._code to the passed-in `value` prop or to an\n   * empty array representation of the code input i.e ['', '', '', '']\n   * Called only once on componentWillLoad() as to not cause re-renders\n   */\n  initCode(value) {\n    if (value) {\n      this._code = value.split('');\n\n      // ensure that this._code is always of size this.length\n      if (this._code.length < this.length) {\n        const padding = Array.from<string>({ length: this.length - this._code.length }).fill('');\n        this._code = [...this._code, ...padding];\n      } else if (this._code.length > this.length) {\n        this._code = this._code.slice(0, this.length);\n      }\n    } else {\n      this._code = Array.from<string>({ length: this.length }).fill('');\n    }\n  }\n\n  sanitizeValue(value: string): string {\n    return value\n      .split('')\n      .filter((char) => this.isValidChar(char))\n      .join('')\n      .slice(0, this.length);\n  }\n\n  getValueFromInputs() {\n    let value = '';\n    this.el.shadowRoot.querySelectorAll('input').forEach((input) => {\n      value += input.value;\n    });\n    return value;\n  }\n\n  setInputsFromValue(value: string) {\n    const inputs = this.el.shadowRoot.querySelectorAll('input');\n\n    inputs.forEach((input, i) => {\n      const char = value[i];\n      const prevChar = value[i - 1];\n\n      // set the input value\n      input.value = char || '';\n\n      // set the input tabindex\n      if (i === 0 || prevChar) {\n        input.removeAttribute('tabindex');\n      } else {\n        input.tabIndex = -1;\n      }\n    });\n  }\n\n  spreadChars(e) {\n    const { target, data } = e;\n    const chars = data || target.value;\n    if (!chars) return;\n\n    const sanitized = this.sanitizeValue(chars);\n    if (sanitized) {\n      this.insertChars(target, sanitized.split(''));\n    } else {\n      target.value = '';\n    }\n  }\n\n  insertChars(input, chars: Array<string>) {\n    const { nextElementSibling } = input;\n    const [first, ...rest] = chars;\n\n    input.value = first;\n    nextElementSibling?.focus();\n\n    if (nextElementSibling && rest.length > 0) {\n      this.insertChars(nextElementSibling, rest);\n    }\n  }\n\n  updateValue() {\n    const previousValue = this.value;\n    const newValue = this.sanitizeValue(this.getValueFromInputs());\n    if (previousValue !== newValue) {\n      const { defaultPrevented } = this.marketCodeInputValueChange.emit({ code: newValue });\n      if (defaultPrevented) {\n        this.setInputsFromValue(previousValue);\n      } else {\n        this.value = newValue;\n      }\n    }\n  }\n\n  onInput(e) {\n    // Handle paste or autocomplete of multiple chars\n    this.spreadChars(e);\n    this.updateValue();\n  }\n\n  onFocus(e) {\n    const { target } = e;\n    this.focused = true;\n\n    if (target.value) {\n      target.select();\n    } else {\n      this.focusFirstEmptyInput();\n    }\n  }\n\n  onBlur() {\n    this.focused = false;\n  }\n\n  onKeyDown(e) {\n    const { target, key } = e;\n    const { value, previousElementSibling, nextElementSibling } = target;\n\n    switch (key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        previousElementSibling?.select();\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        nextElementSibling?.select();\n        break;\n      case 'Backspace':\n        if (!value) previousElementSibling?.select();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyUp(e) {\n    const { target } = e;\n    const { value } = target;\n\n    if (value.length > 1) {\n      this.spreadChars(e);\n    } else if (!this.isValidChar(value)) {\n      target.value = '';\n      target.focus();\n    }\n  }\n\n  onHostClick() {\n    // if a child input does not already have focus\n    if (!this.el.shadowRoot.activeElement) {\n      this.setFocus();\n    }\n  }\n\n  componentWillLoad() {\n    this.valueChangeHandler(this.value);\n    this.initCode(this.value);\n  }\n\n  render() {\n    const inputs = [];\n    this._code.forEach((char: string, index: number) => {\n      const tabindex = this._code[index - 1] || index === 0 ? null : -1;\n      inputs.push(\n        <input\n          required\n          type={this.type === 'password' ? 'password' : 'text'}\n          inputmode={this.type === 'number' ? 'numeric' : null}\n          autocomplete={index === 0 ? 'one-time-code' : null}\n          value={char}\n          maxlength={index === this.length - 1 ? '1' : null}\n          readOnly={this.readonly}\n          disabled={this.disabled}\n          placeholder=\"●\"\n          tabindex={tabindex}\n          onFocus={(e) => this.onFocus(e)}\n          onBlur={() => this.onBlur()}\n          onInput={(e) => this.onInput(e)}\n          onKeyDown={(e) => this.onKeyDown(e)}\n          onKeyUp={(e) => this.onKeyUp(e)}\n        />,\n      );\n    });\n\n    return (\n      <Host class=\"market-code-input\" name={this.name} onClick={() => this.onHostClick()}>\n        <span class=\"code-input-container\">{inputs}</span>\n        <slot name=\"trailing-accessory\"></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}