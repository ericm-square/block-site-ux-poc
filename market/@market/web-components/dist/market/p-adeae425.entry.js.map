{"version":3,"names":["marketToggleCss","MarketToggleStyle0","MarketToggle","setSelection","newValue","silent","marketToggleChange","checked","prevValue","innerInput","this","Promise","resolve","defaultPrevented","emit","current","previous","setValue","console","warn","el","setActive","value","active","setHover","hovered","setDisabled","disabled","setFocus","focused","handleClick","event","preventDefault","render","h","Host","key","class","onBlur","onClick","onFocus","ref","type","role","getControlInputAriaLabel","width","height","viewBox","fill","xmlns","x","y","rx","cx","cy","r"],"sources":["src/components/market-toggle/market-toggle.css?tag=market-toggle&encapsulation=shadow","src/components/market-toggle/market-toggle.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  --focus-ring-color: color-mix(in srgb, var(--toggle-focus-ring-color) 100%, transparent);\n\n  position: relative;\n  display: inline-block;\n\n  /* Height is set to ensure focus ring is set to the correct height. */\n  height: var(--toggle-height);\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  border-radius: var(--toggle-border-radius);\n  background: transparent;\n  outline: none;\n  cursor: pointer;\n  appearance: none;\n}\n\ninput:focus-visible {\n  outline: var(--toggle-focus-ring-border-size) solid var(--focus-ring-color);\n  outline-offset: var(--core-focus-ring-buffer-size); /* --toggle-focus-ring-buffer-size is 0px for some reason? */\n}\n\ncircle,\nrect {\n  /* if toggle is slotted into market-row, inherit transition style from row */\n  transition: var(--row-slotted-control-transition, cx 0.3s);\n}\n\n/* state:normal.value:unselected */\ncircle {\n  fill: var(--toggle-normal-state-unselected-value-thumb-color);\n}\n\nrect {\n  fill: var(--toggle-normal-state-unselected-value-track-color);\n  stroke: var(--toggle-normal-state-unselected-value-border-color);\n}\n\n:host([checked]) {\n  /* state:normal.value:selected */\n\n  circle {\n    fill: var(--toggle-normal-state-selected-value-thumb-color);\n\n    /* Number determined from movement of the toggle thumb in Figma SVGs */\n\n    /* todo: add design token for this number */\n    cx: 28px;\n  }\n\n  rect {\n    fill: var(--toggle-normal-state-selected-value-track-color);\n    stroke: var(--toggle-normal-state-selected-value-border-color);\n  }\n}\n\n:host(:hover),\n:host([hovered]) {\n  /* state:hover.value:unselected */\n  circle {\n    fill: var(--toggle-hover-state-unselected-value-thumb-color);\n  }\n\n  rect {\n    fill: var(--toggle-hover-state-unselected-value-track-color);\n    stroke: var(--toggle-hover-state-unselected-value-border-color);\n  }\n}\n\n:host([checked]:hover),\n:host([checked][hovered]) {\n  /* state:hover.value:selected */\n  circle {\n    fill: var(--toggle-hover-state-selected-value-thumb-color);\n  }\n\n  rect {\n    fill: var(--toggle-hover-state-selected-value-track-color);\n    stroke: var(--toggle-hover-state-selected-value-border-color);\n  }\n}\n\n:host([focused]) {\n  /* state:focus.value:unselected */\n  circle {\n    fill: var(--toggle-focus-state-unselected-value-thumb-color);\n  }\n\n  rect {\n    fill: var(--toggle-focus-state-unselected-value-track-color);\n    stroke: var(--toggle-focus-state-unselected-value-border-color);\n  }\n}\n\n:host([checked][focused]) {\n  /* state:focus.value:selected */\n  circle {\n    fill: var(--toggle-focus-state-selected-value-thumb-color);\n  }\n\n  rect {\n    fill: var(--toggle-focus-state-selected-value-track-color);\n    stroke: var(--toggle-focus-state-selected-value-border-color);\n  }\n}\n\n:host(:active),\n:host([active]) {\n  /* state:pressed.value:unselected */\n  circle {\n    fill: var(--toggle-pressed-state-unselected-value-thumb-color);\n  }\n\n  rect {\n    fill: var(--toggle-pressed-state-unselected-value-track-color);\n    stroke: var(--toggle-pressed-state-unselected-value-border-color);\n  }\n}\n\n:host([checked]:active),\n:host([checked][active]) {\n  /* state:pressed.value:selected */\n  circle {\n    fill: var(--toggle-pressed-state-selected-value-thumb-color);\n  }\n\n  rect {\n    fill: var(--toggle-pressed-state-selected-value-track-color);\n    stroke: var(--toggle-pressed-state-selected-value-border-color);\n  }\n}\n\n:host([disabled]) {\n  /* state:disabled.value:unselected */\n  input {\n    cursor: not-allowed;\n  }\n\n  circle {\n    fill: var(--toggle-disabled-state-unselected-value-thumb-color);\n  }\n\n  rect {\n    fill: var(--toggle-disabled-state-unselected-value-track-color);\n    stroke: var(--toggle-disabled-state-unselected-value-border-color);\n  }\n}\n\n:host([disabled][checked]) {\n  /* state:disabled.value:selected */\n  circle {\n    fill: var(--toggle-disabled-state-selected-value-thumb-color);\n  }\n\n  rect {\n    fill: var(--toggle-disabled-state-selected-value-track-color);\n    stroke: var(--toggle-disabled-state-selected-value-border-color);\n  }\n}\n","import { Component, Host, h, Prop, Element, Event, EventEmitter, Method } from '@stencil/core';\nimport { getControlInputAriaLabel } from '../../utils/aria';\n\n@Component({\n  tag: 'market-toggle',\n  styleUrl: 'market-toggle.css',\n  shadow: true,\n})\nexport class MarketToggle {\n  @Element() el: HTMLMarketToggleElement;\n\n  /**\n   * Whether the toggle is checked or not.\n   * If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.\n   */\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\n\n  /**\n   * Whether the toggle is disabled.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * Whether the toggle is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * Whether the toggle is hovered or not.\n   */\n  @Prop({ mutable: true, reflect: true }) hovered: boolean = false;\n\n  /**\n   * Whether the toggle is active or not.\n   */\n  @Prop({ mutable: true, reflect: true }) active: boolean = false;\n\n  /**\n   * Fired whenever \"checked\" prop value changes.\n   */\n  @Event() marketToggleChange: EventEmitter<{ current: boolean; previous: boolean }>;\n\n  innerInput: HTMLInputElement;\n\n  /**\n   * Toggles `checked` prop, and emits a change event accordingly.\n   * Used by `market-row` to sync its selected state w/ slotted toggles.\n   */\n  @Method()\n  setSelection(newValue: boolean, { silent = false } = {}) {\n    const { marketToggleChange, checked: prevValue, innerInput } = this;\n\n    if (typeof newValue !== 'boolean') return Promise.resolve();\n    if (prevValue === newValue) return Promise.resolve();\n\n    if (!silent) {\n      const { defaultPrevented } = marketToggleChange.emit({\n        current: newValue,\n        previous: prevValue,\n      });\n      if (defaultPrevented) {\n        return Promise.resolve();\n      }\n    }\n\n    this.checked = newValue;\n    // When using the non-lazy output target, this method sometimes gets called\n    // from market-row's watcher after innerInput is removed, hence this check.\n    if (innerInput) {\n      innerInput.checked = newValue;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).\n   */\n  @Method()\n  setValue(newValue: boolean) {\n    /* eslint-disable-next-line no-console */\n    console.warn(\"market-toggle's setValue() method has been deprecated. Use setSelection() instead.\", this.el);\n    this.setSelection(newValue);\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `active` state. Allows external elements to programmatically\n   * trigger active styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setActive(value: boolean) {\n    this.active = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `hovered` state. Allows external elements to programmatically\n   * trigger hover styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setHover(value: boolean) {\n    this.hovered = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `disabled` state. Allows external elements to programmatically\n   * trigger disabled styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setDisabled(value: boolean) {\n    this.disabled = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `focused` state, except when disabled.\n   * Allows external consumers to programmatically\n   * trigger focused styling.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    // We don't want to set focus to true if the toggle is disabled,\n    // but we do want to allow setting focus to false when disabled,\n    // since disabling the toggle causes it to lose browser focus,\n    // triggering the onBlur event and calling this method.\n    if (this.disabled && value) {\n      return Promise.resolve();\n    }\n    this.focused = value;\n    return Promise.resolve();\n  }\n\n  handleClick(event: MouseEvent) {\n    // Always prevent default so we can manually control the selection\n    event.preventDefault();\n\n    if (this.disabled) {\n      return;\n    }\n\n    this.setFocus();\n    this.setSelection(!this.checked);\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-toggle\"\n        onBlur={() => {\n          this.setFocus(false);\n        }}\n        onClick={this.handleClick}\n        onFocus={() => {\n          this.setFocus();\n        }}\n      >\n        <input\n          ref={(el) => (this.innerInput = el)}\n          type=\"checkbox\"\n          role=\"switch\"\n          aria-label={getControlInputAriaLabel(this.el)}\n          checked={this.checked}\n          disabled={this.disabled}\n        />\n        {/* SVG for toggle button */}\n        {\n          <svg\n            width=\"40\"\n            height=\"24\"\n            viewBox=\"0 0 40 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            aria-hidden=\"true\"\n          >\n            <rect x=\"1\" y=\"1\" width=\"38\" height=\"22\" rx=\"11\" stroke-width=\"2\" />\n            <circle cx=\"12\" cy=\"12\" r=\"7\" />\n          </svg>\n        }\n      </Host>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAkB,i0GACxB,MAAAC,EAAeD,E,MCOFE,EAAY,M,6FAOoC,M,cAKC,M,aAKD,M,aAKA,M,YAKD,K,CAc1D,YAAAC,CAAaC,GAAmBC,OAAEA,EAAS,OAAU,IACnD,MAAMC,mBAAEA,EAAoBC,QAASC,EAASC,WAAEA,GAAeC,KAE/D,UAAWN,IAAa,UAAW,OAAOO,QAAQC,UAClD,GAAIJ,IAAcJ,EAAU,OAAOO,QAAQC,UAE3C,IAAKP,EAAQ,CACX,MAAMQ,iBAAEA,GAAqBP,EAAmBQ,KAAK,CACnDC,QAASX,EACTY,SAAUR,IAEZ,GAAIK,EAAkB,CACpB,OAAOF,QAAQC,S,EAInBF,KAAKH,QAAUH,EAGf,GAAIK,EAAY,CACdA,EAAWF,QAAUH,C,CAEvB,OAAOO,QAAQC,S,CAOjB,QAAAK,CAASb,GAEPc,QAAQC,KAAK,qFAAsFT,KAAKU,IACxGV,KAAKP,aAAaC,GAClB,OAAOO,QAAQC,S,CAQjB,SAAAS,CAAUC,GACRZ,KAAKa,OAASD,EACd,OAAOX,QAAQC,S,CAQjB,QAAAY,CAASF,GACPZ,KAAKe,QAAUH,EACf,OAAOX,QAAQC,S,CAQjB,WAAAc,CAAYJ,GACVZ,KAAKiB,SAAWL,EAChB,OAAOX,QAAQC,S,CASjB,QAAAgB,CAASN,EAAiB,MAKxB,GAAIZ,KAAKiB,UAAYL,EAAO,CAC1B,OAAOX,QAAQC,S,CAEjBF,KAAKmB,QAAUP,EACf,OAAOX,QAAQC,S,CAGjB,WAAAkB,CAAYC,GAEVA,EAAMC,iBAEN,GAAItB,KAAKiB,SAAU,CACjB,M,CAGFjB,KAAKkB,WACLlB,KAAKP,cAAcO,KAAKH,Q,CAG1B,MAAA0B,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CACHC,MAAM,gBACNC,OAAQ,KACN5B,KAAKkB,SAAS,MAAM,EAEtBW,QAAS7B,KAAKoB,YACdU,QAAS,KACP9B,KAAKkB,UAAU,GAGjBM,EAAA,SAAAE,IAAA,2CACEK,IAAMrB,GAAQV,KAAKD,WAAaW,EAChCsB,KAAK,WACLC,KAAK,SAAQ,aACDC,EAAyBlC,KAAKU,IAC1Cb,QAASG,KAAKH,QACdoB,SAAUjB,KAAKiB,WAIfO,EAAA,OAAAE,IAAA,2CACES,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,MAAM,6BAA4B,cACtB,QAEZf,EAAA,QAAAE,IAAA,2CAAMc,EAAE,IAAIC,EAAE,IAAIN,MAAM,KAAKC,OAAO,KAAKM,GAAG,KAAI,eAAc,MAC9DlB,EAAA,UAAAE,IAAA,2CAAQiB,GAAG,KAAKC,GAAG,KAAKC,EAAE,O"}