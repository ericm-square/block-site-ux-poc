{"version":3,"names":["marketContextCss","MarketContextStyle0","MarketContext","CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION","CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION","currentDialogWatcher","newDialog","this","stack","push","stackWatcher","newValue","forEach","dialog","dialogMeta","type","count","totalCount","length","hidden","setTimeout","marketContextEmptied","emit","animationExitDuration","setContextVeil","doesStackContainDialogThatRequiresVeil","veiledDialogTagnames","Object","entries","DIALOGS_META","filter","config","veil","map","getNamespacedTagFor","includes","tagName","toLowerCase","el","hasAttribute","noVeil","some","stackHasDialog","dialogEl","modalLoadedEventHandler","e","detail","parentElement","generatedDialogID","generateDialogID","dialogID","id","currentDialog","index","indexOfType","marketContextContentsChanged","action","dialogDismissedEventHandler","event","defaultPrevented","target","close","getDialogByID","find","open","dialogTemplate","appendChild","Promise","resolve","d","indexOf","console","warn","persistent","remove","splice","closeCurrent","connectedCallback","ALL_DIALOG_TYPES","dialogType","render","h","Host","key","class"],"sources":["src/components/market-context/market-context.css?tag=market-context&encapsulation=shadow","src/components/market-context/market-context.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  position: absolute;\n  display: grid;\n  justify-items: center;\n  width: 100vw;\n  height: 100%;\n\n  /* Enter Animation */\n  animation:\n    var(--core-animation-enter-transition-moderate-speed-duration)\n    market-fade-in\n    forwards\n    var(--core-animation-enter-transition-easing);\n\n  &([hidden]) {\n    /* Exit Animation */\n    opacity: 0%;\n    animation-name: market-fade-out;\n    animation-duration: var(--core-animation-exit-transition-moderate-speed-duration);\n    animation-timing-function: var(--core-animation-exit-transition-easing);\n  }\n\n  /* clicks should never pass through dialog content */\n  & > * {\n    pointer-events: auto;\n  }\n}\n\n/* veil */\n:host(:not(.no-veil)) {\n  background-color: var(--core-surface-overlay-color);\n  opacity: 100%;\n\n  /* clicks should not pass through */\n  pointer-events: auto;\n}\n\n/* no veil */\n:host(.no-veil) {\n  /* clicks pass through to underlying elements */\n  pointer-events: none;\n}\n\n@media screen and (min-width: 800px) {\n  ::slotted(.market-modal-partial) {\n    align-self: center;\n    margin: var(--modal-partial-vertical-screen-buffer-size) var(--modal-partial-horizontal-screen-buffer-size);\n  }\n}\n\n::slotted(.market-dialog) {\n  align-self: center;\n  width: calc(100% - (2 * var(--modal-dialog-horizontal-screen-buffer-size, 16px)));\n}\n","import {\n  CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION,\n  CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION,\n} from '@market/market-theme/js/cjs/index.js';\nimport { Component, Prop, Host, Element, Method, State, Listen, Event, Watch, EventEmitter, h } from '@stencil/core';\n\nimport { Dialog, DialogLoadedEvent, DialogElement, ALL_DIALOG_TYPES, DIALOGS_META } from '../../utils/dialog';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n@Component({\n  tag: 'market-context',\n  styleUrl: 'market-context.css',\n  shadow: true,\n})\nexport class MarketContext {\n  @Element() el: HTMLMarketContextElement;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Exposes the context's currentDialog for use by market-context-manager\n   */\n  @Prop({ mutable: true }) currentDialog: Dialog;\n\n  /**\n   * **INTERNAL [do not use directly]**\n   * Disabling the context's default veil (including scroll blocking behavior)\n   * when visible. By default, this is set by market-context according to what\n   * dialog type is being opened. In the future, we want to expose this as an\n   * optional config option for market-context-manager's open() method.\n   */\n  @Prop({ mutable: true }) noVeil: Boolean = false;\n\n  /**\n   * Whether the context is hidden or visible.\n   */\n  @Prop({ mutable: true, reflect: true }) hidden: boolean = false;\n\n  /* TODO: make these match whatever the first/last dialog's animation is */\n  /**\n   * The duration for the modal enter animation, set from design tokens\n   */\n  @Prop()\n  readonly animationEnterDuration: number = CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION;\n\n  /**\n   * The duration for the modal exit animation, set from design tokens\n   */\n  @Prop()\n  readonly animationExitDuration: number = CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION;\n\n  // TODO: refactor context to only take one dialog (breaking change)\n  @State() stack: Array<Dialog> = [];\n  @State() totalCount: number = 0;\n  @State() dialogMeta: object = {};\n\n  /**\n   * Emitted whenever the contents of the context have changed:\n   * - Dialog added to the stack\n   * - Dialog removed from the stack\n   */\n  @Event() marketContextContentsChanged: EventEmitter<{\n    action: 'marketNewDialogOpened' | 'marketDialogClosed';\n    currentDialog: Dialog;\n    stack: Array<Dialog>;\n  }>;\n\n  /**\n   * Emitted whenever the context's stack is empty (no more open dialogs)\n   */\n  @Event() marketContextEmptied: EventEmitter;\n\n  @Watch('currentDialog')\n  currentDialogWatcher(newDialog: Dialog) {\n    this.stack.push(newDialog);\n    this.stack = [...this.stack]; // Spread syntax ensures triggering the watcher\n  }\n\n  @Watch('stack')\n  stackWatcher(newValue: Array<Dialog>) {\n    newValue.forEach((dialog) => {\n      // increase the count of the type of dialog in the meta\n      this.dialogMeta[dialog.type].count += 1;\n      // Increase the total count of dialogs\n      this.totalCount += 1;\n    });\n\n    // If there are no more dialogs opened, then emit an event indicating so\n    if (newValue.length === 0) {\n      this.hidden = true;\n\n      setTimeout(() => {\n        this.marketContextEmptied.emit();\n      }, this.animationExitDuration);\n    }\n\n    this.setContextVeil();\n  }\n\n  doesStackContainDialogThatRequiresVeil(dialog: DialogElement) {\n    const veiledDialogTagnames = Object.entries(DIALOGS_META)\n      .filter(([, config]) => config.veil)\n      .map(([type]) => getNamespacedTagFor(`market-${type}` as keyof HTMLElementTagNameMap));\n    return veiledDialogTagnames.includes(dialog.tagName.toLowerCase() as keyof HTMLElementTagNameMap);\n  }\n\n  setContextVeil(): void {\n    // consumer use of noVeil prop overrides default behavior\n    // veil shouldn't reset when stack is emptied\n    if (this.el.hasAttribute('no-veil') || this.stack.length === 0) {\n      return;\n    }\n\n    // context will turn off veil if no context in its stack requires one\n    this.noVeil = !this.stack.some((dialog) => this.doesStackContainDialogThatRequiresVeil(dialog.el));\n  }\n\n  stackHasDialog(dialogEl: DialogElement): boolean {\n    return this.stack.some((dialog) => dialog.el === dialogEl);\n  }\n\n  @Listen('marketDialogLoaded')\n  modalLoadedEventHandler(e: CustomEvent<DialogLoadedEvent>) {\n    const dialog = e.detail.dialog;\n    const type = e.detail.type;\n\n    if (dialog.parentElement !== this.el) {\n      // Ignore marketDialogLoaded events from dialogs which are not children of this\n      // context.\n      return;\n    } else if (this.stackHasDialog(dialog)) {\n      // Ignore marketDialogLoaded events from dialogs already contained in this\n      // context's stack.\n      return;\n    }\n\n    // Generate a new dialogID (ex. \"modal-partial-2\")\n    const generatedDialogID = this.generateDialogID(type);\n\n    // Set the dialogID for the dialog element (note: this maps to data-dialog-id\n    // and not the native id attribute)\n    dialog.dialogID = generatedDialogID;\n\n    // Set the id prop if one does not exist\n    // (we don't use this prop anymore, but since we were setting it to\n    // generatedDialogID before, removing it would be a breaking change)\n    dialog.id = dialog.id || generatedDialogID;\n\n    // Build a new Dialog object and set the currentDialog\n    this.currentDialog = {\n      el: dialog,\n      type,\n      dialogID: dialog.dialogID,\n      id: dialog.id,\n      index: this.stack.length,\n      indexOfType: this.dialogMeta[type].count + 1,\n    };\n\n    // Emit a nice marketContextContentsChanged event\n    this.marketContextContentsChanged.emit({\n      action: 'marketNewDialogOpened',\n      currentDialog: this.currentDialog,\n      stack: this.stack,\n    });\n  }\n\n  // This event is emitted from market dialog components (Modal, Sheet, Blade, etc.)\n  @Listen('marketDialogDismissed')\n  dialogDismissedEventHandler(event) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // only close direct children of this context\n    if (event.target.parentElement === this.el) {\n      this.close(event.detail.dialog.dialogID);\n    }\n  }\n\n  generateDialogID(type: string) {\n    // ex. \"sheet-2\"\n    return `${type}-${this.dialogMeta[type].count + 1}`;\n  }\n\n  getDialogByID(dialogID: string) {\n    return this.stack.find((dialog) => dialog.dialogID === dialogID);\n  }\n\n  /**\n   * Adds the passed dialogTemplate to the stack and inserts it into the DOM\n   */\n  @Method()\n  open(dialogTemplate) {\n    if (this.stack.length === 0) {\n      this.noVeil = !this.doesStackContainDialogThatRequiresVeil(dialogTemplate);\n    }\n\n    this.el.appendChild(dialogTemplate);\n    return Promise.resolve();\n  }\n\n  /**\n   * **Recommended for internal use only**\n   * Removes the topmost dialog from the stack or the dialog matching the passed `dialogID`\n   * Note that using this will not trigger the dialog to emit a marketDialogDismissed event.\n   *\n   * The recommended path for closing a dialog is to call its dismiss() method.\n   */\n  // TODO (breaking): consider renaming this method to `removeDialogElement`\n  @Method()\n  close(dialogID?: string) {\n    let dialog;\n    const d = this.stack.indexOf(dialog);\n\n    // If we want to close a specific dialog, then find that dialog in the stack\n    if (dialogID) {\n      dialog = this.stack.find((dialog) => dialog.dialogID === dialogID);\n\n      // If there is no dialog with the passed id, log a helpful warning\n      /* eslint-disable-next-line no-console */\n      !dialog && console.warn(`Tried to close dialog with data-dialog-id \"${dialogID}\" but none were found`);\n      // Otherwise we will close the current/most recently opened dialog\n    } else {\n      dialog = this.currentDialog;\n    }\n\n    if (dialog) {\n      // currently, \"persistent\" is only implemented for market-dialog, bc it's\n      // the only dialog type that doesn't programmatically insert a close button\n      // when used w/ market-header\n      if (dialog.type === 'dialog' && dialog.el.persistent) {\n        return Promise.resolve();\n      }\n\n      // Remove the dialog node from the DOM\n      setTimeout(() => {\n        dialog.el.remove();\n\n        // Remove the dialog from the stack. Reassign to trigger the watcher\n        this.stack.splice(d, 1);\n        this.stack = [...this.stack];\n\n        // Emit a nice event\n        this.marketContextContentsChanged.emit({\n          action: 'marketDialogClosed',\n          currentDialog: dialog,\n          stack: this.stack,\n        });\n      }, dialog.el.animationExitDuration);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * **Recommended for internal use only**\n   * Removes the topmost dialog from the stack (just an alias for default .close() behavior)\n   * Note that using this will not trigger the dialog to emit a marketDialogDismissed event.\n   *\n   * The recommended path for closing a dialog is to call its dismiss() method.\n   */\n  // TODO (breaking): consider removing this method in favor of encouraging consumers to close dialogs via dialog.dismiss();\n  @Method()\n  closeCurrent() {\n    this.close();\n    return Promise.resolve();\n  }\n\n  connectedCallback() {\n    ALL_DIALOG_TYPES.forEach((dialogType) => {\n      this.dialogMeta[dialogType] = { count: 0 };\n    });\n  }\n\n  render() {\n    return (\n      <Host class={`market-context ${this.noVeil ? 'no-veil' : ''}`}>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}