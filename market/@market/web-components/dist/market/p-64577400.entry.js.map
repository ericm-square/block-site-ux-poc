{"version":3,"names":["marketTabsCss","MarketTabsStyle0","MarketTabs","marketTabSelectedChangedEventHandler","e","stopPropagation","panelId","tabId","value","detail","this","selectedTab","showPanelWithId","tabWatcher","newTabId","setTab","tabListEl","_a","panelEls","forEach","panelEl","hidden","id","handleSlotChange","el","querySelectorAll","getNamespacedTagFor","map","querySelector","componentWillLoad","defaultTab","render","h","Host","key","class","onSlotchange"],"sources":["src/components/market-tabs/market-tabs.css?tag=market-tabs&encapsulation=shadow","src/components/market-tabs/market-tabs.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Element, h, Host, Prop, Listen, Watch } from '@stencil/core';\n\nimport { getNamespacedTagFor } from '../../utils/namespace';\nimport { TMarketTabSelectedChangedEventDetail } from './events';\n\n@Component({\n  tag: 'market-tabs',\n  styleUrl: 'market-tabs.css',\n  shadow: true,\n})\nexport class MarketTabs {\n  @Element() el: HTMLMarketTabsElement;\n  tabListEl?: HTMLMarketTabListElement;\n  panelEls?: HTMLMarketTabPanelElement[];\n\n  /**\n   * String for the selected tab (i.e. `market-tab`'s `id` attribute)\n   *\n   * Omitting or setting to empty string will default to the first non-disabled tab\n   *\n   * @default undefined\n   */\n  @Prop({ mutable: true, reflect: true }) selectedTab?: string;\n\n  /**\n   * String for the default selected tab (i.e. `market-tab`'s `id` attribute)\n   *\n   * Only used when the component initially loads\n   *\n   * @default undefined\n   */\n  @Prop() readonly defaultTab?: string;\n\n  @Listen('marketTabSelectedChanged')\n  marketTabSelectedChangedEventHandler(e: CustomEvent<TMarketTabSelectedChangedEventDetail>) {\n    e.stopPropagation();\n    const { panelId, tabId, value } = e.detail;\n    if (!value) {\n      return;\n    } else if (this.selectedTab !== tabId) {\n      this.selectedTab = tabId;\n    }\n    this.showPanelWithId(panelId);\n  }\n\n  @Watch('selectedTab')\n  tabWatcher(newTabId: string) {\n    this.setTab(newTabId);\n  }\n\n  setTab(tabId: string) {\n    if (this.tabListEl) {\n      this.tabListEl.selectedTab = tabId;\n    }\n  }\n\n  showPanelWithId(panelId: string) {\n    this.panelEls?.forEach((panelEl) => {\n      panelEl.hidden = panelEl.id !== panelId;\n    });\n  }\n\n  handleSlotChange() {\n    /**\n     * `market-tab-panel`s aren't hidden by default,\n     * but once they become a descendant of `<market-tabs>`, they will be hidden by default.\n     * Later on, one will be shown depending on which tab gets selected by default.\n     */\n    this.panelEls = [...this.el.querySelectorAll(getNamespacedTagFor('market-tab-panel'))].map((panelEl) => {\n      panelEl.hidden = true;\n      return panelEl;\n    });\n    this.tabListEl = this.el.querySelector(getNamespacedTagFor('market-tab-list'));\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n    this.setTab(this.selectedTab ?? this.defaultTab);\n  }\n\n  render() {\n    return (\n      <Host class=\"market-tabs\">\n        <slot onSlotchange={() => this.handleSlotChange()}></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"6FAAA,MAAMA,EAAgB,uBACtB,MAAAC,EAAeD,E,MCSFE,EAAU,M,8EAwBrB,oCAAAC,CAAqCC,GACnCA,EAAEC,kBACF,MAAMC,QAAEA,EAAOC,MAAEA,EAAKC,MAAEA,GAAUJ,EAAEK,OACpC,IAAKD,EAAO,CACV,M,MACK,GAAIE,KAAKC,cAAgBJ,EAAO,CACrCG,KAAKC,YAAcJ,C,CAErBG,KAAKE,gBAAgBN,E,CAIvB,UAAAO,CAAWC,GACTJ,KAAKK,OAAOD,E,CAGd,MAAAC,CAAOR,GACL,GAAIG,KAAKM,UAAW,CAClBN,KAAKM,UAAUL,YAAcJ,C,EAIjC,eAAAK,CAAgBN,G,OACdW,EAAAP,KAAKQ,YAAQ,MAAAD,SAAA,SAAAA,EAAEE,SAASC,IACtBA,EAAQC,OAASD,EAAQE,KAAOhB,CAAO,G,CAI3C,gBAAAiB,GAMEb,KAAKQ,SAAW,IAAIR,KAAKc,GAAGC,iBAAiBC,EAAoB,sBAAsBC,KAAKP,IAC1FA,EAAQC,OAAS,KACjB,OAAOD,CAAO,IAEhBV,KAAKM,UAAYN,KAAKc,GAAGI,cAAcF,EAAoB,mB,CAG7D,iBAAAG,G,MACEnB,KAAKa,mBACLb,KAAKK,QAAOE,EAAAP,KAAKC,eAAW,MAAAM,SAAA,EAAAA,EAAIP,KAAKoB,W,CAGvC,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAM,eACVH,EAAA,QAAAE,IAAA,2CAAME,aAAc,IAAM1B,KAAKa,qB"}