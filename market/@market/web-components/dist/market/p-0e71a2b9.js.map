{"version":3,"names":["min","max","floor","round","Math","hsvToRgb","hArg","sArg","vArg","h","s","v","i","f","p","q","t","mod","r","g","b","hsvToHex","map","toString","padStart","rgbToHsv","rArg","gArg","bArg","minVal","maxVal","delta","dr","dg","db","hslToHsv","lArg","l","ns","Number","isNaN","hexToHsv","hex","result","match","numResult","parseInt","numarize","array","n","undefined","parseToHSVA","str","validColorValueRegex","rgba","hsla","hsva","hexa","colorType","regex","Object","entries","exec","numarizedResult","a","values","length","split","join","raw","slice"],"sources":["src/utils/color.ts"],"sourcesContent":["// Formulas pulled from\n// https://github.com/simonwep/pickr/blob/master/src/js/utils/color.js#L28\n\n// Shorthands\nconst { min, max, floor, round } = Math;\n\nexport function hsvToRgb(hArg: number, sArg: number, vArg: number) {\n  let h = hArg;\n  let s = sArg;\n  let v = vArg;\n\n  h = (h / 360) * 6;\n  s /= 100;\n  v /= 100;\n\n  const i = floor(h);\n\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n\n  const mod = i % 6;\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n\n  return [r * 255, g * 255, b * 255];\n}\n\n/**\n * Convert HSV spectrum to Hex.\n * @param h Hue\n * @param s Saturation\n * @param v Value\n * @returns {string[]} Hex values\n */\nexport function hsvToHex(h: number, s: number, v: number) {\n  return hsvToRgb(h, s, v).map((v) => round(v).toString(16).padStart(2, '0'));\n}\n\n/**\n * Convert RGB to HSV.\n * @param r Red\n * @param g Green\n * @param b Blue\n * @return {number[]} HSV values.\n */\nfunction rgbToHsv(rArg: number, gArg: number, bArg: number) {\n  let r = rArg;\n  let g = gArg;\n  let b = bArg;\n\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const minVal = min(r, g, b);\n  const maxVal = max(r, g, b);\n  const delta = maxVal - minVal;\n\n  let h: number, s: number;\n  const v = maxVal;\n  if (delta === 0) {\n    h = s = 0;\n  } else {\n    s = delta / maxVal;\n    const dr = ((maxVal - r) / 6 + delta / 2) / delta;\n    const dg = ((maxVal - g) / 6 + delta / 2) / delta;\n    const db = ((maxVal - b) / 6 + delta / 2) / delta;\n\n    if (r === maxVal) {\n      h = db - dg;\n    } else if (g === maxVal) {\n      h = 1 / 3 + dr - db;\n    } else if (b === maxVal) {\n      h = 2 / 3 + dg - dr;\n    }\n\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n  }\n\n  return [h * 360, s * 100, v * 100];\n}\n\n/**\n * Convert HSL to HSV.\n * @param h Hue\n * @param s Saturation\n * @param l Lightness\n * @return {number[]} HSV values.\n */\nfunction hslToHsv(h: number, sArg: number, lArg: number) {\n  let s = sArg;\n  let l = lArg;\n\n  s /= 100;\n  l /= 100;\n  s *= l < 0.5 ? l : 1 - l;\n\n  const ns = ((2 * s) / (l + s)) * 100;\n  const v = (l + s) * 100;\n  return [h, Number.isNaN(ns) ? 0 : ns, v];\n}\n\n/**\n * Convert HEX to HSV.\n * @param hex Hexadecimal string of rgb colors, can have length 3 or 6.\n * @return {number[]} HSV values.\n */\nfunction hexToHsv(hex: string) {\n  const result = hex.match(/.{2}/g) as string[];\n  const numResult = result.map((v: string) => Number.parseInt(v, 16));\n\n  return rgbToHsv(numResult[0], numResult[1], numResult[2]);\n}\n\n/**\n * Takes an Array of any type, convert strings which represents\n * a number to a number and anything else to undefined.\n * @param array\n * @return {*}\n */\nexport function numarize(array: unknown[]): (number | undefined)[] {\n  return array.map((v) => {\n    const n = Number(v);\n    return Number.isNaN(v) ? undefined : n;\n  });\n}\n\n/**\n * Try's to parse a string which represents a color to a HSV array.\n * Current supported types are rgba, hsla and hexadecimal.\n * @param str\n * @return {*}\n */\n/* eslint-disable complexity */\nexport function parseToHSVA(str: string) {\n  // Check if string is a color-name\n  // str = str.match(/^[a-zA-Z]+$/) ? standardizeColor(str) : str;\n\n  // Regular expressions to match different types of color represention\n  const validColorValueRegex = {\n    rgba: /^rgba?\\D+([\\d.]+)(%?)\\D+([\\d.]+)(%?)\\D+([\\d.]+)(%?)\\D*?(([\\d.]+)(%?)|$)/i,\n    hsla: /^hsla?\\D+([\\d.]+)\\D+([\\d.]+)\\D+([\\d.]+)\\D*?(([\\d.]+)(%?)|$)/i,\n    hsva: /^hsva?\\D+([\\d.]+)\\D+([\\d.]+)\\D+([\\d.]+)\\D*?(([\\d.]+)(%?)|$)/i,\n    hexa: /^#?(([\\da-f]{3,4})|([\\da-f]{6})|([\\da-f]{8}))$/i,\n  };\n\n  for (const [colorType, regex] of Object.entries(validColorValueRegex)) {\n    const match = regex.exec(str);\n    if (!match) {\n      continue;\n    }\n\n    // Try to convert\n    switch (colorType) {\n      case 'rgba': {\n        const numarizedResult = numarize(match);\n        let r = numarizedResult[1];\n        let g = numarizedResult[3];\n        let b = numarizedResult[5];\n        let a = numarizedResult[8];\n\n        r = match[2] === '%' ? (r / 100) * 255 : r;\n        g = match[4] === '%' ? (g / 100) * 255 : g;\n        b = match[6] === '%' ? (b / 100) * 255 : b;\n        a = match[9] === '%' ? a / 100 : a;\n\n        if (r > 255 || g > 255 || b > 255 || a < 0 || a > 1) {\n          break;\n        }\n\n        return { values: [...rgbToHsv(r, g, b), a], a, colorType };\n      }\n      case 'hexa': {\n        let [, hex] = match;\n\n        if (hex.length === 4 || hex.length === 3) {\n          hex = hex\n            .split('')\n            .map((v: any) => v + v)\n            .join('');\n        }\n\n        const raw = hex.slice(0, 6);\n        let a: string | number | undefined = hex.slice(6);\n\n        // Convert 0 - 255 to 0 - 1 for opacity\n        a = a ? Number.parseInt(a, 16) / 255 : undefined;\n\n        return { values: [...hexToHsv(raw), a], a, colorType };\n      }\n      case 'hsla': {\n        const numarizedResult = numarize(match);\n        const h = numarizedResult[1];\n        const s = numarizedResult[2];\n        const l = numarizedResult[3];\n        let a = numarizedResult[5];\n\n        a = match[6] === '%' ? a / 100 : a;\n\n        if (h > 360 || s > 100 || l > 100 || a < 0 || a > 1) {\n          break;\n        }\n\n        return { values: [...hslToHsv(h, s, l), a], a, colorType };\n      }\n      case 'hsva': {\n        const numarizedResult = numarize(match);\n        const h = numarizedResult[1];\n        const s = numarizedResult[2];\n        const v = numarizedResult[3];\n        let a = numarizedResult[5];\n\n        a = match[6] === '%' ? a / 100 : a;\n\n        if (h > 360 || s > 100 || v > 100 || a < 0 || a > 1) {\n          break;\n        }\n\n        return { values: [h, s, v, a], a, colorType };\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  return { values: null, colorType: null };\n}\n\n/* eslint-enable complexity */\n"],"mappings":"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"}