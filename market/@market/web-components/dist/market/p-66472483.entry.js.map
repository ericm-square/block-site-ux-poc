{"version":3,"names":["getDefaultIconFidelity","icon","defaultFidelity","Object","keys","filter","key","includes","find","fidelity","default","size","getFidelityToken","isValidTokenFidelity","Boolean","getMarketIconSVGSymbol","asset","document","querySelector","isValidSpriteFidelity","marketIconCss","MarketIconStyle0","marketIconSVGSpriteID","MarketIcon","this","tintable","cloneSymbol","symbol","assetName","width","height","el","querySelectorAll","forEach","svg","remove","createElementNS","setAttributeNS","dataset","name","setAttribute","getAttribute","innerHTML","appendChild","getDimensions","fidelityToken","currentFidelity","dimensions","split","map","d","Number","parseInt","_b","_a","_d","_c","componentWillLoad","documentSVGSprite","template","createElement","marketSVGSprite","sprite","style","display","body","append","iconToken","tokens","core","render","h","Host","class"],"sources":["src/utils/icons.ts","src/components/market-icon/market-icon.css?tag=market-icon&encapsulation=shadow","src/components/market-icon/market-icon.tsx"],"sourcesContent":["export function getDefaultIconFidelity(icon): number {\n  const defaultFidelity = Object.keys(icon)\n    .filter((key) => key.includes('fidelity'))\n    .find((fidelity) => {\n      return icon[fidelity].default ? icon[fidelity].size : null;\n    });\n\n  return icon[defaultFidelity].size;\n}\n\nexport function getFidelityToken(fidelity: number, icon) {\n  return icon[`fidelity:${fidelity}`];\n}\n\nexport function isValidTokenFidelity(fidelity: number, icon): boolean {\n  return Boolean(getFidelityToken(fidelity, icon));\n}\n\nexport function getMarketIconSVGSymbol(asset: string, fidelity?: number): HTMLElement {\n  // Return the SVG asset matching the asset name and the fidelity provided. Of no fidelity provided, return the first match.\n  return fidelity\n    ? document.querySelector(`[data-name=\"${asset}\"][data-fidelity=\"${fidelity}\"]`)\n    : document.querySelector(`[data-name=\"${asset}\"]`);\n}\n\nexport function isValidSpriteFidelity(asset: string, fidelity: number): boolean {\n  return Boolean(getMarketIconSVGSymbol(asset, fidelity));\n}\n","@property --icon-width {\n  syntax: \"<length>\";\n  inherits: false;\n  initial-value: 24px;\n}\n\n@property --icon-height {\n  syntax: \"<length>\";\n  inherits: false;\n  initial-value: 24px;\n}\n\n:host {\n  display: inline-block;\n  width: var(--icon-width);\n  height: var(--icon-height);\n  color: inherit;\n}\n\n:host([tintable]) {\n  ::slotted(svg) {\n    fill: currentcolor;\n\n    path,\n    circle,\n    rect,\n    polygon,\n    ellipse,\n    line,\n    polyline {\n      fill: inherit;\n    }\n  }\n}\n\n::slotted(svg) {\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n","import { Component, Element, Host, Prop, h } from '@stencil/core';\nimport tokens from '@market/market-theme/js/icons.json';\nimport marketSVGSprite from '@market/market-theme/assets/icons/icons.svg';\nimport {\n  getDefaultIconFidelity,\n  getFidelityToken,\n  isValidTokenFidelity,\n  isValidSpriteFidelity,\n  getMarketIconSVGSymbol,\n} from '../../utils/icons';\n\nconst marketIconSVGSpriteID = '#market-icon-sprite';\n\n@Component({\n  tag: 'market-icon',\n  styleUrl: 'market-icon.css',\n  shadow: true,\n})\nexport class MarketIcon {\n  @Element() el: HTMLMarketIconElement;\n\n  /**\n   * A string identifier for the icon. This can be either the semantic name which maps to\n   * a token or the descriptive name, which maps to a SVG id in the sprite, though using the\n   * semantic name is preferred because it gives you access to additional features like fidelity.\n   * You can also pass any string and it will display a symbol or group within any SVG sprite\n   * on the page, whether it is the Market sprite or not.\n   */\n  @Prop({ reflect: true, mutable: false }) readonly name: string;\n\n  /**\n   * Optional: A number representing the fidelity of the icon to display.\n   */\n  @Prop({ reflect: true, mutable: false }) readonly fidelity: number;\n\n  /**\n   * Whether or not the icon can change color (is monotone).\n   * */\n  tintable: boolean = true;\n\n  width: number;\n  height: number;\n\n  cloneSymbol(symbol, assetName, width, height) {\n    // Remove any existing SVG child elements so we don't duplicate them\n    this.el.querySelectorAll('svg').forEach((svg) => svg.remove());\n\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink');\n    svg.dataset.name = assetName;\n    svg.setAttribute('viewBox', symbol?.getAttribute('viewBox'));\n    width && svg.setAttribute('width', `${width}`);\n    height && svg.setAttribute('height', `${height}`);\n    svg.innerHTML = symbol.innerHTML;\n\n    this.el.appendChild(svg);\n  }\n\n  getDimensions(symbol, fidelityToken, currentFidelity) {\n    // Get the dimensions from the symbol's viewBox attribute\n    const dimensions =\n      symbol\n        ?.getAttribute('viewBox')\n        .split(/\\s/)\n        .map((d) => Number.parseInt(d, 10)) || [];\n\n    /* Set the dimensions based on the following:\n    1. Passed width/height param\n    2. Width & Height as read from the tokens\n    3. The numbers from the matching SVG symbol's viewBox attribute\n    4. Whatever the currentFidelity is set to (assumes square dimensions)\n    */\n    const width = fidelityToken?.width ?? dimensions[2] ?? currentFidelity;\n    const height = fidelityToken?.height ?? dimensions[3] ?? currentFidelity;\n    return { width, height };\n  }\n\n  componentWillLoad() {\n    let assetName, currentFidelity, defaultFidelity, fidelityToken, symbol;\n\n    // Find the market SVG sprite if it is on the page\n    const documentSVGSprite = document.querySelector(marketIconSVGSpriteID) as SVGElement;\n\n    /* If we can't find a symbol or a root level SVG sprite, that means we need to add the default one\n    to the page */\n    if (!documentSVGSprite) {\n      /* This feels sort of icky, but using innerHTML apparently the best way to convert the string\n      that gets loaded from importing marketSVGSprite into an actual DOM element */\n      const template = document.createElement('div');\n      template.innerHTML = marketSVGSprite;\n      const sprite = template.querySelector(marketIconSVGSpriteID) as SVGElement;\n      sprite.style.display = 'none';\n      document.body.append(sprite);\n      template.remove();\n    }\n\n    // Get the full icon object as well as the object at the correct fidelity key if passed.\n    const iconToken = tokens.core.icon[this.name];\n\n    // If we have passed a semantic name\n    if (iconToken) {\n      // Determine the default fidelity from the tokens.\n      defaultFidelity = getDefaultIconFidelity(iconToken);\n      // Current fidelity is either the fidelity that is passed if it is valid, or the default fidelity\n      currentFidelity = isValidTokenFidelity(this.fidelity, iconToken) ? this.fidelity : defaultFidelity;\n      // Get the JSON object of the token values for this icon for this icon\n      fidelityToken = getFidelityToken(currentFidelity, iconToken);\n\n      // Find the asset name for this semantic icon\n      assetName = fidelityToken?.asset;\n\n      // Otherwise we've passed a descriptive name\n    } else {\n      // The name passed is assumed to be the asset name\n      assetName = this.name;\n\n      // If fidelity here is null or invalid, then this will be an approximate selection of the symbol\n      // But we need to surmise some default fidelity and current fidelity from something and since we\n      // dont have tokens, the SVG markup is the only thing we have more or less.\n      symbol = getMarketIconSVGSymbol(assetName, this.fidelity);\n\n      // Approximate a default fidelity from the matching SVG symbol in the sprite\n      defaultFidelity = Number.parseInt(symbol?.dataset.fidelity, 10);\n\n      // Current fidelity is either the fidelity that is passed if it is valid, or the default fidelity\n      currentFidelity = isValidSpriteFidelity(assetName, this.fidelity) ? this.fidelity : defaultFidelity;\n    }\n\n    /* Even if we already have a symbol, we want to run this function again in case the symbol\n    assignment on line 120 was assigned based on a non-existent or invalid fidelity */\n    symbol = getMarketIconSVGSymbol(assetName, currentFidelity);\n\n    const { width, height } = this.getDimensions(symbol, fidelityToken, currentFidelity);\n\n    if (symbol) {\n      // Append the symbol to the component's template\n      this.cloneSymbol(symbol, assetName, width, height);\n    }\n\n    // set props needed for render\n    this.width = width;\n    this.height = height;\n    this.tintable = fidelityToken?.tintable ?? true;\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-icon\"\n        tintable={this.tintable}\n        style={{\n          '--icon-width': `${this.width}px`,\n          '--icon-height': `${this.height}px`,\n        }}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}