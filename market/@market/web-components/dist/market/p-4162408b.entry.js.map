{"version":3,"names":["marketInputTextCss","MarketInputTextStyle0","InputText","this","hasLeadingAccessory","hasTrailingAccessory","focusedChangeHandler","newValue","nativeInput","focus","autocompleteWatcher","_autocomplete","handleMarketDialogLoaded","autofocus","setFocus","valueDidChange","e","result","marketInputValueChange","emit","value","target","originalEvent","defaultPrevented","preventDefault","updateElementInternals","autovalidate","validatingThroughSubmission","invalid","checkValidity","autofilled","handleAutofill","animationName","handleKeyDown","key","el","slot","submitFormImplicitly","handleSubmissionInvalid","event","readonly","disabled","Promise","resolve","focused","blur","getInputElement","registerSlottedInput","slottedInput","querySelector","_a","getRootNode","host","addEventListener","updateSharedInputProps","prevSharedProps","Object","assign","sharedProps","inputId","id","name","type","placeholder","maxlength","minlength","step","min","max","pattern","undefined","required","inputmode","autocomplete","ariaAttributes","getTextInputAriaLabel","modifiedPropKeys","Set","keys","forEach","removeAttribute","attributeValue","setAttribute","internals","_b","setFormValue","call","_d","_c","setValidity","validity","validationMessage","componentWillLoad","Boolean","children","some","mutationObserver","observeAriaAttributes","componentDidLoad","marketInputDidLoad","input","componentWillUpdate","disconnectedCallback","disconnect","render","h","Host","class","onBlur","onClick","onFocus","onKeyDown","onInvalid","classNames","onSlotchange","part","ref","onInput","onAnimationStart"],"sources":["src/components/market-input-text/market-input-text.css?tag=market-input-text&encapsulation=shadow","src/components/market-input-text/market-input-text.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/field.css\";\n@import \"../../styles/mixins/field-states.css\";\n@import \"../../styles/mixins/field-accessories.css\";\n@import \"../../styles/mixins/floating-input.css\";\n@import \"../../styles/mixins/number-input.css\";\n@import \"../../styles/mixins/time-input.css\";\n@import \"../../styles/mixins/date-input.css\";\n\n:host {\n  @extend %field;\n  @extend %field-states;\n  @extend %field-accessories;\n  @extend %floating-input;\n  @extend %number-input;\n}\n\n/* Visually displays a placeholder when no value is set but a placeholder is set elsewhere,\n   such as with Safari using their own placeholders for date and time inputs */\n:host([value=\"\"]) input,\n:host([value=\"\"]) ::slotted(input) {\n  color: var(--field-placeholder-text-color);\n}\n\n/*\n  These animations are part of a hack that allows us to detect browser autofill:\n  https://stackoverflow.com/a/41530164\n*/\n\n:host input:-webkit-autofill,\n:host ::slotted(input:-webkit-autofill) {\n  animation-name: market-input-autofill-start;\n  animation-duration: 0.1ms;\n}\n\n:host input:not(:-webkit-autofill),\n:host ::slotted(input:not(:-webkit-autofill)) {\n  animation-name: market-input-autofill-cancel;\n  animation-duration: 0.1ms;\n}\n\n:host input::-webkit-date-and-time-value {\n  text-align: left;\n}\n\n:host ::slotted(input::-webkit-date-and-time-value) {\n  text-align: left;\n}\n","import {\n  Component,\n  Prop,\n  Element,\n  Listen,\n  Event,\n  EventEmitter,\n  Host,\n  h,\n  Method,\n  State,\n  Watch,\n  AttachInternals,\n} from '@stencil/core';\n\nimport { observeAriaAttributes, getTextInputAriaLabel, AriaAttributes } from '../../utils/aria';\nimport { autocompleteWatcher } from '../../utils/autocomplete';\nimport { classNames } from '../../utils/classnames';\nimport { submitFormImplicitly } from '../../utils/forms';\n\n/**\n * @slot - The main label for the input.\n * @slot leading-accessory - An icon set on the left side of the input.\n * @slot trailing-accessory - An icon set on the right side of the input.\n *\n * @slot input - Can be used to slot your own HTML input, if needed (ex. if supporting browser\n * autofill)\n * @part native-input - The default inner HTML input.\n */\n@Component({\n  tag: 'market-input-text',\n  shadow: true,\n  styleUrl: 'market-input-text.css',\n  formAssociated: true,\n})\nexport class InputText {\n  private nativeInput?: HTMLInputElement;\n  private slottedInput?: HTMLInputElement;\n\n  @Element() el: HTMLMarketInputTextElement;\n\n  /**\n   * Bind an ElementInternals object to a property which you can then use to interact with the surrounding form.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/attachInternals\n   */\n  @AttachInternals() internals: ElementInternals | undefined;\n\n  /**\n   * A string specifying the type of control to render. Any native HTML input type would work here.\n   */\n  @Prop({ reflect: true }) readonly type: string = 'text'; // Any HTML input type\n  /**\n   * A string specifying an ID for the input.\n   */\n  @Prop() readonly inputId: string;\n\n  /**\n   * A string specifying a name for the input.\n   */\n  @Prop() readonly name: string;\n\n  /**\n   * A string specifying a value for the input. This will be visually shown on the input and can be edited by the user.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /**\n   * A string specifying the placeholder of the input.\n   * This is shown before a user attempts to add a value, given no value is already provided.\n   */\n  @Prop() readonly placeholder: string;\n\n  /**\n   * A number specifying the maximum length of characters for the input value.\n   * See MDN on the [maxlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)\n   */\n  @Prop() readonly maxlength: number;\n\n  /**\n   * A number specifying the minimum length of characters for the input value.\n   * See MDN on the [minlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)\n   */\n  @Prop() readonly minlength: number;\n\n  /**\n   * String for setting input size.\n   * Sizes `small` and `medium` visually hide the label,\n   * but you should still provide one for accessibility purposes.\n   */\n  @Prop({ reflect: true }) readonly size: 'small' | 'medium' | 'large' = 'large';\n\n  /**\n   * Specifies the increment step for number and time inputs.\n   * See MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)\n   */\n  @Prop() readonly step: string;\n\n  /**\n   * Specifies the minimum value for number and time inputs.\n   * See MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min)\n   */\n  @Prop() readonly min: string;\n\n  /**\n   * Specifies the maximum value for number and time inputs.\n   * See MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max)\n   */\n  @Prop() readonly max: string;\n\n  /**\n   * Specifies a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\n   * to validate the input's value against.\n   * See MDN on the [pattern attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)\n   */\n  @Prop() readonly pattern: string;\n\n  /**\n   * Whether or not the input is required; used to validate the input's value.\n   * See MDN on the [required attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required)\n   */\n  @Prop() readonly required: boolean;\n\n  /**\n   * A boolean representing whether the input is readonly or not.\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean = false;\n\n  /**\n   * A boolean representing whether the input is disabled or not.\n   * This visually and functionally will disable the input.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * A boolean representing whether the input is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * A boolean representing whether the input is invalid or not.\n   * This represents error states.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid: boolean = false;\n\n  /**\n   * Allows a browser to display an appropriate virtual keyboard.\n   * [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).\n   */\n  @Prop() readonly inputmode: string;\n\n  /**\n   * A boolean representing whether the input should focus on page load.\n   * If multiple elements with `autofocus` are present, it is not guaranteed which one\n   * will ultimately receive the focus. It is advised that only one at most is present.\n   */\n  @Prop() readonly autofocus: boolean = false;\n\n  /**\n   * Whether or not this input should allow autocompletion by the browser\n   * Accepts a boolean, or \"true\", \"false\", \"on\", \"off\" or an\n   * [accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n   */\n  @Prop() readonly autocomplete: string | boolean = true;\n\n  /**\n   * Whether or not to automatically style this input as invalid based on\n   * native input validation attributes: `min`, `max`, `pattern`, `required`, `maxlength`, `minlength`.\n   * See MDN articles on [form validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation)\n   * and [constraint validation](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation)\n   */\n  @Prop() readonly autovalidate: boolean = false;\n\n  /**\n   * Whether the input is displaying an initial autofill value. Used for\n   * styling to ensure the label floats up correctly.\n   */\n  @Prop({ mutable: true, reflect: true }) autofilled: boolean = false;\n\n  @State() ariaAttributes: AriaAttributes;\n\n  mutationObserver: MutationObserver;\n\n  sharedProps: {}; // properties to set on inner default or slotted <input> elements\n\n  _autocomplete: string; // what will actually get bound to the <input> element\n\n  /**\n   * Set when the component has been checked for validity through external APIs such as form submission\n   * or the checkValidity function and doesn't satisfy its constraints.\n   * See https://developer.mozilla.org/en-US/docs/web/api/htmlinputelement/invalid_event\n   */\n  validatingThroughSubmission: boolean;\n\n  @Watch('focused')\n  focusedChangeHandler(newValue: boolean) {\n    if (!this.nativeInput) {\n      return;\n    }\n\n    if (newValue) {\n      this.nativeInput.focus();\n    }\n  }\n\n  @Watch('autocomplete')\n  autocompleteWatcher(newValue: string | boolean) {\n    this._autocomplete = autocompleteWatcher(newValue);\n  }\n\n  @Listen('marketDialogLoaded', { target: 'window' })\n  handleMarketDialogLoaded() {\n    if (this.autofocus) {\n      this.setFocus();\n    }\n  }\n\n  /**\n   * Emitted whenever the input value changes.\n   */\n  @Event() marketInputValueChange: EventEmitter<{ value: string; originalEvent: KeyboardEvent }>;\n\n  /**\n   * Emitted when `market-input` is first fully rendered.\n   */\n  @Event() marketInputDidLoad: EventEmitter<{ input: HTMLInputElement }>;\n\n  hasLeadingAccessory: boolean = false;\n\n  hasTrailingAccessory: boolean = false;\n\n  valueDidChange(e) {\n    const result = this.marketInputValueChange.emit({\n      value: e.target.value,\n      originalEvent: e,\n    });\n\n    if (result.defaultPrevented) {\n      e.target.value = this.value;\n      e.preventDefault();\n    } else {\n      this.value = e.target.value;\n      this.updateElementInternals();\n\n      if (this.autovalidate || this.validatingThroughSubmission) {\n        this.invalid = !this.nativeInput.checkValidity();\n      }\n    }\n\n    // Once the merchant has entered text, the content is no longer populated\n    // via autofill, and should be styled as usual.\n    this.autofilled = false;\n  }\n\n  handleAutofill(e) {\n    // This a hack to detect browser autofill, since there's no event emitted for it.\n    // See here for details: https://stackoverflow.com/a/41530164\n    if (e.animationName === 'market-input-autofill-start') {\n      this.autofilled = true;\n    } else if (e.animationName === 'market-input-autofill-cancel' && !this.value) {\n      this.autofilled = false;\n    }\n  }\n\n  handleKeyDown(e: KeyboardEvent) {\n    if (e.key === 'Enter') {\n      // There are cases where the input acts as a trigger for a dropdown for example a dropdown that renders\n      // the market-date-picker. In those cases, we want to prevent the form from submitting when the user clicks\n      // enter\n      if (this.el.slot === 'trigger') {\n        e.preventDefault();\n      } else {\n        submitFormImplicitly(this.el);\n      }\n    }\n  }\n\n  /**\n   * Handles the invalid submission event of this component.\n   * This can happen when the component has been externally\n   * checked for validity and does not satisfy the constraints.\n   */\n  handleSubmissionInvalid(event: Event) {\n    event.preventDefault(); // Prevent the default auto focus behavior as this will error out.\n\n    this.validatingThroughSubmission = true;\n    this.invalid = !this.nativeInput.checkValidity();\n  }\n\n  /**\n   * Sets focus styling on `<market-input-text>`. Toggles focus on the inner `<input>` if true, and blurs focus if false.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    if (this.readonly || this.disabled) {\n      return Promise.resolve();\n    }\n    this.focused = value; // this will cause the `focusedChangeHandler` to be triggered\n    if (!value && this.nativeInput) {\n      this.nativeInput.blur();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns the native `<input>` element used under the hood.\n   */\n  @Method()\n  getInputElement(): Promise<HTMLInputElement> {\n    return Promise.resolve(this.nativeInput!);\n  }\n\n  /**\n   * Allows passing an alternative light DOM input.\n   */\n  @Method()\n  registerSlottedInput(slottedInput?: HTMLInputElement) {\n    this.slottedInput =\n      slottedInput ||\n      // input slotted into market-input-text\n      this.el.querySelector('input[slot=input]') ||\n      // input slotted into a higher-level component that uses market-input-text\n      // (e.g. market-input-password)\n      (this.el.getRootNode() as ShadowRoot).host?.querySelector('input[slot=input]');\n    if (this.slottedInput) {\n      this.slottedInput.addEventListener('input', (e) => this.valueDidChange(e));\n      this.slottedInput.addEventListener('focus', () => this.setFocus());\n      this.slottedInput.addEventListener('blur', () => (this.focused = false));\n      this.slottedInput.addEventListener('animationstart', (e) => this.handleAutofill(e));\n      this.nativeInput = this.slottedInput;\n    }\n\n    return Promise.resolve();\n  }\n\n  updateSharedInputProps() {\n    const prevSharedProps = { ...this.sharedProps };\n\n    // used by the default shadow DOM native input and to copy component properties to slotted inputs\n    // conditionally adding key/value pairs based on whether we want to set them on the <input>\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#individual_attributes\n    this.sharedProps = {\n      ...(this.inputId && { id: this.inputId }),\n      ...(this.name && { name: this.name }),\n      ...(this.type && { type: this.type }),\n      ...(this.placeholder && { placeholder: this.placeholder }),\n      ...(this.maxlength >= 0 && { maxlength: this.maxlength }),\n      ...(this.minlength >= 0 && { minlength: this.minlength }),\n      ...(this.step && { step: this.step }),\n      ...(this.min && { min: this.min }),\n      ...(this.max && { max: this.max }),\n      ...(this.pattern && { pattern: this.pattern }),\n      ...(this.value !== undefined && { value: this.value }),\n      ...(this.readonly && { readonly: this.readonly }),\n      ...(this.required && { required: this.required }),\n      ...(this.disabled && { disabled: this.disabled }),\n      ...(this.autofocus && { autofocus: this.autofocus }),\n      ...(this.inputmode && { inputmode: this.inputmode }),\n      ...(this._autocomplete && { autocomplete: this._autocomplete }),\n      ...this.ariaAttributes,\n      'aria-label': getTextInputAriaLabel(this.el),\n    };\n\n    // sync component props to slotted input, if one exists\n    if (this.slottedInput) {\n      const modifiedPropKeys = [...new Set([...Object.keys(prevSharedProps), ...Object.keys(this.sharedProps)])];\n      modifiedPropKeys.forEach((key) => {\n        if (!(key in this.sharedProps)) {\n          // remove properties that have been unset\n          this.slottedInput.removeAttribute(key);\n        } else {\n          // boolean attributes can be set using empty strings\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute#javascript\n          const attributeValue = this.sharedProps[key] !== true ? this.sharedProps[key] : '';\n          this.slottedInput.setAttribute(key, attributeValue);\n        }\n      });\n    }\n  }\n\n  /**\n   * Updates the internal state of this element bound to the surrounding form.\n   */\n  updateElementInternals(): void {\n    if (!this.internals) {\n      return;\n    }\n\n    this.internals.setFormValue?.(this.value);\n\n    if (this.nativeInput) {\n      this.internals.setValidity?.(this.nativeInput.validity, this.nativeInput.validationMessage);\n    }\n  }\n\n  componentWillLoad() {\n    this.hasLeadingAccessory = Boolean([...this.el.children].some((el) => el.slot === 'leading-accessory'));\n    this.hasTrailingAccessory = Boolean([...this.el.children].some((el) => el.slot === 'trailing-accessory'));\n\n    // In testing environments like vitest, formAssociated stencil classes aren't fully supported at the moment.\n    // This leads to issues like missing functions on the this context of the class. In order to address this\n    // we've defined the onMutationObserved callback inline.\n    this.mutationObserver = observeAriaAttributes(this.el, (ariaAttributes: AriaAttributes) => {\n      this.ariaAttributes = ariaAttributes;\n    });\n    this.registerSlottedInput();\n    this.autocompleteWatcher(this.autocomplete);\n    this.updateSharedInputProps();\n    this.updateElementInternals();\n  }\n\n  componentDidLoad() {\n    this.marketInputDidLoad.emit({ input: this.nativeInput });\n  }\n\n  componentWillUpdate() {\n    this.updateSharedInputProps();\n    this.updateElementInternals();\n  }\n\n  disconnectedCallback() {\n    this.mutationObserver?.disconnect();\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-input-text\"\n        onBlur={() => {\n          this.focused = false;\n        }}\n        onClick={() => {\n          this.setFocus();\n        }}\n        onFocus={() => {\n          this.setFocus();\n        }}\n        onKeyDown={(e) => {\n          this.handleKeyDown(e);\n        }}\n        onInvalid={(e) => {\n          this.handleSubmissionInvalid(e);\n        }}\n      >\n        <slot name=\"leading-accessory\"></slot>\n        <div\n          class={classNames('label-input-container', {\n            'has-leading-accessory': this.hasLeadingAccessory,\n            'has-trailing-accessory': this.hasTrailingAccessory,\n          })}\n        >\n          <slot></slot>\n          <slot name=\"input\" onSlotchange={() => this.registerSlottedInput()}>\n            {!this.slottedInput && (\n              <input\n                part=\"native-input\"\n                ref={(input) => (this.nativeInput = input)}\n                onInput={(e) => this.valueDidChange(e)}\n                onAnimationStart={(e) => this.handleAutofill(e)}\n                {...this.sharedProps}\n              />\n            )}\n          </slot>\n        </div>\n        <slot name=\"trailing-accessory\"></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}