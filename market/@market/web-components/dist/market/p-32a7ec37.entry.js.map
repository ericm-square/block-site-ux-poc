{"version":3,"names":["marketColorPickerCss","MarketColorPickerStyle0","MarketColorPicker","gradientValueChange","event","detail","defaultPrevented","this","marketColorPickerValueChange","emit","value","prevValue","inputValue","swatchList","colorInput","swatchValueChange","formatInputValue","gradientPicker","inputValueChange","colorString","parsedValue","parseToHSVA","colorType","hsvToHex","values","join","setSubcomponentValues","el","querySelector","getNamespacedTagFor","handleSlotChange","componentWillLoad","componentDidLoad","render","h","Host","key","class","onSlotchange"],"sources":["src/components/market-color-picker/market-color-picker.css?tag=market-color-picker&encapsulation=shadow","src/components/market-color-picker/market-color-picker.tsx"],"sourcesContent":[":host {\n  display: flex;\n  flex-direction: column;\n  gap: var(--color-picker-vertical-spacing);\n}\n","import { Component, Element, Host, h, Prop, Listen, State, Event, EventEmitter } from '@stencil/core';\n\nimport { hsvToHex, parseToHSVA } from '../../utils/color';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n@Component({\n  tag: 'market-color-picker',\n  styleUrl: 'market-color-picker.css',\n  shadow: true,\n})\nexport class MarketColorPicker {\n  @Element() el: HTMLMarketColorPickerElement;\n\n  /**\n   * Value representing the color shown on the color picker.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string;\n\n  /**\n   * State holding the value to pass into the input. This allows us to handle converting the input value into hexadecimal.\n   */\n  @State() inputValue: string;\n\n  /**\n   * Fired whenever the color picker selection state changes.\n   */\n  @Event({ cancelable: true }) marketColorPickerValueChange: EventEmitter<{ value: string; prevValue: string }>;\n\n  gradientPicker: HTMLMarketColorPickerGradientElement;\n  swatchList: HTMLMarketColorSwatchListElement;\n  colorInput: HTMLMarketColorPickerInputElement;\n\n  /**\n   * Listener for gradient value change. This only fires when the gradient is dragged manually, which currently will only pass a hex value.\n   * Since it's a hex value, we know the value will be formatted for inputs.\n   * @param event\n   */\n  @Listen('marketColorPickerGradientValueChange')\n  gradientValueChange(event: CustomEvent) {\n    const { detail } = event;\n    const { defaultPrevented } = this.marketColorPickerValueChange.emit({\n      value: detail.value,\n      prevValue: this.value,\n    });\n\n    if (!defaultPrevented) {\n      this.value = detail.value;\n      this.inputValue = detail.value;\n\n      if (this.swatchList) {\n        this.swatchList.value = this.value;\n      }\n\n      if (this.colorInput) {\n        this.colorInput.value = this.inputValue;\n      }\n    }\n  }\n\n  @Listen('marketColorSwatchListValueChange')\n  swatchValueChange(event: CustomEvent) {\n    const { detail } = event;\n    const { defaultPrevented } = this.marketColorPickerValueChange.emit({\n      value: detail.value,\n      prevValue: this.value,\n    });\n    if (!defaultPrevented) {\n      this.inputValue = this.formatInputValue(detail.value);\n      this.value = detail.value;\n\n      if (this.gradientPicker) {\n        this.gradientPicker.value = this.value;\n      }\n\n      if (this.colorInput) {\n        this.colorInput.value = this.inputValue;\n      }\n    }\n  }\n\n  @Listen('marketColorPickerInputValueChange')\n  inputValueChange(event: CustomEvent) {\n    const { detail } = event;\n    const { defaultPrevented } = this.marketColorPickerValueChange.emit({\n      value: detail.value,\n      prevValue: this.value,\n    });\n    if (!defaultPrevented) {\n      this.value = detail.value;\n\n      if (this.gradientPicker) {\n        this.gradientPicker.value = this.value;\n      }\n\n      if (this.swatchList) {\n        this.swatchList.value = this.value;\n      }\n    }\n  }\n\n  /**\n   * Helper function taking a color string and converting it to Hex if it's in rgba format.\n   * @param colorString\n   * @returns { string } Hex color string\n   */\n  formatInputValue(colorString: string) {\n    const parsedValue = parseToHSVA(colorString);\n\n    // If it is a valid color format, convert to hex\n    if (parsedValue.colorType && parsedValue.colorType !== 'hexa') {\n      return `#${hsvToHex(parsedValue.values[0], parsedValue.values[1], parsedValue.values[2]).join('')}`;\n    }\n\n    return colorString;\n  }\n\n  setSubcomponentValues() {\n    this.gradientPicker = this.el.querySelector(getNamespacedTagFor('market-color-picker-gradient'));\n    this.swatchList = this.el.querySelector(getNamespacedTagFor('market-color-swatch-list'));\n    this.colorInput = this.el.querySelector(getNamespacedTagFor('market-color-picker-input'));\n\n    if (this.gradientPicker) {\n      this.gradientPicker.value = this.value;\n    }\n\n    if (this.swatchList) {\n      this.swatchList.value = this.value;\n    }\n\n    if (this.colorInput) {\n      this.colorInput.value = this.inputValue;\n    }\n  }\n\n  handleSlotChange() {\n    this.setSubcomponentValues();\n  }\n\n  componentWillLoad() {\n    this.inputValue = this.formatInputValue(this.value);\n  }\n\n  componentDidLoad() {\n    this.setSubcomponentValues();\n  }\n\n  render() {\n    return (\n      <Host class=\"market-color-picker\">\n        <slot onSlotchange={() => this.handleSlotChange()}></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"+IAAA,MAAMA,EAAuB,qFAC7B,MAAAC,EAAeD,E,MCSFE,EAAiB,M,mJA4B5B,mBAAAC,CAAoBC,GAClB,MAAMC,OAAEA,GAAWD,EACnB,MAAME,iBAAEA,GAAqBC,KAAKC,6BAA6BC,KAAK,CAClEC,MAAOL,EAAOK,MACdC,UAAWJ,KAAKG,QAGlB,IAAKJ,EAAkB,CACrBC,KAAKG,MAAQL,EAAOK,MACpBH,KAAKK,WAAaP,EAAOK,MAEzB,GAAIH,KAAKM,WAAY,CACnBN,KAAKM,WAAWH,MAAQH,KAAKG,K,CAG/B,GAAIH,KAAKO,WAAY,CACnBP,KAAKO,WAAWJ,MAAQH,KAAKK,U,GAMnC,iBAAAG,CAAkBX,GAChB,MAAMC,OAAEA,GAAWD,EACnB,MAAME,iBAAEA,GAAqBC,KAAKC,6BAA6BC,KAAK,CAClEC,MAAOL,EAAOK,MACdC,UAAWJ,KAAKG,QAElB,IAAKJ,EAAkB,CACrBC,KAAKK,WAAaL,KAAKS,iBAAiBX,EAAOK,OAC/CH,KAAKG,MAAQL,EAAOK,MAEpB,GAAIH,KAAKU,eAAgB,CACvBV,KAAKU,eAAeP,MAAQH,KAAKG,K,CAGnC,GAAIH,KAAKO,WAAY,CACnBP,KAAKO,WAAWJ,MAAQH,KAAKK,U,GAMnC,gBAAAM,CAAiBd,GACf,MAAMC,OAAEA,GAAWD,EACnB,MAAME,iBAAEA,GAAqBC,KAAKC,6BAA6BC,KAAK,CAClEC,MAAOL,EAAOK,MACdC,UAAWJ,KAAKG,QAElB,IAAKJ,EAAkB,CACrBC,KAAKG,MAAQL,EAAOK,MAEpB,GAAIH,KAAKU,eAAgB,CACvBV,KAAKU,eAAeP,MAAQH,KAAKG,K,CAGnC,GAAIH,KAAKM,WAAY,CACnBN,KAAKM,WAAWH,MAAQH,KAAKG,K,GAUnC,gBAAAM,CAAiBG,GACf,MAAMC,EAAcC,EAAYF,GAGhC,GAAIC,EAAYE,WAAaF,EAAYE,YAAc,OAAQ,CAC7D,MAAO,IAAIC,EAASH,EAAYI,OAAO,GAAIJ,EAAYI,OAAO,GAAIJ,EAAYI,OAAO,IAAIC,KAAK,K,CAGhG,OAAON,C,CAGT,qBAAAO,GACEnB,KAAKU,eAAiBV,KAAKoB,GAAGC,cAAcC,EAAoB,iCAChEtB,KAAKM,WAAaN,KAAKoB,GAAGC,cAAcC,EAAoB,6BAC5DtB,KAAKO,WAAaP,KAAKoB,GAAGC,cAAcC,EAAoB,8BAE5D,GAAItB,KAAKU,eAAgB,CACvBV,KAAKU,eAAeP,MAAQH,KAAKG,K,CAGnC,GAAIH,KAAKM,WAAY,CACnBN,KAAKM,WAAWH,MAAQH,KAAKG,K,CAG/B,GAAIH,KAAKO,WAAY,CACnBP,KAAKO,WAAWJ,MAAQH,KAAKK,U,EAIjC,gBAAAkB,GACEvB,KAAKmB,uB,CAGP,iBAAAK,GACExB,KAAKK,WAAaL,KAAKS,iBAAiBT,KAAKG,M,CAG/C,gBAAAsB,GACEzB,KAAKmB,uB,CAGP,MAAAO,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAM,uBACVH,EAAA,QAAAE,IAAA,2CAAME,aAAc,IAAM/B,KAAKuB,qB"}