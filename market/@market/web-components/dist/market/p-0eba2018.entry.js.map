{"version":3,"names":["marketTableV2GroupCss","MarketTableV2GroupStyle0","MarketTableV2Group","onMarketTableV2CellCaretClicked","e","stopPropagation","this","setCollapsed","collapsed","onMarketTableV2SelectionChange","el","parent","target","detail","current","stopImmediatePropagation","setSelected","setSelectedFromChildEvent","onDragHandleStart","coords","anchor","dragHandlePosition","drag","Draggable","start","classList","add","onDragHandleMove","move","onDragHandleDragEnd","end","remove","destroy","onDragMove","reorder","dragMove","onDragLeave","dragLeave","onDragEnd","dragEnd","onDragDrop","dragDrop","propagateNestedState","children","groups","rows","indent","collapsible","forEach","group","hasChildren","length","caret","undefined","row","child","watchDragEnabled","dragEnabled","watchReorderable","reorderable","reorderMode","marketTableV2RowsReordered","reorderEnabled","includes","rowTagName","getNamespacedTagFor","groupTagName","Reorderable","accepts","event","mode","syncDragEnabled","selected","silent","marketInternalTableV2GroupSelectionChange","prevSelected","Promise","resolve","emit","previous","async","prevCollapsed","marketTableV2GroupCollapsedChange","defaultPrevented","sort","order","column","strategy","format","sortedChildren","sortItems","items","append","childSelected","childrenSelected","map","groupSelected","every","val","getElements","find","tagName","toUpperCase","slot","filter","getStyles","toString","isDraggable","onSlotChange","connectedCallback","componentDidRender","render","h","Host","key","class","style","name","onSlotchange"],"sources":["src/components/tables-v2/market-table-v2-group/market-table-v2-group.css?tag=market-table-v2-group&encapsulation=shadow","src/components/tables-v2/market-table-v2-group/market-table-v2-group.tsx"],"sourcesContent":[":host {\n  --table-cell-horizontal-padding-size: 8px;\n  --table-cell-indent-size: 40px;\n  --drag-highlight-border-size: 2px;\n}\n\n/* weird, but slot needs to inherit in order to cascade to slotted items */\n:host,\nslot,\n.children {\n  vertical-align: inherit;\n  text-align: inherit;\n}\n\n/* secret sauce here:\n  this removes the wrappers from the layout render tree\n  so that the table layout still works! */\n:host,\n.children {\n  display: contents;\n}\n\n:host([collapsible][collapsed]) {\n  .children {\n    display: none;\n  }\n}\n\n/* highlight the group's parent if it's collapsed but contains the drag cursor */\n:host(.market-drag-cursor-parent[collapsible][collapsed]) {\n  ::slotted([slot=\"parent\"]) {\n    position: relative;\n    border-radius: var(--core-radius-10);\n    background-color: var(--core-emphasis-40-color);\n    outline: var(--drag-highlight-border-size) solid var(--core-emphasis-fill-color);\n    outline-offset: calc(var(--drag-highlight-border-size) * -1);\n  }\n}\n\n/* the drag cursor */\n::slotted(.market-drag-cursor) {\n  --drag-cursor-height: 4px;\n\n  position: absolute;\n  right: 0;\n  left:\n    calc(\n      var(--table-cell-horizontal-padding-size) +\n      (var(--drag-cursor-indent-level) + 1) * var(--table-cell-indent-size)\n    );\n  display: block;\n  height: 0;\n  outline: calc(var(--drag-cursor-height) / 2) solid var(--core-emphasis-fill-color);\n  pointer-events: none;\n}\n\n/* hide the placeholder group's child rows */\n:host(.market-drag-placeholder) {\n  ::slotted(:not([slot=\"parent\"])) {\n    display: none;\n  }\n}\n","import { Component, Host, h, Element, Prop, Watch, Listen, EventEmitter, Event, Method } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../../utils/namespace';\nimport {\n  HTMLMarketTableV2ChildElement,\n  TMarketTableV2Selection,\n  MarketTableV2SelectionChangeEventDetail,\n  TMarketTableV2SortOrder,\n  TMarketTableV2SortStrategy,\n} from '../market-table-v2/types';\nimport { isDraggable, TMarketDragEventDetail, Draggable } from '../../../utils/draggable';\nimport { TMarketReorderableOptions, Reorderable, TMarketReorderEventDetail } from '../../../utils/reorderable';\nimport { TMarketDragCoords } from '../../../utils/gesture/types';\nimport { sortItems } from '../market-table-v2/utils';\n\n/**\n * @slot - Default slot for children rows\n * @slot parent - Slot for for the parent row\n */\n\n@Component({\n  tag: 'market-table-v2-group',\n  styleUrl: 'market-table-v2-group.css',\n  shadow: true,\n})\nexport class MarketTableV2Group {\n  private parent: HTMLMarketTableV2RowElement;\n  private rows: Array<HTMLMarketTableV2RowElement>;\n  private groups: Array<HTMLMarketTableV2GroupElement>;\n  private children: Array<HTMLMarketTableV2ChildElement>;\n  private drag: Draggable;\n  private reorder: Reorderable;\n\n  @Element() el: HTMLMarketTableV2GroupElement;\n\n  /**\n   * Whether the group is collapsible.\n   */\n  @Prop({ reflect: true }) readonly collapsible: boolean = false;\n\n  /**\n   * Whether the group is expanded or collapsed, when `collapsible` is `true`.\n   */\n  @Prop({ reflect: true, mutable: true }) collapsed: boolean = false;\n\n  /**\n   * Whether the group is drag & drop enabled.\n   */\n  @Prop({ reflect: true }) readonly dragEnabled: boolean = false;\n\n  /**\n   * Indentation level\n   */\n  @Prop({ reflect: true }) readonly indent: number = 0;\n\n  /**\n   * Whether the group is reorderable or not.\n   * Setting to `internal` enables reordering table rows internally\n   * while `external` also allows dragging to & from other tables.\n   */\n  @Prop({ reflect: true }) readonly reorderable: TMarketReorderableOptions;\n\n  /**\n   * When set to `framework`, the group will move the reordered item back to its original position\n   * before the `marketTableV2RowsReordered` event is fired. This is useful when the table\n   * is rendered within a framework like Ember or React.\n   */\n  @Prop() readonly reorderMode: 'default' | 'framework' = 'default';\n\n  /**\n   * Whether the group is selected.\n   * Relevant if the group has rows with slotted controls.\n   */\n  @Prop({ mutable: true }) selected: TMarketTableV2Selection = 'false';\n\n  /**\n   * @internal\n   * Fired when the group selection state changes. Used internally in table components.\n   */\n  @Event({ bubbles: true, composed: true })\n  marketInternalTableV2GroupSelectionChange: EventEmitter<MarketTableV2SelectionChangeEventDetail>;\n\n  /**\n   * Fired when the group's rows are reordered.\n   * If a row was dropped into this group from an external source, `oldIndex` is `-1`.\n   * If a row was removed from this group and dropped into an external source, `newIndex` is `-1`.\n   */\n  @Event({ bubbles: true, composed: true })\n  marketTableV2RowsReordered: EventEmitter<TMarketReorderEventDetail>;\n\n  /**\n   * Fired when the group's collapsed state changes.\n   */\n  @Event({ bubbles: true, composed: true })\n  marketTableV2GroupCollapsedChange: EventEmitter<{ previous: boolean; current: boolean }>;\n\n  @Listen('marketTableV2CellCaretClicked')\n  onMarketTableV2CellCaretClicked(e: CustomEvent<void>) {\n    e.stopPropagation();\n    this.setCollapsed(!this.collapsed);\n  }\n\n  @Listen('marketInternalTableV2RowSelectionChange')\n  @Listen('marketInternalTableV2GroupSelectionChange')\n  async onMarketTableV2SelectionChange(e: CustomEvent<MarketTableV2SelectionChangeEventDetail>) {\n    const { el, parent } = this;\n    const { target, detail } = e;\n    const { current } = detail;\n\n    // oddly, a component's instance can catch its own event\n    // before it bubbles, so prevent an infinite loop!\n    if (target === el) return;\n    e.stopImmediatePropagation();\n\n    if (target === parent) {\n      // if the target is the parent, propagate values downward\n      await this.setSelected(current);\n    } else {\n      // the target is a child, and it's complicated...\n      await this.setSelectedFromChildEvent(e);\n    }\n  }\n\n  // These marketDragHandle listeners are for dragging this entire group,\n  // which is triggered by dragging the handle of the parent row.\n  // We ONLY want to listen for drag handle events on the parent,\n  // so we return early if the target is NOT the parent.\n\n  @Listen('marketDragHandleDragStart')\n  async onDragHandleStart(e: CustomEvent<TMarketDragCoords>) {\n    e.stopImmediatePropagation();\n    const { el, parent } = this;\n    const { target, detail: coords } = e;\n    if (parent !== target) return;\n    const anchor = parent.dragHandlePosition === 'leading' ? 'left' : 'right';\n    const drag = new Draggable(el, { anchor });\n    this.drag = drag;\n    await drag.start(coords);\n    parent.classList.add('market-drag-placeholder');\n  }\n\n  @Listen('marketDragHandleDragMove')\n  onDragHandleMove(e: CustomEvent<TMarketDragCoords>) {\n    e.stopImmediatePropagation();\n    const { parent, drag } = this;\n    const { target, detail: coords } = e;\n    if (parent !== target) return;\n    drag.move(coords);\n  }\n\n  @Listen('marketDragHandleDragEnd')\n  async onDragHandleDragEnd(e: CustomEvent<TMarketDragCoords>) {\n    e.stopImmediatePropagation();\n    const { parent, drag } = this;\n    const { target, detail: coords } = e;\n    if (parent !== target) return;\n    await drag.end(coords);\n    parent.classList.remove('market-drag-placeholder');\n    drag.destroy();\n  }\n\n  // These marketDrag listeners are for dragging WITHIN this group.\n  // If the dragged element is the parent row, we return early.\n\n  @Listen('marketDragMove')\n  onDragMove(e: CustomEvent<TMarketDragEventDetail>) {\n    const { parent, reorder } = this;\n    const { el } = e.detail;\n    if (parent === el) return;\n    e.stopImmediatePropagation();\n    reorder?.dragMove(e);\n  }\n\n  @Listen('marketDragLeave')\n  onDragLeave(e: CustomEvent<TMarketDragEventDetail>) {\n    const { parent, reorder } = this;\n    const { el } = e.detail;\n    if (parent === el) return;\n    e.stopImmediatePropagation();\n    reorder?.dragLeave();\n  }\n\n  @Listen('marketDragEnd')\n  onDragEnd(e: CustomEvent<TMarketDragEventDetail>) {\n    const { parent, reorder } = this;\n    const { el } = e.detail;\n    if (parent === el) return;\n    reorder?.dragEnd(e);\n  }\n\n  @Listen('marketDragDrop')\n  onDragDrop(e: CustomEvent<TMarketDragEventDetail>) {\n    const { parent, reorder } = this;\n    const { el } = e.detail;\n    if (parent === el) return;\n    reorder?.dragDrop(e);\n  }\n\n  @Watch('indent')\n  @Watch('collapsed')\n  @Watch('collapsible')\n  propagateNestedState() {\n    const { parent, children, groups, rows, indent, collapsible, collapsed } = this;\n\n    groups.forEach((group) => {\n      group.collapsible = collapsible;\n    });\n\n    if (collapsible) {\n      const hasChildren = children.length > 0;\n      if (parent) {\n        parent.caret = hasChildren ? (collapsed ? 'down' : 'up') : undefined;\n        parent.indent = hasChildren ? indent : indent + 1;\n      }\n      groups.forEach((group) => {\n        group.indent = indent + 1;\n        group.collapsible = collapsible;\n      });\n      rows.forEach((row) => {\n        // child rows get extra indentation to account for no caret\n        row.indent = indent + 2;\n      });\n    } else {\n      if (parent) {\n        parent.caret = undefined;\n        parent.indent = indent;\n      }\n      children.forEach((child) => {\n        child.indent = indent + 1;\n      });\n      groups.forEach((group) => {\n        group.collapsible = collapsible;\n      });\n    }\n  }\n\n  @Watch('dragEnabled')\n  watchDragEnabled() {\n    const { parent, children, dragEnabled } = this;\n    if (parent) parent.dragEnabled = dragEnabled;\n    children?.forEach((child) => {\n      child.dragEnabled = dragEnabled;\n    });\n  }\n\n  @Watch('reorderable')\n  watchReorderable() {\n    const { el, reorder, reorderable, reorderMode, marketTableV2RowsReordered } = this;\n\n    reorder?.destroy();\n\n    const reorderEnabled = ['internal', 'external'].includes(reorderable);\n    if (reorderEnabled) {\n      const rowTagName = getNamespacedTagFor('market-table-v2-row');\n      const groupTagName = getNamespacedTagFor('market-table-v2-group');\n\n      this.reorder = new Reorderable({\n        el,\n        accepts: [`${rowTagName}:not([header]):not([footer]):not([slot=\"parent\"])`, groupTagName],\n        event: marketTableV2RowsReordered,\n        mode: reorderMode,\n      });\n    }\n\n    this.syncDragEnabled();\n  }\n\n  /**\n   * @internal\n   * Sets selection on the group and propagates the value\n   * downwards to its children rows and upwards to any parent groups or tables.\n   */\n  @Method()\n  async setSelected(selected: TMarketTableV2Selection, { silent = false } = {}) {\n    const { parent, children, marketInternalTableV2GroupSelectionChange, selected: prevSelected } = this;\n\n    // return if no values have changed\n    if (prevSelected === selected) return Promise.resolve();\n\n    // fire the internal selection event\n    if (!silent) {\n      marketInternalTableV2GroupSelectionChange.emit({\n        current: selected,\n        previous: prevSelected,\n      });\n    }\n\n    // propagate the new values\n    this.selected = selected;\n\n    // this direction is top -> down, so don't fire events to avoid infinite loop\n    await parent?.setSelected(selected, { silent: true });\n    children?.forEach(async (child) => {\n      await child.setSelected(selected, { silent: true });\n    });\n\n    return Promise.resolve();\n  }\n\n  /**\n   * @internal\n   * Used internally by Reorderable utils.\n   * Sets the group's collapsed state and fires the change event.\n   * Normally you should set the `collapsed` prop directly.\n   */\n  @Method()\n  async setCollapsed(collapsed: boolean, { silent = false } = {}) {\n    const { collapsed: prevCollapsed, collapsible, marketTableV2GroupCollapsedChange } = this;\n\n    if (!collapsible) return Promise.resolve();\n    if (collapsed === prevCollapsed) return Promise.resolve();\n\n    this.collapsed = collapsed;\n    if (!silent) {\n      const { defaultPrevented } = marketTableV2GroupCollapsedChange.emit({\n        previous: prevCollapsed,\n        current: collapsed,\n      });\n      if (defaultPrevented) this.collapsed = prevCollapsed;\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * @internal\n   * Recursively sorts the group's children rows and groups.\n   */\n  @Method()\n  async sort({\n    order,\n    column,\n    strategy,\n    format,\n  }: {\n    order: TMarketTableV2SortOrder;\n    column: number;\n    strategy: TMarketTableV2SortStrategy;\n    format: string;\n  }) {\n    const { el, children, groups } = this;\n\n    // sort the children\n    const sortedChildren = sortItems({\n      items: children,\n      order,\n      column,\n      strategy,\n      format,\n    });\n\n    // sort the groups' children\n    groups?.forEach((group) =>\n      group.sort({\n        order,\n        column,\n        strategy,\n        format,\n      }),\n    );\n\n    // render the sorted rows\n    sortedChildren.forEach((row: HTMLMarketTableV2RowElement) => {\n      el.append(row);\n    });\n\n    return Promise.resolve();\n  }\n\n  private async setSelectedFromChildEvent(e: CustomEvent<MarketTableV2SelectionChangeEventDetail>) {\n    const { parent, children, marketInternalTableV2GroupSelectionChange, selected: prevSelected } = this;\n    const { target, detail } = e;\n    const { current: childSelected } = detail;\n\n    // get an array of what the children's selected values would be AFTER this event\n    const childrenSelected = children.map((child) => {\n      // if the target was THIS child, it will be new event value (not .selected)\n      if (target === child) return childSelected;\n      // otherwise, get the current value directly from this child\n      return child.selected;\n    });\n\n    // what this group's selected value would be AFTER this event\n    const groupSelected = childrenSelected.every((val) => val === 'true')\n      ? 'true'\n      : childrenSelected.every((val) => val === 'false')\n      ? 'false'\n      : 'indeterminate';\n\n    // return if no values have changed\n    if (prevSelected === groupSelected) return;\n\n    // fire the internal selection event\n    marketInternalTableV2GroupSelectionChange.emit({\n      current: groupSelected,\n      previous: prevSelected,\n    });\n\n    // propagate the new values\n    this.selected = groupSelected;\n    await parent.setSelected(groupSelected, { silent: true });\n  }\n\n  private getElements() {\n    this.parent = [...this.el.children].find((child) => {\n      return child.tagName === getNamespacedTagFor('market-table-v2-row').toUpperCase() && child.slot === 'parent';\n    }) as HTMLMarketTableV2RowElement;\n\n    this.rows = [...this.el.children].filter((child) => {\n      return child.tagName === getNamespacedTagFor('market-table-v2-row').toUpperCase() && child.slot !== 'parent';\n    }) as Array<HTMLMarketTableV2RowElement>;\n\n    this.groups = [...this.el.children].filter((child) => {\n      return child.tagName === getNamespacedTagFor('market-table-v2-group').toUpperCase() && child.slot !== 'parent';\n    }) as Array<HTMLMarketTableV2GroupElement>;\n\n    this.children = [...this.groups, ...this.rows];\n  }\n\n  private getStyles() {\n    const { indent } = this;\n    return { '--drag-cursor-indent-level': indent.toString() };\n  }\n\n  private syncDragEnabled() {\n    const { parent, rows, groups, reorderable, reorderMode } = this;\n\n    const reorderEnabled = ['internal', 'external'].includes(reorderable);\n\n    if (parent) parent.dragEnabled = reorderEnabled;\n\n    rows?.forEach((row) => {\n      if (!isDraggable(row)) return;\n      row.dragEnabled = reorderEnabled;\n    });\n\n    groups?.forEach((group) => {\n      group.dragEnabled = reorderEnabled;\n      group.reorderable = reorderable;\n      group.reorderMode = reorderMode;\n    });\n  }\n\n  private onSlotChange() {\n    this.getElements();\n    this.propagateNestedState();\n    this.syncDragEnabled();\n  }\n\n  connectedCallback() {\n    this.getElements();\n    this.propagateNestedState();\n    this.syncDragEnabled();\n  }\n\n  componentDidRender() {\n    this.watchReorderable();\n  }\n\n  render() {\n    return (\n      <Host class=\"market-table-v2-group\" style={this.getStyles()}>\n        <slot name=\"parent\" onSlotchange={() => this.onSlotChange()}></slot>\n        <div class=\"children\">\n          <slot onSlotchange={() => this.onSlotChange()}></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"uTAAA,MAAMA,EAAwB,6/BAC9B,MAAAC,EAAeD,E,MCuBFE,EAAkB,M,2SAa4B,M,eAKI,M,iBAKJ,M,YAKN,E,4CAcK,U,cAMK,O,CAwB7D,+BAAAC,CAAgCC,GAC9BA,EAAEC,kBACFC,KAAKC,cAAcD,KAAKE,U,CAK1B,oCAAMC,CAA+BL,GACnC,MAAMM,GAAEA,EAAEC,OAAEA,GAAWL,KACvB,MAAMM,OAAEA,EAAMC,OAAEA,GAAWT,EAC3B,MAAMU,QAAEA,GAAYD,EAIpB,GAAID,IAAWF,EAAI,OACnBN,EAAEW,2BAEF,GAAIH,IAAWD,EAAQ,OAEfL,KAAKU,YAAYF,E,KAClB,OAECR,KAAKW,0BAA0Bb,E,EAUzC,uBAAMc,CAAkBd,GACtBA,EAAEW,2BACF,MAAML,GAAEA,EAAEC,OAAEA,GAAWL,KACvB,MAAMM,OAAEA,EAAQC,OAAQM,GAAWf,EACnC,GAAIO,IAAWC,EAAQ,OACvB,MAAMQ,EAAST,EAAOU,qBAAuB,UAAY,OAAS,QAClE,MAAMC,EAAO,IAAIC,EAAUb,EAAI,CAAEU,WACjCd,KAAKgB,KAAOA,QACNA,EAAKE,MAAML,GACjBR,EAAOc,UAAUC,IAAI,0B,CAIvB,gBAAAC,CAAiBvB,GACfA,EAAEW,2BACF,MAAMJ,OAAEA,EAAMW,KAAEA,GAAShB,KACzB,MAAMM,OAAEA,EAAQC,OAAQM,GAAWf,EACnC,GAAIO,IAAWC,EAAQ,OACvBU,EAAKM,KAAKT,E,CAIZ,yBAAMU,CAAoBzB,GACxBA,EAAEW,2BACF,MAAMJ,OAAEA,EAAMW,KAAEA,GAAShB,KACzB,MAAMM,OAAEA,EAAQC,OAAQM,GAAWf,EACnC,GAAIO,IAAWC,EAAQ,aACjBU,EAAKQ,IAAIX,GACfR,EAAOc,UAAUM,OAAO,2BACxBT,EAAKU,S,CAOP,UAAAC,CAAW7B,GACT,MAAMO,OAAEA,EAAMuB,QAAEA,GAAY5B,KAC5B,MAAMI,GAAEA,GAAON,EAAES,OACjB,GAAIF,IAAWD,EAAI,OACnBN,EAAEW,2BACFmB,IAAO,MAAPA,SAAO,SAAPA,EAASC,SAAS/B,E,CAIpB,WAAAgC,CAAYhC,GACV,MAAMO,OAAEA,EAAMuB,QAAEA,GAAY5B,KAC5B,MAAMI,GAAEA,GAAON,EAAES,OACjB,GAAIF,IAAWD,EAAI,OACnBN,EAAEW,2BACFmB,IAAO,MAAPA,SAAO,SAAPA,EAASG,W,CAIX,SAAAC,CAAUlC,GACR,MAAMO,OAAEA,EAAMuB,QAAEA,GAAY5B,KAC5B,MAAMI,GAAEA,GAAON,EAAES,OACjB,GAAIF,IAAWD,EAAI,OACnBwB,IAAO,MAAPA,SAAO,SAAPA,EAASK,QAAQnC,E,CAInB,UAAAoC,CAAWpC,GACT,MAAMO,OAAEA,EAAMuB,QAAEA,GAAY5B,KAC5B,MAAMI,GAAEA,GAAON,EAAES,OACjB,GAAIF,IAAWD,EAAI,OACnBwB,IAAO,MAAPA,SAAO,SAAPA,EAASO,SAASrC,E,CAMpB,oBAAAsC,GACE,MAAM/B,OAAEA,EAAMgC,SAAEA,EAAQC,OAAEA,EAAMC,KAAEA,EAAIC,OAAEA,EAAMC,YAAEA,EAAWvC,UAAEA,GAAcF,KAE3EsC,EAAOI,SAASC,IACdA,EAAMF,YAAcA,CAAW,IAGjC,GAAIA,EAAa,CACf,MAAMG,EAAcP,EAASQ,OAAS,EACtC,GAAIxC,EAAQ,CACVA,EAAOyC,MAAQF,EAAe1C,EAAY,OAAS,KAAQ6C,UAC3D1C,EAAOmC,OAASI,EAAcJ,EAASA,EAAS,C,CAElDF,EAAOI,SAASC,IACdA,EAAMH,OAASA,EAAS,EACxBG,EAAMF,YAAcA,CAAW,IAEjCF,EAAKG,SAASM,IAEZA,EAAIR,OAASA,EAAS,CAAC,G,KAEpB,CACL,GAAInC,EAAQ,CACVA,EAAOyC,MAAQC,UACf1C,EAAOmC,OAASA,C,CAElBH,EAASK,SAASO,IAChBA,EAAMT,OAASA,EAAS,CAAC,IAE3BF,EAAOI,SAASC,IACdA,EAAMF,YAAcA,CAAW,G,EAMrC,gBAAAS,GACE,MAAM7C,OAAEA,EAAMgC,SAAEA,EAAQc,YAAEA,GAAgBnD,KAC1C,GAAIK,EAAQA,EAAO8C,YAAcA,EACjCd,IAAQ,MAARA,SAAQ,SAARA,EAAUK,SAASO,IACjBA,EAAME,YAAcA,CAAW,G,CAKnC,gBAAAC,GACE,MAAMhD,GAAEA,EAAEwB,QAAEA,EAAOyB,YAAEA,EAAWC,YAAEA,EAAWC,2BAAEA,GAA+BvD,KAE9E4B,IAAO,MAAPA,SAAO,SAAPA,EAASF,UAET,MAAM8B,EAAiB,CAAC,WAAY,YAAYC,SAASJ,GACzD,GAAIG,EAAgB,CAClB,MAAME,EAAaC,EAAoB,uBACvC,MAAMC,EAAeD,EAAoB,yBAEzC3D,KAAK4B,QAAU,IAAIiC,EAAY,CAC7BzD,KACA0D,QAAS,CAAC,GAAGJ,qDAA+DE,GAC5EG,MAAOR,EACPS,KAAMV,G,CAIVtD,KAAKiE,iB,CASP,iBAAMvD,CAAYwD,GAAmCC,OAAEA,EAAS,OAAU,IACxE,MAAM9D,OAAEA,EAAMgC,SAAEA,EAAQ+B,0CAAEA,EAA2CF,SAAUG,GAAiBrE,KAGhG,GAAIqE,IAAiBH,EAAU,OAAOI,QAAQC,UAG9C,IAAKJ,EAAQ,CACXC,EAA0CI,KAAK,CAC7ChE,QAAS0D,EACTO,SAAUJ,G,CAKdrE,KAAKkE,SAAWA,QAGV7D,IAAM,MAANA,SAAM,SAANA,EAAQK,YAAYwD,EAAU,CAAEC,OAAQ,QAC9C9B,IAAQ,MAARA,SAAQ,SAARA,EAAUK,SAAQgC,MAAOzB,UACjBA,EAAMvC,YAAYwD,EAAU,CAAEC,OAAQ,MAAO,IAGrD,OAAOG,QAAQC,S,CAUjB,kBAAMtE,CAAaC,GAAoBiE,OAAEA,EAAS,OAAU,IAC1D,MAAQjE,UAAWyE,EAAalC,YAAEA,EAAWmC,kCAAEA,GAAsC5E,KAErF,IAAKyC,EAAa,OAAO6B,QAAQC,UACjC,GAAIrE,IAAcyE,EAAe,OAAOL,QAAQC,UAEhDvE,KAAKE,UAAYA,EACjB,IAAKiE,EAAQ,CACX,MAAMU,iBAAEA,GAAqBD,EAAkCJ,KAAK,CAClEC,SAAUE,EACVnE,QAASN,IAEX,GAAI2E,EAAkB7E,KAAKE,UAAYyE,C,CAGzC,OAAOL,QAAQC,S,CAQjB,UAAMO,EAAKC,MACTA,EAAKC,OACLA,EAAMC,SACNA,EAAQC,OACRA,IAOA,MAAM9E,GAAEA,EAAEiC,SAAEA,EAAQC,OAAEA,GAAWtC,KAGjC,MAAMmF,EAAiBC,EAAU,CAC/BC,MAAOhD,EACP0C,QACAC,SACAC,WACAC,WAIF5C,IAAM,MAANA,SAAM,SAANA,EAAQI,SAASC,GACfA,EAAMmC,KAAK,CACTC,QACAC,SACAC,WACAC,aAKJC,EAAezC,SAASM,IACtB5C,EAAGkF,OAAOtC,EAAI,IAGhB,OAAOsB,QAAQC,S,CAGT,+BAAM5D,CAA0Bb,GACtC,MAAMO,OAAEA,EAAMgC,SAAEA,EAAQ+B,0CAAEA,EAA2CF,SAAUG,GAAiBrE,KAChG,MAAMM,OAAEA,EAAMC,OAAEA,GAAWT,EAC3B,MAAQU,QAAS+E,GAAkBhF,EAGnC,MAAMiF,EAAmBnD,EAASoD,KAAKxC,IAErC,GAAI3C,IAAW2C,EAAO,OAAOsC,EAE7B,OAAOtC,EAAMiB,QAAQ,IAIvB,MAAMwB,EAAgBF,EAAiBG,OAAOC,GAAQA,IAAQ,SAC1D,OACAJ,EAAiBG,OAAOC,GAAQA,IAAQ,UACxC,QACA,gBAGJ,GAAIvB,IAAiBqB,EAAe,OAGpCtB,EAA0CI,KAAK,CAC7ChE,QAASkF,EACTjB,SAAUJ,IAIZrE,KAAKkE,SAAWwB,QACVrF,EAAOK,YAAYgF,EAAe,CAAEvB,OAAQ,M,CAG5C,WAAA0B,GACN7F,KAAKK,OAAS,IAAIL,KAAKI,GAAGiC,UAAUyD,MAAM7C,GACjCA,EAAM8C,UAAYpC,EAAoB,uBAAuBqC,eAAiB/C,EAAMgD,OAAS,WAGtGjG,KAAKuC,KAAO,IAAIvC,KAAKI,GAAGiC,UAAU6D,QAAQjD,GACjCA,EAAM8C,UAAYpC,EAAoB,uBAAuBqC,eAAiB/C,EAAMgD,OAAS,WAGtGjG,KAAKsC,OAAS,IAAItC,KAAKI,GAAGiC,UAAU6D,QAAQjD,GACnCA,EAAM8C,UAAYpC,EAAoB,yBAAyBqC,eAAiB/C,EAAMgD,OAAS,WAGxGjG,KAAKqC,SAAW,IAAIrC,KAAKsC,UAAWtC,KAAKuC,K,CAGnC,SAAA4D,GACN,MAAM3D,OAAEA,GAAWxC,KACnB,MAAO,CAAE,6BAA8BwC,EAAO4D,W,CAGxC,eAAAnC,GACN,MAAM5D,OAAEA,EAAMkC,KAAEA,EAAID,OAAEA,EAAMe,YAAEA,EAAWC,YAAEA,GAAgBtD,KAE3D,MAAMwD,EAAiB,CAAC,WAAY,YAAYC,SAASJ,GAEzD,GAAIhD,EAAQA,EAAO8C,YAAcK,EAEjCjB,IAAI,MAAJA,SAAI,SAAJA,EAAMG,SAASM,IACb,IAAKqD,EAAYrD,GAAM,OACvBA,EAAIG,YAAcK,CAAc,IAGlClB,IAAM,MAANA,SAAM,SAANA,EAAQI,SAASC,IACfA,EAAMQ,YAAcK,EACpBb,EAAMU,YAAcA,EACpBV,EAAMW,YAAcA,CAAW,G,CAI3B,YAAAgD,GACNtG,KAAK6F,cACL7F,KAAKoC,uBACLpC,KAAKiE,iB,CAGP,iBAAAsC,GACEvG,KAAK6F,cACL7F,KAAKoC,uBACLpC,KAAKiE,iB,CAGP,kBAAAuC,GACExG,KAAKoD,kB,CAGP,MAAAqD,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAM,wBAAwBC,MAAO9G,KAAKmG,aAC9CO,EAAA,QAAAE,IAAA,2CAAMG,KAAK,SAASC,aAAc,IAAMhH,KAAKsG,iBAC7CI,EAAA,OAAAE,IAAA,2CAAKC,MAAM,YACTH,EAAA,QAAAE,IAAA,2CAAMI,aAAc,IAAMhH,KAAKsG,kB"}