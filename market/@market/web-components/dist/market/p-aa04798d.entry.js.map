{"version":3,"names":["marketStepperCss","MarketStepperStyle0","MarketStepper","valueChangeHandler","sanitized","this","sanitizeValue","value","updateButtonDisabledStates","setFocus","readonly","disabled","Promise","resolve","focused","inputEl","focus","blur","onChange","previousValue","nextValue","Number","parseFloat","isNaN","toString","emitChangeEvent","onInputFocus","emitInputFocusEvent","onDecrementClick","stepValue","step","onIncrementClick","onKeyDown","e","key","submitFormImplicitly","el","sanitizedValue","decimalPlaces","_a","split","length","hasMax","max","undefined","hasMin","min","Math","round","toFixed","hasValue","incrementDisabled","decrementDisabled","marketStepperValueChange","emit","marketStepperInputFocus","componentWillRender","render","h","Host","class","onFocus","onBlur","tabindex","onClick","decrementAriaLabel","width","height","viewBox","xmlns","d","ref","type","id","inputId","name","placeholder","inputAriaLabel","part","incrementAriaLabel"],"sources":["src/components/market-stepper/market-stepper.css?tag=market-stepper&encapsulation=shadow","src/components/market-stepper/market-stepper.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/field.css\";\n@import \"../../styles/mixins/field-states.css\";\n@import \"../../styles/mixins/number-input.css\";\n\n:host {\n  --focus-ring-color: color-mix(in srgb, var(--core-focus-ring-color) 100%, transparent);\n\n  @extend %field;\n  @extend %field-states;\n  @extend %number-input;\n\n  display: flex;\n  align-items: center;\n\n  input {\n    /* input height is the line-height + padding */\n    --stepper-quantity-input-field-height:\n      calc(\n        var(--stepper-quantity-input-field-value-text-leading) + var(--stepper-padding-size) * 2\n      );\n\n    position: relative;\n    bottom: 0;\n    width: 100%;\n    height: var(--stepper-quantity-input-field-height);\n    color: var(--stepper-quantity-input-field-value-text-normal-state-color);\n    font-weight: var(--stepper-quantity-input-field-value-text-weight);\n    font-size: var(--stepper-quantity-input-field-value-text-size);\n    font-family: var(--stepper-quantity-input-field-value-text-font-family);\n    line-height: var(--stepper-quantity-input-field-value-text-leading);\n    letter-spacing: var(--stepper-quantity-input-field-value-text-tracking);\n    text-align: center;\n    text-transform: var(--stepper-quantity-input-field-value-text-case);\n    cursor: text;\n    font-feature-settings: \"tnum\"; /* enable tabular (monospaced) figures */\n\n    &[disabled] {\n      color: var(--stepper-quantity-input-field-value-text-disabled-state-color);\n    }\n\n    &::placeholder {\n      color: var(--stepper-quantity-input-field-value-text-placeholder-color);\n    }\n  }\n}\n\n/* button hit area extends beyond the \"visual\" button */\nbutton {\n  --transition-duration: 0.2s;\n  --stepper-button-size: var(--stepper-button-minimum-height);\n\n  position: relative;\n  display: inline-flex;\n  flex-shrink: 0;\n  justify-content: center;\n  align-items: center;\n  box-sizing: content-box;\n  width: var(--stepper-button-size);\n  height: var(--stepper-button-size);\n  padding: var(--stepper-padding-size);\n  border: none;\n  border-radius: var(--stepper-border-radius);\n  background: none;\n  cursor: pointer;\n  transition: background-color color var(--transition-duration);\n\n  /* the actual \"visual\" button w/ background */\n  &::before {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    display: block;\n    margin: var(--stepper-padding-size);\n    border-radius: var(--stepper-button-border-radius);\n    background: var(--stepper-button-normal-state-background-color);\n  }\n\n  svg {\n    position: relative;\n    pointer-events: none;\n    fill: var(--stepper-button-normal-state-icon-color);\n  }\n\n  &:hover {\n    &::before {\n      background: var(--stepper-button-hover-state-background-color);\n    }\n\n    svg {\n      fill: var(--stepper-button-hover-state-icon-color);\n    }\n  }\n\n  &:focus {\n    outline: none;\n\n    &::before {\n      background: var(--stepper-button-focus-state-background-color);\n    }\n\n    svg {\n      fill: var(--stepper-button-focus-state-icon-color);\n    }\n  }\n\n  &:focus-visible {\n    &::before {\n      outline: var(--core-focus-ring-border-size) solid var(--focus-ring-color);\n      outline-offset: var(--core-focus-ring-border-size);\n    }\n  }\n\n  &:active {\n    &::before {\n      background: var(--stepper-button-pressed-state-background-color);\n    }\n\n    svg {\n      fill: var(--stepper-button-pressed-state-icon-color);\n    }\n  }\n\n  &[disabled] {\n    cursor: not-allowed;\n\n    &::before {\n      background: var(--stepper-button-disabled-state-background-color);\n    }\n\n    svg {\n      fill: var(--stepper-button-disabled-state-icon-color);\n    }\n  }\n}\n","import { Component, Host, h, Element, Prop, State, Method, Watch, Event, EventEmitter } from '@stencil/core';\n\nimport { submitFormImplicitly } from '../../utils/forms';\n\n/**\n * @part native-input - the native input element.\n */\n@Component({\n  tag: 'market-stepper',\n  styleUrl: 'market-stepper.css',\n  shadow: true,\n})\nexport class MarketStepper {\n  @Element() el: HTMLMarketStepperElement;\n\n  inputEl: HTMLInputElement;\n\n  /**\n   * The value for the input. This is visually shown on the input\n   * and can be edited by the user.\n   */\n  @Prop({ mutable: true, reflect: true }) value: number;\n\n  /**\n   * The ID for the inner input.\n   */\n  @Prop() readonly inputId: string;\n\n  /**\n   * The name for the inner input.\n   */\n  @Prop() readonly name: string;\n\n  /**\n   * The placeholder of the input. Shown before a user attempts to\n   * add a value, given no value is already provided.\n   */\n  @Prop() readonly placeholder: string = '0';\n\n  /**\n   * A number specifying the greatest value in the range of permitted values.\n   * (See MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max))\n   */\n  @Prop() readonly max: number;\n\n  /**\n   * A number specifying the most negative value in the range of permitted values.\n   * (See MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min))\n   */\n  @Prop() readonly min: number;\n\n  /**\n   * A positive number specifying the increment step.\n   * (See MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step))\n   */\n  @Prop() readonly step: number = 1;\n\n  /**\n   * Whether the input is readonly or not.\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean = false;\n\n  /**\n   * Whether the input is disabled or not.\n   * This visually and functionally disables the input.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * Whether the input is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * Whether the input is invalid or not. This represents error states.\n   */\n  @Prop({ reflect: true }) readonly invalid: boolean = false;\n\n  /**\n   * The inner input's aria-label. Localize as needed.\n   */\n  @Prop({ reflect: true }) readonly inputAriaLabel: string = 'Number';\n\n  /**\n   * The decrement button's aria-label. Localize as needed.\n   */\n  @Prop({ reflect: true }) readonly decrementAriaLabel: string = 'Decrement';\n\n  /**\n   * The increment button's aria-label. Localize as needed.\n   */\n  @Prop({ reflect: true }) readonly incrementAriaLabel: string = 'Increment';\n\n  @State() incrementDisabled: boolean = false;\n  @State() decrementDisabled: boolean = false;\n\n  /**\n   * Emitted when the value changes.\n   */\n  @Event() marketStepperValueChange: EventEmitter;\n\n  /**\n   * Emitted when the inner `<input>` element is focused.\n   */\n  @Event() marketStepperInputFocus: EventEmitter;\n\n  @Watch('value')\n  valueChangeHandler() {\n    // sanitize value in case it was set programmatically\n    const sanitized = this.sanitizeValue(this.value);\n    if (sanitized !== this.value) {\n      this.value = sanitized;\n    }\n    this.updateButtonDisabledStates();\n  }\n\n  /**\n   * Toggle focus styling on `<market-stepper>` and focus/blur the inner `<input />`.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    if (this.readonly || this.disabled) {\n      return Promise.resolve();\n    }\n    this.focused = value;\n    this.focused ? this.inputEl.focus() : this.inputEl.blur();\n    return Promise.resolve();\n  }\n\n  onChange(): void {\n    const previousValue = this.value;\n    let nextValue = Number.parseFloat(this.inputEl.value);\n\n    if (Number.isNaN(nextValue)) {\n      // not a valid number, so reset it to null/empty\n      nextValue = null;\n      this.inputEl.value = '';\n    } else {\n      // a valid number, so sanitize it against min/max/step props\n      nextValue = this.sanitizeValue(nextValue);\n      this.inputEl.value = nextValue.toString();\n    }\n\n    // if value has changed, set it and emit event\n    if (nextValue !== previousValue) {\n      this.value = nextValue;\n      this.emitChangeEvent(previousValue);\n    }\n  }\n\n  onInputFocus(): void {\n    this.emitInputFocusEvent();\n  }\n\n  onDecrementClick(): void {\n    this.stepValue(-this.step);\n  }\n\n  onIncrementClick(): void {\n    this.stepValue(this.step);\n  }\n\n  onKeyDown(e: KeyboardEvent) {\n    if (e.key === 'Enter') {\n      submitFormImplicitly(this.el);\n    }\n  }\n\n  stepValue(step: number): void {\n    const previousValue = this.value;\n    const nextValue = (previousValue || 0) + step;\n    const sanitizedValue = this.sanitizeValue(nextValue);\n    if (sanitizedValue !== previousValue) {\n      this.value = sanitizedValue;\n      this.emitChangeEvent(previousValue);\n    }\n  }\n\n  sanitizeValue(value: number): number {\n    const decimalPlaces = this.step.toString().split('.')[1]?.length || 0;\n    const hasMax = this.max !== null && this.max !== undefined;\n    const hasMin = this.min !== null && this.min !== undefined;\n\n    // round value to the nearest step\n    let sanitized = Math.round(value / this.step) * this.step;\n    // correct any floating point math errors\n    sanitized = Number.parseFloat(sanitized.toFixed(decimalPlaces));\n    // limit value to max\n    sanitized = hasMax ? Math.min(sanitized, this.max) : sanitized;\n    // limit value to min\n    return hasMin ? Math.max(sanitized, this.min) : sanitized;\n  }\n\n  updateButtonDisabledStates() {\n    const { value, max, min } = this;\n    const hasValue = value !== null && value !== undefined;\n    this.incrementDisabled = hasValue ? value === max : false;\n    this.decrementDisabled = hasValue ? value === min : false;\n  }\n\n  emitChangeEvent(previousValue) {\n    const { el, value, marketStepperValueChange } = this;\n    marketStepperValueChange.emit({ el, value, previousValue });\n  }\n\n  emitInputFocusEvent() {\n    const { marketStepperInputFocus } = this;\n    marketStepperInputFocus.emit();\n  }\n\n  componentWillRender() {\n    this.updateButtonDisabledStates();\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-stepper\"\n        onFocus={() => {\n          this.focused = true;\n        }}\n        onBlur={() => {\n          this.focused = false;\n        }}\n      >\n        <button\n          tabindex={this.disabled || this.decrementDisabled ? -1 : null}\n          disabled={this.disabled || this.decrementDisabled}\n          onClick={() => this.onDecrementClick()}\n          aria-label={this.decrementAriaLabel}\n        >\n          <svg width=\"10\" height=\"2\" viewBox=\"0 0 10 2\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M9.66667 0.333328H0.333336V1.66666H9.66667V0.333328Z\" />\n          </svg>\n        </button>\n        <input\n          ref={(el) => (this.inputEl = el)}\n          type=\"number\"\n          id={this.inputId}\n          name={this.name}\n          readonly={this.readonly}\n          disabled={this.disabled}\n          placeholder={this.placeholder}\n          step={this.step}\n          min={this.min}\n          max={this.max}\n          value={this.value}\n          aria-label={this.inputAriaLabel}\n          onChange={() => this.onChange()}\n          onFocus={() => this.onInputFocus()}\n          onKeyDown={(e) => this.onKeyDown(e)}\n          part=\"native-input\"\n        />\n        <button\n          tabindex={this.disabled || this.incrementDisabled ? -1 : null}\n          disabled={this.disabled || this.incrementDisabled}\n          onClick={() => this.onIncrementClick()}\n          aria-label={this.incrementAriaLabel}\n        >\n          <svg width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M5.66665 9.66666V5.66666H9.66665V4.33333H5.66665V0.333328H4.33331V4.33333H0.333313V5.66666H4.33331V9.66666H5.66665Z\" />\n          </svg>\n        </button>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}