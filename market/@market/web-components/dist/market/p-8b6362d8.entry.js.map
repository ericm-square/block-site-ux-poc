{"version":3,"names":["getRowInActionCard","actionCardEl","children","find","isRowElement","marketActionCardCss","MarketActionCardStyle0","MarketActionCard","handleRowSelection","e","this","select","stopPropagation","handleRowDeselection","deselect","selected","_a","rowEl","silentlySelect","defaultPrevented","marketCardSelected","emit","value","_b","silentlyDeselect","marketCardDeselected","Promise","resolve","isContentEditable","el","inputTagnames","some","str","tagName","includes","handleClick","target","disabled","transient","handleKeydown","key","preventDefault","click","syncRowAttributes","interactive","removeAttribute","handleSlotChangeDefault","classList","toggle","Boolean","componentDidRender","render","h","Host","class","onClick","bind","onKeydown","role","tabindex","onSlotchange"],"sources":["src/components/market-action-card/utils.ts","src/components/market-action-card/market-action-card.css?tag=market-action-card&encapsulation=shadow","src/components/market-action-card/market-action-card.tsx"],"sourcesContent":["import { isRowElement } from '../../utils/element-type-guard';\n\n/**\n * Finds the row that's slotted in the action card\n *\n * @param {HTMLMarketActionCardElement} actionCardEl - the action card element\n * @returns {HTMLMarketRowElement | null} the row element, if found\n */\nexport function getRowInActionCard(actionCardEl: HTMLMarketActionCardElement): HTMLMarketRowElement | null {\n  if (!actionCardEl?.children) {\n    return null;\n  }\n  return [...actionCardEl.children].find(isRowElement);\n}\n","@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  --focus-ring-color: color-mix(in srgb, var(--action-card-focus-ring-color) 100%, transparent);\n\n  display: block;\n  padding: var(--action-card-padding-vertical-size) var(--action-card-padding-horizontal-size);\n  border-radius: var(--action-card-border-radius);\n  background-color: var(--action-card-background-color);\n  box-shadow:\n    inset\n    0\n    0\n    0\n    var(--action-card-normal-state-unselected-value-border-width)\n    var(--action-card-normal-state-unselected-value-border-color);\n  opacity: var(--action-card-normal-state-content-opacity);\n  cursor: pointer;\n\n  &(:hover) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-hover-state-unselected-value-border-width)\n      var(--action-card-hover-state-unselected-value-border-color);\n  }\n\n  &(:active) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-active-state-unselected-value-border-width)\n      var(--action-card-active-state-unselected-value-border-color);\n  }\n\n  &([disabled]) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-disabled-state-unselected-value-border-width)\n      var(--action-card-disabled-state-unselected-value-border-color);\n    opacity: var(--action-card-disabled-state-content-opacity);\n  }\n\n  &([selected]) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-normal-state-selected-value-border-width)\n      var(--action-card-normal-state-selected-value-border-color);\n  }\n\n  &([selected]:hover) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-hover-state-selected-value-border-width)\n      var(--action-card-hover-state-selected-value-border-color);\n  }\n\n  &([selected]:active) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-active-state-selected-value-border-width)\n      var(--action-card-active-state-selected-value-border-color);\n  }\n\n  &([selected][disabled]) {\n    box-shadow:\n      inset\n      0\n      0\n      0\n      var(--action-card-disabled-state-selected-value-border-width)\n      var(--action-card-disabled-state-selected-value-border-color);\n  }\n\n  &(.has-slotted-row) {\n    padding: 0 var(--row-background-horizontal-outset-padding);\n\n    ::slotted(.market-row) {\n      /* rows used inside action cards are interactive but should not have interactive styles */\n      /* stylelint-disable max-line-length */\n      --row-normal-variant-hover-state-text-color: var(--row-normal-variant-normal-state-text-color);\n      --row-normal-variant-hover-state-subtext-color: var(--row-normal-variant-normal-state-subtext-color);\n      --row-normal-variant-hover-state-side-text-primary-color: var(--row-normal-variant-normal-state-side-text-primary-color);\n      --row-normal-variant-hover-state-side-text-secondary-color: var(--row-normal-variant-normal-state-side-text-secondary-color);\n      --row-normal-variant-selected-state-text-color: var(--row-normal-variant-normal-state-text-color);\n      --row-normal-variant-selected-state-subtext-color: var(--row-normal-variant-normal-state-subtext-color);\n      --row-normal-variant-selected-state-side-text-primary-color: var(--row-normal-variant-normal-state-side-text-primary-color);\n      --row-normal-variant-selected-state-side-text-secondary-color: var(--row-normal-variant-normal-state-side-text-secondary-color);\n      --row-normal-variant-pressed-state-text-color: var(--row-normal-variant-normal-state-text-color);\n      --row-normal-variant-pressed-state-subtext-color: var(--row-normal-variant-normal-state-subtext-color);\n      --row-normal-variant-pressed-state-side-text-primary-color: var(--row-normal-variant-normal-state-side-text-primary-color);\n      --row-normal-variant-pressed-state-side-text-secondary-color: var(--row-normal-variant-normal-state-side-text-secondary-color);\n      /* stylelint-enable max-line-length */\n\n      /* since .market-rowâ€™s .container already has a padding, add some more */\n      padding-right:\n        calc(\n          var(--action-card-padding-horizontal-size) -\n          var(--row-normal-variant-background-horizontal-outset-padding)\n        );\n      padding-left:\n        calc(\n          var(--action-card-padding-horizontal-size) -\n          var(--row-normal-variant-background-horizontal-outset-padding)\n        );\n      background-color: transparent;\n    }\n  }\n\n  &(:focus-visible) {\n    outline: var(--action-card-focus-ring-border-size) solid var(--focus-ring-color);\n    outline-offset: var(--action-card-focus-ring-buffer-size);\n  }\n}\n","import { Component, Element, Event, EventEmitter, Host, h, Listen, Method, Prop } from '@stencil/core';\n\nimport { TMarketActionCardDeselectedEventDetail, TMarketActionCardSelectedEventDetail } from './events';\nimport { getRowInActionCard } from './utils';\n\n/**\n * @slot - Optimized for use w/ slotted `<market-row>`s but can take any content. All slotted `market-row`s will automatically be set to interactive mode.\n */\n@Component({\n  tag: 'market-action-card',\n  styleUrl: 'market-action-card.css',\n  shadow: true,\n})\nexport class MarketActionCard {\n  rowEl: HTMLMarketRowElement;\n\n  @Element() el: HTMLMarketActionCardElement;\n\n  /**\n   * Whether the action card is selected or not.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  /**\n   * Visually and functionally disables the action card.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * A string specifying a value for the action card.\n   */\n  @Prop({ reflect: true }) readonly value: string;\n\n  /**\n   * When set to `true`, card will not persist selected state on click.\n   */\n  @Prop() readonly transient: boolean = false;\n\n  /**\n   * Fired whenever the action card is selected.\n   */\n  @Event({ bubbles: true, composed: true }) marketCardSelected: EventEmitter<TMarketActionCardSelectedEventDetail>;\n\n  /**\n   * Fired whenever the action card is deselected.\n   */\n  @Event({ bubbles: true, composed: true }) marketCardDeselected: EventEmitter<TMarketActionCardDeselectedEventDetail>;\n\n  /**\n   * When rows are slotted into cards, we want to catch their selection events\n   * and emit our own, so that the containing `market-list` only gets one set\n   * of selection events.\n   */\n  @Listen('marketRowSelected')\n  handleRowSelection(e: CustomEvent) {\n    this.select();\n    // Prevent `marketRowSelected` from bubbling up to containing lists, since we expect\n    // them to listen to our card selection events instead.\n    e.stopPropagation();\n  }\n\n  /**\n   * When rows are slotted into cards, we want to catch their selection events\n   * and emit our own, so that the containing `market-list` only gets one set\n   * of selection events.\n   */\n  @Listen('marketRowDeselected')\n  handleRowDeselection(e: CustomEvent) {\n    this.deselect();\n    // Prevent `marketRowSelected` from bubbling up to containing lists, since we expect\n    // them to listen to our card selection events instead.\n    e.stopPropagation();\n  }\n\n  /**\n   * Set `selected` to `true` and emit `marketCardSelected`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async select() {\n    this.selected = true;\n    await this.rowEl?.silentlySelect();\n    const { defaultPrevented } = this.marketCardSelected.emit({ value: this.value });\n    if (defaultPrevented) {\n      this.selected = false;\n      await this.rowEl?.silentlyDeselect();\n    }\n  }\n\n  /**\n   * Set `selected` to `false` and emit `marketCardDeselected`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async deselect() {\n    this.selected = false;\n    await this.rowEl?.silentlyDeselect();\n    const { defaultPrevented } = this.marketCardDeselected.emit({ value: this.value });\n    if (defaultPrevented) {\n      this.selected = true;\n      await this.rowEl?.silentlySelect();\n    }\n  }\n\n  /**\n   * Used for setting the selection state to true without emitting events.\n   * Useful for scenarios where another component (ex. `<market-list>`) needs\n   * to sync state with slotted `<market-action-card>`s.\n   */\n  @Method()\n  async silentlySelect() {\n    this.selected = true;\n    await this.rowEl?.silentlySelect();\n    return Promise.resolve();\n  }\n\n  /**\n   * Set `selected` to `false`. Generally speaking,\n   * it is preferable to avoid using this method from outside this component\n   * and allow `market-action-card` to manage its own selection state based on user\n   * interaction. It should only be used for parent components that need to\n   * manage a group of rows, such as `market-list`.\n   */\n  @Method()\n  async silentlyDeselect() {\n    this.selected = false;\n    await this.rowEl?.silentlyDeselect();\n    return Promise.resolve();\n  }\n\n  isContentEditable(el) {\n    // check whether element (Market or HTML) accepts text input\n    const inputTagnames = ['input', 'textarea'];\n    return inputTagnames.some((str) => el.tagName.includes(str)) || el.isContentEditable;\n  }\n\n  handleClick(e) {\n    // clicks to text inputs should not select action card\n    if (this.isContentEditable(e.target)) {\n      return;\n    }\n\n    // Rows handle selected state when slotted. The only way you can click directly on\n    // the card is by clicking the border, and we want to just ignore that edge case.\n    if (this.disabled || this.transient || this.rowEl) {\n      return;\n    }\n\n    if (!this.selected) {\n      this.select();\n    } else {\n      this.deselect();\n    }\n  }\n\n  handleKeydown(e: KeyboardEvent) {\n    // user should be able to type normally in text inputs\n    if (this.isContentEditable(e.target)) {\n      return;\n    }\n\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault(); // prevents scroll down when Space is pressed\n      if (this.rowEl) {\n        this.rowEl.click();\n      } else {\n        this.el.click();\n      }\n    }\n  }\n\n  syncRowAttributes() {\n    if (!this.rowEl) {\n      return;\n    }\n    this.rowEl.interactive = true;\n    this.rowEl.selected = this.selected;\n    this.rowEl.removeAttribute('tabIndex');\n  }\n\n  handleSlotChangeDefault() {\n    this.rowEl = getRowInActionCard(this.el);\n    this.el.classList.toggle('has-slotted-row', Boolean(this.rowEl));\n    this.syncRowAttributes();\n  }\n\n  componentDidRender() {\n    // slotted rows inside action cards should not be able to receive focus because\n    // they are controlled by interaction w/ the action card\n    if (this.rowEl) {\n      this.rowEl.removeAttribute('tabIndex');\n    }\n  }\n\n  render() {\n    return (\n      <Host\n        aria-selected={this.selected}\n        class=\"market-action-card\"\n        onClick={this.handleClick.bind(this)}\n        onKeydown={this.handleKeydown.bind(this)}\n        role=\"option\"\n        tabindex={this.disabled ? null : '0'}\n      >\n        <slot onSlotchange={() => this.handleSlotChangeDefault()}></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"qIAQgBA,EAAmBC,GACjC,KAAKA,IAAY,MAAZA,SAAY,SAAZA,EAAcC,UAAU,CAC3B,OAAO,I,CAET,MAAO,IAAID,EAAaC,UAAUC,KAAKC,EACzC,CCbA,MAAMC,EAAsB,8lIAC5B,MAAAC,EAAeD,E,MCYFE,EAAgB,M,yJAQiC,M,cAKN,M,oCAUhB,K,CAkBtC,kBAAAC,CAAmBC,GACjBC,KAAKC,SAGLF,EAAEG,iB,CASJ,oBAAAC,CAAqBJ,GACnBC,KAAKI,WAGLL,EAAEG,iB,CAWJ,YAAMD,G,QACJD,KAAKK,SAAW,YACVC,EAAAN,KAAKO,SAAK,MAAAD,SAAA,SAAAA,EAAEE,kBAClB,MAAMC,iBAAEA,GAAqBT,KAAKU,mBAAmBC,KAAK,CAAEC,MAAOZ,KAAKY,QACxE,GAAIH,EAAkB,CACpBT,KAAKK,SAAW,aACVQ,EAAAb,KAAKO,SAAK,MAAAM,SAAA,SAAAA,EAAEC,mB,EAYtB,cAAMV,G,QACJJ,KAAKK,SAAW,aACVC,EAAAN,KAAKO,SAAK,MAAAD,SAAA,SAAAA,EAAEQ,oBAClB,MAAML,iBAAEA,GAAqBT,KAAKe,qBAAqBJ,KAAK,CAAEC,MAAOZ,KAAKY,QAC1E,GAAIH,EAAkB,CACpBT,KAAKK,SAAW,YACVQ,EAAAb,KAAKO,SAAK,MAAAM,SAAA,SAAAA,EAAEL,iB,EAUtB,oBAAMA,G,MACJR,KAAKK,SAAW,YACVC,EAAAN,KAAKO,SAAK,MAAAD,SAAA,SAAAA,EAAEE,kBAClB,OAAOQ,QAAQC,S,CAWjB,sBAAMH,G,MACJd,KAAKK,SAAW,aACVC,EAAAN,KAAKO,SAAK,MAAAD,SAAA,SAAAA,EAAEQ,oBAClB,OAAOE,QAAQC,S,CAGjB,iBAAAC,CAAkBC,GAEhB,MAAMC,EAAgB,CAAC,QAAS,YAChC,OAAOA,EAAcC,MAAMC,GAAQH,EAAGI,QAAQC,SAASF,MAASH,EAAGD,iB,CAGrE,WAAAO,CAAY1B,GAEV,GAAIC,KAAKkB,kBAAkBnB,EAAE2B,QAAS,CACpC,M,CAKF,GAAI1B,KAAK2B,UAAY3B,KAAK4B,WAAa5B,KAAKO,MAAO,CACjD,M,CAGF,IAAKP,KAAKK,SAAU,CAClBL,KAAKC,Q,KACA,CACLD,KAAKI,U,EAIT,aAAAyB,CAAc9B,GAEZ,GAAIC,KAAKkB,kBAAkBnB,EAAE2B,QAAS,CACpC,M,CAGF,GAAI3B,EAAE+B,MAAQ,SAAW/B,EAAE+B,MAAQ,IAAK,CACtC/B,EAAEgC,iBACF,GAAI/B,KAAKO,MAAO,CACdP,KAAKO,MAAMyB,O,KACN,CACLhC,KAAKmB,GAAGa,O,GAKd,iBAAAC,GACE,IAAKjC,KAAKO,MAAO,CACf,M,CAEFP,KAAKO,MAAM2B,YAAc,KACzBlC,KAAKO,MAAMF,SAAWL,KAAKK,SAC3BL,KAAKO,MAAM4B,gBAAgB,W,CAG7B,uBAAAC,GACEpC,KAAKO,MAAQjB,EAAmBU,KAAKmB,IACrCnB,KAAKmB,GAAGkB,UAAUC,OAAO,kBAAmBC,QAAQvC,KAAKO,QACzDP,KAAKiC,mB,CAGP,kBAAAO,GAGE,GAAIxC,KAAKO,MAAO,CACdP,KAAKO,MAAM4B,gBAAgB,W,EAI/B,MAAAM,GACE,OACEC,EAACC,EAAI,CAAAb,IAAA,2DACY9B,KAAKK,SACpBuC,MAAM,qBACNC,QAAS7C,KAAKyB,YAAYqB,KAAK9C,MAC/B+C,UAAW/C,KAAK6B,cAAciB,KAAK9C,MACnCgD,KAAK,SACLC,SAAUjD,KAAK2B,SAAW,KAAO,KAEjCe,EAAA,QAAAZ,IAAA,2CAAMoB,aAAc,IAAMlD,KAAKoC,4B"}