{
  "timestamp": "2025-01-24T20:34:15",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.18.0",
    "typescriptVersion": "5.4.5"
  },
  "components": [
    {
      "filePath": "src/components/market-accessory/market-accessory.tsx",
      "encapsulation": "shadow",
      "tag": "market-accessory",
      "readme": "# market-accessory\n\n`<market-accessory>` is used to display a slotted image or icon, and is intended to be used as a slotted leading or trailing accessory in `<market-row>` and `<market-input-text>`.\n",
      "docs": "`<market-accessory>` is used to display a slotted image or icon, and is intended to be used as a slotted leading or trailing accessory in `<market-row>` and `<market-input-text>`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Intended for a slotted image or icon."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"icon\" | \"image\"",
          "complexType": {
            "original": "'icon' | 'image'",
            "resolved": "\"icon\" | \"image\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The desired size for the leading or trailing accessory, which we expect to\nbe either an image or a <market-icon> component. The available sizes are\n\"icon\" (24x24) and \"image\" (40x40).",
          "docsTags": [],
          "values": [
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "image",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Intended for a slotted image or icon."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-accordion-item/market-accordion-item.tsx",
      "encapsulation": "shadow",
      "tag": "market-accordion-item",
      "readme": "# market-accordion-item\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the accordion should appear in a disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "Determines whether the accordion is shown as expanded or collapsed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The unique name of the accordion.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The size of the heading text of the accordion.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setDisabled",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setDisabled(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `disabled` state. Allows external elements to programmatically trigger disabled styling.",
          "docsTags": []
        },
        {
          "name": "setExpanded",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newExpanded: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "newExpanded",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setExpanded(newExpanded: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "newExpanded",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Used to set the \"open\" state of the accordion.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketAccordionItemExpandedChange",
          "detail": "{ expanded: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ expanded: boolean }",
            "resolved": "{ expanded: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the \"expanded\" prop value changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketAccordionToggled",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-action-card/market-action-card.tsx",
      "encapsulation": "shadow",
      "tag": "market-action-card",
      "readme": "# market-action-card\n\n`<market-action-card>` is intended for card scenarios that are either \"action-oriented\" or \"selectable\". The entire card is a touch target with an elevated treatment intended to make the card appear to be tappable.\n\nYou can slot `<market-row>` (with or without slotted controls like `<market-radio>` or `<market-checkbox>`) into `<market-action-card>`.\n\n`<market-action-card>` can be used inside of `<market-list>`.\n",
      "docs": "`<market-action-card>` is intended for card scenarios that are either \"action-oriented\" or \"selectable\". The entire card is a touch target with an elevated treatment intended to make the card appear to be tappable.\n\nYou can slot `<market-row>` (with or without slotted controls like `<market-radio>` or `<market-checkbox>`) into `<market-action-card>`.\n\n`<market-action-card>` can be used inside of `<market-list>`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Optimized for use w/ slotted `<market-row>`s but can take any content. All slotted `market-row`s will automatically be set to interactive mode."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Visually and functionally disables the action card.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether the action card is selected or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "transient",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "transient",
          "reflectToAttr": false,
          "docs": "When set to `true`, card will not persist selected state on click.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the action card.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "deselect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "deselect() => Promise<void>",
          "parameters": [],
          "docs": "Set `selected` to `false` and emit `marketCardDeselected`. Generally speaking,\nit is preferable to avoid using this method from outside this component\nand allow `market-action-card` to manage its own selection state based on user\ninteraction. It should only be used for parent components that need to\nmanage a group of rows, such as `market-list`.",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "select() => Promise<void>",
          "parameters": [],
          "docs": "Set `selected` to `true` and emit `marketCardSelected`. Generally speaking,\nit is preferable to avoid using this method from outside this component\nand allow `market-action-card` to manage its own selection state based on user\ninteraction. It should only be used for parent components that need to\nmanage a group of rows, such as `market-list`.",
          "docsTags": []
        },
        {
          "name": "silentlyDeselect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "silentlyDeselect() => Promise<void>",
          "parameters": [],
          "docs": "Set `selected` to `false`. Generally speaking,\nit is preferable to avoid using this method from outside this component\nand allow `market-action-card` to manage its own selection state based on user\ninteraction. It should only be used for parent components that need to\nmanage a group of rows, such as `market-list`.",
          "docsTags": []
        },
        {
          "name": "silentlySelect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "silentlySelect() => Promise<void>",
          "parameters": [],
          "docs": "Used for setting the selection state to true without emitting events.\nUseful for scenarios where another component (ex. `<market-list>`) needs\nto sync state with slotted `<market-action-card>`s.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketCardDeselected",
          "detail": "{ value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketActionCardDeselectedEventDetail",
            "resolved": "{ value: string; }",
            "references": {
              "TMarketActionCardDeselectedEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-action-card/events.ts::TMarketActionCardDeselectedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the action card is deselected.",
          "docsTags": []
        },
        {
          "event": "marketCardSelected",
          "detail": "{ value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketActionCardSelectedEventDetail",
            "resolved": "{ value: string; }",
            "references": {
              "TMarketActionCardSelectedEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-action-card/events.ts::TMarketActionCardSelectedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the action card is selected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketRowSelected",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketRowDeselected",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Optimized for use w/ slotted `<market-row>`s but can take any content. All slotted `market-row`s will automatically be set to interactive mode."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-activity-indicator/market-activity-indicator.tsx",
      "encapsulation": "shadow",
      "tag": "market-activity-indicator",
      "readme": "# market-activity-indicator\nA component used to model a radial activity indicator, to be used inside other components.",
      "docs": "A component used to model a radial activity indicator, to be used inside other components.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'small'",
            "resolved": "\"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting activity indicator size",
          "docsTags": [],
          "default": "'large'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-activity-indicator-bar/market-activity-indicator-bar.tsx",
      "encapsulation": "shadow",
      "tag": "market-activity-indicator-bar",
      "readme": "# market-activity-indicator-bar\nA component used to model an activity bar indicator, to be used inside other components.",
      "docs": "A component used to model an activity bar indicator, to be used inside other components.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum value of the activity bar",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value the activity bar should report",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-banner/market-banner.tsx",
      "encapsulation": "shadow",
      "tag": "market-banner",
      "readme": "# market-banner\n\nmarket-banner displays a message and has the option to add a dismiss button or another action button.\n\n",
      "docs": "market-banner displays a message and has the option to add a dismiss button or another action button.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The text for the banner"
        },
        {
          "name": "slot",
          "text": "title - Optional title text for the banner"
        },
        {
          "name": "slot",
          "text": "action - for `<a href>` or `<button>` (not a `<market-button>`)"
        },
        {
          "name": "slot",
          "text": "icon - for use with a custom icon"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "dismissButtonAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dismiss-button-aria-label",
          "reflectToAttr": true,
          "docs": "Optional property to pass a string to the dismiss \"x\"\nthat will function as its aria-label. Defaults to \"Dismiss\".",
          "docsTags": [],
          "default": "'Dismiss'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dismissable",
          "reflectToAttr": true,
          "docs": "whether to show the dismiss \"x\" or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconImageTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-image-title",
          "reflectToAttr": false,
          "docs": "Title for the icon image, used as the accessible name for the icon.\nIf a custom icon is provided, this prop is ignored.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"critical\" | \"info\" | \"insight\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'info' | 'success' | 'warning' | 'critical' | 'insight'",
            "resolved": "\"critical\" | \"info\" | \"insight\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "banner variant that corresponds to the type of info it is conveying",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "critical",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "insight",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketBannerDismissed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the banner's dismiss button is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The text for the banner"
        },
        {
          "name": "action",
          "docs": "for `<a href>` or `<button>` (not a `<market-button>`)"
        },
        {
          "name": "icon",
          "docs": "for use with a custom icon"
        },
        {
          "name": "title",
          "docs": "Optional title text for the banner"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-blade/market-blade.tsx",
      "encapsulation": "shadow",
      "tag": "market-blade",
      "readme": "# market-blade\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The main content of the blade. Use `<section class=\"main\">` tag."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animationDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-duration",
          "reflectToAttr": false,
          "docs": "DEPRECATED: The duration for the blade enter/exit animations, set from design tokens",
          "docsTags": [],
          "default": "CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animationEnterDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-enter-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal enter animation, set from design tokens",
          "docsTags": [],
          "default": "CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animationExitDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-exit-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal exit animation, set from design tokens",
          "docsTags": [],
          "default": "CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dialogID",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "data-dialog-id",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used in CSS to trigger start and stop animations",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "data-dialog-index",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place\nin the stack",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trapFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "trap-focus",
          "reflectToAttr": false,
          "docs": "Enforces focus trapping on the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "activateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "Options",
                "docs": "[focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
              },
              {
                "name": "activateOptions",
                "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
                "docs": "set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapOptions"
              },
              "FocusTrapActivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapActivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "Options",
              "docs": "[focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "activateOptions",
              "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
              "docs": "set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ],
          "docs": "Activates the focus trap\n\nSee [`focus-trap.ts`](../../utils/focus-trap.ts) for default options",
          "docsTags": [
            {
              "name": "param",
              "text": "options [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "param",
              "text": "activateOptions set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ]
        },
        {
          "name": "deactivateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "deactivateOptions",
                "type": "DeactivateOptions",
                "docs": "set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapDeactivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapDeactivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "deactivateOptions",
              "type": "DeactivateOptions",
              "docs": "set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ],
          "docs": "Deactivates the focus trap",
          "docsTags": [
            {
              "name": "param",
              "text": "deactivateOptions set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ]
        },
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>",
            "parameters": [
              {
                "name": "dismissOptions",
                "type": "{ dialog?: DialogElement; type?: \"dialog\" | \"modal-full\" | \"modal-partial\" | \"blade\" | \"sheet\"; origin?: HTMLElement; }",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "dismiss(dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>",
          "parameters": [
            {
              "name": "dismissOptions",
              "type": "{ dialog?: DialogElement; type?: \"dialog\" | \"modal-full\" | \"modal-partial\" | \"blade\" | \"sheet\"; origin?: HTMLElement; }",
              "docs": ""
            }
          ],
          "docs": "Emits the dismiss event\nThe parent context will handle actually removing elements from the DOM,\nAll the blade needs to do it emit an event so actually closing it can be\nsome other elements problem",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketDialogDidDismiss",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the dialog is fully dismissed",
          "docsTags": []
        },
        {
          "event": "marketDialogDismissed",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the blade is dismissed, handled by context manager",
          "docsTags": []
        },
        {
          "event": "marketDialogLoaded",
          "detail": "DialogLoadedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogLoadedEvent",
            "resolved": "DialogLoadedEvent",
            "references": {
              "DialogLoadedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogLoadedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the blade finishes loading",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketHeaderNavigate",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The main content of the blade. Use `<section class=\"main\">` tag."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-button/market-button.tsx",
      "encapsulation": "shadow",
      "tag": "market-button",
      "readme": "# market-button\n\nIn addition to being a button, `market-button` is also our very first Market component!\n\n### Conditional link rendering\n\nIf you pass an `href` property, `market-button` will render an anchor (`a`) tag for its inner element instead of the default `button` tag, and update the ARIA role to \"link\".\n",
      "docs": "In addition to being a button, `market-button` is also our very first Market component!",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The text used for the button label"
        },
        {
          "name": "slot",
          "text": "icon - an icon that is to the left of button text, or centered if there is no text"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "caret",
          "type": "\"down\" | \"none\" | \"up\"",
          "complexType": {
            "original": "'up' | 'down' | 'none'",
            "resolved": "\"down\" | \"none\" | \"up\"",
            "references": {}
          },
          "mutable": false,
          "attr": "caret",
          "reflectToAttr": false,
          "docs": "String for setting (optional) button caret direction",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "down",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "up",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "Causes the browser to treat the linked URL as a download. Only works for same-origin URLs.\nOnly applies when an `href` is provided.\nSee [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download) for details on accepted values.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether or not the button is in a focused state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "icon-only",
          "reflectToAttr": true,
          "docs": "Whether the button only contains an icon.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "innerTabindex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "inner-tabindex",
          "reflectToAttr": false,
          "docs": "Optionally set a custom tabindex on the inner HTML `<button>`.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-loading",
          "reflectToAttr": true,
          "docs": "Whether or not the button is in a loading state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rank",
          "type": "\"primary\" | \"secondary\" | \"tertiary\"",
          "complexType": {
            "original": "'primary' | 'secondary' | 'tertiary'",
            "resolved": "\"primary\" | \"secondary\" | \"tertiary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "rank",
          "reflectToAttr": true,
          "docs": "String for setting button rank",
          "docsTags": [],
          "default": "'secondary'",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Defines the relationship between a linked resource and the current document.\nOnly applies when an `href` is provided.\nSee [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel) for details on accepted values.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting button size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
          "complexType": {
            "original": "'_blank' | '_self' | '_parent' | '_top' | undefined",
            "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSee [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_parent",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'button' | 'reset' | 'submit'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "String for setting button type",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"destructive\" | \"regular\"",
          "complexType": {
            "original": "'regular' | 'destructive'",
            "resolved": "\"destructive\" | \"regular\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "String for setting button variant",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "destructive",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `focused` state, except when disabled. Allows external consumers to programmatically\ntrigger focused styling.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The text used for the button label"
        },
        {
          "name": "icon",
          "docs": "an icon that is to the left of button text, or centered if there is no text"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-button-dropdown/market-button-dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "market-button-dropdown",
      "readme": "# market-button-dropdown\n\nThis component uses `<market-dropdown>` to create a component that has a `<market-button>` and slotted content. Interacting with the button will open the slotted content in a `<market-popover>` which is positioned using Popper.js.\n\nTo tweak the position of the dropdown button's popover, you can style `market-button-dropdown::part(popover)` directly using CSS.\n",
      "docs": "This component uses `<market-dropdown>` to create a component that has a `<market-button>` and slotted content. Interacting with the button will open the slotted content in a `<market-popover>` which is positioned using Popper.js.\n\nTo tweak the position of the dropdown button's popover, you can style `market-button-dropdown::part(popover)` directly using CSS.",
      "docsTags": [
        {
          "name": "slot",
          "text": "trigger - Expects a slotted `market-button` or `market-filter-button`."
        },
        {
          "name": "slot",
          "text": "content - Content slotted here will appear in `market-popover`, which\nbecomes visible when the slotted trigger content is interacted with."
        },
        {
          "name": "part",
          "text": "popover - The inner market-popover."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the button dropdown.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interaction",
          "type": "\"click\" | \"hover\" | \"persistent\"",
          "complexType": {
            "original": "'click' | 'hover' | 'persistent'",
            "resolved": "\"click\" | \"hover\" | \"persistent\"",
            "references": {}
          },
          "mutable": false,
          "attr": "interaction",
          "reflectToAttr": false,
          "docs": "Defines what types of interaction the button dropdown should have\n(see `market-dropdown` docs for more granular explanation)",
          "docsTags": [],
          "default": "'click'",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "persistent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noCaret",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "no-caret",
          "reflectToAttr": false,
          "docs": "Disabling the up/down caret.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "persistListSelections",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "persist-list",
          "reflectToAttr": false,
          "docs": "Disables the default behavior of *not* persisting selections in slotted `market-list`s.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverPlacement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::Placement"
              }
            }
          },
          "mutable": false,
          "attr": "popover-placement",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDescribes the preferred placement of the popper.\nhttps://popper.js.org/docs/v2/constructors//#placement",
          "docsTags": [],
          "default": "'bottom-end'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverStrategy",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "PositioningStrategy",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "PositioningStrategy": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::PositioningStrategy"
              }
            }
          },
          "mutable": false,
          "attr": "popover-strategy",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDescribes the positioning strategy to use. By default, it is absolute. If\nyour reference element is in a fixed container, use the fixed strategy.\nhttps://popper.js.org/docs/v2/constructors//#strategy",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketButtonDropdownClosed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the button dropdown is closed.",
          "docsTags": []
        },
        {
          "event": "marketButtonDropdownOpened",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the button dropdown is opened.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketDropdownOpened",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDropdownClosed",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "Content slotted here will appear in `market-popover`, which\nbecomes visible when the slotted trigger content is interacted with."
        },
        {
          "name": "trigger",
          "docs": "Expects a slotted `market-button` or `market-filter-button`."
        }
      ],
      "parts": [
        {
          "name": "popover",
          "docs": "The inner market-popover."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-button-group/market-button-group.tsx",
      "encapsulation": "shadow",
      "tag": "market-button-group",
      "readme": "# market-button-group\n\nA component to organize and maintain multiple buttons within a page or component. It handles button alignment and button overflow based on screen size. Should be used with the <market-button> component.\n",
      "docs": "A component to organize and maintain multiple buttons within a page or component. It handles button alignment and button overflow based on screen size. Should be used with the <market-button> component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Intended to slot any number of `<market-button>` components here."
        },
        {
          "name": "slot",
          "text": "overflow-buttons - Not intended for external consumers. Used by\n`<market-button-group>` when programmatically arranging visible vs overflow\nbuttons based on available space."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"fill\" | \"left\" | \"right\" | \"split\" | \"stack\"",
          "complexType": {
            "original": "'left' | 'right' | 'split' | 'fill' | 'stack'",
            "resolved": "\"fill\" | \"left\" | \"right\" | \"split\" | \"stack\"",
            "references": {}
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "A string specifying the alignment for the button group.\nThis will change button size and distribution across the group.",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "fill",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "split",
              "type": "string"
            },
            {
              "value": "stack",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverStrategy",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "PositioningStrategy",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "PositioningStrategy": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::PositioningStrategy"
              }
            }
          },
          "mutable": false,
          "attr": "popover-strategy",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDescribes the positioning strategy to use. By default, it is absolute. If\nyour reference element is in a fixed container, use the fixed strategy.\nhttps://popper.js.org/docs/v2/constructors//#strategy",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Intended to slot any number of `<market-button>` components here."
        },
        {
          "name": "overflow-buttons",
          "docs": "Not intended for external consumers. Used by\n`<market-button-group>` when programmatically arranging visible vs overflow\nbuttons based on available space."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-checkbox/market-checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "market-checkbox",
      "readme": "# market-checkbox\n\n`<market-checkbox>` can be used on its own, or slotted into `<market-row>` as a control. When used with `market-row`,\nthe row's `selected` prop overrides the checkbox's `checked` prop.\n",
      "docs": "`<market-checkbox>` can be used on its own, or slotted into `<market-row>` as a control. When used with `market-row`,\nthe row's `selected` prop overrides the checkbox's `checked` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the checkbox is active or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Whether the checkbox is checked or unchecked. Operates independently of the indeterminate property.\nIf used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the checkbox is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether the checkbox is focused or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hovered",
          "reflectToAttr": true,
          "docs": "Whether the checkbox is hovered or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": true,
          "docs": "Whether the checkbox is indeterminate. If true, indeterminate visual state takes precedence over checked/unchecked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Whether the checkbox is invalid.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setActive(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `active` state. Allows external elements to programmatically\ntrigger active styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setDisabled",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setDisabled(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `disabled` state. Allows external elements to programmatically\ntrigger disabled styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `focused` state, except when disabled.\nAllows external consumers to programmatically\ntrigger focused styling.",
          "docsTags": []
        },
        {
          "name": "setHover",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setHover(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `hovered` state. Allows external elements to programmatically\ntrigger hover styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setIndeterminate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newValue: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "newValue",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setIndeterminate(newValue: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "newValue",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Toggles `indeterminate` prop. Operates independently of the `checked` property but if `true`,\nindeterminate visual appearance takes precedence over checked/unchecked.",
          "docsTags": []
        },
        {
          "name": "setSelection",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>",
            "parameters": [
              {
                "name": "newValue",
                "type": "boolean",
                "docs": ""
              },
              {
                "name": "__1",
                "type": "{ silent?: boolean; }",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setSelection(newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>",
          "parameters": [
            {
              "name": "newValue",
              "type": "boolean",
              "docs": ""
            },
            {
              "name": "__1",
              "type": "{ silent?: boolean; }",
              "docs": ""
            }
          ],
          "docs": "Toggles `checked` prop, and emits a change event accordingly.\nUsed by `market-row` to sync its selected state w/ slotted checkboxes.",
          "docsTags": []
        },
        {
          "name": "setValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newValue: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "newValue",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setValue(newValue: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "newValue",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketCheckboxValueChange",
          "detail": "{ current: boolean; previous: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ current: boolean; previous: boolean }",
            "resolved": "{ current: boolean; previous: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever \"checked\" prop value changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-choice-button/market-choice-button.tsx",
      "encapsulation": "shadow",
      "tag": "market-choice-button",
      "readme": "# market-choice-button\n\nA component that is similar to <market-button>, but specifies a selected state for the user to 'choose' a specific button. The component also has the ability to be disabled and to have size changes. If necessary, secondary-text can be slotted to the right of the main label.\n",
      "docs": "A component that is similar to <market-button>, but specifies a selected state for the user to 'choose' a specific button. The component also has the ability to be disabled and to have size changes. If necessary, secondary-text can be slotted to the right of the main label.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The text used for the choice button label"
        },
        {
          "name": "slot",
          "text": "secondary-text - text to the right side of choice button"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the choice button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether or not the choice button is in a selected state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting choice button size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketChoiceButtonDeselected",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the choice button is deselected",
          "docsTags": []
        },
        {
          "event": "marketChoiceButtonSelected",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the choice button is selected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The text used for the choice button label"
        },
        {
          "name": "secondary-text",
          "docs": "text to the right side of choice button"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-code-display/market-code-display.tsx",
      "encapsulation": "shadow",
      "tag": "market-code-display",
      "readme": "# market-code-display\nmarket-code-display allows users to copy a displayed code to their clipboard for authentication purposes.\n\n**Guidelines for use:**\n- Out of the 3 slots, only 'code' is required.\n- Slots must be used in order of 'code' => 'copy-text' => 'actions'. If not put in order, styling may break.\n- Consumers can slot in up to 1 additional action on top of 'Copy' in the form of a \\<button\\> or \\<a\\> tag.\n\n",
      "docs": "market-code-display allows users to copy a displayed code to their clipboard for authentication purposes.\n\n**Guidelines for use:**\n- Out of the 3 slots, only 'code' is required.\n- Slots must be used in order of 'code' => 'copy-text' => 'actions'. If not put in order, styling may break.\n- Consumers can slot in up to 1 additional action on top of 'Copy' in the form of a \\<button\\> or \\<a\\> tag.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the component should appear in a disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the code input is focused or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketCodeCopied",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the 'Copy' button is pressed. Can be used by consumer to create toast.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-code-input/market-code-input.tsx",
      "encapsulation": "shadow",
      "tag": "market-code-input",
      "readme": "# market-code-input\n\nA code-input component.\n",
      "docs": "A code-input component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "trailing-accessory - An icon set on the right side of the input."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is disabled or not.\nThis visually and functionally will disable the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the code input is focused or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is invalid or not.\nThis represents error states.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "length",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "length",
          "reflectToAttr": false,
          "docs": "A number specifying the length of the code",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "A string specifying a name for the code input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is readonly or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"number\" | \"password\" | \"text\"",
          "complexType": {
            "original": "'text' | 'number' | 'password'",
            "resolved": "\"number\" | \"password\" | \"text\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "A string specifying the type of input to render (text or numeric)",
          "docsTags": [],
          "default": "'number'",
          "values": [
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string representing a default value (code) that can be passed in to be rendered",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Trigger focus styling on `<market-input-text>`\nand focus the cursor on the first empty `<input />`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketCodeInputValueChange",
          "detail": "{ code: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{ code: string }",
            "resolved": "{ code: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever any of the input values change.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "trailing-accessory",
          "docs": "An icon set on the right side of the input."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-color-picker/market-color-picker.tsx",
      "encapsulation": "shadow",
      "tag": "market-color-picker",
      "readme": "# market-color-picker\n\n> **NOTE:** This component is currently in beta and its usage is subject to change before its release in a future major version of Market.\n\n## Using the color picker input in Storybook\n> **NOTE:** There is an ongoing issue with Storybook that causes any inputs without \"input\" in the component name to not ignore shortcuts properly. You are still free to play around with it, but note that shortcuts might trigger as you type (i.e. typing \"1\" will exit the input). You can freely play with the `market-color-picker-input` on its own Storybook page.\n\n## Using market-color-swatch-list\n> **NOTE:** `market-color-swatch-list` acts as a subcomponent usable within `market-color-picker`. If you do not slot `market-color-swatch` components, it will default to a Market selected set of swatches, as seen in the example below. You can also slot custom swatches to create a custom set, as seen in the Custom Swatches example below.\n",
      "docs": "> **NOTE:** This component is currently in beta and its usage is subject to change before its release in a future major version of Market.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value representing the color shown on the color picker.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketColorPickerValueChange",
          "detail": "{ value: string; prevValue: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: string; prevValue: string }",
            "resolved": "{ value: string; prevValue: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the color picker selection state changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketColorPickerGradientValueChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketColorSwatchListValueChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketColorPickerInputValueChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-color-picker/subcomponents/market-color-picker-gradient/market-color-picker-gradient.tsx",
      "encapsulation": "shadow",
      "tag": "market-color-picker-gradient",
      "readme": "# market-color-picker-gradient\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value representing the selected color of the secondary gradient picker.\nThis is a string that can represent a [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\nThis is the value the color picker will use.\nSupported color types are rgb/a, hsl/a, and hex colors.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketColorPickerGradientValueChange",
          "detail": "{ value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: string }",
            "resolved": "{ value: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the picker selection state changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-color-picker/subcomponents/market-color-picker-input/market-color-picker-input.tsx",
      "encapsulation": "shadow",
      "tag": "market-color-picker-input",
      "readme": "# market-color-picker-input\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value representing the color shown on the input.\nThis should be in a hexadecimal format (i.e. #ABC123), similarly to native HTML color inputs.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketColorPickerInputValueChange",
          "detail": "{ prevValue: string; value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{ prevValue: string; value: string }",
            "resolved": "{ prevValue: string; value: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the color picker input value changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketInputValueChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-color-picker/subcomponents/market-color-swatch/market-color-swatch.tsx",
      "encapsulation": "shadow",
      "tag": "market-color-swatch",
      "readme": "# market-color-swatch\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether the swatch is selected or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value representing the color of the swatch. This is a string that can represent any [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color).",
          "docsTags": [],
          "default": "CORE_BLUE_FILL_COLOR",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketColorSwatchSelectedChange",
          "detail": "{ value: string; selected: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: string; selected: boolean }",
            "resolved": "{ value: string; selected: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the swatch selection state changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "market-color-swatch-list"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "market-color-swatch-list": [
          "market-color-swatch"
        ]
      }
    },
    {
      "filePath": "src/components/market-color-picker/subcomponents/market-color-swatch-list/market-color-swatch-list.tsx",
      "encapsulation": "shadow",
      "tag": "market-color-swatch-list",
      "readme": "# market-color-swatch-list\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the list.\nFor a color swatch to be selected, this value should match the swatch's value.\nNote: all color swatch values slotted in must be **unique**!\nAn empty string, or '', will clear the selection.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketColorSwatchListValueChange",
          "detail": "{ value: string; prevValue: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: string; prevValue: string }",
            "resolved": "{ value: string; prevValue: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever an item is selected or deselected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketColorSwatchSelectedChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "market-color-swatch"
      ],
      "dependencyGraph": {
        "market-color-swatch-list": [
          "market-color-swatch"
        ]
      }
    },
    {
      "filePath": "src/components/market-content-card/market-content-card.tsx",
      "encapsulation": "shadow",
      "tag": "market-content-card",
      "readme": "# market-content-card\n\n`<market-content-card>` is a simple card component for displaying static content.\nFor interactive/selectable cards, see `market-action-card`.\n",
      "docs": "`<market-content-card>` is a simple card component for displaying static content.\nFor interactive/selectable cards, see `market-action-card`.",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-context/market-context.tsx",
      "encapsulation": "shadow",
      "tag": "market-context",
      "readme": "# market-context\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animationEnterDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-enter-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal enter animation, set from design tokens",
          "docsTags": [],
          "default": "CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animationExitDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-exit-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal exit animation, set from design tokens",
          "docsTags": [],
          "default": "CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentDialog",
          "type": "Dialog",
          "complexType": {
            "original": "Dialog",
            "resolved": "Dialog",
            "references": {
              "Dialog": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::Dialog"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nExposes the context's currentDialog for use by market-context-manager",
          "docsTags": [],
          "values": [
            {
              "type": "Dialog"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "Whether the context is hidden or visible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noVeil",
          "type": "Boolean",
          "complexType": {
            "original": "Boolean",
            "resolved": "Boolean",
            "references": {
              "Boolean": {
                "location": "global",
                "id": "global::Boolean"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nDisabling the context's default veil (including scroll blocking behavior)\nwhen visible. By default, this is set by market-context according to what\ndialog type is being opened. In the future, we want to expose this as an\noptional config option for market-context-manager's open() method.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "Boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(dialogID?: string) => Promise<void>",
            "parameters": [
              {
                "name": "dialogID",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close(dialogID?: string) => Promise<void>",
          "parameters": [
            {
              "name": "dialogID",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "**Recommended for internal use only**\nRemoves the topmost dialog from the stack or the dialog matching the passed `dialogID`\nNote that using this will not trigger the dialog to emit a marketDialogDismissed event.\n\nThe recommended path for closing a dialog is to call its dismiss() method.",
          "docsTags": []
        },
        {
          "name": "closeCurrent",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "closeCurrent() => Promise<void>",
          "parameters": [],
          "docs": "**Recommended for internal use only**\nRemoves the topmost dialog from the stack (just an alias for default .close() behavior)\nNote that using this will not trigger the dialog to emit a marketDialogDismissed event.\n\nThe recommended path for closing a dialog is to call its dismiss() method.",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(dialogTemplate: any) => Promise<void>",
            "parameters": [
              {
                "name": "dialogTemplate",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open(dialogTemplate: any) => Promise<void>",
          "parameters": [
            {
              "name": "dialogTemplate",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Adds the passed dialogTemplate to the stack and inserts it into the DOM",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketContextContentsChanged",
          "detail": "{ action: \"marketNewDialogOpened\" | \"marketDialogClosed\"; currentDialog: Dialog; stack: Dialog[]; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    action: 'marketNewDialogOpened' | 'marketDialogClosed';\n    currentDialog: Dialog;\n    stack: Array<Dialog>;\n  }",
            "resolved": "{ action: \"marketNewDialogOpened\" | \"marketDialogClosed\"; currentDialog: Dialog; stack: Dialog[]; }",
            "references": {
              "Dialog": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::Dialog"
              },
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the contents of the context have changed:\n- Dialog added to the stack\n- Dialog removed from the stack",
          "docsTags": []
        },
        {
          "event": "marketContextEmptied",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the context's stack is empty (no more open dialogs)",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketDialogLoaded",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDialogDismissed",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-context-manager/market-context-manager.tsx",
      "encapsulation": "shadow",
      "tag": "market-context-manager",
      "readme": "# market-context-manager\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether or not the context manager is UI blocking",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "activate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "activate() => Promise<void>",
          "parameters": [],
          "docs": "Shows the context manager",
          "docsTags": []
        },
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(dialogID?: string) => Promise<void>",
            "parameters": [
              {
                "name": "dialogID",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close(dialogID?: string) => Promise<void>",
          "parameters": [
            {
              "name": "dialogID",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "Closes the dialog with matching ID",
          "docsTags": []
        },
        {
          "name": "createNewContext",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLMarketContextElement": {
                "location": "global",
                "id": "global::HTMLMarketContextElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "createNewContext() => Promise<void>",
          "parameters": [],
          "docs": "Adds a new market-context to the stack in the DOM and activates it",
          "docsTags": []
        },
        {
          "name": "deactivate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "deactivate() => Promise<void>",
          "parameters": [],
          "docs": "Hides the entire context manager",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(dialogEl: DialogElement, shouldCreateNewContext?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "dialogEl",
                "type": "HTMLMarketBladeElement | HTMLMarketDialogElement | HTMLMarketModalFullElement | HTMLMarketModalPartialElement | HTMLMarketSheetElement",
                "docs": ""
              },
              {
                "name": "shouldCreateNewContext",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "DialogElement": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open(dialogEl: DialogElement, shouldCreateNewContext?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "dialogEl",
              "type": "HTMLMarketBladeElement | HTMLMarketDialogElement | HTMLMarketModalFullElement | HTMLMarketModalPartialElement | HTMLMarketSheetElement",
              "docs": ""
            },
            {
              "name": "shouldCreateNewContext",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Adds the passed dialogEl to the DOM and creates a new context if necessary or according to\n`shouldCreateNewContext` if it is passed",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketContextManagerActivated",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the context manager is activated/blocking is turned on",
          "docsTags": []
        },
        {
          "event": "marketContextManagerDeactivated",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the context manager is deactivated/blocking is turned off",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketContextEmptied",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-date-picker/market-date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "market-date-picker",
      "readme": "# market-date-picker\n\n<market-banner>If you don't need a calendar UI and simply want a formatted input where a user can type a date, use `<market-input-text type=\"date\">`.</market-banner>\n\nYou can use `<market-date-picker>` with `<market-button-dropdown>` or `<market-dropdown>` with the following in mind:\n\n- Set `interaction=\"persistent\"` to make the popover stay open while interacting with the date picker.\n- Set `max-width: none` on the popover to make it wide enough to fit the menu sidebar.\n- You will need to wire up your own event listeners to handle changes to the date value and close the dropdown.\n\nAn officially blessed, out-of-the-box date picker dropdown component to handle these types of issues is still under consideration.\n\n## Using the custom date disabler `isDateDisabled`\nUsing the `isDateDisabled` prop allows you to pass in a function to support custom date disabling. Since Web Components do not natively support passing in functions, you can do this using Javascript in native JS, or by utilizing frameworks such as Ember or React. (referenced from https://ionicframework.com/docs/api/datetime#advanced-date-constraints)\n\nExample in native JavaScript\n\n```html\n<market-date-picker></market-date-picker>\n\n<script>\n  const datePicker = document.querySelector('market-date-picker');\n  datePicker.isDateDisabled = (dateString) => {\n    const date = new Date(dateString)\n    const utcDay = date.getUTCDay();\n\n    /**\n     * Date will be disabled if it is\n     * Sunday or Saturday\n     */\n    return utcDay === 0 || utcDay === 6;\n  }\n</script>\n```\n\nExample in React\n\n```js\nimport { MarketDatePicker } from '@market/react';\n\nfunction DatePickerExample() {\n  const isWeekend = (dateString: string) => {\n    const date = new Date(dateString);\n    const utcDay = date.getUTCDay();\n\n    /**\n     * Date will be disabled if it is\n     * Sunday or Saturday\n     */\n    return utcDay === 0 || utcDay === 6;\n  }\n\n  return (\n    <MarketDatePicker isDateDisabled={isWeekend}></MarketDatePicker>\n  );\n}\n\nexport default DatePickerExample;\n```\n\n## Using date and time inputs in Storybook\n> **NOTE:** There is an ongoing issue with Storybook that causes our date and time inputs to not function properly. We recommend using Storybook to play with the properties to see the different variations (using `selection-type` and `with-inputs`), but you can access a sandboxed version in our Ember app here: http://pizza-time.s3-website-us-east-1.amazonaws.com/sandbox. You can also access this by going to `go/pizzatime` and changing the route to `/sandbox`.\n\n",
      "docs": "<market-banner>If you don't need a calendar UI and simply want a formatted input where a user can type a date, use `<market-input-text type=\"date\">`.</market-banner>\n\nYou can use `<market-date-picker>` with `<market-button-dropdown>` or `<market-dropdown>` with the following in mind:\n\n- Set `interaction=\"persistent\"` to make the popover stay open while interacting with the date picker.\n- Set `max-width: none` on the popover to make it wide enough to fit the menu sidebar.\n- You will need to wire up your own event listeners to handle changes to the date value and close the dropdown.\n\nAn officially blessed, out-of-the-box date picker dropdown component to handle these types of issues is still under consideration.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "displayMenu",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "display-menu",
          "reflectToAttr": false,
          "docs": "Whether or not the side market-date-picker-menu is shown.\nTo pass in translation supported text, use slots available for each option.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayedDate",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "displayed-date",
          "reflectToAttr": false,
          "docs": "The ISO formatted string that determines the displayed month on the calendar.\nUse DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format\nExample: `YYYY-MM-DDT08:00`.\nNote: Omitting the time portion defaults to UTC, so this may display as a day behind on your calendar!\nIf you add hours it will default to your timezone, like the above example.\nInvalid date strings default to today's date.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "excludeMenuItems",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "exclude-menu-items",
          "reflectToAttr": false,
          "docs": "A list of market-date-picker-menu items that will be excluded from appearing on the menu list.\ni.e. `this-year,last-year` or `today,this-week,last-week,custom`\nThe menu names are lowercase and hyphenated strings, found here:\nhttps://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx\n\nThis works in conjunction with timeframe,\ni.e. \"timeframe=past\", excludes dates in the future in addition to the ones here.\nThis is written as items separated by ','.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Whether the selected dates are invalid.\nIt should not be possible to click on invalid dates, so this occurs through date inputs.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isDateDisabled",
          "type": "(day: Date) => boolean",
          "complexType": {
            "original": "(day: Date) => boolean",
            "resolved": "(day: Date) => boolean",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function that takes a datestring and returns a boolean determining if it should be disabled.\nThis does not override disabled dates based on the timeframe prop.\nSee https://ionicframework.com/docs/api/datetime#advanced-date-constraints for examples of passing in a function as a Stencil component prop.",
          "docsTags": [],
          "values": [
            {
              "type": "(day: Date) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "Date picker locale. Defaults to browser locale. If that cannot be determined, defaults to 'en-US'.",
          "docsTags": [],
          "default": "navigator.language || 'en-US'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mobileMenuPosition",
          "type": "\"bottom\" | \"top\"",
          "complexType": {
            "original": "'top' | 'bottom'",
            "resolved": "\"bottom\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mobile-menu-position",
          "reflectToAttr": true,
          "docs": "Position of menu on a mobile screen, if market-date-picker-menu is shown.",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "presetMenuOption",
          "type": "MENU_SLOT_NAMES.CUSTOM | MENU_SLOT_NAMES.LAST_MONTH | MENU_SLOT_NAMES.LAST_WEEK | MENU_SLOT_NAMES.LAST_YEAR | MENU_SLOT_NAMES.THIS_MONTH | MENU_SLOT_NAMES.THIS_WEEK | MENU_SLOT_NAMES.THIS_YEAR | MENU_SLOT_NAMES.TODAY | MENU_SLOT_NAMES.YESTERDAY",
          "complexType": {
            "original": "MENU_SLOT_NAMES",
            "resolved": "MENU_SLOT_NAMES.CUSTOM | MENU_SLOT_NAMES.LAST_MONTH | MENU_SLOT_NAMES.LAST_WEEK | MENU_SLOT_NAMES.LAST_YEAR | MENU_SLOT_NAMES.THIS_MONTH | MENU_SLOT_NAMES.THIS_WEEK | MENU_SLOT_NAMES.THIS_YEAR | MENU_SLOT_NAMES.TODAY | MENU_SLOT_NAMES.YESTERDAY",
            "references": {
              "MENU_SLOT_NAMES": {
                "location": "import",
                "path": "./enums/menu",
                "id": "src/components/market-date-picker/enums/menu.tsx::MENU_SLOT_NAMES"
              }
            }
          },
          "mutable": false,
          "attr": "preset-menu-option",
          "reflectToAttr": false,
          "docs": "Preset menu option to populate date picker range.\nPresetting `custom` should be used with `selectedStartDate` and `selectedEndDate` props.\nOtherwise if both `selectedStartDate/selectedEndDate` and `presetMenuOption` are given, `presetMenuOption` takes precedence.",
          "docsTags": [],
          "values": [
            {
              "type": "MENU_SLOT_NAMES.CUSTOM"
            },
            {
              "type": "MENU_SLOT_NAMES.LAST_MONTH"
            },
            {
              "type": "MENU_SLOT_NAMES.LAST_WEEK"
            },
            {
              "type": "MENU_SLOT_NAMES.LAST_YEAR"
            },
            {
              "type": "MENU_SLOT_NAMES.THIS_MONTH"
            },
            {
              "type": "MENU_SLOT_NAMES.THIS_WEEK"
            },
            {
              "type": "MENU_SLOT_NAMES.THIS_YEAR"
            },
            {
              "type": "MENU_SLOT_NAMES.TODAY"
            },
            {
              "type": "MENU_SLOT_NAMES.YESTERDAY"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedEndDate",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected-end-date",
          "reflectToAttr": true,
          "docs": "User selected end date for a range saved as an ISO formatted string.\nUse DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format\nExample: `YYYY-MM-DDT08:00`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedStartDate",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected-start-date",
          "reflectToAttr": true,
          "docs": "User selected single date or start date for a range saved as an ISO formatted string.\nUse DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format\nExample: `YYYY-MM-DDT08:00`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionType",
          "type": "\"range\" | \"single\"",
          "complexType": {
            "original": "'single' | 'range'",
            "resolved": "\"range\" | \"single\"",
            "references": {}
          },
          "mutable": false,
          "attr": "selection-type",
          "reflectToAttr": false,
          "docs": "Whether the date picker allows selection of a single date or a date range",
          "docsTags": [],
          "default": "'single'",
          "values": [
            {
              "value": "range",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeframe",
          "type": "\"future\" | \"past\" | \"present\"",
          "complexType": {
            "original": "'past' | 'present' | 'future'",
            "resolved": "\"future\" | \"past\" | \"present\"",
            "references": {}
          },
          "mutable": false,
          "attr": "timeframe",
          "reflectToAttr": false,
          "docs": "String for setting timeframe type to select which market-date-picker-menu items to show.\nPast means only past dates available, future is only current and future dates, and present is the default for all shown.",
          "docsTags": [],
          "default": "'present'",
          "values": [
            {
              "value": "future",
              "type": "string"
            },
            {
              "value": "past",
              "type": "string"
            },
            {
              "value": "present",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "withInputs",
          "type": "\"\" | \"date\" | \"date-and-time\"",
          "complexType": {
            "original": "'' | 'date' | 'date-and-time'",
            "resolved": "\"\" | \"date\" | \"date-and-time\"",
            "references": {}
          },
          "mutable": true,
          "attr": "with-inputs",
          "reflectToAttr": true,
          "docs": "This enables the input field for the date picker.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "date-and-time",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "yearViewActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "year-view-active",
          "reflectToAttr": true,
          "docs": "Displays a clickable caret in the month/year header.\nIf it is up, we show the month/year selection view instead of dates.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketDateRangeChanged",
          "detail": "{ endDate: string; menuSelection: string; prevEndDate: string; prevStartDate: string; startDate: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketDateRangeChangedEventDetail",
            "resolved": "{ endDate: string; menuSelection: string; prevEndDate: string; prevStartDate: string; startDate: string; }",
            "references": {
              "TMarketDateRangeChangedEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-date-picker/events.ts::TMarketDateRangeChangedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the selected date range is changed.",
          "docsTags": []
        },
        {
          "event": "marketMenuSelectionChanged",
          "detail": "{ menuSelection: \"today\" | \"yesterday\" | \"this-week\" | \"last-week\" | \"this-month\" | \"last-month\" | \"this-year\" | \"last-year\" | \"custom\"; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketDatePickerMenuSelectionChangedEventDetail",
            "resolved": "{ menuSelection: \"today\" | \"yesterday\" | \"this-week\" | \"last-week\" | \"this-month\" | \"last-month\" | \"this-year\" | \"last-year\" | \"custom\"; }",
            "references": {
              "TMarketDatePickerMenuSelectionChangedEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-date-picker/events.ts::TMarketDatePickerMenuSelectionChangedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "**DEPRECATED (v4.5.0)** Use `marketDatePickerMenuSelectionChanged` instead.\n\nFired whenever the menu selection is changed. Indicates which menu option is currently selected.\nPossible values are found here:\nhttps://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx"
            }
          ],
          "deprecation": "**DEPRECATED (v4.5.0)** Use `marketDatePickerMenuSelectionChanged` instead.\n\nFired whenever the menu selection is changed. Indicates which menu option is currently selected.\nPossible values are found here:\nhttps://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx"
        }
      ],
      "listeners": [
        {
          "event": "marketDatePickerInputDateSet",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDatePickerDateSelected",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDatePickerDateMousedOver",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDatePickerDateMousedOut",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDatePickerMenuSelectionChanged",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDatePickerInputDateInvalidStateChanged",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-date-picker/subcomponents/market-date-picker-date/market-date-picker-date.tsx",
      "encapsulation": "shadow",
      "tag": "market-date-picker-date",
      "readme": "# market-date-picker-date\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "day",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "day",
          "reflectToAttr": true,
          "docs": "String for user to pass in value of the date",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the date picker date",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Handles whether or not date picker date is selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selection",
          "type": "\"none\" | \"range-first\" | \"range-last\" | \"range-middle\" | \"single\"",
          "complexType": {
            "original": "'none' | 'single' | 'range-first' | 'range-middle' | 'range-last'",
            "resolved": "\"none\" | \"range-first\" | \"range-last\" | \"range-middle\" | \"single\"",
            "references": {}
          },
          "mutable": false,
          "attr": "selection",
          "reflectToAttr": true,
          "docs": "String for setting date picker date selection type",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "range-first",
              "type": "string"
            },
            {
              "value": "range-last",
              "type": "string"
            },
            {
              "value": "range-middle",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "today",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "today",
          "reflectToAttr": true,
          "docs": "Handles whether or not date picker date is for today's date",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"day\" | \"month\" | \"year\"",
          "complexType": {
            "original": "'day' | 'month' | 'year'",
            "resolved": "\"day\" | \"month\" | \"year\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "String type to determine type of date selected for parent component",
          "docsTags": [],
          "values": [
            {
              "value": "day",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "year",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketDatePickerDateMousedOut",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the date picker date is unhovered or moused out",
          "docsTags": []
        },
        {
          "event": "marketDatePickerDateMousedOver",
          "detail": "{ date: HTMLMarketDatePickerDateElement; }",
          "bubbles": true,
          "complexType": {
            "original": "{ date: HTMLMarketDatePickerDateElement }",
            "resolved": "{ date: HTMLMarketDatePickerDateElement; }",
            "references": {
              "HTMLMarketDatePickerDateElement": {
                "location": "global",
                "id": "global::HTMLMarketDatePickerDateElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the date picker date is hovered or moused over",
          "docsTags": []
        },
        {
          "event": "marketDatePickerDateSelected",
          "detail": "{ date: HTMLMarketDatePickerDateElement; }",
          "bubbles": true,
          "complexType": {
            "original": "{ date: HTMLMarketDatePickerDateElement }",
            "resolved": "{ date: HTMLMarketDatePickerDateElement; }",
            "references": {
              "HTMLMarketDatePickerDateElement": {
                "location": "global",
                "id": "global::HTMLMarketDatePickerDateElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the date picker date is selected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-date-picker/subcomponents/market-date-picker-input-date/market-date-picker-input-date.tsx",
      "encapsulation": "shadow",
      "tag": "market-date-picker-input-date",
      "readme": "# market-date-input-date\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "isDateDisabled",
          "type": "(day: Date) => boolean",
          "complexType": {
            "original": "(day: Date) => boolean",
            "resolved": "(day: Date) => boolean",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function that returns true if the date should be disabled",
          "docsTags": [
            {
              "name": "type",
              "text": "{(day: Date) => boolean}"
            },
            {
              "name": "memberof",
              "text": "MarketDateInputDate"
            },
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "type": "(day: Date) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "range",
          "reflectToAttr": false,
          "docs": "Whether the date picker is a range",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "memberof",
              "text": "MarketDateInputDate"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedEndDate",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-end-date",
          "reflectToAttr": false,
          "docs": "The selected end date",
          "docsTags": [
            {
              "name": "type",
              "text": "{string}"
            },
            {
              "name": "memberof",
              "text": "MarketDateInputDate"
            },
            {
              "name": "default",
              "text": "''"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedStartDate",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-start-date",
          "reflectToAttr": false,
          "docs": "The selected start date",
          "docsTags": [
            {
              "name": "type",
              "text": "{string}"
            },
            {
              "name": "memberof",
              "text": "MarketDateInputDate"
            },
            {
              "name": "default",
              "text": "''"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeframe",
          "type": "\"future\" | \"past\" | \"present\"",
          "complexType": {
            "original": "'past' | 'future' | 'present'",
            "resolved": "\"future\" | \"past\" | \"present\"",
            "references": {}
          },
          "mutable": false,
          "attr": "timeframe",
          "reflectToAttr": false,
          "docs": "The timeframe to restrict the date picker to",
          "docsTags": [
            {
              "name": "type",
              "text": "{'past' | 'future' | 'present'}"
            },
            {
              "name": "memberof",
              "text": "MarketDateInputDate"
            },
            {
              "name": "default",
              "text": "'present'"
            }
          ],
          "default": "'present'",
          "values": [
            {
              "value": "future",
              "type": "string"
            },
            {
              "value": "past",
              "type": "string"
            },
            {
              "value": "present",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "withTime",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "with-time",
          "reflectToAttr": false,
          "docs": "Whether to use date-time input instead of date-only",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "memberof",
              "text": "MarketDateInputDate"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketDatePickerInputDateInvalidStateChanged",
          "detail": "{ invalid: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ invalid: boolean }",
            "resolved": "{ invalid: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the date selection changes validity",
          "docsTags": []
        },
        {
          "event": "marketDatePickerInputDateSet",
          "detail": "{ date: string; input: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{ date: string; input: string }",
            "resolved": "{ date: string; input: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the date picker date is selected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-date-picker/subcomponents/market-date-picker-menu/market-date-picker-menu.tsx",
      "encapsulation": "shadow",
      "tag": "market-date-picker-menu",
      "readme": "# market-date-picker-menu\n\nThis component is a subcomponent of `market-date-picker`. It is not meant to be used as a standalone component. The purpose of these docs are to show that the menu row text items can be changed using the associated slots to support translation.\n",
      "docs": "This component is a subcomponent of `market-date-picker`. It is not meant to be used as a standalone component. The purpose of these docs are to show that the menu row text items can be changed using the associated slots to support translation.",
      "docsTags": [
        {
          "name": "slot",
          "text": "'today' - slot for market date picker menu today option;"
        },
        {
          "name": "slot",
          "text": "'yesterday' - slot for market date picker menu yesterday option;"
        },
        {
          "name": "slot",
          "text": "'this-week' - slot for market date picker menu this week option;"
        },
        {
          "name": "slot",
          "text": "'last-week' - slot for market date picker menu last week option;"
        },
        {
          "name": "slot",
          "text": "'this-month' - slot for market date picker menu this month option;"
        },
        {
          "name": "slot",
          "text": "'last-month' - slot for market date picker menu last month option;"
        },
        {
          "name": "slot",
          "text": "'this-year' - slot for market date picker menu this year option;"
        },
        {
          "name": "slot",
          "text": "'last-year' - slot for market date picker menu last year option;"
        },
        {
          "name": "slot",
          "text": "'custom' - slot for market date picker menu custom option;"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "excludeMenuItems",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "exclude-menu-items",
          "reflectToAttr": false,
          "docs": "A list of menu items that will be excluded from appearing on the menu list.\ni.e. `this-year,last-year` or `today,this-week,last-week,custom`\nThe menu names are lowercase and hyphenated strings, found here:\nhttps://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx\n\nThis works in conjunction with timeframe,\ni.e. \"timeframe=past\", excludes dates in the future in addition to the ones here.\nThis is written as items separated by ','.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "presetMenuOption",
          "type": "MENU_SLOT_NAMES.CUSTOM | MENU_SLOT_NAMES.LAST_MONTH | MENU_SLOT_NAMES.LAST_WEEK | MENU_SLOT_NAMES.LAST_YEAR | MENU_SLOT_NAMES.THIS_MONTH | MENU_SLOT_NAMES.THIS_WEEK | MENU_SLOT_NAMES.THIS_YEAR | MENU_SLOT_NAMES.TODAY | MENU_SLOT_NAMES.YESTERDAY",
          "complexType": {
            "original": "MENU_SLOT_NAMES",
            "resolved": "MENU_SLOT_NAMES.CUSTOM | MENU_SLOT_NAMES.LAST_MONTH | MENU_SLOT_NAMES.LAST_WEEK | MENU_SLOT_NAMES.LAST_YEAR | MENU_SLOT_NAMES.THIS_MONTH | MENU_SLOT_NAMES.THIS_WEEK | MENU_SLOT_NAMES.THIS_YEAR | MENU_SLOT_NAMES.TODAY | MENU_SLOT_NAMES.YESTERDAY",
            "references": {
              "MENU_SLOT_NAMES": {
                "location": "import",
                "path": "../../enums/menu",
                "id": "src/components/market-date-picker/enums/menu.tsx::MENU_SLOT_NAMES"
              }
            }
          },
          "mutable": false,
          "attr": "preset-menu-option",
          "reflectToAttr": false,
          "docs": "Preset menu option passed from the parent. For the menu, this handles visually selecting the menu row.",
          "docsTags": [],
          "values": [
            {
              "type": "MENU_SLOT_NAMES.CUSTOM"
            },
            {
              "type": "MENU_SLOT_NAMES.LAST_MONTH"
            },
            {
              "type": "MENU_SLOT_NAMES.LAST_WEEK"
            },
            {
              "type": "MENU_SLOT_NAMES.LAST_YEAR"
            },
            {
              "type": "MENU_SLOT_NAMES.THIS_MONTH"
            },
            {
              "type": "MENU_SLOT_NAMES.THIS_WEEK"
            },
            {
              "type": "MENU_SLOT_NAMES.THIS_YEAR"
            },
            {
              "type": "MENU_SLOT_NAMES.TODAY"
            },
            {
              "type": "MENU_SLOT_NAMES.YESTERDAY"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeframe",
          "type": "\"future\" | \"past\" | \"present\"",
          "complexType": {
            "original": "'past' | 'present' | 'future'",
            "resolved": "\"future\" | \"past\" | \"present\"",
            "references": {}
          },
          "mutable": false,
          "attr": "timeframe",
          "reflectToAttr": true,
          "docs": "String for setting timeframe type to select which menu items to show",
          "docsTags": [],
          "default": "'present'",
          "values": [
            {
              "value": "future",
              "type": "string"
            },
            {
              "value": "past",
              "type": "string"
            },
            {
              "value": "present",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "_selectCustomRow",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_selectCustomRow() => Promise<void>",
          "parameters": [],
          "docs": "Method to visually select Custom row for use by the date picker component\n(internal use only)",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketDatePickerMenuSelectionChanged",
          "detail": "{ menuSelection: \"today\" | \"yesterday\" | \"this-week\" | \"last-week\" | \"this-month\" | \"last-month\" | \"this-year\" | \"last-year\" | \"custom\"; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketDatePickerMenuSelectionChangedEventDetail",
            "resolved": "{ menuSelection: \"today\" | \"yesterday\" | \"this-week\" | \"last-week\" | \"this-month\" | \"last-month\" | \"this-year\" | \"last-year\" | \"custom\"; }",
            "references": {
              "TMarketDatePickerMenuSelectionChangedEventDetail": {
                "location": "import",
                "path": "../../events",
                "id": "src/components/market-date-picker/events.ts::TMarketDatePickerMenuSelectionChangedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever a menu item is selected",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketListSelectionsDidChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "'custom'",
          "docs": "slot for market date picker menu custom option;"
        },
        {
          "name": "'last-month'",
          "docs": "slot for market date picker menu last month option;"
        },
        {
          "name": "'last-week'",
          "docs": "slot for market date picker menu last week option;"
        },
        {
          "name": "'last-year'",
          "docs": "slot for market date picker menu last year option;"
        },
        {
          "name": "'this-month'",
          "docs": "slot for market date picker menu this month option;"
        },
        {
          "name": "'this-week'",
          "docs": "slot for market date picker menu this week option;"
        },
        {
          "name": "'this-year'",
          "docs": "slot for market date picker menu this year option;"
        },
        {
          "name": "'today'",
          "docs": "slot for market date picker menu today option;"
        },
        {
          "name": "'yesterday'",
          "docs": "slot for market date picker menu yesterday option;"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-dialog/market-dialog.tsx",
      "encapsulation": "shadow",
      "tag": "market-dialog",
      "readme": "# market-dialog\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The main content of the dialog. Use `<section class=\"main\">` tag."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animationEnterDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-enter-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal enter animation, set from design tokens",
          "docsTags": [],
          "default": "MODAL_DIALOG_ANIMATION_ENTER_TRANSITION_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animationExitDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-exit-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal exit animation, set from design tokens",
          "docsTags": [],
          "default": "MODAL_DIALOG_ANIMATION_EXIT_TRANSITION_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dialogID",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "data-dialog-id",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used in CSS to trigger start and stop animations",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "data-dialog-index",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place\nin the stack",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-loading",
          "reflectToAttr": false,
          "docs": "Whether the activity indicator is rendered or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "persistent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "persistent",
          "reflectToAttr": true,
          "docs": "Whether the dialog is persistent or dismissable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trapFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "trap-focus",
          "reflectToAttr": false,
          "docs": "Enforces focus trapping on the dialog",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "activateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "Options",
                "docs": "[focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
              },
              {
                "name": "activateOptions",
                "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
                "docs": "set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapOptions"
              },
              "FocusTrapActivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapActivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "Options",
              "docs": "[focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "activateOptions",
              "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
              "docs": "set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ],
          "docs": "Activates the focus trap\n\nSee [`focus-trap.ts`](../../utils/focus-trap.ts) for default options",
          "docsTags": [
            {
              "name": "param",
              "text": "options [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "param",
              "text": "activateOptions set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ]
        },
        {
          "name": "deactivateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "deactivateOptions",
                "type": "DeactivateOptions",
                "docs": "set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapDeactivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapDeactivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "deactivateOptions",
              "type": "DeactivateOptions",
              "docs": "set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ],
          "docs": "Deactivates the focus trap",
          "docsTags": [
            {
              "name": "param",
              "text": "deactivateOptions set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ]
        },
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>",
            "parameters": [
              {
                "name": "dismissOptions",
                "type": "{ dialog?: DialogElement; type?: \"dialog\" | \"modal-full\" | \"modal-partial\" | \"blade\" | \"sheet\"; origin?: HTMLElement; }",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "dismiss(dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>",
          "parameters": [
            {
              "name": "dismissOptions",
              "type": "{ dialog?: DialogElement; type?: \"dialog\" | \"modal-full\" | \"modal-partial\" | \"blade\" | \"sheet\"; origin?: HTMLElement; }",
              "docs": ""
            }
          ],
          "docs": "Emits the dismiss event\nThe parent context will handle actually removing elements from the DOM,\nAll the dialog needs to do it emit an event so actually closing it can be\nsome other elements problem",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketDialogDidDismiss",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the dialog is fully dismissed",
          "docsTags": []
        },
        {
          "event": "marketDialogDismissed",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the dialog is dismissed, handled by context manager",
          "docsTags": []
        },
        {
          "event": "marketDialogLoaded",
          "detail": "DialogLoadedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogLoadedEvent",
            "resolved": "DialogLoadedEvent",
            "references": {
              "DialogLoadedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogLoadedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the dialog finishes loading",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The main content of the dialog. Use `<section class=\"main\">` tag."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-divider/market-divider.tsx",
      "encapsulation": "shadow",
      "tag": "market-divider",
      "readme": "# market-divider\n\n`<market-divider>` is used to separate two components with a configurable amount of space.\n",
      "docs": "`<market-divider>` is used to separate two components with a configurable amount of space.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "margin",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "margin",
          "reflectToAttr": true,
          "docs": "Sets the vertical margin for the divider.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"thick\" | \"thin\"",
          "complexType": {
            "original": "'thick' | 'thin'",
            "resolved": "\"thick\" | \"thin\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Sets the vertical margin for the divider.",
          "docsTags": [],
          "default": "'thick'",
          "values": [
            {
              "value": "thick",
              "type": "string"
            },
            {
              "value": "thin",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-drag-handle/market-drag-handle.tsx",
      "encapsulation": "shadow",
      "tag": "market-drag-handle",
      "readme": "# market-drag-handle\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [
        {
          "event": "marketDragHandleDragEnd",
          "detail": "{ x: number; y: number; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketDragCoords",
            "resolved": "{ x: number; y: number; }",
            "references": {
              "TMarketDragCoords": {
                "location": "import",
                "path": "../../utils/gesture/types",
                "id": "src/utils/gesture/types.ts::TMarketDragCoords"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever a drag is ended.",
          "docsTags": []
        },
        {
          "event": "marketDragHandleDragMove",
          "detail": "{ x: number; y: number; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketDragCoords",
            "resolved": "{ x: number; y: number; }",
            "references": {
              "TMarketDragCoords": {
                "location": "import",
                "path": "../../utils/gesture/types",
                "id": "src/utils/gesture/types.ts::TMarketDragCoords"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever a drag is moved.",
          "docsTags": []
        },
        {
          "event": "marketDragHandleDragStart",
          "detail": "{ x: number; y: number; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketDragCoords",
            "resolved": "{ x: number; y: number; }",
            "references": {
              "TMarketDragCoords": {
                "location": "import",
                "path": "../../utils/gesture/types",
                "id": "src/utils/gesture/types.ts::TMarketDragCoords"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever a drag is started.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-dropdown/market-dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "market-dropdown",
      "readme": "# market-dropdown\n\nA component with a \"trigger\" and a \"content\" slot. Interacting with the slotted trigger content will open the slotted content in a `<market-popover>` which is positioned using Popper.js. This component is used as the foundation for `<market-tooltip>` and `<market-button-dropdown>`.\n\nWe do not recommend using this component directly unless you have a design-approved use case that isn't covered by other available Market components!\n",
      "docs": "A component with a \"trigger\" and a \"content\" slot. Interacting with the slotted trigger content will open the slotted content in a `<market-popover>` which is positioned using Popper.js. This component is used as the foundation for `<market-tooltip>` and `<market-button-dropdown>`.\n\nWe do not recommend using this component directly unless you have a design-approved use case that isn't covered by other available Market components!",
      "docsTags": [
        {
          "name": "slot",
          "text": "trigger - Content slotted here will serve as the \"trigger\" for user\ninteraction that opens the element in the \"content\" slot. If it is a\n`<market-button>`, `<market-filter-button>`, or `<market-link>`,\nthe dropdown will manage their disabled state."
        },
        {
          "name": "slot",
          "text": "popover - Content slotted here will become visible when the slotted\ntrigger content is interacted with. Only tested with `<market-popover>`.\n\nTo tweak popover position relative to the trigger, you can use the props\n`popoverPlacement`, popoverSkidding`, and `popoverDistance`."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally disables the component, as well as relevant Market components\nin the \"trigger\" slot (`<market-button>`, `<market-link>`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "Determines whether the dropdown is expanded or collapsed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interaction",
          "type": "\"click\" | \"hover\" | \"none\" | \"persistent\"",
          "complexType": {
            "original": "'click' | 'hover' | 'persistent' | 'none'",
            "resolved": "\"click\" | \"hover\" | \"none\" | \"persistent\"",
            "references": {}
          },
          "mutable": false,
          "attr": "interaction",
          "reflectToAttr": false,
          "docs": "Defining how the popover should be triggered to open/close. Note that\nclicks outside the dropdown will always close it.\n\n`click`: popover toggles open/closed on clicks to the trigger or popover\n\n`hover`: popover opens on trigger mouseover, closes on trigger or popover\n mouseout\n\n`persistent`: popover toggles open/closed on clicks to the trigger, popover\nstays open if users click on it or its content\n\n`none`: popover does not toggle open/closed on any user interaction; it is\nexpected to be controlled by the parent component",
          "docsTags": [],
          "default": "'click'",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "persistent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverDistance",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "popover-distance",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDisplaces the popper away from, or toward, the reference element in the\ndirection of its placement.\nhttps://popper.js.org/docs/v2/modifiers/offset/#distance-1",
          "docsTags": [],
          "default": "8",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverPlacement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::Placement"
              }
            }
          },
          "mutable": false,
          "attr": "popover-placement",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDescribes the preferred placement of the popper.\nhttps://popper.js.org/docs/v2/constructors//#placement",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverSkidding",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "popover-skidding",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDisplaces the popover along the reference element.\nhttps://popper.js.org/docs/v2/modifiers/offset/#skidding-1",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverStrategy",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "PositioningStrategy",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "PositioningStrategy": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::PositioningStrategy"
              }
            }
          },
          "mutable": false,
          "attr": "popover-strategy",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDescribes the positioning strategy to use. By default, it is absolute. If\nyour reference element is in a fixed container, use the fixed strategy.\nhttps://popper.js.org/docs/v2/constructors//#strategy",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "closeDropdown",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "closeDropdown() => Promise<void>",
          "parameters": [],
          "docs": "Closes the dropdown",
          "docsTags": []
        },
        {
          "name": "openDropdown",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "openDropdown() => Promise<void>",
          "parameters": [],
          "docs": "Opens the dropdown",
          "docsTags": []
        },
        {
          "name": "toggleDropdown",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggleDropdown() => Promise<void>",
          "parameters": [],
          "docs": "Toggles the dropdown opened or closed",
          "docsTags": []
        },
        {
          "name": "updateDropdownPosition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateDropdownPosition() => Promise<void>",
          "parameters": [],
          "docs": "Updates the popper's tooltip location\nhttps://popper.js.org/docs/v2/lifecycle/#manual-update",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketDropdownClosed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the dropdown is closed.",
          "docsTags": []
        },
        {
          "event": "marketDropdownOpened",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the dropdown is opened.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "popover",
          "docs": "Content slotted here will become visible when the slotted\ntrigger content is interacted with. Only tested with `<market-popover>`.\n\nTo tweak popover position relative to the trigger, you can use the props\n`popoverPlacement`, popoverSkidding`, and `popoverDistance`."
        },
        {
          "name": "trigger",
          "docs": "Content slotted here will serve as the \"trigger\" for user\ninteraction that opens the element in the \"content\" slot. If it is a\n`<market-button>`, `<market-filter-button>`, or `<market-link>`,\nthe dropdown will manage their disabled state."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-empty-state/market-empty-state.tsx",
      "encapsulation": "shadow",
      "tag": "market-empty-state",
      "readme": "# market-empty-state\n\nA component that conveys an empty section or page.\n",
      "docs": "A component that conveys an empty section or page.",
      "docsTags": [
        {
          "name": "slot",
          "text": "primary-text - Primary text; `<h3>` element is recommended"
        },
        {
          "name": "slot",
          "text": "secondary-text - Secondary text; `<p>` element is recommended"
        },
        {
          "name": "slot",
          "text": "media - Media that appears above the primary text"
        },
        {
          "name": "slot",
          "text": "actions - Action elements; `<market-button>` is recommended"
        },
        {
          "name": "slot",
          "text": "- default slot is available for slotting non-text content and will appear above all other slots"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "default slot is available for slotting non-text content and will appear above all other slots"
        },
        {
          "name": "actions",
          "docs": "Action elements; `<market-button>` is recommended"
        },
        {
          "name": "media",
          "docs": "Media that appears above the primary text"
        },
        {
          "name": "primary-text",
          "docs": "Primary text; `<h3>` element is recommended"
        },
        {
          "name": "secondary-text",
          "docs": "Secondary text; `<p>` element is recommended"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-field/market-field.tsx",
      "encapsulation": "shadow",
      "tag": "market-field",
      "readme": "# market-field\n\nA wrapper for form inputs. <market-field> handles functionality that lies outside the input itself.\n",
      "docs": "A wrapper for form inputs. <market-field> handles functionality that lies outside the input itself.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The form input, ex. market-input-text."
        },
        {
          "name": "slot",
          "text": "error - Optional error text for the block, displayed below the input when invalid."
        },
        {
          "name": "slot",
          "text": "bottom-accessory - Optional content for the block, displayed below the input."
        },
        {
          "name": "slot",
          "text": "action - Optional action component for the block, displayed below the input."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the field is disabled or not.\nThis visually and functionally will disable the field.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the field is invalid or not.\nThis represents error states.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "A string specifying a name for the field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the field is readonly or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The form input, ex. market-input-text."
        },
        {
          "name": "action",
          "docs": "Optional action component for the block, displayed below the input."
        },
        {
          "name": "bottom-accessory",
          "docs": "Optional content for the block, displayed below the input."
        },
        {
          "name": "error",
          "docs": "Optional error text for the block, displayed below the input when invalid."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-file-upload/market-file-upload.tsx",
      "encapsulation": "shadow",
      "tag": "market-file-upload",
      "readme": "# market-file-upload\n\n`market-file-upload` allows the user to choose one or more files from their device storage to add to its internal\n`<input type=\"file\">` element. **The component does not handle uploading the chosen files!** We recommend handling file\nupload (or any other file operations) via an event listener on the `marketFileUploadValueChange` event, which is emitted\nevery time the selected file(s) are changed.\n\n",
      "docs": "`market-file-upload` allows the user to choose one or more files from their device storage to add to its internal\n`<input type=\"file\">` element. **The component does not handle uploading the chosen files!** We recommend handling file\nupload (or any other file operations) via an event listener on the `marketFileUploadValueChange` event, which is emitted\nevery time the selected file(s) are changed.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Used for drop zone content. Intended for an icon (optional), main text, and secondary text (optional)."
        },
        {
          "name": "slot",
          "text": "compact-action - Used for \"compact\" mode content. Intended for use with a `market-button` or `market-link`. When this\nslot is used, default slot content must also be provided. Visible when `compact` is true."
        },
        {
          "name": "slot",
          "text": "bottom-accessory - DEPRECATED: Used for the bottom accessory text. We recommend using the default slot\nto add secondary text to the drop zone content instead."
        },
        {
          "name": "slot",
          "text": "error - DEPRECATED: Used for input-level error text. We recommend using the fileMetadata prop to set error\nstatus and messages on the file level instead."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "String that is a list of file types the uploader should accept. This is\npassed to the internal `<input type=\"file\"/>` tag. For more info, see the\n[MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept).",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": true,
          "docs": "Used to toggle \"compact mode\" (for use on mobile devices and when space is limited)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "deleteButtonAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "delete-button-aria-label",
          "reflectToAttr": true,
          "docs": "Optional property passed to the delete icons on selected file\nrows that will function as its aria-label. Defaults to \"Delete\".",
          "docsTags": [],
          "default": "'Delete'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the file picker.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fileMetadata",
          "type": "TMarketFileUploadFileConfig[]",
          "complexType": {
            "original": "Array<TMarketFileUploadFileConfig>",
            "resolved": "TMarketFileUploadFileConfig[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "TMarketFileUploadFileConfig": {
                "location": "import",
                "path": "./types",
                "id": "src/components/market-file-upload/types.ts::TMarketFileUploadFileConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "What type of custom information, if any, to display on specified file rows.\nExpects an array of TMarketFileUploadFileConfig objects (must be set using JS and not in the HTML markup), which\nmust include `filename` and can include an optional `status`, `message`, or `leadingIconName`.\nNote that `message` is only shown when `status` is `'error'`, and `leadingIconName` expects the semantic or\ndescriptive name of an existing `market-icon`.",
          "docsTags": [],
          "values": [
            {
              "type": "TMarketFileUploadFileConfig[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fileSubtext",
          "type": "\"size\" | \"type\"",
          "complexType": {
            "original": "'size' | 'type'",
            "resolved": "\"size\" | \"type\"",
            "references": {}
          },
          "mutable": false,
          "attr": "file-subtext",
          "reflectToAttr": false,
          "docs": "What type of secondary information, if any, to display on all file rows",
          "docsTags": [],
          "values": [
            {
              "value": "size",
              "type": "string"
            },
            {
              "value": "type",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "DEPRECATED: Represents whether the input is invalid or not. This represents input-level error states.\nWe recommend using the fileMetadata prop to set error status and messages on the file level instead.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "Represents whether the selector allows multiple files\nto be selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "File[]",
          "complexType": {
            "original": "Array<File>",
            "resolved": "File[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "File": {
                "location": "global",
                "id": "global::File"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of File objects that can be passed in. (If using vanilla JS, this must be set using JS and not in the HTML markup.)",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "File[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketFileUploadValueChange",
          "detail": "{ value: File[]; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: Array<File> }",
            "resolved": "{ value: File[]; }",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "File": {
                "location": "global",
                "id": "global::File"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the selected files array changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Used for drop zone content. Intended for an icon (optional), main text, and secondary text (optional)."
        },
        {
          "name": "bottom-accessory",
          "docs": "DEPRECATED: Used for the bottom accessory text. We recommend using the default slot\nto add secondary text to the drop zone content instead."
        },
        {
          "name": "compact-action",
          "docs": "Used for \"compact\" mode content. Intended for use with a `market-button` or `market-link`. When this\nslot is used, default slot content must also be provided. Visible when `compact` is true."
        },
        {
          "name": "error",
          "docs": "DEPRECATED: Used for input-level error text. We recommend using the fileMetadata prop to set error\nstatus and messages on the file level instead."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-filter/market-filter.tsx",
      "encapsulation": "shadow",
      "tag": "market-filter",
      "readme": "# market-filter\n\n> **NOTE:** This component is currently in beta and its usage is subject to change.\n\nThis component uses `<market-filter-button>` to display the label and selected value, and acts as the trigger for displaying the popover. The display value can be overwritten by adding an element with a `display-value` slot.\n\nThe popover can contain a `<market-list>` by assigning it with the `list` slot. When the list's `multiselect` is enabled, the popover will act as `interaction=\"persistent\"`, unless explicitly set via the `dropdownInteraction` prop. Also with `multiselect`, it is recommended that the `<market-row>`s have a `<market-checkbox slot=\"control\">`.\n\nBy default, the selected value is displayed next to the label. But for `<market-list multiselect>`, if there are multiple selections, the count is displayed instead. If you wish to give more detail to the count (e.g. \"3 colors\"), you may do so by utilizing the `display-value` slot.\n\nSoon to be implemented is support for `<market-date-picker>`.\n",
      "docs": "> **NOTE:** This component is currently in beta and its usage is subject to change.\n\nThis component uses `<market-filter-button>` to display the label and selected value, and acts as the trigger for displaying the popover. The display value can be overwritten by adding an element with a `display-value` slot.\n\nThe popover can contain a `<market-list>` by assigning it with the `list` slot. When the list's `multiselect` is enabled, the popover will act as `interaction=\"persistent\"`, unless explicitly set via the `dropdownInteraction` prop. Also with `multiselect`, it is recommended that the `<market-row>`s have a `<market-checkbox slot=\"control\">`.\n\nBy default, the selected value is displayed next to the label. But for `<market-list multiselect>`, if there are multiple selections, the count is displayed instead. If you wish to give more detail to the count (e.g. \"3 colors\"), you may do so by utilizing the `display-value` slot.\n\nSoon to be implemented is support for `<market-date-picker>`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "label - Filter label, using `<label>`"
        },
        {
          "name": "slot",
          "text": "display-value - Overwrites the displayed value or feedback"
        },
        {
          "name": "slot",
          "text": "- The `<market-list>` or `<market-date-picker>` element"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Functionally and visually disables the filter button",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dropdownInteraction",
          "type": "\"click\" | \"hover\" | \"none\" | \"persistent\"",
          "complexType": {
            "original": "HTMLMarketDropdownElement['interaction']",
            "resolved": "\"click\" | \"hover\" | \"none\" | \"persistent\"",
            "references": {
              "HTMLMarketDropdownElement": {
                "location": "global",
                "id": "global::HTMLMarketDropdownElement"
              }
            }
          },
          "mutable": false,
          "attr": "dropdown-interaction",
          "reflectToAttr": false,
          "docs": "Defines what types of interaction the dropdown should have\n(see `market-dropdown` docs for more granular explanation).\n\nIf not defined and the list is multiselect,\nthe dropdown interaction will be set to `persistent`\nso that the dropdown won't automatically close after selecting a row.",
          "docsTags": [],
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "persistent",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "Determines whether the filter is expanded or collapsed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether or not the button is focused",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Filter name",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "popoverPlacement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::Placement"
              }
            }
          },
          "mutable": false,
          "attr": "popover-placement",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDescribes the positioning strategy to use. By default, it is `bottom-start`.\nhttps://popper.js.org/docs/v2/constructors/#strategy",
          "docsTags": [],
          "default": "'bottom-start'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "popoverStrategy",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "PositioningStrategy",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "PositioningStrategy": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::PositioningStrategy"
              }
            }
          },
          "mutable": false,
          "attr": "popover-strategy",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDescribes the positioning strategy to use. By default, it is absolute. If\nyour reference element is in a fixed container, use the fixed strategy.\nhttps://popper.js.org/docs/v2/constructors//#strategy",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'medium' | 'small'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "String for setting filter button size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "__setAndEmitDatePickerValue",
          "returns": {
            "type": "Promise<void>",
            "docs": "A promise that resolves when the value is set."
          },
          "complexType": {
            "signature": "(value: TMarketFilterDateRangeValues) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "{ startDate: string; endDate: string; }",
                "docs": "- The new value for the date picker."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "TMarketFilterDateRangeValues": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-filter/events.ts::TMarketFilterDateRangeValues"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "__setAndEmitDatePickerValue(value: TMarketFilterDateRangeValues) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "{ startDate: string; endDate: string; }",
              "docs": "- The new value for the date picker."
            }
          ],
          "docs": "",
          "docsTags": [
            {
              "name": "private",
              "text": "*INTERNAL*: Used by `market-filter-dropdown-menu` to reemit events from the cloned datepicker inside the dropdown.\n\nSets the value of the date picker emits `marketFilterValueDidChange`."
            },
            {
              "name": "param",
              "text": "value - The new value for the date picker."
            },
            {
              "name": "returns",
              "text": "A promise that resolves when the value is set."
            }
          ]
        },
        {
          "name": "__setAndEmitListValue",
          "returns": {
            "type": "Promise<void>",
            "docs": "A promise that resolves when the value is set."
          },
          "complexType": {
            "signature": "(value: string | string[]) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "string | string[]",
                "docs": "- The value to set for the market filter."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "__setAndEmitListValue(value: string | string[]) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "string | string[]",
              "docs": "- The value to set for the market filter."
            }
          ],
          "docs": "",
          "docsTags": [
            {
              "name": "private",
              "text": "*INTERNAL*: Used by `market-filter-dropdown-menu` to reemit events from the cloned datepicker inside the dropdown.\n\nSets the value of the list and emits `marketFilterValueDidChange`."
            },
            {
              "name": "param",
              "text": "value - The value to set for the market filter."
            },
            {
              "name": "returns",
              "text": "A promise that resolves when the value is set."
            }
          ]
        },
        {
          "name": "getFilterType",
          "returns": {
            "type": "Promise<TMarketFilterType>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<TMarketFilterType>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "TMarketFilterType": {
                "location": "import",
                "path": "./types",
                "id": "src/components/market-filter/types.ts::TMarketFilterType"
              }
            },
            "return": "Promise<TMarketFilterType>"
          },
          "signature": "getFilterType() => Promise<TMarketFilterType>",
          "parameters": [],
          "docs": "**INTERNAL [do not use directly]**\n\nGet the filter type",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "whether or not the filter was focused or blurred"
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<boolean>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": "whether or not focus will be applied or removed"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "setFocus(value?: boolean) => Promise<boolean>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": "whether or not focus will be applied or removed"
            }
          ],
          "docs": "Toggle focus on the filter button",
          "docsTags": [
            {
              "name": "param",
              "text": "value whether or not focus will be applied or removed"
            },
            {
              "name": "returns",
              "text": "whether or not the filter was focused or blurred"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "marketFilterClosed",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "**DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.\n\nFired whenever the filter is closed"
            }
          ],
          "deprecation": "**DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.\n\nFired whenever the filter is closed"
        },
        {
          "event": "marketFilterExpandedChanged",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "TMarketFilterExpandedChangeEventDetail",
            "resolved": "boolean",
            "references": {
              "TMarketFilterExpandedChangeEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-filter/events.ts::TMarketFilterExpandedChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the dropdown is expanded/collapsed",
          "docsTags": []
        },
        {
          "event": "marketFilterOpened",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "**DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.\n\nFired whenever the filter is opened"
            }
          ],
          "deprecation": "**DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.\n\nFired whenever the filter is opened"
        },
        {
          "event": "marketFilterValueDidChange",
          "detail": "{ name: string; prevValue: string | string[] | TMarketFilterDateRangeValues; value: string | string[] | TMarketFilterDateRangeValues; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketFilterValueDidChangeEventDetail",
            "resolved": "{ name: string; prevValue: string | string[] | TMarketFilterDateRangeValues; value: string | string[] | TMarketFilterDateRangeValues; }",
            "references": {
              "TMarketFilterValueDidChangeEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-filter/events.ts::TMarketFilterValueDidChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired by the `marketListSelectionsDidChange` listener.",
          "docsTags": [
            {
              "name": "property",
              "text": "{string} name - filter name, from `name` prop"
            },
            {
              "name": "property",
              "text": "{string | string[] | TMarketFilterDateRangeValues } prevValue - list: selected value(s); date: `[<startDate>, <endDate>]`"
            },
            {
              "name": "property",
              "text": "{string | string[] | TMarketFilterDateRangeValues } value - list: selected value(s); date: `[<startDate>, <endDate>]`"
            }
          ]
        }
      ],
      "listeners": [
        {
          "event": "marketListSelectionsDidChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDateRangeChanged",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDropdownOpened",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDropdownClosed",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The `<market-list>` or `<market-date-picker>` element"
        },
        {
          "name": "display-value",
          "docs": "Overwrites the displayed value or feedback"
        },
        {
          "name": "label",
          "docs": "Filter label, using `<label>`"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-filter-button/market-filter-button.tsx",
      "encapsulation": "shadow",
      "tag": "market-filter-button",
      "readme": "# market-filter-button\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The text used for the filter button label"
        },
        {
          "name": "slot",
          "text": "feedback - The text to indicate currently applied filters"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether or not the button is in an active state, e.g. filter is selected and dropdown is opened",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether or not the button is focused",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-only",
          "reflectToAttr": true,
          "docs": "Whether to display icon in place of label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "popover-id",
          "reflectToAttr": false,
          "docs": "The ID of the popover element that the button controls",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'medium' | 'small'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting filter button size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "whether or not the button was focused or blurred"
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<boolean>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": "whether or not focus will be applied or removed"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "setFocus(value?: boolean) => Promise<boolean>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": "whether or not focus will be applied or removed"
            }
          ],
          "docs": "Toggle focus on the filter button",
          "docsTags": [
            {
              "name": "param",
              "text": "value whether or not focus will be applied or removed"
            },
            {
              "name": "returns",
              "text": "whether or not the button was focused or blurred"
            }
          ]
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The text used for the filter button label"
        },
        {
          "name": "feedback",
          "docs": "The text to indicate currently applied filters"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-filter-group/subcomponents/market-filter-dropdown-menu/market-filter-dropdown-menu.tsx",
      "encapsulation": "shadow",
      "tag": "market-filter-dropdown-menu",
      "readme": "# market-filter-overflow\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "search - Search input, using `<market-input-search>`"
        },
        {
          "name": "slot",
          "text": "filters - Filters, using `<market-filter>`"
        },
        {
          "name": "slot",
          "text": "settings - Filter settings, using `<market-filter>`"
        },
        {
          "name": "slot",
          "text": "visible-filters - INTERNAL ONLY: Used by `<market-filter-group>` when programmatically arranging visible vs overflow\nbuttons based on available space."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'medium' | 'small'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting filter button size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "marketDropdownOpened",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDropdownClosed",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketHeaderNavigate",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "filters",
          "docs": "Filters, using `<market-filter>`"
        },
        {
          "name": "search",
          "docs": "Search input, using `<market-input-search>`"
        },
        {
          "name": "settings",
          "docs": "Filter settings, using `<market-filter>`"
        },
        {
          "name": "visible-filters",
          "docs": "INTERNAL ONLY: Used by `<market-filter-group>` when programmatically arranging visible vs overflow\nbuttons based on available space."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-filter-group/market-filter-group.tsx",
      "encapsulation": "shadow",
      "tag": "market-filter-group",
      "readme": "# market-filter-group\n\n> **NOTE:** This component is currently in beta and its usage is subject to change.\n\nThis serves as a container for `<market-input-search>` and `<market-filter>` and it handles layout variations depending on certain conditions such as the viewport width, number of filters, presence of search input, etc. as further described below.\n\nAn overflow menu for filters is automatically added when there's insufficient space or when there are more than 3 filters. In any case, filter group elements are not line wrapped. The overflowed filters are moved to the dropdown menu, where their respective value selection would be situated in that same dropdown. The size of the dropdown menu button is determined by the size of the first filter and it is assumed that all filters have the same size.\n\nThe search input, if provided, automatically transforms into compact mode on mobile viewports or when there are more than 3 filters in the group. When the search input is in compact mode and focus is given (by clicking it, for example), the search input component expands to show its input field and **all** filters are temporarily moved to the overflow menu. Removing the focus (by clicking the back button or anything else but the input) brings the search input back to compact mode.\n\nThere is no limit to the number of filters. Though having multiple search inputs may work, it will cause visual bugs and is therefore inadvisable.\n",
      "docs": "> **NOTE:** This component is currently in beta and its usage is subject to change.\n\nThis serves as a container for `<market-input-search>` and `<market-filter>` and it handles layout variations depending on certain conditions such as the viewport width, number of filters, presence of search input, etc. as further described below.\n\nAn overflow menu for filters is automatically added when there's insufficient space or when there are more than 3 filters. In any case, filter group elements are not line wrapped. The overflowed filters are moved to the dropdown menu, where their respective value selection would be situated in that same dropdown. The size of the dropdown menu button is determined by the size of the first filter and it is assumed that all filters have the same size.\n\nThe search input, if provided, automatically transforms into compact mode on mobile viewports or when there are more than 3 filters in the group. When the search input is in compact mode and focus is given (by clicking it, for example), the search input component expands to show its input field and **all** filters are temporarily moved to the overflow menu. Removing the focus (by clicking the back button or anything else but the input) brings the search input back to compact mode.\n\nThere is no limit to the number of filters. Though having multiple search inputs may work, it will cause visual bugs and is therefore inadvisable.",
      "docsTags": [
        {
          "name": "slot",
          "text": "search - Search input, using `<market-input-search>`"
        },
        {
          "name": "slot",
          "text": "filters - Filters, using `<market-filter>`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "maxVisibleFilters",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-visible-filters",
          "reflectToAttr": false,
          "docs": "Maximum number of visible filters before they are truncated and moved into the overflow menu.\nHowever, filters may be truncated anyway if there is not enough space.",
          "docsTags": [
            {
              "name": "default",
              "text": "3"
            }
          ],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "marketInputSearchFocus",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketInternalInputSearchCompactAnimation",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDropdownOpened",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "filters",
          "docs": "Filters, using `<market-filter>`"
        },
        {
          "name": "search",
          "docs": "Search input, using `<market-input-search>`"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-footer/market-footer.tsx",
      "encapsulation": "shadow",
      "tag": "market-footer",
      "readme": "# market-footer\n\nA component for the bottom of a page or component, like <market-dialog>, <market-modal-partial>, or <market-modal-full>. \n",
      "docs": "A component for the bottom of a page or component, like <market-dialog>, <market-modal-partial>, or <market-modal-full>.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The content of the footer, ex button(s), text"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The content of the footer, ex button(s), text"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-header/market-header.tsx",
      "encapsulation": "shadow",
      "tag": "market-header",
      "readme": "# market-header\n\nA component for the top of a page or component like <market-modal>.\n\n",
      "docs": "A component for the top of a page or component like <market-modal>.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The title. The position of the title varies based on the presence of other slots"
        },
        {
          "name": "slot",
          "text": "navigation - navigation buttons, ex close, back, forward, on the left side of the header"
        },
        {
          "name": "slot",
          "text": "wayfinding - the smaller \"eyebrow\" text displayed above the title, e.g. \"Step 1 of 2\""
        },
        {
          "name": "slot",
          "text": "actions - for button(s) to perform actions, on the right side of the header"
        },
        {
          "name": "slot",
          "text": "subheading - Secondary text for the row"
        },
        {
          "name": "part",
          "text": "heading - the heading area where the default, wayfinding, and subheading slot is contained in"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "closeButtonAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button-aria-label",
          "reflectToAttr": true,
          "docs": "String to use for the aria-label accessibility attribute of the default close \"x\" button.",
          "docsTags": [],
          "default": "'Close'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": true,
          "docs": "Whether or not the header is in compact mode\nwhen navigation is present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableCloseButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-close-button",
          "reflectToAttr": false,
          "docs": "Disables the default close \"x\" button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showNavigation",
          "type": "boolean",
          "complexType": {
            "original": "boolean | null",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "show-navigation",
          "reflectToAttr": true,
          "docs": "Whether or not the navigation slot is shown",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketHeaderNavigate",
          "detail": "{ event: MouseEvent; action: \"custom\" | \"close\"; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketHeaderNavigateEventDetail",
            "resolved": "{ event: MouseEvent; action: \"custom\" | \"close\"; }",
            "references": {
              "TMarketHeaderNavigateEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-header/events.ts::TMarketHeaderNavigateEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the close icon in the navigation slot is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The title. The position of the title varies based on the presence of other slots"
        },
        {
          "name": "actions",
          "docs": "for button(s) to perform actions, on the right side of the header"
        },
        {
          "name": "navigation",
          "docs": "navigation buttons, ex close, back, forward, on the left side of the header"
        },
        {
          "name": "subheading",
          "docs": "Secondary text for the row"
        },
        {
          "name": "wayfinding",
          "docs": "the smaller \"eyebrow\" text displayed above the title, e.g. \"Step 1 of 2\""
        }
      ],
      "parts": [
        {
          "name": "heading",
          "docs": "the heading area where the default, wayfinding, and subheading slot is contained in"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-icon/market-icon.tsx",
      "encapsulation": "shadow",
      "tag": "market-icon",
      "readme": "# market-icon\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "fidelity",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "fidelity",
          "reflectToAttr": true,
          "docs": "Optional: A number representing the fidelity of the icon to display.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "A string identifier for the icon. This can be either the semantic name which maps to\na token or the descriptive name, which maps to a SVG id in the sprite, though using the\nsemantic name is preferred because it gives you access to additional features like fidelity.\nYou can also pass any string and it will display a symbol or group within any SVG sprite\non the page, whether it is the Market sprite or not.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-inline-section-header/market-inline-section-header.tsx",
      "encapsulation": "shadow",
      "tag": "market-inline-section-header",
      "readme": "# market-inline-section-header\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Heading tag with text, ex. h2, h3, h4, h5, h6."
        },
        {
          "name": "slot",
          "text": "trailing-accessory - Accessory to display at the end of the header line."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Heading tag with text, ex. h2, h3, h4, h5, h6."
        },
        {
          "name": "trailing-accessory",
          "docs": "Accessory to display at the end of the header line."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-inline-status/market-inline-status.tsx",
      "encapsulation": "shadow",
      "tag": "market-inline-status",
      "readme": "# market-inline-status\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The text for market-inline-status"
        },
        {
          "name": "slot",
          "text": "icon - Optional, for use with a custom icon"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "variant",
          "type": "\"critical\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'info' | 'success' | 'warning' | 'critical'",
            "resolved": "\"critical\" | \"info\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "critical",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The text for market-inline-status"
        },
        {
          "name": "icon",
          "docs": "Optional, for use with a custom icon"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-input-password/market-input-password.tsx",
      "encapsulation": "shadow",
      "tag": "market-input-password",
      "readme": "# market-input-password\n\nA text input that masks the inputted text. There is a clickable icon that toggles the masking on and off.\n",
      "docs": "A text input that masks the inputted text. There is a clickable icon that toggles the masking on and off.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The label for the input."
        },
        {
          "name": "slot",
          "text": "input - Can be used to slot your own HTML input, if needed (ex. if supporting browser\nautofill)"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Whether or not this input should allow autocompletion by the browser\nAccepts a boolean, or \"true\", \"false\", \"on\", \"off\" or an\n[accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "A boolean representing whether the input is disabled or not.\nThis visually and functionally will disable the input.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": false,
          "docs": "A boolean representing whether the input is focused or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "A string specifying an ID for the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "Allows a browser to display an appropriate virtual keyboard.\n[Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "A boolean representing whether the input is invalid or not.\nThis represents error states.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "A number specifying the maximum length of characters for the input value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "A number specifying the minimum length of characters for the input value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "A string specifying a name for the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "A string specifying the placeholder of the input.\nThis is shown before a user attempts to add a value, given no value is already provided.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "A boolean representing whether the input is readonly or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Whether or not the input is required; used to validate the input's value.\nSee MDN on the [required attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required)",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting input size.\nSizes `small` and `medium` visually hide the label,\nbut you should still provide one for accessibility purposes.",
          "docsTags": [],
          "default": "'large'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "A string specifying a value for the input. This will be visually shown on the input and can be edited by the user.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets focus styling on `<market-input-password>`. Toggles focus on the inner `<input>` if true, and blurs focus if false.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The label for the input."
        },
        {
          "name": "input",
          "docs": "Can be used to slot your own HTML input, if needed (ex. if supporting browser\nautofill)"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-input-search/market-input-search.tsx",
      "encapsulation": "shadow",
      "tag": "market-input-search",
      "readme": "# market-input-search\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Can be used to slot your own HTML input, if needed (ex. if supporting browser\nautofill)"
        },
        {
          "name": "part",
          "text": "native-input - The default inner HTML input."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Whether or not this input should allow autocompletion by the browser;\naccepts a boolean, or `\"true\"`, `\"false\"`, `\"on\"`, `\"off\"` or an\n[accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).\n\nNote (source: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)):\nIn order to provide autocompletion, user-agents might require an input to have a:\n1. Have a `name` and/or `id` attribute;\n2. Be descendants of a `<form>` element;\n3. The form to have a submit button",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "A boolean representing whether the input should focus on page load",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearButtonAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-button-aria-label",
          "reflectToAttr": false,
          "docs": "A string representing the clear button's aria-label; localize as needed",
          "docsTags": [],
          "default": "'Clear'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\n\nUsed by `market-filter-group` when setting this component to compact mode",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is disabled or not;\nthis visually and functionally will disable the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is focused or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-aria-label",
          "reflectToAttr": false,
          "docs": "A string representing the input's aria-label; localize as needed",
          "docsTags": [],
          "default": "'Search'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "A number specifying the maximum length of characters for the input value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "A string specifying a name for the search input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "A string specifying the placeholder of the input;\nthis is shown before a user attempts to add a value, given no value is already provided.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "searchIconButtonAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "search-icon-button-aria-label",
          "reflectToAttr": false,
          "docs": "A string representing the search icon button's aria-label; localize as needed",
          "docsTags": [],
          "default": "'Search icon'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "A string specifying the size of the input",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the input;\nthis will be visually shown on the input and can be edited by the user.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "**DEPRECATED (v4.5.0)** Use `size` instead.\n\nA string specifying the size of the input"
            }
          ],
          "default": "'medium'",
          "deprecation": "**DEPRECATED (v4.5.0)** Use `size` instead.\n\nA string specifying the size of the input",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clearInput",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clearInput() => Promise<void>",
          "parameters": [],
          "docs": "Clears the current input value.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": "new `focused` value"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": "new `focused` value"
            }
          ],
          "docs": "Sets focus styling on `<market-input-search>`;\ntoggles focus on the native `<input>` depending on the value passed",
          "docsTags": [
            {
              "name": "param",
              "text": "value new `focused` value"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "marketInputSearchCleared",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when input is cleared by clicking the clear button",
          "docsTags": []
        },
        {
          "event": "marketInputSearchDidLoad",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the component has loaded",
          "docsTags": []
        },
        {
          "event": "marketInputSearchFocus",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "TMarketInputSearchFocusEventDetail",
            "resolved": "boolean",
            "references": {
              "TMarketInputSearchFocusEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-input-search/events.ts::TMarketInputSearchFocusEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the inner `<input>` element is focused or blurred",
          "docsTags": []
        },
        {
          "event": "marketInputSearchValueChange",
          "detail": "{ current: string; prevValue: string; originalEvent: unknown; value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketInputSearchValueChangeEventDetail",
            "resolved": "{ current: string; prevValue: string; originalEvent: unknown; value: string; }",
            "references": {
              "TMarketInputSearchValueChangeEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-input-search/events.ts::TMarketInputSearchValueChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the input value changes",
          "docsTags": []
        },
        {
          "event": "marketInternalInputSearchCompactAnimation",
          "detail": "\"animationend\" | \"animationstart\"",
          "bubbles": true,
          "complexType": {
            "original": "TMarketInternalInputSearchCompactAnimationEventDetail",
            "resolved": "\"animationend\" | \"animationstart\"",
            "references": {
              "TMarketInternalInputSearchCompactAnimationEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-input-search/events.ts::TMarketInternalInputSearchCompactAnimationEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "**INTERNAL [do not use directly]**\n\nEmitted when the compact animation has started or ended",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Can be used to slot your own HTML input, if needed (ex. if supporting browser\nautofill)"
        }
      ],
      "parts": [
        {
          "name": "native-input",
          "docs": "The default inner HTML input."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-input-text/market-input-text.tsx",
      "encapsulation": "shadow",
      "tag": "market-input-text",
      "readme": "# market-input-text\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The main label for the input."
        },
        {
          "name": "slot",
          "text": "leading-accessory - An icon set on the left side of the input."
        },
        {
          "name": "slot",
          "text": "trailing-accessory - An icon set on the right side of the input."
        },
        {
          "name": "slot",
          "text": "input - Can be used to slot your own HTML input, if needed (ex. if supporting browser\nautofill)"
        },
        {
          "name": "part",
          "text": "native-input - The default inner HTML input."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Whether or not this input should allow autocompletion by the browser\nAccepts a boolean, or \"true\", \"false\", \"on\", \"off\" or an\n[accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofilled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "autofilled",
          "reflectToAttr": true,
          "docs": "Whether the input is displaying an initial autofill value. Used for\nstyling to ensure the label floats up correctly.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "A boolean representing whether the input should focus on page load.\nIf multiple elements with `autofocus` are present, it is not guaranteed which one\nwill ultimately receive the focus. It is advised that only one at most is present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autovalidate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autovalidate",
          "reflectToAttr": false,
          "docs": "Whether or not to automatically style this input as invalid based on\nnative input validation attributes: `min`, `max`, `pattern`, `required`, `maxlength`, `minlength`.\nSee MDN articles on [form validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation)\nand [constraint validation](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is disabled or not.\nThis visually and functionally will disable the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is focused or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "A string specifying an ID for the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "Allows a browser to display an appropriate virtual keyboard.\n[Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is invalid or not.\nThis represents error states.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Specifies the maximum value for number and time inputs.\nSee MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "A number specifying the maximum length of characters for the input value.\nSee MDN on the [maxlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Specifies the minimum value for number and time inputs.\nSee MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "A number specifying the minimum length of characters for the input value.\nSee MDN on the [minlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "A string specifying a name for the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Specifies a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\nto validate the input's value against.\nSee MDN on the [pattern attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "A string specifying the placeholder of the input.\nThis is shown before a user attempts to add a value, given no value is already provided.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the input is readonly or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Whether or not the input is required; used to validate the input's value.\nSee MDN on the [required attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required)",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting input size.\nSizes `small` and `medium` visually hide the label,\nbut you should still provide one for accessibility purposes.",
          "docsTags": [],
          "default": "'large'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Specifies the increment step for number and time inputs.\nSee MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "A string specifying the type of control to render. Any native HTML input type would work here.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the input. This will be visually shown on the input and can be edited by the user.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement>"
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "registerSlottedInput",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(slottedInput?: HTMLInputElement) => Promise<void>",
            "parameters": [
              {
                "name": "slottedInput",
                "type": "HTMLInputElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              },
              "ShadowRoot": {
                "location": "global",
                "id": "global::ShadowRoot"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "registerSlottedInput(slottedInput?: HTMLInputElement) => Promise<void>",
          "parameters": [
            {
              "name": "slottedInput",
              "type": "HTMLInputElement",
              "docs": ""
            }
          ],
          "docs": "Allows passing an alternative light DOM input.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets focus styling on `<market-input-text>`. Toggles focus on the inner `<input>` if true, and blurs focus if false.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketInputDidLoad",
          "detail": "{ input: HTMLInputElement; }",
          "bubbles": true,
          "complexType": {
            "original": "{ input: HTMLInputElement }",
            "resolved": "{ input: HTMLInputElement; }",
            "references": {
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when `market-input` is first fully rendered.",
          "docsTags": []
        },
        {
          "event": "marketInputValueChange",
          "detail": "{ value: string; originalEvent: KeyboardEvent; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: string; originalEvent: KeyboardEvent }",
            "resolved": "{ value: string; originalEvent: KeyboardEvent; }",
            "references": {
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the input value changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketDialogLoaded",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The main label for the input."
        },
        {
          "name": "input",
          "docs": "Can be used to slot your own HTML input, if needed (ex. if supporting browser\nautofill)"
        },
        {
          "name": "leading-accessory",
          "docs": "An icon set on the left side of the input."
        },
        {
          "name": "trailing-accessory",
          "docs": "An icon set on the right side of the input."
        }
      ],
      "parts": [
        {
          "name": "native-input",
          "docs": "The default inner HTML input."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-link/market-link.tsx",
      "encapsulation": "shadow",
      "tag": "market-link",
      "readme": "# market-link\n\nA simple styled link component.\n",
      "docs": "A simple styled link component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The text used for the link."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "destructive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "destructive",
          "reflectToAttr": true,
          "docs": "Gives the link destructive styling.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Visually disables the link and prevents navigating to the link on click.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "Causes the browser to treat the linked URL as a download. Only works for same-origin URLs.\nOnly applies when an `href` is provided.\nSee [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download) for details on accepted values.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlight",
          "type": "\"underline\" | boolean",
          "complexType": {
            "original": "null | false | 'underline'",
            "resolved": "\"underline\" | boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "highlight",
          "reflectToAttr": true,
          "docs": "Links that exist within a larger block of text need to rely on more than color to meet accessibility standards.",
          "docsTags": [],
          "values": [
            {
              "value": "underline",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "String that represents the URL the link goes to.\nIf not present, the internal tag will be a `<button>` rather than `<a>` in order to align with a11y best practices.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Defines the relationship between a linked resource and the current document.\nOnly applies when an `href` is provided.\nSee [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel) for details on accepted values.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
          "complexType": {
            "original": "'_blank' | '_self' | '_parent' | '_top' | undefined",
            "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to open the linked URL.\nSee [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_parent",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The text used for the link."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-list/market-list.tsx",
      "encapsulation": "shadow",
      "tag": "market-list",
      "readme": "# market-list\n\nA component for displaying lists of items.\n\nYou can slot `<market-row>` or `<market-action-card>` into `<market-list>`. If\nthe list is `interactive`, it will handle selection/deselection of its slotted\nrows or cards.\n\n`<market-list>` and `<market-row>` can be used together in `<market-select>`'s\n`list` slot and will function in that context as an interactive list of options.\n",
      "docs": "A component for displaying lists of items.\n\nYou can slot `<market-row>` or `<market-action-card>` into `<market-list>`. If\nthe list is `interactive`, it will handle selection/deselection of its slotted\nrows or cards.\n\n`<market-list>` and `<market-row>` can be used together in `<market-select>`'s\n`list` slot and will function in that context as an interactive list of options.",
      "docsTags": [
        {
          "name": "slot",
          "text": "control-row - Intended for use with interactive multiselect lists. When used with a\n`<market-row>` containing a slotted control (such as `<market-checkbox>`), toggling this row\nwill select/deselect all list options."
        },
        {
          "name": "slot",
          "text": "search - Intended for use with `<market-input-search>`"
        },
        {
          "name": "slot",
          "text": "empty-state - Intended for use with `<market-empty-state>`; shown when filtering items\nvia `<market-input-search>` and there are no search results."
        },
        {
          "name": "slot",
          "text": "- Intended for use with `<market-row>` or `<market-action-card>`."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "filterStrategy",
          "type": "\"label\" | \"textcontent\" | \"value\" | ((attrs: { item: TMarketListItem; label: string; query: string; textContent: string; value: string; }) => boolean)",
          "complexType": {
            "original": "TMarketListFilterStrategyPropTypes",
            "resolved": "\"label\" | \"textcontent\" | \"value\" | ((attrs: { item: TMarketListItem; label: string; query: string; textContent: string; value: string; }) => boolean)",
            "references": {
              "TMarketListFilterStrategyPropTypes": {
                "location": "import",
                "path": "./types",
                "id": "src/components/market-list/types.ts::TMarketListFilterStrategyPropTypes"
              }
            }
          },
          "mutable": false,
          "attr": "filter-strategy",
          "reflectToAttr": false,
          "docs": "Filter strategy\n\n- `\"textcontent\"` (default, case-insensitive): This strategy searches through each of the row’s `.textContent`. This means it would also search through a row’s subtext, accessories, and other slots.\n- `\"label\"` (case-insensitive): This strategy searches through the slotted `<label>` elements of rows. Note that if a `<label>` is not slotted in a row, this default filter strategy will not work.\n- `\"value\"` (case-sensitive): This strategy searches through the rows’ `value` attribute. Values are usually case-sensitive so they are treated the same way when searching for them.\n- `Function`: This strategy works similarly to `Array.prototype.filter()` where the function’s `boolean` output determines if the item will be kept or filtered out. For your convenience, you are provided with 5 parameters:\n  - `item`: `TMarketListItem`\n  - `label`: the `<label>`’s `.textContent`\n  - `query`: `value` of `<market-input-search>`\n  - `textContent`: the item’s `.textContent`\n  - `value`: `value` of the item",
          "docsTags": [],
          "default": "'textcontent'",
          "values": [
            {
              "value": "label",
              "type": "string"
            },
            {
              "value": "textcontent",
              "type": "string"
            },
            {
              "value": "value",
              "type": "string"
            },
            {
              "type": "((attrs: { item: TMarketListItem; label: string; query: string; textContent: string; value: string; }) => boolean)"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideSelectableCount",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-selectable-count",
          "reflectToAttr": true,
          "docs": "Whether a count of selectable items rendered within the control row will be hidden",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "interactive",
          "reflectToAttr": false,
          "docs": "Whether or not the list is interactive. Results in list items receiving hover\nand active styling when hovered/clicked.<br>\n\n_NOTE:_ Lists slotted into `market-popover`, or any of the components that use it\ninternally such as `market-select`, `market-dropdown`, and `market-button-dropdown`,\nwill automatically have their `interactive` property set to `true`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiselect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiselect",
          "reflectToAttr": true,
          "docs": "Whether or not the list can allow for multiple selections (currently not\nreflected in the `value` prop)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "String value used for the `aria-labelledby` attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reorderMode",
          "type": "\"default\" | \"framework\"",
          "complexType": {
            "original": "'default' | 'framework'",
            "resolved": "\"default\" | \"framework\"",
            "references": {}
          },
          "mutable": false,
          "attr": "reorder-mode",
          "reflectToAttr": false,
          "docs": "When set to `framework`, the list will move the reordered row back to its original position\nbefore the `marketListItemsReordered` event is fired. This is useful when the list\nis rendered within a framework like Ember or React.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "framework",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reorderable",
          "type": "\"external\" | \"internal\" | \"off\"",
          "complexType": {
            "original": "TMarketReorderableOptions",
            "resolved": "\"external\" | \"internal\" | \"off\"",
            "references": {
              "TMarketReorderableOptions": {
                "location": "import",
                "path": "../../utils/reorderable",
                "id": "src/utils/reorderable.ts::TMarketReorderableOptions"
              }
            }
          },
          "mutable": false,
          "attr": "reorderable",
          "reflectToAttr": true,
          "docs": "Whether the list is reorderable or not.\nSetting to `internal` enables reordering rows internally\nwhile `external` also allows dragging to & from other lists.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "external",
              "type": "string"
            },
            {
              "value": "internal",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "transient",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "transient",
          "reflectToAttr": false,
          "docs": "When set to `true`, rows/cards will not persist selected state on click. Only takes effect when `interactive` is true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any[] | string",
          "complexType": {
            "original": "string | Array<any>",
            "resolved": "any[] | string",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the list. To select multiple values,\nseparate **unique** values with a comma (e.g. `'orange,pear'`).\nSetting to empty string (`''`) will clear all current selections.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "any[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "focusRowAtIndex",
          "returns": {
            "type": "Promise<void>",
            "docs": "A promise that resolves when the row is focused."
          },
          "complexType": {
            "signature": "(index: number) => Promise<void>",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "docs": "- The index of the row to focus."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "focusRowAtIndex(index: number) => Promise<void>",
          "parameters": [
            {
              "name": "index",
              "type": "number",
              "docs": "- The index of the row to focus."
            }
          ],
          "docs": "Focuses the row at the given index.",
          "docsTags": [
            {
              "name": "param",
              "text": "index - The index of the row to focus."
            },
            {
              "name": "returns",
              "text": "A promise that resolves when the row is focused."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "marketListItemsFiltered",
          "detail": "{ items: (HTMLMarketActionCardElement | HTMLMarketRowElement)[]; prevItems: (HTMLMarketActionCardElement | HTMLMarketRowElement)[]; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketListItemsFilteredEventDetail",
            "resolved": "{ items: (HTMLMarketActionCardElement | HTMLMarketRowElement)[]; prevItems: (HTMLMarketActionCardElement | HTMLMarketRowElement)[]; }",
            "references": {
              "TMarketListItemsFilteredEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-list/events.ts::TMarketListItemsFilteredEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when items are filtered using `market-input-search`",
          "docsTags": []
        },
        {
          "event": "marketListItemsReordered",
          "detail": "{ item: MarketDraggableElement; oldIndex: number; newIndex: number; }",
          "bubbles": false,
          "complexType": {
            "original": "TMarketReorderEventDetail",
            "resolved": "{ item: MarketDraggableElement; oldIndex: number; newIndex: number; }",
            "references": {
              "TMarketReorderEventDetail": {
                "location": "import",
                "path": "../../utils/reorderable",
                "id": "src/utils/reorderable.ts::TMarketReorderEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the list items are reordered.\nIf an item was dropped into this list from an external list, `oldIndex` is `-1`.\nIf an item was removed from this list and dropped into an external list, `newIndex` is `-1`.",
          "docsTags": []
        },
        {
          "event": "marketListSelectionsDidChange",
          "detail": "{ currentSelections: (HTMLMarketActionCardElement | HTMLMarketRowElement)[]; currentSelectionValues: string[]; newDeselection: HTMLMarketActionCardElement | HTMLMarketRowElement; newDeselectionValue: string; newSelection: HTMLMarketActionCardElement | HTMLMarketRowElement; newSelectionValue: string; prevSelectionValues: string[]; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketListSelectionsDidChangeEventDetail",
            "resolved": "{ currentSelections: (HTMLMarketActionCardElement | HTMLMarketRowElement)[]; currentSelectionValues: string[]; newDeselection: HTMLMarketActionCardElement | HTMLMarketRowElement; newDeselectionValue: string; newSelection: HTMLMarketActionCardElement | HTMLMarketRowElement; newSelectionValue: string; prevSelectionValues: string[]; }",
            "references": {
              "TMarketListSelectionsDidChangeEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-list/events.ts::TMarketListSelectionsDidChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever an item is selected or deselected.",
          "docsTags": [
            {
              "name": "property",
              "text": "{TMarketListItem} newSelection\n- the row or card that has been selected"
            },
            {
              "name": "property",
              "text": "{string} newSelectionValue - the value of the new selection"
            },
            {
              "name": "property",
              "text": "{TMarketListItem} newDeselection\n- the row or card that has been deselected"
            },
            {
              "name": "property",
              "text": "{string} newDeselectionValue - the value of the new deselection"
            },
            {
              "name": "property",
              "text": "{Array<TMarketListItem>} currentSelections\n- an array of the currently selected rows or cards (excludes slotted control row, if any)"
            },
            {
              "name": "property",
              "text": "{string[]} currentSelectionValues - an array of the currently selected values\n(excludes slotted control row, if any)"
            },
            {
              "name": "property",
              "text": "{string[]} prevSelectionValues - an array of the previously selected values\n(excludes slotted control row, if any)"
            }
          ]
        },
        {
          "event": "marketListSlotChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the slotchange event happens on the list. Allows parent components (like `market-select`)\nto update when slotted list items change.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketRowSelected",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketRowDeselected",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketCardSelected",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketCardDeselected",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketInputSearchValueChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Intended for use with `<market-row>` or `<market-action-card>`."
        },
        {
          "name": "control-row",
          "docs": "Intended for use with interactive multiselect lists. When used with a\n`<market-row>` containing a slotted control (such as `<market-checkbox>`), toggling this row\nwill select/deselect all list options."
        },
        {
          "name": "empty-state",
          "docs": "Intended for use with `<market-empty-state>`; shown when filtering items\nvia `<market-input-search>` and there are no search results."
        },
        {
          "name": "search",
          "docs": "Intended for use with `<market-input-search>`"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-modal-full/market-modal-full.tsx",
      "encapsulation": "shadow",
      "tag": "market-modal-full",
      "readme": "# market-modal-full\n\nNote: Dialogs/Modals in Market are \"dumb\" components and are mostly only concerned with how\nthey look on the page. They don't know anything about closing & opening or even\nhow they are positioned on the page. Those things are handled by the context and\ncontext manager.\n",
      "docs": "Note: Dialogs/Modals in Market are \"dumb\" components and are mostly only concerned with how\nthey look on the page. They don't know anything about closing & opening or even\nhow they are positioned on the page. Those things are handled by the context and\ncontext manager.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animationEnterDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-enter-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal enter animation, set from design tokens",
          "docsTags": [],
          "default": "MODAL_FULL_ANIMATION_ENTER_TRANSITION_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animationExitDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-exit-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal exit animation, set from design tokens",
          "docsTags": [],
          "default": "MODAL_FULL_ANIMATION_EXIT_TRANSITION_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dialogID",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "data-dialog-id",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used in CSS to trigger start and stop animations",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "data-dialog-index",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place\nin the stack",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"fluid\" | \"regular\" | \"wide\"",
          "complexType": {
            "original": "'regular' | 'wide' | 'fluid'",
            "resolved": "\"fluid\" | \"regular\" | \"wide\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Sets the layout width for the main content area. Defaults to `regular`, which sets a\na maximum content width of 600px. You can also use `wide` for a max 1248px content area,\nor `fluid` to have content fill the whole viewport.",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "fluid",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            },
            {
              "value": "wide",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trapFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "trap-focus",
          "reflectToAttr": false,
          "docs": "Enforces focus trapping on the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "activateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "Options",
                "docs": "[focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
              },
              {
                "name": "activateOptions",
                "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
                "docs": "set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapOptions"
              },
              "FocusTrapActivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapActivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "Options",
              "docs": "[focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "activateOptions",
              "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
              "docs": "set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ],
          "docs": "Activates the focus trap\n\nSee [`focus-trap.ts`](../../utils/focus-trap.ts) for default options",
          "docsTags": [
            {
              "name": "param",
              "text": "options [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "param",
              "text": "activateOptions set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ]
        },
        {
          "name": "deactivateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "deactivateOptions",
                "type": "DeactivateOptions",
                "docs": "set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapDeactivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapDeactivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "deactivateOptions",
              "type": "DeactivateOptions",
              "docs": "set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ],
          "docs": "Deactivates the focus trap",
          "docsTags": [
            {
              "name": "param",
              "text": "deactivateOptions set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ]
        },
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>",
            "parameters": [
              {
                "name": "dismissOptions",
                "type": "{ dialog?: DialogElement; type?: \"dialog\" | \"modal-full\" | \"modal-partial\" | \"blade\" | \"sheet\"; origin?: HTMLElement; }",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "dismiss(dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>",
          "parameters": [
            {
              "name": "dismissOptions",
              "type": "{ dialog?: DialogElement; type?: \"dialog\" | \"modal-full\" | \"modal-partial\" | \"blade\" | \"sheet\"; origin?: HTMLElement; }",
              "docs": ""
            }
          ],
          "docs": "Emits the dismiss event\nThe parent context will handle actually removing elements from the DOM,\nAll the modal needs to do it emit an event so actually closing it can be\nsome other elements problem",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketDialogDidDismiss",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the dialog is fully dismissed",
          "docsTags": []
        },
        {
          "event": "marketDialogDismissed",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the modal is dismissed, handled by context manager",
          "docsTags": []
        },
        {
          "event": "marketDialogLoaded",
          "detail": "DialogLoadedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogLoadedEvent",
            "resolved": "DialogLoadedEvent",
            "references": {
              "DialogLoadedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogLoadedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the modal finishes loading",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketHeaderNavigate",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-modal-partial/market-modal-partial.tsx",
      "encapsulation": "shadow",
      "tag": "market-modal-partial",
      "readme": "# market-modal-partial\n\nNote: Dialogs/Modals in Market are \"dumb\" components and are mostly only concerned with how\nthey look on the page. They don't know anything about closing & opening or even\nhow they are positioned on the page. Those things are handled by the context and\ncontext manager.\n",
      "docs": "Note: Dialogs/Modals in Market are \"dumb\" components and are mostly only concerned with how\nthey look on the page. They don't know anything about closing & opening or even\nhow they are positioned on the page. Those things are handled by the context and\ncontext manager.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animationEnterDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-enter-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal enter animation, set from design tokens",
          "docsTags": [],
          "default": "MODAL_PARTIAL_ANIMATION_ENTER_TRANSITION_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animationExitDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-exit-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal exit animation, set from design tokens",
          "docsTags": [],
          "default": "MODAL_PARTIAL_ANIMATION_EXIT_TRANSITION_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dialogID",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "data-dialog-id",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used in CSS to trigger start and stop animations",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "data-dialog-index",
          "reflectToAttr": true,
          "docs": "INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place\nin the stack",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trapFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "trap-focus",
          "reflectToAttr": false,
          "docs": "Enforces focus trapping on the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "activateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "Options",
                "docs": "[focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
              },
              {
                "name": "activateOptions",
                "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
                "docs": "set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapOptions"
              },
              "FocusTrapActivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapActivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "Options",
              "docs": "[focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "activateOptions",
              "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
              "docs": "set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ],
          "docs": "Activates the focus trap\n\nSee [`focus-trap.ts`](../../utils/focus-trap.ts) for default options",
          "docsTags": [
            {
              "name": "param",
              "text": "options [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "param",
              "text": "activateOptions set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ]
        },
        {
          "name": "deactivateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "deactivateOptions",
                "type": "DeactivateOptions",
                "docs": "set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapDeactivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapDeactivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "deactivateOptions",
              "type": "DeactivateOptions",
              "docs": "set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ],
          "docs": "Deactivates the focus trap",
          "docsTags": [
            {
              "name": "param",
              "text": "deactivateOptions set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ]
        },
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>",
            "parameters": [
              {
                "name": "dismissOptions",
                "type": "{ dialog?: DialogElement; type?: \"dialog\" | \"modal-full\" | \"modal-partial\" | \"blade\" | \"sheet\"; origin?: HTMLElement; }",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Partial": {
                "location": "global",
                "id": "global::Partial"
              },
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "dismiss(dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>",
          "parameters": [
            {
              "name": "dismissOptions",
              "type": "{ dialog?: DialogElement; type?: \"dialog\" | \"modal-full\" | \"modal-partial\" | \"blade\" | \"sheet\"; origin?: HTMLElement; }",
              "docs": ""
            }
          ],
          "docs": "Emits the dismiss event\nThe parent context will handle actually removing elements from the DOM,\nAll the modal needs to do it emit an event so actually closing it can be\nsome other elements problem",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketDialogDidDismiss",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the dialog is fully dismissed",
          "docsTags": []
        },
        {
          "event": "marketDialogDismissed",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the dialog is dismissed, handled by context manager",
          "docsTags": []
        },
        {
          "event": "marketDialogLoaded",
          "detail": "DialogLoadedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogLoadedEvent",
            "resolved": "DialogLoadedEvent",
            "references": {
              "DialogLoadedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogLoadedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the modal finishes loading",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketHeaderNavigate",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-pagination/market-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "market-pagination",
      "readme": "# market-pagination\n\nA component to use for pagination. Renders two subcomponents: `<market-pagination-page-size>`, a dropdown for selecting the page size (number of items per page), and `<market-pagination-nav>`, a dropdown for selecting a specific page, and buttons for navigating to the previous/next pages. The previous button will be disabled if the current page is the first page, and the next button will be disabled if the current page is the last page.\n\nThis component does not handle actually rendering any paginated items, nor does it implement any kind of navigation on its own. It emits the following events in response to user interaction, which should be listened to and implemented by the client application:\n\n- `marketPaginationPageSizeChange` - emits `{ pageSize }`\n- `marketPaginationNavigation` - emits `{ page, prevPage, pageSize }`\n\n_That means when interacting with the Storybook examples, the selected value in the dropdowns will not change. You can inspect the Actions pane of the story to view the emitted event details._\n",
      "docs": "A component to use for pagination. Renders two subcomponents: `<market-pagination-page-size>`, a dropdown for selecting the page size (number of items per page), and `<market-pagination-nav>`, a dropdown for selecting a specific page, and buttons for navigating to the previous/next pages. The previous button will be disabled if the current page is the first page, and the next button will be disabled if the current page is the last page.\n\nThis component does not handle actually rendering any paginated items, nor does it implement any kind of navigation on its own. It emits the following events in response to user interaction, which should be listened to and implemented by the client application:\n\n- `marketPaginationPageSizeChange` - emits `{ pageSize }`\n- `marketPaginationNavigation` - emits `{ page, prevPage, pageSize }`\n\n_That means when interacting with the Storybook examples, the selected value in the dropdowns will not change. You can inspect the Actions pane of the story to view the emitted event details._",
      "docsTags": [
        {
          "name": "slot",
          "text": "page-size-label - localized string to label the page size dropdown (defaults to English \"Results per page\")"
        },
        {
          "name": "slot",
          "text": "page-size-feedback - localized string to label the current page size (defaults to value of {this.pageSize})"
        },
        {
          "name": "slot",
          "text": "nav-label - localized string to label the page dropdown (defaults to English \"Page\")"
        },
        {
          "name": "slot",
          "text": "nav-feedback - localized string to label the current page of total pages\n(defaults to English \"{this.currentPage} of {this.totalPages}\").\nThe #s for current page/total pages need to be passed in as part of the string."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "The current page being viewed.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables all navigation buttons",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasNextPage",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "has-next-page",
          "reflectToAttr": false,
          "docs": "Allow the user to navigate to the next page",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "hasPreviousPage",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "has-previous-page",
          "reflectToAttr": false,
          "docs": "Allow the user to navigate to the previous page",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "pageSize",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size",
          "reflectToAttr": false,
          "docs": "The number of results displayed per page.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageSizeOptions",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size-options",
          "reflectToAttr": false,
          "docs": "Options for page sizes (comma separated list of numbers). If omitted, will not display the page size subcomponent.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "The total number of pages.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketPaginationNavigation",
          "detail": "{ page: string; prevPage: string; pageSize: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketInternalPaginationNavigationEventDetail",
            "resolved": "{ page: string; prevPage: string; pageSize: string; }",
            "references": {
              "TMarketInternalPaginationNavigationEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-pagination/events.ts::TMarketInternalPaginationNavigationEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the menu selection is changed.",
          "docsTags": []
        },
        {
          "event": "marketPaginationPageSizeChange",
          "detail": "{ value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketPaginationPageSizeChangeEventDetail",
            "resolved": "{ value: string; }",
            "references": {
              "TMarketPaginationPageSizeChangeEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-pagination/events.ts::TMarketPaginationPageSizeChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the page size is changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketInternalPaginationPageSizeChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketInternalPaginationNavigation",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "nav-feedback",
          "docs": "localized string to label the current page of total pages\n(defaults to English \"{this.currentPage} of {this.totalPages}\").\nThe #s for current page/total pages need to be passed in as part of the string."
        },
        {
          "name": "nav-label",
          "docs": "localized string to label the page dropdown (defaults to English \"Page\")"
        },
        {
          "name": "page-size-feedback",
          "docs": "localized string to label the current page size (defaults to value of {this.pageSize})"
        },
        {
          "name": "page-size-label",
          "docs": "localized string to label the page size dropdown (defaults to English \"Results per page\")"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-pagination/subcomponents/market-pagination-nav/market-pagination-nav.tsx",
      "encapsulation": "none",
      "tag": "market-pagination-nav",
      "readme": "# market-pagination-nav\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "The current page being viewed.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the navigation buttons",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasNextPage",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "has-next-page",
          "reflectToAttr": false,
          "docs": "Allow the user to navigate to the next page",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "hasPreviousPage",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "has-previous-page",
          "reflectToAttr": false,
          "docs": "Allow the user to navigate to the previous page",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "pageSize",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size",
          "reflectToAttr": false,
          "docs": "The number of results displayed per page.\nRequired to emit this value as part of the navigation event.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "The total number of pages.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketInternalPaginationNavigation",
          "detail": "{ page: string; prevPage: string; pageSize: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketInternalPaginationNavigationEventDetail",
            "resolved": "{ page: string; prevPage: string; pageSize: string; }",
            "references": {
              "TMarketInternalPaginationNavigationEventDetail": {
                "location": "import",
                "path": "../../events",
                "id": "src/components/market-pagination/events.ts::TMarketInternalPaginationNavigationEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when a new page is selected",
          "docsTags": [
            {
              "name": "property",
              "text": "{string} page - page number to navigate to"
            },
            {
              "name": "property",
              "text": "{string} prevPage - the current page _before_ navigation"
            },
            {
              "name": "property",
              "text": "{string} pageSize - the number of items per page"
            }
          ]
        }
      ],
      "listeners": [
        {
          "event": "marketListSelectionsDidChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-pagination/subcomponents/market-pagination-page-size/market-pagination-page-size.tsx",
      "encapsulation": "none",
      "tag": "market-pagination-page-size",
      "readme": "# market-pagination-pagesize\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables dropdown",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageSizeOptions",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size-options",
          "reflectToAttr": false,
          "docs": "Options for page sizes (comma separated list).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The number of results displayed per page.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketInternalPaginationPageSizeChange",
          "detail": "{ value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketPaginationPageSizeChangeEventDetail",
            "resolved": "{ value: string; }",
            "references": {
              "TMarketPaginationPageSizeChangeEventDetail": {
                "location": "import",
                "path": "../../events",
                "id": "src/components/market-pagination/events.ts::TMarketPaginationPageSizeChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the selected page size value changes",
          "docsTags": [
            {
              "name": "property",
              "text": "{string} value - new selected option"
            }
          ]
        }
      ],
      "listeners": [
        {
          "event": "marketListSelectionsDidChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-pill/market-pill.tsx",
      "encapsulation": "shadow",
      "tag": "market-pill",
      "readme": "# market-pill\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "indicator",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "indicator",
          "reflectToAttr": true,
          "docs": "Controls whether the pill should display an indicator icon.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": true,
          "docs": "Controls whether the pill should react to hovers/clicks. It is recommended to only set this to true if you have also slotted an icon into the pill.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'medium' | 'small'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting pill size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"alpha\" | \"beta\" | \"critical\" | \"emphasis\" | \"insight\" | \"normal\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "MarketPillVariant",
            "resolved": "\"alpha\" | \"beta\" | \"critical\" | \"emphasis\" | \"insight\" | \"normal\" | \"success\" | \"warning\"",
            "references": {
              "MarketPillVariant": {
                "location": "import",
                "path": "../../utils/pill-variant",
                "id": "src/utils/pill-variant.ts::MarketPillVariant"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "Sets the visual variant style for the pill.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "alpha",
              "type": "string"
            },
            {
              "value": "beta",
              "type": "string"
            },
            {
              "value": "critical",
              "type": "string"
            },
            {
              "value": "emphasis",
              "type": "string"
            },
            {
              "value": "insight",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-popover/market-popover.tsx",
      "encapsulation": "shadow",
      "tag": "market-popover",
      "readme": "# market-popover\n\nA simple component used by other components like `<market-select>` and `<market-dropdown>` to display popovers.\n",
      "docs": "A simple component used by other components like `<market-select>` and `<market-dropdown>` to display popovers.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Displays whatever you put between `<market-popover>` and `</market-popover>`\n(can be string literals, Market component(s), HTML element(s), or any combination)\n\nIf slot contains `<market-list>` elements, `initInteractiveList()` will set the\n`interactive` property on each instance of `<market-list>` to `true`."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Displays whatever you put between `<market-popover>` and `</market-popover>`\n(can be string literals, Market component(s), HTML element(s), or any combination)\n\nIf slot contains `<market-list>` elements, `initInteractiveList()` will set the\n`interactive` property on each instance of `<market-list>` to `true`."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-progress-tracker/market-progress-tracker.tsx",
      "encapsulation": "shadow",
      "tag": "market-progress-tracker",
      "readme": "# market-progress-tracker\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot, intended to be slotted with `<market-progress-tracker-step>`s"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "compact",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Whether the progress tracker is in compact mode\n\nOnly functional when `orientation` is set to `\"horizontal\"`",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "connectorless",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "connectorless",
          "reflectToAttr": false,
          "docs": "Whether there are connectors displayed between steps",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentStepIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "current-step-index",
          "reflectToAttr": true,
          "docs": "Index of the current step of the tracker\n\nWhen defined, the child `market-progress-tracker-step` components’\n`active` and `completed` attributes will be automatically set.\n\nOtherwise, it is expected that the steps’\n`active` and `completed` properties are manually set.",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indicator",
          "type": "\"check\" | \"circle\"",
          "complexType": {
            "original": "'circle' | 'check'",
            "resolved": "\"check\" | \"circle\"",
            "references": {}
          },
          "mutable": false,
          "attr": "indicator",
          "reflectToAttr": false,
          "docs": "Type of icon used to indicate the step’s progress",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "value": "check",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": false,
          "docs": "Whether this step tracker is interactive\n\nOnly functional when `orientation` is set to `\"horizontal\"`",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Progress tracker orientation",
          "docsTags": [
            {
              "name": "default",
              "text": "'vertical'"
            }
          ],
          "default": "'vertical'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reversed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "reversed",
          "reflectToAttr": false,
          "docs": "Whether the direction of the progress indicators is reversed",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'large' | 'medium' | 'small'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Steps’ size",
          "docsTags": [
            {
              "name": "default",
              "text": "'medium'"
            }
          ],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "marketProgressTrackerStepClick",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot, intended to be slotted with `<market-progress-tracker-step>`s"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-progress-tracker/subcomponents/market-progress-tracker-step/market-progress-tracker-step.tsx",
      "encapsulation": "shadow",
      "tag": "market-progress-tracker-step",
      "readme": "# market-progress-tracker-step\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "label - Primary text for the step"
        },
        {
          "name": "slot",
          "text": "subtext - Secondary text for the step"
        },
        {
          "name": "part",
          "text": "icon - The `<market-accessory>` that contains the custom icon indicator"
        },
        {
          "name": "part",
          "text": "content - The container for the text content"
        },
        {
          "name": "part",
          "text": "button - The clickable part when interactive and on horizontal orientation"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the step is active",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "completed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "completed",
          "reflectToAttr": true,
          "docs": "Whether the step is completed",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Unique name of the step\n\nWhen this step is interactive and clicked, it is included in the detail of the emitted event.",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketProgressTrackerStepClick",
          "detail": "{ index: number; name: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketProgressTrackerStepClickEventDetail",
            "resolved": "{ index: number; name: string; }",
            "references": {
              "TMarketProgressTrackerStepClickEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-progress-tracker/subcomponents/market-progress-tracker-step/events.ts::TMarketProgressTrackerStepClickEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when this step is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "label",
          "docs": "Primary text for the step"
        },
        {
          "name": "subtext",
          "docs": "Secondary text for the step"
        }
      ],
      "parts": [
        {
          "name": "button",
          "docs": "The clickable part when interactive and on horizontal orientation"
        },
        {
          "name": "content",
          "docs": "The container for the text content"
        },
        {
          "name": "icon",
          "docs": "The `<market-accessory>` that contains the custom icon indicator"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-qrcode/market-qrcode.tsx",
      "encapsulation": "shadow",
      "tag": "market-qrcode",
      "readme": "# market-qrcode\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "Include a six data-pixel border around the QR code. When this attribute is\npresent, the QR code will have a background color (default is transparent\nbackground).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "content",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "content",
          "reflectToAttr": true,
          "docs": "The URL or other content of the QR code. The QR code is generated using\n[@square/qrcode-encoder](https://github.com/squareup/qrcode/blob/master/packages/square-qrcode-encoder/README.md).",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "monochrome",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "monochrome",
          "reflectToAttr": true,
          "docs": "When true, QR code will render all elements in black & white.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "By default, QR code size is dependent on the information being encoded.\nUse this property to set the QR code's height and width in pixels.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-radio/market-radio.tsx",
      "encapsulation": "shadow",
      "tag": "market-radio",
      "readme": "# market-radio\n\n`<market-radio>` can be used on its own, or slotted into `<market-row>` as a control. When used with `market-row`, the\nrow's `selected` prop overrides the radio's `selected` prop.\n",
      "docs": "`<market-radio>` can be used on its own, or slotted into `<market-row>` as a control. When used with `market-row`, the\nrow's `selected` prop overrides the radio's `selected` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the radio is active or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the radio button is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether the radio is focused or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hovered",
          "reflectToAttr": true,
          "docs": "Whether the radio is hovered or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Whether the radio button is invalid.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether the radio button is selected (analogous to the HTML input attribute `checked`).\nIf used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setActive(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `active` state. Allows external elements to programmatically\ntrigger active styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setDisabled",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setDisabled(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `disabled` state. Allows external elements to programmatically\ntrigger disabled styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `focused` state, except when disabled.\nAllows external consumers to programmatically\ntrigger focused styling.",
          "docsTags": []
        },
        {
          "name": "setHover",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setHover(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `hovered` state. Allows external elements to programmatically\ntrigger hover styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setSelection",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>",
            "parameters": [
              {
                "name": "newValue",
                "type": "boolean",
                "docs": ""
              },
              {
                "name": "__1",
                "type": "{ silent?: boolean; }",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setSelection(newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>",
          "parameters": [
            {
              "name": "newValue",
              "type": "boolean",
              "docs": ""
            },
            {
              "name": "__1",
              "type": "{ silent?: boolean; }",
              "docs": ""
            }
          ],
          "docs": "Toggles `selected` prop, and emits a change event accordingly.\nUsed by `market-row` to sync its selected state w/ slotted radio buttons.",
          "docsTags": []
        },
        {
          "name": "setValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newValue: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "newValue",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setValue(newValue: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "newValue",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketRadioValueChange",
          "detail": "{ current: boolean; previous: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ current: boolean; previous: boolean }",
            "resolved": "{ current: boolean; previous: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever \"selected\" prop value changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-row/market-row.tsx",
      "encapsulation": "shadow",
      "tag": "market-row",
      "readme": "# market-row\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "label - Text label for the row"
        },
        {
          "name": "slot",
          "text": "subtext - Secondary text for the row"
        },
        {
          "name": "slot",
          "text": "side-label - Additional text label to display on the side of the row"
        },
        {
          "name": "slot",
          "text": "side-subtext - Secondary text to display on the side of the row"
        },
        {
          "name": "slot",
          "text": "control - An interactive control, intended for use with `<market-checkbox>`, `<market-radio>`, or `<market-toggle>`.\nThe row's `selected` prop will set the control's selection state."
        },
        {
          "name": "slot",
          "text": "leading-accessory - An icon set on the left side of the row; intended for use with `<market-accessory>`"
        },
        {
          "name": "slot",
          "text": "trailing-accessory - An icon set on the right side of the row; intended for use with `<market-accessory>`"
        },
        {
          "name": "slot",
          "text": "- Default slot can take any content, intended as an \"escape hatch\" for\nscenarios where rows need to contain more complex HTML content stylable from\nthe light DOM."
        },
        {
          "name": "part",
          "text": "container - Wraps the main and side areas (see below). The outer padding of the row is specified on this element."
        },
        {
          "name": "part",
          "text": "main - Wraps the label and subtext slots, can be used for styling purposes as needed."
        },
        {
          "name": "part",
          "text": "side - Wraps the side-label and side-subtext slots, can be used for styling purposes as needed."
        },
        {
          "name": "part",
          "text": "drag-handle - the drag handle when `dragEnabled` is true."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "controlPosition",
          "type": "\"leading\" | \"trailing\"",
          "complexType": {
            "original": "'trailing' | 'leading'",
            "resolved": "\"leading\" | \"trailing\"",
            "references": {}
          },
          "mutable": false,
          "attr": "control-position",
          "reflectToAttr": false,
          "docs": "Whether the slotted control appears to the left or right of the main content.",
          "docsTags": [],
          "default": "'trailing'",
          "values": [
            {
              "value": "leading",
              "type": "string"
            },
            {
              "value": "trailing",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "destructive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "destructive",
          "reflectToAttr": true,
          "docs": "Gives the row destructive styling.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the row is disabled.\nAlso disables slotted controls (`<market-checkbox>`, `<market-radio>`, or `<market-toggle>`), if present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-enabled",
          "reflectToAttr": true,
          "docs": "Whether the row is drag & drop enabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragHandlePosition",
          "type": "\"leading\" | \"trailing\"",
          "complexType": {
            "original": "'leading' | 'trailing'",
            "resolved": "\"leading\" | \"trailing\"",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-handle-position",
          "reflectToAttr": true,
          "docs": "Whether the drag handle appears to the left or right.",
          "docsTags": [],
          "default": "'trailing'",
          "values": [
            {
              "value": "leading",
              "type": "string"
            },
            {
              "value": "trailing",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "A link that this row should navigate to on click.\nIf this property is set, an anchor tag will be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "interactive",
          "reflectToAttr": true,
          "docs": "Whether or not the row is interactive. Results in rows receiving hover\nand active styling when hovered/clicked.\n\nAutomatically set to `true` when using the drill variant\nor passing in a slotted control (checkbox/radio/toggle).<br>\n\nAutomatically be set to reflect the list's `interactive`\nvalue if used inside of `<market-list>`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether the row is currently selected. Used by `<market-list>` and `<market-select>`.\nAlso sets the selection state for slotted controls (`<market-checkbox>`, `<market-radio>`, or `<market-toggle>`),\nif present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Determines the form factor of the row.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
          "complexType": {
            "original": "'_blank' | '_self' | '_parent' | '_top' | undefined",
            "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSee [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_parent",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "togglable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "togglable",
          "reflectToAttr": false,
          "docs": "By default, row selection is toggled on click. There are some cases, such\nas selects, where we instead want the row to stay active on subsequent\nclicks. Setting `togglable` to `false` enables this behavior. Can be set\nby `<market-list>` and `<market-select>`.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "transient",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "transient",
          "reflectToAttr": true,
          "docs": "When set to `true`, rows will not persist selected state on click.\nOnly takes effect when `interactive` is true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The value for the row.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"drill\" | \"regular\"",
          "complexType": {
            "original": "'regular' | 'drill'",
            "resolved": "\"drill\" | \"regular\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The style of row you want to use. The default is \"regular\", which allows\nyou to optionally slot a checkbox, radio, or (in the future) toggle control.\nThe other option is \"drill\", which functions more like a link that you can\nuse to drill through a series of action card sets.",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "drill",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketRowDeselected",
          "detail": "{ value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketRowDeselectedEventDetail",
            "resolved": "{ value: string; }",
            "references": {
              "TMarketRowDeselectedEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-row/events.ts::TMarketRowDeselectedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever a row is deselected.",
          "docsTags": []
        },
        {
          "event": "marketRowSelected",
          "detail": "{ value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketRowSelectedEventDetail",
            "resolved": "{ value: string; }",
            "references": {
              "TMarketRowSelectedEventDetail": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-row/events.ts::TMarketRowSelectedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever a row is selected.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot can take any content, intended as an \"escape hatch\" for\nscenarios where rows need to contain more complex HTML content stylable from\nthe light DOM."
        },
        {
          "name": "control",
          "docs": "An interactive control, intended for use with `<market-checkbox>`, `<market-radio>`, or `<market-toggle>`.\nThe row's `selected` prop will set the control's selection state."
        },
        {
          "name": "label",
          "docs": "Text label for the row"
        },
        {
          "name": "leading-accessory",
          "docs": "An icon set on the left side of the row; intended for use with `<market-accessory>`"
        },
        {
          "name": "side-label",
          "docs": "Additional text label to display on the side of the row"
        },
        {
          "name": "side-subtext",
          "docs": "Secondary text to display on the side of the row"
        },
        {
          "name": "subtext",
          "docs": "Secondary text for the row"
        },
        {
          "name": "trailing-accessory",
          "docs": "An icon set on the right side of the row; intended for use with `<market-accessory>`"
        }
      ],
      "parts": [
        {
          "name": "container",
          "docs": "Wraps the main and side areas (see below). The outer padding of the row is specified on this element."
        },
        {
          "name": "drag-handle",
          "docs": "the drag handle when `dragEnabled` is true."
        },
        {
          "name": "main",
          "docs": "Wraps the label and subtext slots, can be used for styling purposes as needed."
        },
        {
          "name": "side",
          "docs": "Wraps the side-label and side-subtext slots, can be used for styling purposes as needed."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-segmented-control/subcomponents/market-segment/market-segment.tsx",
      "encapsulation": "shadow",
      "tag": "market-segment",
      "readme": "# market-segment\n\nThis component is a subcomponent of `market-segmented-control`. It is not meant to be used as a standalone component.\n",
      "docs": "This component is a subcomponent of `market-segmented-control`. It is not meant to be used as a standalone component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the market segment should appear in a disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the segment.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "selectSegment",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "selectSegment() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setSelectedState",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(state: any) => Promise<void>",
            "parameters": [
              {
                "name": "state",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setSelectedState(state: any) => Promise<void>",
          "parameters": [
            {
              "name": "state",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketSegmentSelectedChanged",
          "detail": "{ value: boolean; prevValue: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    value: boolean;\n    prevValue: boolean;\n  }",
            "resolved": "{ value: boolean; prevValue: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the segment is clicked or otherwise selected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-segmented-control/market-segmented-control.tsx",
      "encapsulation": "shadow",
      "tag": "market-segmented-control",
      "readme": "# market-segmented-control\n\nSegmented controls are commonly used to provide a second level of navigation to display different views. They can also be used to filter a collection. Intended for use with `market-segment`.\n",
      "docs": "Segmented controls are commonly used to provide a second level of navigation to display different views. They can also be used to filter a collection. Intended for use with `market-segment`.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the market-segmented-control is disabled or not.\nThis visually and functionally will disable the control area.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the segmented-control.\nThis value determines which segment is selected based on the segment value.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketSegmentedSelectionDidChange",
          "detail": "{ selectedSegment: HTMLMarketSegmentElement; selectedSegmentValue: string; deselectedSegment: HTMLMarketSegmentElement; deselectedSegmentValue: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    selectedSegment: HTMLMarketSegmentElement;\n    selectedSegmentValue: string;\n    deselectedSegment: HTMLMarketSegmentElement;\n    deselectedSegmentValue: string;\n  }",
            "resolved": "{ selectedSegment: HTMLMarketSegmentElement; selectedSegmentValue: string; deselectedSegment: HTMLMarketSegmentElement; deselectedSegmentValue: string; }",
            "references": {
              "HTMLMarketSegmentElement": {
                "location": "global",
                "id": "global::HTMLMarketSegmentElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the a new segment is selected",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketSegmentSelectedChanged",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-select/market-select.tsx",
      "encapsulation": "shadow",
      "tag": "market-select",
      "readme": "# market-select\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Intended for use as the input's text label."
        },
        {
          "name": "slot",
          "text": "list - Intended for use with a slotted `<market-list>` containing `<market-row>`s."
        },
        {
          "name": "slot",
          "text": "leading-accessory - An accessory set on the left side of the input."
        },
        {
          "name": "slot",
          "text": "trailing-accessory - An accessory set on the right side of the input."
        },
        {
          "name": "slot",
          "text": "displayed-selection - Used internally to display the selected `market-row` while retaining any custom styling. Not intended for use by Market consumers."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the select.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether or not the select is focused.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Whether or not the select is invalid (w/ corresponding visual state)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiselect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiselect",
          "reflectToAttr": true,
          "docs": "Whether or not multiselect is enabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "String for the \"name\" attribute. Used when slotted into `market-field`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "A string specifying the placeholder for the select.\nThis is shown when the select is open with no selection.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverContainer",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "popover-container",
          "reflectToAttr": false,
          "docs": "Ancestor selector to contain the popover menu.\nUse this if you need the popover to be appended to\nan ancestor element other than the `body` element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverStrategy",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "Strategy",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "Strategy": {
                "location": "import",
                "path": "@floating-ui/dom",
                "id": "../../node_modules/@floating-ui/dom/dist/floating-ui.dom.d.ts::Strategy"
              }
            }
          },
          "mutable": false,
          "attr": "popover-strategy",
          "reflectToAttr": false,
          "docs": "Configuration option for Floating UI (used to position `<market-popover>`).\nDescribes the positioning strategy to use. By default, it is absolute. If\nyour reference element is in a fixed container, use the fixed strategy.\nhttps://floating-ui.com/docs/computePosition#strategy",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "Whether or not the select is readonly.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Whether or not the select is required. This property relays\nimportant contextual information when using a screen reader",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting select size.\nSizes `small` and `medium` visually hide the label,\nbut you should still provide one for accessibility purposes.",
          "docsTags": [],
          "default": "'large'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any[] | string",
          "complexType": {
            "original": "string | Array<any>",
            "resolved": "any[] | string",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the select\nMust correspond to a `value` attribute on a slotted `market-row`\nFor multiselect, separate values with a comma (e.g. 'orange,pear').",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "any[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "closeList",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "closeList() => Promise<void>",
          "parameters": [],
          "docs": "Closes the select.",
          "docsTags": []
        },
        {
          "name": "openList",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "openList() => Promise<void>",
          "parameters": [],
          "docs": "Opens the select.",
          "docsTags": []
        },
        {
          "name": "toggleList",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggleList() => Promise<void>",
          "parameters": [],
          "docs": "Toggles the select open and closed.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketSelectClosed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the select is closed.",
          "docsTags": []
        },
        {
          "event": "marketSelectOpened",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the select is opened.",
          "docsTags": []
        },
        {
          "event": "marketSelectValueDidChange",
          "detail": "{ value: string | any[]; newSelectedOption: HTMLMarketRowElement; newDeselectedOption: HTMLMarketRowElement; currentSelectedOptions: HTMLMarketRowElement[]; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    value: string | Array<any>;\n    newSelectedOption: HTMLMarketRowElement;\n    newDeselectedOption: HTMLMarketRowElement;\n    currentSelectedOptions: Array<HTMLMarketRowElement>;\n  }",
            "resolved": "{ value: string | any[]; newSelectedOption: HTMLMarketRowElement; newDeselectedOption: HTMLMarketRowElement; currentSelectedOptions: HTMLMarketRowElement[]; }",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "HTMLMarketRowElement": {
                "location": "global",
                "id": "global::HTMLMarketRowElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired by the `marketListSelectionsDidChange` listener.",
          "docsTags": [
            {
              "name": "property",
              "text": "{string} value - value attribute of the selected element"
            },
            {
              "name": "property",
              "text": "{HTMLMarketRowElement} newSelectedOption - the row that has just been selected"
            },
            {
              "name": "property",
              "text": "{HTMLMarketRowElement} newDeselectedOption - the row that has just been deselected"
            },
            {
              "name": "property",
              "text": "{HTMLMarketRowElement} currentSelectedOptions - the rows that are currently selected"
            }
          ]
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Intended for use as the input's text label."
        },
        {
          "name": "displayed-selection",
          "docs": "Used internally to display the selected `market-row` while retaining any custom styling. Not intended for use by Market consumers."
        },
        {
          "name": "leading-accessory",
          "docs": "An accessory set on the left side of the input."
        },
        {
          "name": "list",
          "docs": "Intended for use with a slotted `<market-list>` containing `<market-row>`s."
        },
        {
          "name": "trailing-accessory",
          "docs": "An accessory set on the right side of the input."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-sheet/market-sheet.tsx",
      "encapsulation": "shadow",
      "tag": "market-sheet",
      "readme": "# market-sheet\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animationEnterDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-enter-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal enter animation, set from design tokens",
          "docsTags": [],
          "default": "CORE_ANIMATION_ENTER_TRANSITION_MODERATE_SPEED_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animationExitDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "animation-exit-duration",
          "reflectToAttr": false,
          "docs": "The duration for the modal exit animation, set from design tokens",
          "docsTags": [],
          "default": "CORE_ANIMATION_EXIT_TRANSITION_MODERATE_SPEED_DURATION",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeHandleAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "close-handle-aria-label",
          "reflectToAttr": false,
          "docs": "Translated string to label Close handle",
          "docsTags": [],
          "default": "'Close'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disable-focus",
          "reflectToAttr": false,
          "docs": "Disable focus trapping on the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "openMode",
          "type": "\"dynamic\" | \"full\" | \"partial\"",
          "complexType": {
            "original": "'full' | 'dynamic' | 'partial'",
            "resolved": "\"dynamic\" | \"full\" | \"partial\"",
            "references": {}
          },
          "mutable": true,
          "attr": "open-mode",
          "reflectToAttr": false,
          "docs": "Default state sheet opens to when opened from close",
          "docsTags": [],
          "default": "'partial'",
          "values": [
            {
              "value": "dynamic",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "partial",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "activateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "Options",
                "docs": "[focus-trap `.createFocusTrap` options](https://github.com/focus-trap/focus-trap#createoptions)"
              },
              {
                "name": "activateOptions",
                "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
                "docs": "[focus-trap `.activate` options](https://github.com/focus-trap/focus-trap#trapactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapOptions"
              },
              "FocusTrapActivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapActivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "activateFocusTrap(options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "Options",
              "docs": "[focus-trap `.createFocusTrap` options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "activateOptions",
              "type": "{ onActivate?: () => void; onPostActivate?: () => void; checkCanFocusTrap?: (containers: (HTMLElement | SVGElement)[]) => Promise<void>; }",
              "docs": "[focus-trap `.activate` options](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ],
          "docs": "Activates the focus trap",
          "docsTags": [
            {
              "name": "param",
              "text": "options [focus-trap `.createFocusTrap` options](https://github.com/focus-trap/focus-trap#createoptions)"
            },
            {
              "name": "param",
              "text": "activateOptions [focus-trap `.activate` options](https://github.com/focus-trap/focus-trap#trapactivate)"
            }
          ]
        },
        {
          "name": "deactivateFocusTrap",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
            "parameters": [
              {
                "name": "deactivateOptions",
                "type": "DeactivateOptions",
                "docs": "[focus-trap `.deactivate` options](https://github.com/focus-trap/focus-trap#trapdeactivate)"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "FocusTrapDeactivateOptions": {
                "location": "import",
                "path": "../../utils/focus-trap",
                "id": "src/utils/focus-trap.ts::FocusTrapDeactivateOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "deactivateFocusTrap(deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>",
          "parameters": [
            {
              "name": "deactivateOptions",
              "type": "DeactivateOptions",
              "docs": "[focus-trap `.deactivate` options](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ],
          "docs": "Deactivates the focus trap",
          "docsTags": [
            {
              "name": "param",
              "text": "deactivateOptions [focus-trap `.deactivate` options](https://github.com/focus-trap/focus-trap#trapdeactivate)"
            }
          ]
        },
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(options?: any) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "dismiss(options?: any) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Emits the dismiss event\nThe parent context will handle actually removing elements from the DOM,\nAll the sheet needs to do it emit an event so actually closing it can be\nsome other elements problem",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketDialogDidDismiss",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the dialog is fully dismissed",
          "docsTags": []
        },
        {
          "event": "marketDialogDismissed",
          "detail": "DialogDismissedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogDismissedEvent",
            "resolved": "DialogDismissedEvent",
            "references": {
              "DialogDismissedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogDismissedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the sheet is dismissed, handled by context manager",
          "docsTags": []
        },
        {
          "event": "marketDialogLoaded",
          "detail": "DialogLoadedEvent",
          "bubbles": true,
          "complexType": {
            "original": "DialogLoadedEvent",
            "resolved": "DialogLoadedEvent",
            "references": {
              "DialogLoadedEvent": {
                "location": "import",
                "path": "../../utils/dialog",
                "id": "src/utils/dialog.tsx::DialogLoadedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the sheet finishes loading",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-stepper/market-stepper.tsx",
      "encapsulation": "shadow",
      "tag": "market-stepper",
      "readme": "# market-stepper\n\nA number input that can be incremented and decremented using the + and - buttons.\n",
      "docs": "A number input that can be incremented and decremented using the + and - buttons.",
      "docsTags": [
        {
          "name": "part",
          "text": "native-input - the native input element."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "decrementAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "decrement-aria-label",
          "reflectToAttr": true,
          "docs": "The decrement button's aria-label. Localize as needed.",
          "docsTags": [],
          "default": "'Decrement'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the input is disabled or not.\nThis visually and functionally disables the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether the input is focused or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "incrementAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "increment-aria-label",
          "reflectToAttr": true,
          "docs": "The increment button's aria-label. Localize as needed.",
          "docsTags": [],
          "default": "'Increment'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-aria-label",
          "reflectToAttr": true,
          "docs": "The inner input's aria-label. Localize as needed.",
          "docsTags": [],
          "default": "'Number'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "The ID for the inner input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Whether the input is invalid or not. This represents error states.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "A number specifying the greatest value in the range of permitted values.\n(See MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max))",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "A number specifying the most negative value in the range of permitted values.\n(See MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min))",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name for the inner input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The placeholder of the input. Shown before a user attempts to\nadd a value, given no value is already provided.",
          "docsTags": [],
          "default": "'0'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "Whether the input is readonly or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "A positive number specifying the increment step.\n(See MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step))",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The value for the input. This is visually shown on the input\nand can be edited by the user.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Toggle focus styling on `<market-stepper>` and focus/blur the inner `<input />`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketStepperInputFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the inner `<input>` element is focused.",
          "docsTags": []
        },
        {
          "event": "marketStepperValueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "native-input",
          "docs": "the native input element."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-tabs/subcomponents/market-tab/market-tab.tsx",
      "encapsulation": "shadow",
      "tag": "market-tab",
      "readme": "# market-tab\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- (Default slot) The text used for the button label"
        },
        {
          "name": "part",
          "text": "button - The `<button>` in the shadow DOM"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether or not the tab is disabled",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether or not the tab is selected",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Tab's size",
          "docsTags": [
            {
              "name": "default",
              "text": "'medium'"
            }
          ],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "deselect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "deselect() => Promise<void>",
          "parameters": [],
          "docs": "Deselects the tab and emits a `marketTabSelectedChanged` event",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "select() => Promise<void>",
          "parameters": [],
          "docs": "Select the tab and emits a `marketTabSelectedChanged` event",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketTabSelectedChanged",
          "detail": "{ panelId: string; prevValue: boolean; tabId: string; value: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketTabSelectedChangedEventDetail",
            "resolved": "{ panelId: string; prevValue: boolean; tabId: string; value: boolean; }",
            "references": {
              "TMarketTabSelectedChangedEventDetail": {
                "location": "import",
                "path": "../../events",
                "id": "src/components/market-tabs/events.ts::TMarketTabSelectedChangedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the tab selection has changed\n\n`market-tab-list` listens to this event and stops further propagation",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "(Default slot) The text used for the button label"
        }
      ],
      "parts": [
        {
          "name": "button",
          "docs": "The `<button>` in the shadow DOM"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-tabs/subcomponents/market-tab-list/market-tab-list.tsx",
      "encapsulation": "shadow",
      "tag": "market-tab-list",
      "readme": "# market-tab-list\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for `<market-tab>`s"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "defaultTab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "default-tab",
          "reflectToAttr": false,
          "docs": "String for the default selected tab (i.e. `market-tab`'s `id` attribute)\n\nOnly used when the component initially loads",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectedTab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected-tab",
          "reflectToAttr": true,
          "docs": "String for the selected tab (i.e. `market-tab`'s `id` attribute)\n\nOmitting or setting to empty string will default to the first non-disabled tab",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Tabs' size",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketTabListSelectedTabChanged",
          "detail": "{ prevValue: string; value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketTabListSelectedTabChangedEventDetail",
            "resolved": "{ prevValue: string; value: string; }",
            "references": {
              "TMarketTabListSelectedTabChangedEventDetail": {
                "location": "import",
                "path": "../../events",
                "id": "src/components/market-tabs/events.ts::TMarketTabListSelectedTabChangedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when a `market-tab` is selected",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketTabSelectedChanged",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for `<market-tab>`s"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-tabs/subcomponents/market-tab-panel/market-tab-panel.tsx",
      "encapsulation": "shadow",
      "tag": "market-tab-panel",
      "readme": "# market-tab-panel\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "Whether or not the panel is hidden",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-table/market-table.tsx",
      "encapsulation": "shadow",
      "tag": "market-table",
      "readme": "# market-table\n\nDesigned to be used with `market-table-row`, `market-table-column`, and `market-table-cell`.\n\nIn order to make a basic table, set up the markup as in this example:\n\n```\n<market-table>\n  <market-table-row slot=\"header\">\n    <market-table-column name=\"column-1\">Header content</market-table-column>\n    <market-table-column name=\"column-2\">Header content</market-table-column>\n    <market-table-column name=\"column-3\">Header content</market-table-column>\n  </market-table-row>\n  <market-table-row>\n    <market-table-cell>Cell content</market-table-cell>\n    <market-table-cell>Cell content</market-table-cell>\n    <market-table-cell>Cell content</market-table-cell>\n  </market-table-row>\n</market-table>\n```\n\n`market-table` uses CSS grid for layout. By default it will use auto-flow the cells into equally-sized columns, but you can refine your table's column widths by using a `grid-template-columns` definition:\n\n```css\n.my-market-table {\n  grid-template-columns: 100px 1fr 1fr;\n}\n```\n\nIn order to support custom column widths and sticky table columns, `market-table` will clip content that overflows the width of the table. If you are working on a table that needs to scroll horizontally, you can override this behavior by unsetting the `overflow-x` style:\n\n```css\n.my-market-table {\n  overflow-x: unset; /* default is 'clip' */\n}\n```\n",
      "docs": "Designed to be used with `market-table-row`, `market-table-column`, and `market-table-cell`.\n\nIn order to make a basic table, set up the markup as in this example:\n\n```\n<market-table>\n  <market-table-row slot=\"header\">\n    <market-table-column name=\"column-1\">Header content</market-table-column>\n    <market-table-column name=\"column-2\">Header content</market-table-column>\n    <market-table-column name=\"column-3\">Header content</market-table-column>\n  </market-table-row>\n  <market-table-row>\n    <market-table-cell>Cell content</market-table-cell>\n    <market-table-cell>Cell content</market-table-cell>\n    <market-table-cell>Cell content</market-table-cell>\n  </market-table-row>\n</market-table>\n```\n\n`market-table` uses CSS grid for layout. By default it will use auto-flow the cells into equally-sized columns, but you can refine your table's column widths by using a `grid-template-columns` definition:\n\n```css\n.my-market-table {\n  grid-template-columns: 100px 1fr 1fr;\n}\n```\n\nIn order to support custom column widths and sticky table columns, `market-table` will clip content that overflows the width of the table. If you are working on a table that needs to scroll horizontally, you can override this behavior by unsetting the `overflow-x` style:\n\n```css\n.my-market-table {\n  overflow-x: unset; /* default is 'clip' */\n}\n```",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for all rows"
        },
        {
          "name": "slot",
          "text": "header - Slot for header rows at the top of the table. Slotting a header row is required to set custom column\nwidths.\n\n**NOTE:** slotting rows into this area will not sticky rows to the top. Use `sticky` or\n`stick-to=\"top\"` on the row element instead."
        },
        {
          "name": "slot",
          "text": "footer - Slot for footer rows at the bottom of the table\n\n**NOTE:** slotting rows into this area will not sticky rows to the bottom. Use `sticky` or\n`stick-to=\"bottom\"` on the row element instead."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "marketTableHeaderLoaded",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketTableRowStick",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketTableRowUnstick",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketTableColumnStick",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketTableColumnUnstick",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketTableColumnVisibilityChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for all rows"
        },
        {
          "name": "footer",
          "docs": "Slot for footer rows at the bottom of the table\n\n**NOTE:** slotting rows into this area will not sticky rows to the bottom. Use `sticky` or\n`stick-to=\"bottom\"` on the row element instead."
        },
        {
          "name": "header",
          "docs": "Slot for header rows at the top of the table. Slotting a header row is required to set custom column\nwidths.\n\n**NOTE:** slotting rows into this area will not sticky rows to the top. Use `sticky` or\n`stick-to=\"top\"` on the row element instead."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-table-area/market-table-area.tsx",
      "encapsulation": "shadow",
      "tag": "market-table-area",
      "readme": "# market-table-area\n\nThis component is intended for internal use only! It is used by `market-table` to define areas for sticky rows (header/main/footer) and by `market-table-row` to define areas for sticky columns (left/main/right).\n",
      "docs": "This component is intended for internal use only! It is used by `market-table` to define areas for sticky rows (header/main/footer) and by `market-table-row` to define areas for sticky columns (left/main/right).",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether or not this table area is currently visible/has any rows or cells within",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gridTemplate",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Set by the parent market-table or market-row component to determine CSS grid template",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": true,
          "docs": "Whether or not this area is grouping columns (vertical) or rows (horizontal)",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "number[]",
          "complexType": {
            "original": "Array<number>",
            "resolved": "number[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the element's grid-column CSS property to determine where this particular element\nfalls on the parent grid. Used in vertical orientation table areas",
          "docsTags": [],
          "default": "[1, -1]",
          "values": [
            {
              "type": "number[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stickTo",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "complexType": {
            "original": "'top' | 'bottom' | 'left' | 'right'",
            "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "stick-to",
          "reflectToAttr": true,
          "docs": "Sticks this area to an edge of the table",
          "docsTags": [],
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-table-cell/market-table-cell.tsx",
      "encapsulation": "shadow",
      "tag": "market-table-cell",
      "readme": "# market-table-cell\n\nTable cells are the most atomic component of a table. You can slot any kind of content into a cell.\n\nWhen used in a `market-table`, table cells inherit properties from their parent `market-table-row`\nand corresponding `market-table-column` (if one exists). It should be rare to have to set a prop on\n`market-table-cell` directly.\n\nAnalogous to the `<td>` HTML element. \n",
      "docs": "Table cells are the most atomic component of a table. You can slot any kind of content into a cell.\n\nWhen used in a `market-table`, table cells inherit properties from their parent `market-table-row`\nand corresponding `market-table-column` (if one exists). It should be rare to have to set a prop on\n`market-table-cell` directly.\n\nAnalogous to the `<td>` HTML element.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for content"
        },
        {
          "name": "slot",
          "text": "leading-accessory - Intended for use with a leading accessory."
        },
        {
          "name": "slot",
          "text": "trailing-accessory - Intended for use with a trailing accessory."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the cell is currently active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "align",
          "type": "\"left\" | \"right\" | boolean",
          "complexType": {
            "original": "false | 'left' | 'right'",
            "resolved": "\"left\" | \"right\" | boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "align",
          "reflectToAttr": false,
          "docs": "Content/text alignment for this cell, default is set based on the alignment of the\nmarket-table-column with matching column/name prop\n\n**NOTE:** this is set automatically when used in a `market-table` with a corresponding\n`market-table-column`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "column",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "column",
          "reflectToAttr": true,
          "docs": "A key that matches the 'name' prop on the appropriate market-table-column\n\n**NOTE:** this is set automatically when used in a `market-table` with a corresponding\n`market-table-column`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the cell is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": true,
          "docs": "Whether or not the cell is interactive. Results in cell receiving\nhover and active styling when hovered/clicked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leadingIndentation",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "leading-indentation",
          "reflectToAttr": false,
          "docs": "Determines how much to indent the cell by.\nThis will be multiplied by the default indentation size (40px) for uniform indentation levels\n\n**NOTE:** this is inherited automatically if set on the parent `market-table-row`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "_stickSelf",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(position: 'left' | 'right') => Promise<void>",
            "parameters": [
              {
                "name": "position",
                "type": "\"left\" | \"right\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_stickSelf(position: 'left' | 'right') => Promise<void>",
          "parameters": [
            {
              "name": "position",
              "type": "\"left\" | \"right\"",
              "docs": ""
            }
          ],
          "docs": "**INTERNAL [do not use directly]**\nMoves this column into a slot inside the market-table-area\nwhich is fixed to the provided edge (position), allowing\nfor fixed columns",
          "docsTags": []
        },
        {
          "name": "_unstickSelf",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_unstickSelf() => Promise<void>",
          "parameters": [],
          "docs": "**INTERNAL [do not use directly]**\nMoves this column back into it's original slot from a slot\nwithin a fixed market-table-area",
          "docsTags": []
        },
        {
          "name": "_updateColumnRelatedProperties",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(column: HTMLMarketTableColumnElement) => Promise<void>",
            "parameters": [
              {
                "name": "column",
                "type": "HTMLMarketTableColumnElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLMarketTableColumnElement": {
                "location": "global",
                "id": "global::HTMLMarketTableColumnElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_updateColumnRelatedProperties(column: HTMLMarketTableColumnElement) => Promise<void>",
          "parameters": [
            {
              "name": "column",
              "type": "HTMLMarketTableColumnElement",
              "docs": ""
            }
          ],
          "docs": "**INTERNAL [do not use directly]**\nForwards appropriate properties from matching header market-table-column element to this cell.",
          "docsTags": []
        },
        {
          "name": "_updateFirstCellProperties",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(rowEl: HTMLMarketTableRowElement) => Promise<void>",
            "parameters": [
              {
                "name": "rowEl",
                "type": "HTMLMarketTableRowElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLMarketTableRowElement": {
                "location": "global",
                "id": "global::HTMLMarketTableRowElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_updateFirstCellProperties(rowEl: HTMLMarketTableRowElement) => Promise<void>",
          "parameters": [
            {
              "name": "rowEl",
              "type": "HTMLMarketTableRowElement",
              "docs": ""
            }
          ],
          "docs": "**INTERNAL [do not use directly]**\nSets properties specified in the row element. Leading and trailing\naccessories are best set on the first or last cell to not mess\nwith the grid structure",
          "docsTags": [
            {
              "name": "param",
              "text": "rowEl"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "marketTableCellClicked",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever an interactive cell is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for content"
        },
        {
          "name": "leading-accessory",
          "docs": "Intended for use with a leading accessory."
        },
        {
          "name": "trailing-accessory",
          "docs": "Intended for use with a trailing accessory."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-table-column/market-table-column.tsx",
      "encapsulation": "shadow",
      "tag": "market-table-column",
      "readme": "# market-table-column\n\nA `market-table-column` is a special type of table cell, intended for use in a `market-table-row`\nand required for any row slotted into the `header` slot of `market-table`. It controls properties\nfor all cells in a column in addition to acting as a table heading for a column (similar to how a\n`<th>` would).\n\nYou MUST pass a `[name]` attribute to every `market-table-column` element, as this is how it keeps\ntrack of its related cells.\n\n",
      "docs": "A `market-table-column` is a special type of table cell, intended for use in a `market-table-row`\nand required for any row slotted into the `header` slot of `market-table`. It controls properties\nfor all cells in a column in addition to acting as a table heading for a column (similar to how a\n`<th>` would).\n\nYou MUST pass a `[name]` attribute to every `market-table-column` element, as this is how it keeps\ntrack of its related cells.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for all content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "align",
          "type": "\"left\" | \"right\" | boolean",
          "complexType": {
            "original": "false | 'left' | 'right'",
            "resolved": "\"left\" | \"right\" | boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": false,
          "docs": "Will set the `align` property on all related cells to this value",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "Hides the column and all related cells.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "index",
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nThe order of this market-table-column in the DOM",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "**REQUIRED:** A unique key for this column, used to map all related cells together",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortOrder",
          "type": "\"ascending\" | \"descending\"",
          "complexType": {
            "original": "'ascending' | 'descending'",
            "resolved": "\"ascending\" | \"descending\"",
            "references": {}
          },
          "mutable": false,
          "attr": "sort-order",
          "reflectToAttr": true,
          "docs": "What order the column is sorting in; ascending points up and descending points down\nIf the column is sortable and this prop is not present, the sort icon points up but is grayed out.",
          "docsTags": [],
          "values": [
            {
              "value": "ascending",
              "type": "string"
            },
            {
              "value": "descending",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sortable",
          "reflectToAttr": true,
          "docs": "Whether or not this column is sortable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stickTo",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": true,
          "attr": "stick-to",
          "reflectToAttr": true,
          "docs": "Makes this column stick to an edge of the table",
          "docsTags": [],
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nSet by the parent table element, based on it's grid-template-columns CSS value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "_stickSelf",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(position: 'left' | 'right') => Promise<void>",
            "parameters": [
              {
                "name": "position",
                "type": "\"left\" | \"right\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_stickSelf(position: 'left' | 'right') => Promise<void>",
          "parameters": [
            {
              "name": "position",
              "type": "\"left\" | \"right\"",
              "docs": ""
            }
          ],
          "docs": "**INTERNAL [do not use directly]**\nMoves this column into a slot inside the market-table-area\nwhich is fixed to the provided edge (position), allowing\nfor fixed columns",
          "docsTags": []
        },
        {
          "name": "_unstickSelf",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_unstickSelf() => Promise<void>",
          "parameters": [],
          "docs": "**INTERNAL [do not use directly]**\nMoves this column back into it's original slot from a slot\nwithin a fixed market-table-area",
          "docsTags": []
        },
        {
          "name": "stick",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(position?: 'left' | 'right') => Promise<void>",
            "parameters": [
              {
                "name": "position",
                "type": "\"left\" | \"right\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "stick(position?: 'left' | 'right') => Promise<void>",
          "parameters": [
            {
              "name": "position",
              "type": "\"left\" | \"right\"",
              "docs": ""
            }
          ],
          "docs": "Fixes this column to the provided table edge (position)",
          "docsTags": []
        },
        {
          "name": "unstick",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(position?: 'left' | 'right') => Promise<void>",
            "parameters": [
              {
                "name": "position",
                "type": "\"left\" | \"right\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "unstick(position?: 'left' | 'right') => Promise<void>",
          "parameters": [
            {
              "name": "position",
              "type": "\"left\" | \"right\"",
              "docs": ""
            }
          ],
          "docs": "Un-fixes this column from any table edge",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketTableColumnSort",
          "detail": "{ column: string; previousSortOrder: \"ascending\" | \"descending\"; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    column: string;\n    previousSortOrder: 'ascending' | 'descending';\n  }",
            "resolved": "{ column: string; previousSortOrder: \"ascending\" | \"descending\"; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a table column heading is clicked to sort",
          "docsTags": []
        },
        {
          "event": "marketTableColumnStick",
          "detail": "{ position: \"left\" | \"right\"; index: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    position: 'left' | 'right';\n    index: number;\n  }",
            "resolved": "{ position: \"left\" | \"right\"; index: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when this column is stuck to a table edge.\nCan happen when the stick-to property is updated, .stick() method is called\nor when slotted content in the parent table changes",
          "docsTags": []
        },
        {
          "event": "marketTableColumnUnstick",
          "detail": "{ position: \"left\" | \"right\"; index: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    position: 'left' | 'right';\n    index: number;\n  }",
            "resolved": "{ position: \"left\" | \"right\"; index: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a table column heading is clicked to sort",
          "docsTags": []
        },
        {
          "event": "marketTableColumnVisibilityChange",
          "detail": "{ columnName: string; hidden: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    columnName: string;\n    hidden: boolean;\n  }",
            "resolved": "{ columnName: string; hidden: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a table column's hidden property changes. Used by market-table\nto toggle visibility of related table cells.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for all content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-table-row/market-table-row.tsx",
      "encapsulation": "shadow",
      "tag": "market-table-row",
      "readme": "# market-table-row\n\n`market-table-row` expects its slotted children to be `market-table-cell` or `market-table-column`\nelements, and can be fixed ('stuck') to the top or bottom edge of its parent table.\n\nAnalogous to the `<tr>` HTML element. \n",
      "docs": "`market-table-row` expects its slotted children to be `market-table-cell` or `market-table-column`\nelements, and can be fixed ('stuck') to the top or bottom edge of its parent table.\n\nAnalogous to the `<tr>` HTML element.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for all cells"
        },
        {
          "name": "slot",
          "text": "control - Intended for use with a market table cell or market table column that contain a control element."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the row is currently active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cells",
          "type": "NodeListOf<TCell>",
          "complexType": {
            "original": "NodeListOf<TCell>",
            "resolved": "NodeListOf<TCell>",
            "references": {
              "NodeListOf": {
                "location": "global",
                "id": "global::NodeListOf"
              },
              "TCell": {
                "location": "local",
                "path": "/data/app/kochiku-worker/shared/build-partition/squareup/market/web/web-components/src/components/market-table-row/market-table-row.tsx",
                "id": "src/components/market-table-row/market-table-row.tsx::TCell"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nThis row's slotted market-table-cell elements",
          "docsTags": [],
          "values": [
            {
              "type": "NodeListOf<TCell>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the row is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nUsed to set aria-expanded on the nested button for animation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "footer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "footer",
          "reflectToAttr": true,
          "docs": "Gives this row footer styling",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gridTemplateLeft",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nUsed to set the CSS grid template for the fixed left column group (market-table-area)\nin the row. Set by the parent table element",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gridTemplateMain",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nUsed to set the CSS grid template for the main column group (market-table-area)\nin the row. Set by the parent table element",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gridTemplateRight",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nUsed to set the CSS grid template for the fixed right column group (market-table-area)\nin the row. Set by the parent table element",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "header",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "header",
          "reflectToAttr": true,
          "docs": "Gives this row header styling",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "index",
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nThe order of this row in the DOM",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": true,
          "docs": "Whether or not the row is interactive. Results in row receiving\nhover and active styling when hovered/clicked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leadingIndentation",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "leading-indentation",
          "reflectToAttr": true,
          "docs": "Optional: Level of leading indentation\nThis will be multiplied by the default indentation size (40px) for uniform indentation\nlevels",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "nested",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "nested",
          "reflectToAttr": true,
          "docs": "Used to determine if the table has accordion rows. When true,\nit will add extra spacing at the beginning of the row. This will\nkeep the row's contents aligned with the accordion rows. This is\nset from the market-table component.\n\nThis property can be overriden when the content does not need\nthe extra accordion spacing.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "originalSlot",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "original-slot",
          "reflectToAttr": false,
          "docs": "The slot this row was originally placed in",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether the row is selected. Used by control element.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stickTo",
          "type": "\"bottom\" | \"top\" | boolean",
          "complexType": {
            "original": "false | 'top' | 'bottom'",
            "resolved": "\"bottom\" | \"top\" | boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "stick-to",
          "reflectToAttr": true,
          "docs": "Optional: The edge of the table to fix this row to.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sticky",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "sticky",
          "reflectToAttr": true,
          "docs": "Optional: When present, can be used instead of `stickTo` in combination\nwith `header` or `footer` to determine the edge of the table to stick this\nrow to. (`header` elements with `[sticky]` will be attached to the top, and\n`footer` elements to the bottom)",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tableColumns",
          "type": "HTMLMarketTableColumnElement[]",
          "complexType": {
            "original": "Array<HTMLMarketTableColumnElement>",
            "resolved": "HTMLMarketTableColumnElement[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "HTMLMarketTableColumnElement": {
                "location": "global",
                "id": "global::HTMLMarketTableColumnElement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "**INTERNAL [do not use directly]**\nA list of the market-table-column elements, set from the parent table so\nwe can assign this row's cells some properties based on the columns",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLMarketTableColumnElement[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "_setFirstCellProperties",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_setFirstCellProperties() => Promise<void>",
          "parameters": [],
          "docs": "**INTERNAL [do not use directly]**\nSets properties computed or specified on the row on the first\ncell to keep the table rows from shifting",
          "docsTags": []
        },
        {
          "name": "_stickColumn",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(column: string, position: 'left' | 'right') => Promise<void>",
            "parameters": [
              {
                "name": "column",
                "type": "string",
                "docs": ""
              },
              {
                "name": "position",
                "type": "\"left\" | \"right\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLMarketTableCellElement": {
                "location": "global",
                "id": "global::HTMLMarketTableCellElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_stickColumn(column: string, position: 'left' | 'right') => Promise<void>",
          "parameters": [
            {
              "name": "column",
              "type": "string",
              "docs": ""
            },
            {
              "name": "position",
              "type": "\"left\" | \"right\"",
              "docs": ""
            }
          ],
          "docs": "**INTERNAL [do not use directly]**\nUsed by the parent table to support fixing columns to either side of the table",
          "docsTags": []
        },
        {
          "name": "_syncColumnVisibilityWithCells",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(columnName: any, hidden: any) => Promise<void>",
            "parameters": [
              {
                "name": "columnName",
                "type": "any",
                "docs": ""
              },
              {
                "name": "hidden",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLMarketTableCellElement": {
                "location": "global",
                "id": "global::HTMLMarketTableCellElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_syncColumnVisibilityWithCells(columnName: any, hidden: any) => Promise<void>",
          "parameters": [
            {
              "name": "columnName",
              "type": "any",
              "docs": ""
            },
            {
              "name": "hidden",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "**INTERNAL [do not use directly]**\nSets the hidden prop on market-table-cell. Used by market-table to allow market-table-column\nto control the hidden/visible state of its associated table cells.",
          "docsTags": []
        },
        {
          "name": "_unstickColumn",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(column: string) => Promise<void>",
            "parameters": [
              {
                "name": "column",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLMarketTableCellElement": {
                "location": "global",
                "id": "global::HTMLMarketTableCellElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_unstickColumn(column: string) => Promise<void>",
          "parameters": [
            {
              "name": "column",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "**INTERNAL [do not use directly]**\nUsed by the parent table to support fixing columns to either side of the table",
          "docsTags": []
        },
        {
          "name": "setLeadingIndentation",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(leadingIndentation: number) => Promise<void>",
            "parameters": [
              {
                "name": "leadingIndentation",
                "type": "number",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setLeadingIndentation(leadingIndentation: number) => Promise<void>",
          "parameters": [
            {
              "name": "leadingIndentation",
              "type": "number",
              "docs": ""
            }
          ],
          "docs": "Sets the leadingIndentation",
          "docsTags": [
            {
              "name": "param",
              "text": "leadingIndentation"
            }
          ]
        },
        {
          "name": "stick",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(position?: 'top' | 'bottom') => Promise<void>",
            "parameters": [
              {
                "name": "position",
                "type": "\"top\" | \"bottom\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "stick(position?: 'top' | 'bottom') => Promise<void>",
          "parameters": [
            {
              "name": "position",
              "type": "\"top\" | \"bottom\"",
              "docs": ""
            }
          ],
          "docs": "Sticks this row to the provided edge (position) of the table",
          "docsTags": []
        },
        {
          "name": "toggleNestedRow",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggleNestedRow() => Promise<void>",
          "parameters": [],
          "docs": "Sets expanded property and emits nested row toggle event",
          "docsTags": []
        },
        {
          "name": "unstick",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "unstick() => Promise<void>",
          "parameters": [],
          "docs": "Unsticks this row from any edge of the table",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketAccordionToggled",
          "detail": "{ expanded: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ expanded: boolean }",
            "resolved": "{ expanded: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the nested row button is toggled",
          "docsTags": []
        },
        {
          "event": "marketNestedRowToggled",
          "detail": "{ expanded: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ expanded: boolean }",
            "resolved": "{ expanded: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the nested row button is toggled",
          "docsTags": []
        },
        {
          "event": "marketTableHeaderLoaded",
          "detail": "{ columns: NodeListOf<HTMLMarketTableColumnElement>; }",
          "bubbles": true,
          "complexType": {
            "original": "{ columns: NodeListOf<HTMLMarketTableColumnElement> }",
            "resolved": "{ columns: NodeListOf<HTMLMarketTableColumnElement>; }",
            "references": {
              "NodeListOf": {
                "location": "global",
                "id": "global::NodeListOf"
              },
              "HTMLMarketTableColumnElement": {
                "location": "global",
                "id": "global::HTMLMarketTableColumnElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "**INTERNAL [do not use directly]**\nIf this is a header row with column children, emit an event when this row loads\nso the parent table can read the column data",
          "docsTags": []
        },
        {
          "event": "marketTableRowClicked",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever an interactive row is clicked.",
          "docsTags": []
        },
        {
          "event": "marketTableRowStick",
          "detail": "{ position: \"left\" | \"right\"; index: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    position: 'left' | 'right';\n    index: number;\n  }",
            "resolved": "{ position: \"left\" | \"right\"; index: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when this row is stuck to a table edge\nCan be fired when stick-to or sticky changes, the .stick() method is called directly\nor when this row is first rendered or slotted",
          "docsTags": []
        },
        {
          "event": "marketTableRowUnstick",
          "detail": "{ position: \"left\" | \"right\"; index: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    position: 'left' | 'right';\n    index: number;\n  }",
            "resolved": "{ position: \"left\" | \"right\"; index: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when this row is unstuck from a table edge\nCan be fired when stick-to or sticky changes, the .unstick() method is called directly\nor when this row is first rendered or slotted",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketCheckboxValueChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketToggleChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for all cells"
        },
        {
          "name": "control",
          "docs": "Intended for use with a market table cell or market table column that contain a control element."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tables-v2/market-table-v2/market-table-v2.tsx",
      "encapsulation": "shadow",
      "tag": "market-table-v2",
      "readme": "# market-table-v2\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for all rows."
        },
        {
          "name": "part",
          "text": "table - The inner table element."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "align",
          "type": "\"center\" | \"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'center' | 'right'",
            "resolved": "\"center\" | \"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": true,
          "docs": "Sets the horizontal alignment.\nTable alignment will be inherited by descendant rows & cells.",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapsible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapsible",
          "reflectToAttr": true,
          "docs": "Whether the slotted table groups are collapsible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"auto\" | \"fixed\"",
          "complexType": {
            "original": "'auto' | 'fixed'",
            "resolved": "\"auto\" | \"fixed\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Sets the `table-layout` algorithm.\nBy default, the column widths are adjusted to fit the content.\nIf column widths are explicitly sized, use `fixed` to speed up render time.\nSee [table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout)\nfor more information.",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reorderMode",
          "type": "\"default\" | \"framework\"",
          "complexType": {
            "original": "'default' | 'framework'",
            "resolved": "\"default\" | \"framework\"",
            "references": {}
          },
          "mutable": false,
          "attr": "reorder-mode",
          "reflectToAttr": false,
          "docs": "When set to `framework`, the table will move the reordered item back to its original position\nbefore the `marketTableV2RowsReordered` event is fired. This is useful when the table\nis rendered within a framework like Ember or React.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "framework",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reorderable",
          "type": "\"external\" | \"internal\" | \"off\"",
          "complexType": {
            "original": "TMarketReorderableOptions",
            "resolved": "\"external\" | \"internal\" | \"off\"",
            "references": {
              "TMarketReorderableOptions": {
                "location": "import",
                "path": "../../../utils/reorderable",
                "id": "src/utils/reorderable.ts::TMarketReorderableOptions"
              }
            }
          },
          "mutable": false,
          "attr": "reorderable",
          "reflectToAttr": true,
          "docs": "Whether the table is reorderable or not.\nSetting to `internal` enables reordering table rows internally\nwhile `external` also allows dragging to & from other tables.",
          "docsTags": [],
          "values": [
            {
              "value": "external",
              "type": "string"
            },
            {
              "value": "internal",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "\"false\" | \"indeterminate\" | \"true\"",
          "complexType": {
            "original": "TMarketTableV2Selection",
            "resolved": "\"false\" | \"indeterminate\" | \"true\"",
            "references": {
              "TMarketTableV2Selection": {
                "location": "import",
                "path": "./types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2Selection"
              }
            }
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Whether the table is selected.\nRelevant if the table has rows with a slotted controls.",
          "docsTags": [],
          "default": "'false'",
          "values": [
            {
              "value": "false",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            },
            {
              "value": "true",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valign",
          "type": "\"bottom\" | \"middle\" | \"top\"",
          "complexType": {
            "original": "'bottom' | 'middle' | 'top'",
            "resolved": "\"bottom\" | \"middle\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "valign",
          "reflectToAttr": true,
          "docs": "Sets the vertical alignment.\nTable alignment will be inherited by descendant rows & cells.",
          "docsTags": [],
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "middle",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketTableV2RowsReordered",
          "detail": "{ item: MarketDraggableElement; oldIndex: number; newIndex: number; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketReorderEventDetail",
            "resolved": "{ item: MarketDraggableElement; oldIndex: number; newIndex: number; }",
            "references": {
              "TMarketReorderEventDetail": {
                "location": "import",
                "path": "../../../utils/reorderable",
                "id": "src/utils/reorderable.ts::TMarketReorderEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the table rows are reordered.\nIf a row was dropped into this table from an external table, `oldIndex` is `-1`.\nIf a row was removed from this table and dropped into an external table, `newIndex` is `-1`.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketInternalTableV2RowSelectionChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketInternalTableV2GroupSelectionChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketTableV2CellSortClicked",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragMove",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragLeave",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragEnd",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragDrop",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for all rows."
        }
      ],
      "parts": [
        {
          "name": "table",
          "docs": "The inner table element."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tables-v2/market-table-v2-cell/market-table-v2-cell.tsx",
      "encapsulation": "shadow",
      "tag": "market-table-v2-cell",
      "readme": "# market-table-v2-cell\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for content."
        },
        {
          "name": "slot",
          "text": "control - Intended for use with a form control element."
        },
        {
          "name": "slot",
          "text": "leading-accessory - Intended for use with a leading accessory."
        },
        {
          "name": "slot",
          "text": "trailing-accessory - Intended for use with a trailing accessory."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the cell is currently active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "align",
          "type": "\"center\" | \"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'center' | 'right'",
            "resolved": "\"center\" | \"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": true,
          "docs": "Sets the horizontal alignment. When not set,\nalignment is inherited from an ancestor row or table.",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "caret",
          "type": "\"down\" | \"up\"",
          "complexType": {
            "original": "'up' | 'down'",
            "resolved": "\"down\" | \"up\"",
            "references": {}
          },
          "mutable": false,
          "attr": "caret",
          "reflectToAttr": true,
          "docs": "Displays a leading clickable caret;\nintended to be used in conjunction with\n`<market-table-v2-group>` to support nested rows.",
          "docsTags": [],
          "values": [
            {
              "value": "down",
              "type": "string"
            },
            {
              "value": "up",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "caretAriaLabelCollapsed",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "caret-aria-label-collapsed",
          "reflectToAttr": false,
          "docs": "Translated label for the expand action when group is currently collapsed (for screen reader users)",
          "docsTags": [],
          "default": "'Group of rows is collapsed: click to expand'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "caretAriaLabelExpanded",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "caret-aria-label-expanded",
          "reflectToAttr": false,
          "docs": "Translated label for the collapse action when group is currently expanded (for screen reader users)",
          "docsTags": [],
          "default": "'Group of rows is expanded: click to collapse'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the cell is currently disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indent",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "indent",
          "reflectToAttr": true,
          "docs": "Indentation level",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": true,
          "docs": "Whether the cell is interactive, which results in hover, focus, & pressed styles.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "nowrap",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "nowrap",
          "reflectToAttr": true,
          "docs": "Set this to `true` to force cell text onto one line.\nMay cause horizontal scrolling in the ancestor table.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "\"false\" | \"indeterminate\" | \"true\"",
          "complexType": {
            "original": "TMarketTableV2Selection",
            "resolved": "\"false\" | \"indeterminate\" | \"true\"",
            "references": {
              "TMarketTableV2Selection": {
                "location": "import",
                "path": "../market-table-v2/types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2Selection"
              }
            }
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Whether the cell is selected.\nRelevant if the cell has a slotted control.",
          "docsTags": [],
          "default": "'false'",
          "values": [
            {
              "value": "false",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            },
            {
              "value": "true",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortAriaLabelAscending",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "sort-aria-label-ascending",
          "reflectToAttr": false,
          "docs": "Translated label for the icon indicating an ascending sort (for screen reader users)",
          "docsTags": [],
          "default": "'Sorted ascending: click to sort descending'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortAriaLabelDescending",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "sort-aria-label-descending",
          "reflectToAttr": false,
          "docs": "Translated label for the icon indicating a descending sort (for screen reader users)",
          "docsTags": [],
          "default": "'Sorted descending: click to sort ascending'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortAriaLabelNone",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "sort-aria-label-none",
          "reflectToAttr": false,
          "docs": "Translated label for the icon indicating no sort applied (for screen reader users)",
          "docsTags": [],
          "default": "'Not sorted: click to sort ascending'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortOrder",
          "type": "\"ascending\" | \"descending\" | \"none\"",
          "complexType": {
            "original": "TMarketTableV2SortOrder",
            "resolved": "\"ascending\" | \"descending\" | \"none\"",
            "references": {
              "TMarketTableV2SortOrder": {
                "location": "import",
                "path": "../market-table-v2/types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2SortOrder"
              }
            }
          },
          "mutable": true,
          "attr": "sort-order",
          "reflectToAttr": false,
          "docs": "When `sortable` is `true`, this prop sets the `aria-sort` attribute\nand displays an arrow in the correct sort direction.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "ascending",
              "type": "string"
            },
            {
              "value": "descending",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortStrategy",
          "type": "\"datetime\" | \"number\" | \"string\" | ((attrs: { rowA: HTMLMarketTableV2RowElement; rowB: HTMLMarketTableV2RowElement; order: TMarketTableV2SortOrder; column: number; format?: string; }) => number)",
          "complexType": {
            "original": "TMarketTableV2SortStrategy",
            "resolved": "\"datetime\" | \"number\" | \"string\" | ((attrs: { rowA: HTMLMarketTableV2RowElement; rowB: HTMLMarketTableV2RowElement; order: TMarketTableV2SortOrder; column: number; format?: string; }) => number)",
            "references": {
              "TMarketTableV2SortStrategy": {
                "location": "import",
                "path": "../market-table-v2/types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2SortStrategy"
              }
            }
          },
          "mutable": false,
          "attr": "sort-strategy",
          "reflectToAttr": false,
          "docs": "When `sortable` is `true`, this prop specifies the sorting strategy.\n- `'string'`: sorts rows alphabetically (case-insensitive) by the text content of the cell (default)\n- `'number'`: sorts rows numerically using [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) to parse the cell content\n- `'datetime'`: sorts rows chronologically using [date-fns `parse()`](https://date-fns.org/v3.3.1/docs/parse) method to parse the cell content. This strategy requires specifying a format in the cell's `sortStrategyFormat` prop; see accepted formats [here](https://date-fns.org/v3.3.1/docs/parse)\n- `Function`: a custom callback function to compare rows, similar to the `compareFn` in [`Array.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort). The following arguments are provided to the function:\n  - `rowA`: the first row for comparison\n  - `rowB`: the second row for comparison\n  - `order`: the direction of the sort, either `ascending` or `descending`\n  - `index`: the index of the column being sorted on\n\n  The callback function should return a number whose sign indicates the relative order of the two elements:\n  - negative if `rowA` is less than `rowB`\n  - positive if `rowA` is greater than `rowB`\n  - zero if `rowA` & `rowB` are equal",
          "docsTags": [],
          "values": [
            {
              "value": "datetime",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "string",
              "type": "string"
            },
            {
              "type": "((attrs: { rowA: HTMLMarketTableV2RowElement; rowB: HTMLMarketTableV2RowElement; order: TMarketTableV2SortOrder; column: number; format?: string; }) => number)"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortStrategyFormat",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "sort-strategy-format",
          "reflectToAttr": false,
          "docs": "When setting `sortStrategy` to `\"datetime\"`, this prop is required to specify the format.\nSee accepted formats [here](https://date-fns.org/v3.3.1/docs/parse)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sortable",
          "reflectToAttr": true,
          "docs": "When the cell is in a table header row, this prop enables sorting by this cell's column.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sticky",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "sticky",
          "reflectToAttr": true,
          "docs": "Makes a cell \"stick\" to the left or right of its parent row.\nRequires the row to be sized wider than the table to enable horizontal scrolling.",
          "docsTags": [],
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valign",
          "type": "\"bottom\" | \"middle\" | \"top\"",
          "complexType": {
            "original": "'bottom' | 'middle' | 'top'",
            "resolved": "\"bottom\" | \"middle\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "valign",
          "reflectToAttr": true,
          "docs": "Sets the vertical alignment. When not set,\nalignment is inherited from an ancestor row or table.",
          "docsTags": [],
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "middle",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketTableV2CellCaretClicked",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the caret is clicked",
          "docsTags": []
        },
        {
          "event": "marketTableV2CellSortClicked",
          "detail": "{ current: TMarketTableV2SortOrder; previous: TMarketTableV2SortOrder; }",
          "bubbles": true,
          "complexType": {
            "original": "MarketTableV2SortOrderChangeDetail",
            "resolved": "{ current: TMarketTableV2SortOrder; previous: TMarketTableV2SortOrder; }",
            "references": {
              "MarketTableV2SortOrderChangeDetail": {
                "location": "import",
                "path": "../market-table-v2/types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::MarketTableV2SortOrderChangeDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when clicked when sortable is `true`",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketToggleChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketCheckboxValueChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for content."
        },
        {
          "name": "control",
          "docs": "Intended for use with a form control element."
        },
        {
          "name": "leading-accessory",
          "docs": "Intended for use with a leading accessory."
        },
        {
          "name": "trailing-accessory",
          "docs": "Intended for use with a trailing accessory."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tables-v2/market-table-v2-group/market-table-v2-group.tsx",
      "encapsulation": "shadow",
      "tag": "market-table-v2-group",
      "readme": "# market-table-v2-group\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for children rows"
        },
        {
          "name": "slot",
          "text": "parent - Slot for for the parent row"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "collapsed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "collapsed",
          "reflectToAttr": true,
          "docs": "Whether the group is expanded or collapsed, when `collapsible` is `true`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapsible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapsible",
          "reflectToAttr": true,
          "docs": "Whether the group is collapsible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-enabled",
          "reflectToAttr": true,
          "docs": "Whether the group is drag & drop enabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indent",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "indent",
          "reflectToAttr": true,
          "docs": "Indentation level",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reorderMode",
          "type": "\"default\" | \"framework\"",
          "complexType": {
            "original": "'default' | 'framework'",
            "resolved": "\"default\" | \"framework\"",
            "references": {}
          },
          "mutable": false,
          "attr": "reorder-mode",
          "reflectToAttr": false,
          "docs": "When set to `framework`, the group will move the reordered item back to its original position\nbefore the `marketTableV2RowsReordered` event is fired. This is useful when the table\nis rendered within a framework like Ember or React.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "framework",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reorderable",
          "type": "\"external\" | \"internal\" | \"off\"",
          "complexType": {
            "original": "TMarketReorderableOptions",
            "resolved": "\"external\" | \"internal\" | \"off\"",
            "references": {
              "TMarketReorderableOptions": {
                "location": "import",
                "path": "../../../utils/reorderable",
                "id": "src/utils/reorderable.ts::TMarketReorderableOptions"
              }
            }
          },
          "mutable": false,
          "attr": "reorderable",
          "reflectToAttr": true,
          "docs": "Whether the group is reorderable or not.\nSetting to `internal` enables reordering table rows internally\nwhile `external` also allows dragging to & from other tables.",
          "docsTags": [],
          "values": [
            {
              "value": "external",
              "type": "string"
            },
            {
              "value": "internal",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "\"false\" | \"indeterminate\" | \"true\"",
          "complexType": {
            "original": "TMarketTableV2Selection",
            "resolved": "\"false\" | \"indeterminate\" | \"true\"",
            "references": {
              "TMarketTableV2Selection": {
                "location": "import",
                "path": "../market-table-v2/types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2Selection"
              }
            }
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Whether the group is selected.\nRelevant if the group has rows with slotted controls.",
          "docsTags": [],
          "default": "'false'",
          "values": [
            {
              "value": "false",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            },
            {
              "value": "true",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketTableV2GroupCollapsedChange",
          "detail": "{ previous: boolean; current: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ previous: boolean; current: boolean }",
            "resolved": "{ previous: boolean; current: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the group's collapsed state changes.",
          "docsTags": []
        },
        {
          "event": "marketTableV2RowsReordered",
          "detail": "{ item: MarketDraggableElement; oldIndex: number; newIndex: number; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketReorderEventDetail",
            "resolved": "{ item: MarketDraggableElement; oldIndex: number; newIndex: number; }",
            "references": {
              "TMarketReorderEventDetail": {
                "location": "import",
                "path": "../../../utils/reorderable",
                "id": "src/utils/reorderable.ts::TMarketReorderEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the group's rows are reordered.\nIf a row was dropped into this group from an external source, `oldIndex` is `-1`.\nIf a row was removed from this group and dropped into an external source, `newIndex` is `-1`.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketTableV2CellCaretClicked",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketInternalTableV2RowSelectionChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketInternalTableV2GroupSelectionChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragHandleDragStart",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragHandleDragMove",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragHandleDragEnd",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragMove",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragLeave",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragEnd",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDragDrop",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for children rows"
        },
        {
          "name": "parent",
          "docs": "Slot for for the parent row"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tables-v2/market-table-v2-row/market-table-v2-row.tsx",
      "encapsulation": "shadow",
      "tag": "market-table-v2-row",
      "readme": "# market-table-v2-row\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Default slot for table cells."
        },
        {
          "name": "part",
          "text": "drag-handle - the drag handle when `dragEnabled` is true."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the row is currently active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "align",
          "type": "\"center\" | \"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'center' | 'right'",
            "resolved": "\"center\" | \"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": true,
          "docs": "Sets the horizontal alignment.\nWhen not set, alignment is inherited from an ancestor table.\nLikewise, row alignment will be inherited by descendant cells.",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "caret",
          "type": "\"down\" | \"up\"",
          "complexType": {
            "original": "'up' | 'down'",
            "resolved": "\"down\" | \"up\"",
            "references": {}
          },
          "mutable": false,
          "attr": "caret",
          "reflectToAttr": true,
          "docs": "Displays a leading clickable caret in the first cell;\nintended to be used in conjunction with\n`<market-table-v2-group>` to support nested rows.",
          "docsTags": [],
          "values": [
            {
              "value": "down",
              "type": "string"
            },
            {
              "value": "up",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the row is currently disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragEnabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-enabled",
          "reflectToAttr": true,
          "docs": "Whether the row is drag & drop enabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragHandlePosition",
          "type": "\"leading\" | \"trailing\"",
          "complexType": {
            "original": "'leading' | 'trailing'",
            "resolved": "\"leading\" | \"trailing\"",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-handle-position",
          "reflectToAttr": true,
          "docs": "Whether the drag handle appears to the left or right.",
          "docsTags": [],
          "values": [
            {
              "value": "leading",
              "type": "string"
            },
            {
              "value": "trailing",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragHandleVisibility",
          "type": "\"always\" | \"hover\"",
          "complexType": {
            "original": "'always' | 'hover'",
            "resolved": "\"always\" | \"hover\"",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-handle-visibility",
          "reflectToAttr": true,
          "docs": "Whether the drag handle appears always or only on hover",
          "docsTags": [],
          "values": [
            {
              "value": "always",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "footer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "footer",
          "reflectToAttr": true,
          "docs": "Styles a row with footer styles.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "header",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": true,
          "docs": "Styles a row with header styles.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indent",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "indent",
          "reflectToAttr": true,
          "docs": "Indentation level of the first cell in the row.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": true,
          "docs": "Whether the row is interactive, which results in hover, focus, & pressed styles.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "\"false\" | \"indeterminate\" | \"true\"",
          "complexType": {
            "original": "TMarketTableV2Selection",
            "resolved": "\"false\" | \"indeterminate\" | \"true\"",
            "references": {
              "TMarketTableV2Selection": {
                "location": "import",
                "path": "../market-table-v2/types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2Selection"
              }
            }
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Whether the row is selected.\nRelevant if the row's first cell has a slotted control.",
          "docsTags": [],
          "default": "'false'",
          "values": [
            {
              "value": "false",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            },
            {
              "value": "true",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sticky",
          "type": "\"bottom\" | \"top\"",
          "complexType": {
            "original": "'top' | 'bottom'",
            "resolved": "\"bottom\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "sticky",
          "reflectToAttr": true,
          "docs": "Makes a row \"stick\" to the top or bottom of its parent table.\nRequires an explict height on the table to enable vertical scrolling.",
          "docsTags": [],
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valign",
          "type": "\"bottom\" | \"middle\" | \"top\"",
          "complexType": {
            "original": "'bottom' | 'middle' | 'top'",
            "resolved": "\"bottom\" | \"middle\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "valign",
          "reflectToAttr": true,
          "docs": "Sets the vertical alignment.\nWhen not set, alignment is inherited from an ancestor table.\nLikewise, row alignment will be inherited by descendant cells.",
          "docsTags": [],
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "middle",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(selected: TMarketTableV2Selection, { silent }?: { silent?: boolean; }) => Promise<void>",
            "parameters": [
              {
                "name": "selected",
                "type": "\"true\" | \"false\" | \"indeterminate\"",
                "docs": ""
              },
              {
                "name": "__1",
                "type": "{ silent?: boolean; }",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "TMarketTableV2Selection": {
                "location": "import",
                "path": "../market-table-v2/types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2Selection"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setSelected(selected: TMarketTableV2Selection, { silent }?: { silent?: boolean; }) => Promise<void>",
          "parameters": [
            {
              "name": "selected",
              "type": "\"true\" | \"false\" | \"indeterminate\"",
              "docs": ""
            },
            {
              "name": "__1",
              "type": "{ silent?: boolean; }",
              "docs": ""
            }
          ],
          "docs": "Sets selection on the row and propagates the value\ndownwards to the slotted control in its first cell\nand upwards to any parent groups or tables.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketTableV2RowSelectionChange",
          "detail": "{ current: TMarketTableV2Selection; previous: TMarketTableV2Selection; }",
          "bubbles": true,
          "complexType": {
            "original": "MarketTableV2SelectionChangeEventDetail",
            "resolved": "{ current: TMarketTableV2Selection; previous: TMarketTableV2Selection; }",
            "references": {
              "MarketTableV2SelectionChangeEventDetail": {
                "location": "import",
                "path": "../market-table-v2/types",
                "id": "src/components/tables-v2/market-table-v2/types.ts::MarketTableV2SelectionChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the row selection state changes. Used to externally signal selection changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketInternalTableV2CellSelectionChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Default slot for table cells."
        }
      ],
      "parts": [
        {
          "name": "drag-handle",
          "docs": "the drag handle when `dragEnabled` is true."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-tabs/market-tabs.tsx",
      "encapsulation": "shadow",
      "tag": "market-tabs",
      "readme": "# market-tabs\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "defaultTab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "default-tab",
          "reflectToAttr": false,
          "docs": "String for the default selected tab (i.e. `market-tab`'s `id` attribute)\n\nOnly used when the component initially loads",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectedTab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected-tab",
          "reflectToAttr": true,
          "docs": "String for the selected tab (i.e. `market-tab`'s `id` attribute)\n\nOmitting or setting to empty string will default to the first non-disabled tab",
          "docsTags": [
            {
              "name": "default",
              "text": "undefined"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "marketTabSelectedChanged",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-tag/market-tag.tsx",
      "encapsulation": "shadow",
      "tag": "market-tag",
      "readme": "# market-tag\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The text used for the tag label"
        },
        {
          "name": "slot",
          "text": "icon - an icon that is to the left of tag text"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the tag",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether or not the tag is in a focused state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'medium' | 'small'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "String for setting tag size",
          "docsTags": [],
          "default": "'small'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "marketTagDismissed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the tag's remove indicator is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The text used for the tag label"
        },
        {
          "name": "icon",
          "docs": "an icon that is to the left of tag text"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-textarea/market-textarea.tsx",
      "encapsulation": "shadow",
      "tag": "market-textarea",
      "readme": "# market-textarea\n\nA multi-line text input component.\n",
      "docs": "A multi-line text input component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The main label for the textarea."
        },
        {
          "name": "slot",
          "text": "textarea - Can be used to slot your own custom textarea element."
        },
        {
          "name": "part",
          "text": "container - The containing div for the textarea and label."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "A boolean representing whether the input should focus on page load.\nIf multiple elements with `autofocus` are present, it is not guaranteed which one\nwill ultimately receive the focus. It is advised that only one at most is present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the textarea is disabled or not.\nThis visually and functionally will disable the textarea.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the textarea is focused or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "Allows a browser to display an appropriate virtual keyboard.\n[Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the textarea is invalid or not.\nThis represents error states.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxHeight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max-height",
          "reflectToAttr": false,
          "docs": "A string specifying the maximum height in pixels for the textarea. Vertical resizing will be limited to this height. Example value: '200px'.\n\n**DEPRECATED**: set `max-height` via CSS",
          "docsTags": [
            {
              "name": "default",
              "text": "'320px'"
            }
          ],
          "default": "`${TEXTAREA_MAXIMUM_HEIGHT}px`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "A string specifying the maximum length of characters for the input value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "A string specifying a name for the textarea.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "A string specifying the placeholder of the textarea.\nThis is shown before a user attempts to add a value, given no value is already provided.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "A boolean representing whether the textarea is readonly or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A string specifying a value for the textarea. This will be visually shown on the textarea and can be edited by the user.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "registerSlottedTextarea",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(slottedTextarea?: HTMLTextAreaElement) => Promise<void>",
            "parameters": [
              {
                "name": "slottedTextarea",
                "type": "HTMLTextAreaElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLTextAreaElement": {
                "location": "global",
                "id": "global::HTMLTextAreaElement"
              },
              "ShadowRoot": {
                "location": "global",
                "id": "global::ShadowRoot"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "registerSlottedTextarea(slottedTextarea?: HTMLTextAreaElement) => Promise<void>",
          "parameters": [
            {
              "name": "slottedTextarea",
              "type": "HTMLTextAreaElement",
              "docs": ""
            }
          ],
          "docs": "Allows passing an alternative light DOM textarea.\nSets the this.slottedTextarea value to undefined if there is no slotted element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketTextareaValueChange",
          "detail": "{ value: string; originalEvent: KeyboardEvent; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: string; originalEvent: KeyboardEvent }",
            "resolved": "{ value: string; originalEvent: KeyboardEvent; }",
            "references": {
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the value of the textarea changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketDialogLoaded",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The main label for the textarea."
        },
        {
          "name": "textarea",
          "docs": "Can be used to slot your own custom textarea element."
        }
      ],
      "parts": [
        {
          "name": "container",
          "docs": "The containing div for the textarea and label."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-tile/market-tile.tsx",
      "encapsulation": "shadow",
      "tag": "market-tile",
      "readme": "# market-tile\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "media - When provided, replaces the solid color background with a background image and applies a slight gradient."
        },
        {
          "name": "slot",
          "text": "leading-accessory - An icon set on the top-left corner of the tile."
        },
        {
          "name": "slot",
          "text": "actions - Optional slot to customize action(s) in the top-right corner of the tile. Renders a remove button by default."
        },
        {
          "name": "slot",
          "text": "indicator - Text to render in a pill-like element on the top-right corner of the slot.\nIs overridden by `actions`."
        },
        {
          "name": "slot",
          "text": "hint - Large text set in the center of a medium-sized tile. Intended to be one or two letters."
        },
        {
          "name": "slot",
          "text": "label - Text set beneath the hint slot."
        },
        {
          "name": "slot",
          "text": "subtext - Smaller text set beneath the label slot."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "aria-disabled",
          "reflectToAttr": true,
          "docs": "Whether to disable the tile.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": false,
          "docs": "Enables interactivity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether the tile is currently selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showActions",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-actions",
          "reflectToAttr": false,
          "docs": "Whether to render the markup in the action slot.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "'small' | 'medium'",
            "resolved": "\"medium\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "What size tile to render.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value for the tile.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newValue: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "newValue",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setSelected(newValue: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "newValue",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Allows external elements to set selected value.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketTileRemoveClicked",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the remove button is clicked",
          "docsTags": []
        },
        {
          "event": "marketTileSelectedChanged",
          "detail": "{ selected: boolean; value: string; }",
          "bubbles": true,
          "complexType": {
            "original": "TMarketTileSelectedChanged",
            "resolved": "{ selected: boolean; value: string; }",
            "references": {
              "TMarketTileSelectedChanged": {
                "location": "import",
                "path": "./events",
                "id": "src/components/market-tile/events.ts::TMarketTileSelectedChanged"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the tile is selected.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "actions",
          "docs": "Optional slot to customize action(s) in the top-right corner of the tile. Renders a remove button by default."
        },
        {
          "name": "hint",
          "docs": "Large text set in the center of a medium-sized tile. Intended to be one or two letters."
        },
        {
          "name": "indicator",
          "docs": "Text to render in a pill-like element on the top-right corner of the slot.\nIs overridden by `actions`."
        },
        {
          "name": "label",
          "docs": "Text set beneath the hint slot."
        },
        {
          "name": "leading-accessory",
          "docs": "An icon set on the top-left corner of the tile."
        },
        {
          "name": "media",
          "docs": "When provided, replaces the solid color background with a background image and applies a slight gradient."
        },
        {
          "name": "subtext",
          "docs": "Smaller text set beneath the label slot."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-toast/market-toast.tsx",
      "encapsulation": "shadow",
      "tag": "market-toast",
      "readme": "# market-toast\n\nToasts are a small message that shows up in a box at the bottom of the screen and disappears on its own after few seconds. It is a simple feedback about an operation in which current activity remains visible and interactive. \n\n`market-toast` should be used together with [`market-toaster`](../market-toaster/readme.md)\n",
      "docs": "Toasts are a small message that shows up in a box at the bottom of the screen and disappears on its own after few seconds. It is a simple feedback about an operation in which current activity remains visible and interactive. \n\n`market-toast` should be used together with [`market-toaster`](../market-toaster/readme.md)",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The text for the toast"
        },
        {
          "name": "slot",
          "text": "action - for `<a href>` or `<button>` (not a `<market-button>`)"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "dismissButtonAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dismiss-button-aria-label",
          "reflectToAttr": true,
          "docs": "Optional property to pass a string to the dismiss \"x\"\nthat will function as its aria-label. Defaults to \"Dismiss\".",
          "docsTags": [],
          "default": "'Dismiss'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "persistent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "persistent",
          "reflectToAttr": false,
          "docs": "Whether or not the toast persists, ie does not autodismiss after 5s",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "progress",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "progress",
          "reflectToAttr": true,
          "docs": "The progress of the action, progress bar will be rendered for values between 0-100 inclusive",
          "docsTags": [],
          "default": "-1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"critical\" | \"info\" | \"insight\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'info' | 'success' | 'warning' | 'critical' | 'insight'",
            "resolved": "\"critical\" | \"info\" | \"insight\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "toast variant that corresponds to the type of info it is conveying",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "critical",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "insight",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "startAutoDismissTimer",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "startAutoDismissTimer() => Promise<void>",
          "parameters": [],
          "docs": "Set toast to disappear after the autodismiss timeout has passed",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketToastAutoDismissed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toast automatically dismisses.",
          "docsTags": []
        },
        {
          "event": "marketToastManuallyDismissed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toast's dismissed button is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The text for the toast"
        },
        {
          "name": "action",
          "docs": "for `<a href>` or `<button>` (not a `<market-button>`)"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-toaster/market-toaster.tsx",
      "encapsulation": "shadow",
      "tag": "market-toaster",
      "readme": "# market-toaster\n\n`market-toaster` is a container for `market-toast`. It handles showing `market-toast` for its alloted amount of time on the screen. It is also positioned to ensure that toasts appear on top of all other elements. \n",
      "docs": "`market-toaster` is a container for `market-toast`. It handles showing `market-toast` for its alloted amount of time on the screen. It is also positioned to ensure that toasts appear on top of all other elements.",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(toastEl: any) => Promise<void>",
            "parameters": [
              {
                "name": "toastEl",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hide(toastEl: any) => Promise<void>",
          "parameters": [
            {
              "name": "toastEl",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Remove the passed toastEl from market-toaster",
          "docsTags": []
        },
        {
          "name": "removeAll",
          "returns": {
            "type": "Promise<void[]>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void[]>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void[]>"
          },
          "signature": "removeAll() => Promise<void[]>",
          "parameters": [],
          "docs": "Remove all market-toasts from market-toaster",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(toastEl: any) => Promise<void>",
            "parameters": [
              {
                "name": "toastEl",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show(toastEl: any) => Promise<void>",
          "parameters": [
            {
              "name": "toastEl",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Add the passed toastEl to market-toaster and make it visible",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "marketToastAutoDismissed",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketToastManuallyDismissed",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-toggle/market-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "market-toggle",
      "readme": "# market-toggle\n\n`<market-toggle>` can be used on its own, or slotted into `<market-row>` as a control. When used with `market-row`,\nthe row's `selected` prop overrides the toggle's `checked` prop.\n\n",
      "docs": "`<market-toggle>` can be used on its own, or slotted into `<market-row>` as a control. When used with `market-row`,\nthe row's `selected` prop overrides the toggle's `checked` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Whether the toggle is active or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Whether the toggle is checked or not.\nIf used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether the toggle is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "Whether the toggle is focused or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hovered",
          "reflectToAttr": true,
          "docs": "Whether the toggle is hovered or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setActive(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `active` state. Allows external elements to programmatically\ntrigger active styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setDisabled",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setDisabled(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `disabled` state. Allows external elements to programmatically\ntrigger disabled styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(value?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `focused` state, except when disabled.\nAllows external consumers to programmatically\ntrigger focused styling.",
          "docsTags": []
        },
        {
          "name": "setHover",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setHover(value: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Sets `hovered` state. Allows external elements to programmatically\ntrigger hover styling, ex. when slotted as a control into `market-row`.",
          "docsTags": []
        },
        {
          "name": "setSelection",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>",
            "parameters": [
              {
                "name": "newValue",
                "type": "boolean",
                "docs": ""
              },
              {
                "name": "__1",
                "type": "{ silent?: boolean; }",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setSelection(newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>",
          "parameters": [
            {
              "name": "newValue",
              "type": "boolean",
              "docs": ""
            },
            {
              "name": "__1",
              "type": "{ silent?: boolean; }",
              "docs": ""
            }
          ],
          "docs": "Toggles `checked` prop, and emits a change event accordingly.\nUsed by `market-row` to sync its selected state w/ slotted toggles.",
          "docsTags": []
        },
        {
          "name": "setValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(newValue: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "newValue",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setValue(newValue: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "newValue",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketToggleChange",
          "detail": "{ current: boolean; previous: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ current: boolean; previous: boolean }",
            "resolved": "{ current: boolean; previous: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever \"checked\" prop value changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/market-tooltip/market-tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "market-tooltip",
      "readme": "# market-tooltip\n\nThis component uses `<market-dropdown>` to create a component with a \"trigger\" slot (which expects text or an icon) and a \"content\" slot. Interacting with the text/icon trigger will open the slotted content in a tooltip-specific popover which is positioned using Popper.js.\n\nTo tweak the position of the tooltip popover, you can style `market-tooltip::part(popover)` directly using CSS.\n",
      "docs": "This component uses `<market-dropdown>` to create a component with a \"trigger\" slot (which expects text or an icon) and a \"content\" slot. Interacting with the text/icon trigger will open the slotted content in a tooltip-specific popover which is positioned using Popper.js.\n\nTo tweak the position of the tooltip popover, you can style `market-tooltip::part(popover)` directly using CSS.",
      "docsTags": [
        {
          "name": "slot",
          "text": "trigger - The text or icon used for the tooltip trigger. Interacting with the\nslotted content will serve as the trigger that opens the popover. Defaults to\nan ℹ️ icon."
        },
        {
          "name": "slot",
          "text": "content - Content slotted here will appear in `market-popover`, which\nbecomes visible when the slotted trigger content is interacted with."
        },
        {
          "name": "part",
          "text": "dropdown - the market-dropdown element."
        },
        {
          "name": "part",
          "text": "trigger - the trigger element."
        },
        {
          "name": "part",
          "text": "popover - the popover element."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Functionally and visually disables the tooltip trigger.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "Whether or not the tooltip is open. Setting it to true means it will be open\nby default",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interaction",
          "type": "\"click\" | \"hover\" | \"none\" | \"persistent\"",
          "complexType": {
            "original": "'click' | 'hover' | 'persistent' | 'none'",
            "resolved": "\"click\" | \"hover\" | \"none\" | \"persistent\"",
            "references": {}
          },
          "mutable": false,
          "attr": "interaction",
          "reflectToAttr": false,
          "docs": "Defines what types of interaction the tooltip should have\n(see `market-dropdown` docs for more granular explanation)",
          "docsTags": [],
          "default": "'hover'",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "persistent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverDistance",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "popover-distance",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDisplaces the popper away from, or toward, the reference element in the\ndirection of its placement.\nhttps://popper.js.org/docs/v2/modifiers/offset/#distance-1",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverPlacement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::Placement"
              }
            }
          },
          "mutable": false,
          "attr": "popover-placement",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position the tooltip overlay).\nDescribes the preferred placement of the popper.\nhttps://popper.js.org/docs/v2/constructors//#placement",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverSkidding",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "popover-skidding",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDisplaces the popover along the reference element.\nhttps://popper.js.org/docs/v2/modifiers/offset/#skidding-1",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popoverStrategy",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "PositioningStrategy",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {
              "PositioningStrategy": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/@popperjs/core/index.d.ts::PositioningStrategy"
              }
            }
          },
          "mutable": false,
          "attr": "popover-strategy",
          "reflectToAttr": false,
          "docs": "Configuration option for Popper.js (used to position `<market-popover>`).\nDescribes the positioning strategy to use. By default, it is absolute. If\nyour reference element is in a fixed container, use the fixed strategy.\nhttps://popper.js.org/docs/v2/constructors//#strategy",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "closeTooltip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "closeTooltip() => Promise<void>",
          "parameters": [],
          "docs": "Closes the tooltip",
          "docsTags": []
        },
        {
          "name": "openTooltip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "openTooltip() => Promise<void>",
          "parameters": [],
          "docs": "Opens the tooltip",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "marketTooltipClosed",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the tooltip is closed.",
          "docsTags": []
        },
        {
          "event": "marketTooltipOpened",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Fired whenever the tooltip is opened.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "marketDropdownOpened",
          "capture": false,
          "passive": false
        },
        {
          "event": "marketDropdownClosed",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "Content slotted here will appear in `market-popover`, which\nbecomes visible when the slotted trigger content is interacted with."
        },
        {
          "name": "trigger",
          "docs": "The text or icon used for the tooltip trigger. Interacting with the\nslotted content will serve as the trigger that opens the popover. Defaults to\nan ℹ️ icon."
        }
      ],
      "parts": [
        {
          "name": "dropdown",
          "docs": "the market-dropdown element."
        },
        {
          "name": "popover",
          "docs": "the popover element."
        },
        {
          "name": "trigger",
          "docs": "the trigger element."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ],
  "typeLibrary": {
    "src/components/market-table-row/market-table-row.tsx::TCell": {
      "declaration": "export type TCell = HTMLMarketTableCellElement | HTMLMarketTableColumnElement;",
      "docstring": "",
      "path": "src/components/market-table-row/market-table-row.tsx"
    },
    "src/components/market-action-card/events.ts::TMarketActionCardSelectedEventDetail": {
      "declaration": "{ value: string }",
      "docstring": "",
      "path": "src/components/market-action-card/events.ts"
    },
    "src/components/market-action-card/events.ts::TMarketActionCardDeselectedEventDetail": {
      "declaration": "{ value: string }",
      "docstring": "",
      "path": "src/components/market-action-card/events.ts"
    },
    "src/utils/dialog.tsx::DialogLoadedEvent": {
      "declaration": "export interface DialogLoadedEvent {\n  dialog: DialogElement;\n  type: DialogType;\n}",
      "docstring": "",
      "path": "src/utils/dialog.tsx"
    },
    "src/utils/dialog.tsx::DialogDismissedEvent": {
      "declaration": "export interface DialogDismissedEvent {\n  dialog: DialogElement;\n  type: DialogType;\n  origin: HTMLElement;\n}",
      "docstring": "",
      "path": "src/utils/dialog.tsx"
    },
    "src/utils/focus-trap.ts::FocusTrapOptions": {
      "declaration": "export interface Options {\n    /**\n     * A function that will be called **before** sending focus to the\n     * target element upon activation.\n     */\n    onActivate?: () => void;\n\n    /**\n     * A function that will be called **after** focus has been sent to the\n     * target element upon activation.\n     */\n    onPostActivate?: () => void;\n\n    /**\n     * A function that will be called immediately after the trap's state is updated to be paused.\n     */\n    onPause?: () => void;\n\n    /**\n     * A function that will be called after the trap has been completely paused and is no longer\n     *  managing/trapping focus.\n     */\n    onPostPause?: () => void;\n\n    /**\n     * A function that will be called immediately after the trap's state is updated to be active\n     *  again, but prior to updating its knowledge of what nodes are tabbable within its containers,\n     *  and prior to actively managing/trapping focus.\n     */\n    onUnpause?: () => void;\n\n    /**\n     * A function that will be called after the trap has been completely unpaused and is once\n     *  again managing/trapping focus.\n     */\n    onPostUnpause?: () => void;\n\n    /**\n     * A function for determining if it is safe to send focus to the focus trap\n     * or not.\n     *\n     * It should return a promise that only resolves once all the listed `containers`\n     * are able to receive focus.\n     *\n     * The purpose of this is to prevent early focus-trap activation on animated\n     * dialogs that fade in and out. When a dialog fades in, there is a brief delay\n     * between the activation of the trap and the trap element being focusable.\n     */\n    checkCanFocusTrap?: (\n      containers: Array<HTMLElement | SVGElement>\n    ) => Promise<void>;\n\n    /**\n     * A function that will be called **before** sending focus to the\n     * trigger element upon deactivation.\n     */\n    onDeactivate?: () => void;\n\n    /**\n     * A function that will be called after the trap is deactivated, after `onDeactivate`.\n     * If `returnFocus` was set, it will be called **after** focus has been sent to the trigger\n     * element upon deactivation; otherwise, it will be called after deactivation completes.\n     */\n    onPostDeactivate?: () => void;\n    /**\n     * A function for determining if it is safe to send focus back to the `trigger` element.\n     *\n     * It should return a promise that only resolves once `trigger` is focusable.\n     *\n     * The purpose of this is to prevent the focus being sent to an animated trigger element too early.\n     * If a trigger element fades in upon trap deactivation, there is a brief delay between the deactivation\n     * of the trap and when the trigger element is focusable.\n     *\n     * `trigger` will be either the node that had focus prior to the trap being activated,\n     * or the result of the `setReturnFocus` option, if configured.\n     *\n     * This handler is **not** called if the `returnFocusOnDeactivate` configuration option\n     * (or the `returnFocus` deactivation option) is falsy.\n     */\n    checkCanReturnFocus?: (trigger: HTMLElement | SVGElement) => Promise<void>;\n\n    /**\n     * By default, when a focus trap is activated the first element in the\n     * focus trap's tab order will receive focus. With this option you can\n     * specify a different element to receive that initial focus, or use `false`\n     * for no initially focused element at all.\n     *\n     * NOTE: Setting this option to `false` (or a function that returns `false`)\n     * will prevent the `fallbackFocus` option from being used.\n     *\n     * Setting this option to `undefined` (or a function that returns `undefined`)\n     * will result in the default behavior.\n     */\n    initialFocus?: FocusTargetOrFalse | undefined | (() => void);\n    /**\n     * By default, an error will be thrown if the focus trap contains no\n     * elements in its tab order. With this option you can specify a\n     * fallback element to programmatically receive focus if no other\n     * tabbable elements are found. For example, you may want a popover's\n     * `<div>` to receive focus if the popover's content includes no\n     * tabbable elements. *Make sure the fallback element has a negative\n     * `tabindex` so it can be programmatically focused.\n     *\n     * NOTE: If `initialFocus` is `false` (or a function that returns `false`),\n     * this function will not be called when the trap is activated, and no element\n     * will be initially focused. This function may still be called while the trap\n     * is active if things change such that there are no longer any tabbable nodes\n     * in the trap.\n     */\n    fallbackFocus?: FocusTarget;\n    /**\n     * Default: `true`. If `false`, when the trap is deactivated,\n     * focus will *not* return to the element that had focus before activation.\n     */\n    returnFocusOnDeactivate?: boolean;\n    /**\n     * By default, focus trap on deactivation will return to the element\n     * that was focused before activation.\n     */\n    setReturnFocus?:\n      | FocusTargetValueOrFalse\n      | ((\n          nodeFocusedBeforeActivation: HTMLElement | SVGElement\n        ) => FocusTargetValueOrFalse);\n    /**\n     * Default: `true`. If `false` or returns `false`, the `Escape` key will not trigger\n     * deactivation of the focus trap. This can be useful if you want\n     * to force the user to make a decision instead of allowing an easy\n     * way out. Note that if a function is given, it's only called if the ESC key\n     * was pressed.\n     */\n    escapeDeactivates?: boolean | KeyboardEventToBoolean;\n    /**\n     * If `true` or returns `true`, a click outside the focus trap will\n     * deactivate the focus trap and allow the click event to do its thing (i.e.\n     * to pass-through to the element that was clicked). This option **takes\n     * precedence** over `allowOutsideClick` when it's set to `true`, causing\n     * that option to be ignored. Default: `false`.\n     */\n    clickOutsideDeactivates?: boolean | MouseEventToBoolean;\n    /**\n     * If set and is or returns `true`, a click outside the focus trap will not\n     * be prevented, even when `clickOutsideDeactivates` is `false`. When\n     * `clickOutsideDeactivates` is `true`, this option is **ignored** (i.e.\n     * if it's a function, it will not be called). Use this option to control\n     * if (and even which) clicks are allowed outside the trap in conjunction\n     * with `clickOutsideDeactivates: false`. Default: `false`.\n     */\n    allowOutsideClick?: boolean | MouseEventToBoolean;\n    /**\n     * By default, focus() will scroll to the element if not in viewport.\n     * It can produce unintended effects like scrolling back to the top of a modal.\n     * If set to `true`, no scroll will happen.\n     */\n    preventScroll?: boolean;\n    /**\n     * Default: `true`. Delays the autofocus when the focus trap is activated.\n     * This prevents elements within the focusable element from capturing\n     * the event that triggered the focus trap activation.\n     */\n    delayInitialFocus?: boolean;\n    /**\n     * Default: `window.document`. Document where the focus trap will be active.\n     * This allows to use FocusTrap in an iFrame context.\n     */\n    document?: Document;\n\n    /**\n     * Specific tabbable options configurable on focus-trap.\n     */\n    tabbableOptions?: FocusTrapTabbableOptions;\n\n    /**\n     * Define the global trap stack. This makes it possible to share the same stack\n     * in multiple instances of `focus-trap` in the same page such that\n     * auto-activation/pausing of traps is properly coordinated among all instances\n     * as activating a trap when another is already active should result in the other\n     * being auto-paused. By default, each instance will have its own internal stack,\n     * leading to conflicts if they each try to trap the focus at the same time.\n     */\n    trapStack?: Array<FocusTrap>;\n\n    /**\n     * Determines if the given keyboard event is a \"tab forward\" event that will move\n     * the focus to the next trapped element in tab order. Defaults to the `TAB` key.\n     * Use this to override the trap's behavior if you want to use arrow keys to control\n     * keyboard navigation within the trap, for example. Also see `isKeyBackward()` option.\n     */\n    isKeyForward?: KeyboardEventToBoolean;\n\n    /**\n     * Determines if the given keyboard event is a \"tab backward\" event that will move\n     * the focus to the previous trapped element in tab order. Defaults to the `SHIFT+TAB` key.\n     * Use this to override the trap's behavior if you want to use arrow keys to control\n     * keyboard navigation within the trap, for example. Also see `isKeyForward()` option.\n     */\n    isKeyBackward?: KeyboardEventToBoolean;\n  }",
      "docstring": "",
      "path": "src/utils/focus-trap.ts"
    },
    "src/utils/focus-trap.ts::FocusTrapActivateOptions": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/utils/focus-trap.ts"
    },
    "src/utils/focus-trap.ts::FocusTrapDeactivateOptions": {
      "declaration": "interface DeactivateOptions extends Pick<Options, 'onDeactivate' | 'onPostDeactivate' | 'checkCanReturnFocus'> {\n    returnFocus?: boolean;\n  }",
      "docstring": "",
      "path": "src/utils/focus-trap.ts"
    },
    "../../node_modules/@popperjs/core/index.d.ts::Placement": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/@popperjs/core/index.d.ts"
    },
    "../../node_modules/@popperjs/core/index.d.ts::PositioningStrategy": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/@popperjs/core/index.d.ts"
    },
    "src/utils/dialog.tsx::Dialog": {
      "declaration": "export interface Dialog {\n  el: DialogElement;\n  type: DialogType;\n  id: string;\n  dialogID: string;\n  index: number;\n  indexOfType: number;\n}",
      "docstring": "",
      "path": "src/utils/dialog.tsx"
    },
    "src/utils/dialog.tsx::DialogElement": {
      "declaration": "export type DialogElement =\n  | HTMLMarketDialogElement\n  | HTMLMarketBladeElement\n  | HTMLMarketModalFullElement\n  | HTMLMarketModalPartialElement\n  | HTMLMarketSheetElement;",
      "docstring": "",
      "path": "src/utils/dialog.tsx"
    },
    "src/components/market-date-picker/enums/menu.tsx::MENU_SLOT_NAMES": {
      "declaration": "export enum MENU_SLOT_NAMES {\n  TODAY = 'today',\n  YESTERDAY = 'yesterday',\n  THIS_WEEK = 'this-week',\n  LAST_WEEK = 'last-week',\n  THIS_MONTH = 'this-month',\n  LAST_MONTH = 'last-month',\n  THIS_YEAR = 'this-year',\n  LAST_YEAR = 'last-year',\n  CUSTOM = 'custom',\n}",
      "docstring": "Enums for market-date-picker-menu slot names used to determine which row was selected",
      "path": "src/components/market-date-picker/enums/menu.tsx"
    },
    "src/components/market-date-picker/events.ts::TMarketDateRangeChangedEventDetail": {
      "declaration": "{\n  endDate: string;\n  menuSelection: string;\n  prevEndDate: string;\n  prevStartDate: string;\n  startDate: string;\n}",
      "docstring": "",
      "path": "src/components/market-date-picker/events.ts"
    },
    "src/components/market-date-picker/events.ts::TMarketDatePickerMenuSelectionChangedEventDetail": {
      "declaration": "{ menuSelection: `${MENU_SLOT_NAMES}` }",
      "docstring": "",
      "path": "src/components/market-date-picker/events.ts"
    },
    "src/utils/gesture/types.ts::TMarketDragCoords": {
      "declaration": "{\n  x: number;\n  y: number;\n}",
      "docstring": "",
      "path": "src/utils/gesture/types.ts"
    },
    "src/components/market-file-upload/types.ts::TMarketFileUploadFileConfig": {
      "declaration": "{\n  filename: string;\n  leadingIconName?: string; // TODO: is there a market-icon type?\n  message?: string; // only displays if status = error\n  status?: 'error' | 'loading' | 'success';\n}",
      "docstring": "",
      "path": "src/components/market-file-upload/types.ts"
    },
    "src/components/market-filter/events.ts::TMarketFilterExpandedChangeEventDetail": {
      "declaration": "boolean",
      "docstring": "",
      "path": "src/components/market-filter/events.ts"
    },
    "src/components/market-filter/events.ts::TMarketFilterValueDidChangeEventDetail": {
      "declaration": "{\n  name: string;\n  prevValue: string | string[] | TMarketFilterDateRangeValues | null;\n  value: string | string[] | TMarketFilterDateRangeValues | null;\n}",
      "docstring": "",
      "path": "src/components/market-filter/events.ts"
    },
    "src/components/market-filter/types.ts::TMarketFilterType": {
      "declaration": "export type TMarketFilterType = 'date' | 'list';",
      "docstring": "",
      "path": "src/components/market-filter/types.ts"
    },
    "src/components/market-filter/events.ts::TMarketFilterDateRangeValues": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/market-filter/events.ts"
    },
    "src/components/market-header/events.ts::TMarketHeaderNavigateEventDetail": {
      "declaration": "{\n  event: MouseEvent;\n  action: 'close' | 'custom';\n}",
      "docstring": "",
      "path": "src/components/market-header/events.ts"
    },
    "src/components/market-input-search/events.ts::TMarketInputSearchValueChangeEventDetail": {
      "declaration": "{\n  current: string;\n  prevValue: string;\n  originalEvent: unknown;\n  value: string;\n}",
      "docstring": "",
      "path": "src/components/market-input-search/events.ts"
    },
    "src/components/market-input-search/events.ts::TMarketInputSearchFocusEventDetail": {
      "declaration": "boolean",
      "docstring": "",
      "path": "src/components/market-input-search/events.ts"
    },
    "src/components/market-input-search/events.ts::TMarketInternalInputSearchCompactAnimationEventDetail": {
      "declaration": "export type TMarketInternalInputSearchCompactAnimationEventDetail = 'animationstart' | 'animationend';",
      "docstring": "",
      "path": "src/components/market-input-search/events.ts"
    },
    "src/components/market-list/types.ts::TMarketListFilterStrategyPropTypes": {
      "declaration": "export type TMarketListFilterStrategyPropTypes =\n  | 'label'\n  | 'textcontent'\n  | 'value'\n  | TMarketListFilterStrategyPropCallback;",
      "docstring": "",
      "path": "src/components/market-list/types.ts"
    },
    "src/utils/reorderable.ts::TMarketReorderableOptions": {
      "declaration": "export type TMarketReorderableOptions = 'off' | 'internal' | 'external';",
      "docstring": "",
      "path": "src/utils/reorderable.ts"
    },
    "src/components/market-list/events.ts::TMarketListSelectionsDidChangeEventDetail": {
      "declaration": "{\n  currentSelections: Array<HTMLMarketRowElement | HTMLMarketActionCardElement>;\n  currentSelectionValues: Array<string>;\n  newDeselection: HTMLMarketRowElement | HTMLMarketActionCardElement;\n  newDeselectionValue: string;\n  newSelection: HTMLMarketRowElement | HTMLMarketActionCardElement;\n  newSelectionValue: string;\n  prevSelectionValues: Array<string>;\n}",
      "docstring": "",
      "path": "src/components/market-list/events.ts"
    },
    "src/utils/reorderable.ts::TMarketReorderEventDetail": {
      "declaration": "{\n  item: MarketDraggableElement;\n  oldIndex: number;\n  newIndex: number;\n}",
      "docstring": "",
      "path": "src/utils/reorderable.ts"
    },
    "src/components/market-list/events.ts::TMarketListItemsFilteredEventDetail": {
      "declaration": "{\n  items: Array<HTMLMarketRowElement | HTMLMarketActionCardElement>;\n  prevItems: Array<HTMLMarketRowElement | HTMLMarketActionCardElement>;\n}",
      "docstring": "",
      "path": "src/components/market-list/events.ts"
    },
    "src/components/market-pagination/events.ts::TMarketPaginationPageSizeChangeEventDetail": {
      "declaration": "{\n  value: string;\n}",
      "docstring": "",
      "path": "src/components/market-pagination/events.ts"
    },
    "src/components/market-pagination/events.ts::TMarketInternalPaginationNavigationEventDetail": {
      "declaration": "{\n  page: string;\n  prevPage: string;\n  pageSize: string;\n}",
      "docstring": "",
      "path": "src/components/market-pagination/events.ts"
    },
    "src/utils/pill-variant.ts::MarketPillVariant": {
      "declaration": "\"success\" | \"emphasis\" | \"warning\" | \"critical\" | \"normal\" | \"insight\" | \"alpha\" | \"beta\"",
      "docstring": "",
      "path": "src/utils/pill-variant.ts"
    },
    "src/components/market-progress-tracker/subcomponents/market-progress-tracker-step/events.ts::TMarketProgressTrackerStepClickEventDetail": {
      "declaration": "{\n  index: number;\n  name: string | null;\n}",
      "docstring": "",
      "path": "src/components/market-progress-tracker/subcomponents/market-progress-tracker-step/events.ts"
    },
    "src/components/market-row/events.ts::TMarketRowSelectedEventDetail": {
      "declaration": "{ value: string }",
      "docstring": "",
      "path": "src/components/market-row/events.ts"
    },
    "src/components/market-row/events.ts::TMarketRowDeselectedEventDetail": {
      "declaration": "{ value: string }",
      "docstring": "",
      "path": "src/components/market-row/events.ts"
    },
    "../../node_modules/@floating-ui/dom/dist/floating-ui.dom.d.ts::Strategy": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/@floating-ui/dom/dist/floating-ui.dom.d.ts"
    },
    "src/components/market-tabs/events.ts::TMarketTabSelectedChangedEventDetail": {
      "declaration": "{\n  panelId: string;\n  prevValue: boolean;\n  tabId: string;\n  value: boolean;\n}",
      "docstring": "",
      "path": "src/components/market-tabs/events.ts"
    },
    "src/components/market-tabs/events.ts::TMarketTabListSelectedTabChangedEventDetail": {
      "declaration": "{\n  prevValue: string;\n  value: string;\n}",
      "docstring": "",
      "path": "src/components/market-tabs/events.ts"
    },
    "src/components/market-tile/events.ts::TMarketTileSelectedChanged": {
      "declaration": "{\n  selected: boolean;\n  value: string;\n}",
      "docstring": "",
      "path": "src/components/market-tile/events.ts"
    },
    "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2Selection": {
      "declaration": "export type TMarketTableV2Selection = 'true' | 'false' | 'indeterminate';",
      "docstring": "",
      "path": "src/components/tables-v2/market-table-v2/types.ts"
    },
    "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2SortOrder": {
      "declaration": "export type TMarketTableV2SortOrder = 'ascending' | 'descending' | 'none';",
      "docstring": "",
      "path": "src/components/tables-v2/market-table-v2/types.ts"
    },
    "src/components/tables-v2/market-table-v2/types.ts::TMarketTableV2SortStrategy": {
      "declaration": "export type TMarketTableV2SortStrategy = 'string' | 'number' | 'datetime' | TMarketTableV2SortStrategyCallback;",
      "docstring": "",
      "path": "src/components/tables-v2/market-table-v2/types.ts"
    },
    "src/components/tables-v2/market-table-v2/types.ts::MarketTableV2SortOrderChangeDetail": {
      "declaration": "{\n  current: TMarketTableV2SortOrder;\n  previous: TMarketTableV2SortOrder;\n}",
      "docstring": "",
      "path": "src/components/tables-v2/market-table-v2/types.ts"
    },
    "src/components/tables-v2/market-table-v2/types.ts::MarketTableV2SelectionChangeEventDetail": {
      "declaration": "{\n  current: TMarketTableV2Selection;\n  previous: TMarketTableV2Selection;\n}",
      "docstring": "",
      "path": "src/components/tables-v2/market-table-v2/types.ts"
    }
  }
}