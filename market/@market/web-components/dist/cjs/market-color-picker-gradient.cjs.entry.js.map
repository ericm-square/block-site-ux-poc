{"file":"market-color-picker-gradient.entry.cjs.js","mappings":"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","names":["throttle","isTouchEvent","getCoordsFromEvent","hsvToRgb","hsvToHex","parseToHSVA","h","Host"],"sources":["src/components/market-color-picker/subcomponents/market-color-picker-gradient/market-color-picker-gradient.css?tag=market-color-picker-gradient&encapsulation=shadow","src/components/market-color-picker/subcomponents/market-color-picker-gradient/market-color-picker-gradient.tsx"],"sourcesContent":["/* TODO: add design tokens to file */\n\n:host {\n  --primary-gradient-height: var(--color-picker-adjustments-hue-min-height);\n  --gradient-border-radius: var(--color-picker-adjustments-hue-radius);\n  --gradient-margin: var(--color-picker-vertical-spacing);\n  --secondary-gradient-height: calc(var(--color-picker-adjustments-saturation-brightness-min-height) * 1px);\n  --gradient-pointer-width: 12px;\n  --gradient-pointer-height: 12px;\n  --gradient-pointer-border: 2px white solid;\n  --gradient-pointer-border-radius: 50%;\n\n  display: block;\n}\n\n.primary-gradient {\n  position: relative;\n  width: 100%;\n  height: var(--primary-gradient-height);\n  border-radius: var(--gradient-border-radius);\n\n  /* Standardized gradient for selecting hues */\n  background:\n    linear-gradient(\n      to right,\n      hsl(0deg 100% 50%),\n      hsl(60deg 100% 50%),\n      hsl(120deg 100% 50%),\n      hsl(180deg 100% 50%),\n      hsl(240deg 100% 50%),\n      hsl(300deg 100% 50%),\n      hsl(0deg 100% 50%)\n    );\n}\n\n.secondary-gradient {\n  position: relative;\n  width: 100%;\n  height: var(--secondary-gradient-height);\n  margin-top: var(--gradient-margin);\n  border-radius: var(--gradient-border-radius);\n}\n\n.pointer {\n  position: absolute;\n  z-index: 2;\n  width: var(--gradient-pointer-width);\n  height: var(--gradient-pointer-height);\n  border: var(--gradient-pointer-border);\n  border-radius: var(--gradient-pointer-border-radius);\n  box-shadow: var(--elevation-20-shadow);\n}\n\n#primary-pointer {\n  top: calc(50% - 8px);\n}\n","import { Component, Host, h, Element, Event, EventEmitter, Prop, Watch } from '@stencil/core';\nimport { throttle } from 'lodash-es';\n\nimport { TMouseOrTouchEvent } from '../../../../utils/gesture/types';\nimport { isTouchEvent, getCoordsFromEvent } from '../../../../utils/gesture/utils';\n\nimport { hsvToRgb, parseToHSVA, hsvToHex } from '../../../../utils/color';\n\nconst RESIZE_DEBOUNCE_DURATION = 16; // 60fps\n\n/**\n * String values for pointer ids.\n */\nconst PRIMARY_ID = 'primary-pointer';\nconst SECONDARY_ID = 'secondary-pointer';\n\n/**\n * Default constants as percentages. Looks different at different viewport sizes, so no obvious coordinates available.\n */\nconst PRIMARY_COORDINATES = [50, 50] as [number, number];\nconst SECONDARY_COORDINATES = [95, 10] as [number, number];\n\n@Component({\n  tag: 'market-color-picker-gradient',\n  styleUrl: 'market-color-picker-gradient.css',\n  shadow: true,\n})\nexport class MarketColorPickerGradient {\n  @Element() el: HTMLMarketColorPickerGradientElement;\n\n  /**\n   * Value representing the selected color of the secondary gradient picker.\n   * This is a string that can represent a [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   * This is the value the color picker will use.\n   * Supported color types are rgb/a, hsl/a, and hex colors.\n   */\n  @Prop() readonly value: string;\n\n  /**\n   * Fired whenever the picker selection state changes.\n   */\n  @Event({ cancelable: true }) marketColorPickerGradientValueChange: EventEmitter<{ value: string }>;\n\n  /**\n   * Current hue set on primary gradient.\n   */\n  primaryHue: number;\n\n  primaryPointer: HTMLElement;\n  secondaryPointer: HTMLElement;\n\n  /**\n   * Secondary pointer location. Used to determine secondary pointer color when secondary gradient changes.\n   */\n  secondaryPointerCoordinates: [number, number] = SECONDARY_COORDINATES;\n\n  /**\n   * Element of currently dragged pointer.\n   */\n  draggablePointer: HTMLElement | null;\n\n  /**\n   * Drag and drop logic for pointers.\n   */\n  boundOnDragMove = this.onDragMove.bind(this);\n  boundOnDragEnd = this.onDragEnd.bind(this);\n\n  private throttledUpdatePointerOnDrag = throttle(this.updatePointerOnDrag.bind(this), RESIZE_DEBOUNCE_DURATION);\n\n  onDragStart(e: TMouseOrTouchEvent, pointer: HTMLElement) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // only start drag on touch events or left mouse clicks\n    if (!isTouchEvent(e) && e.button !== 0) return;\n\n    const coords = getCoordsFromEvent(e);\n\n    this.updatePointerOnDrag(coords.x, coords.y, pointer);\n    this.draggablePointer = pointer;\n\n    document.addEventListener('mousemove', this.boundOnDragMove);\n    document.addEventListener('mouseup', this.boundOnDragEnd);\n\n    // don't use passive touch event listeners so we can call preventDefault()\n    document.addEventListener('touchmove', this.boundOnDragMove, { passive: false });\n    document.addEventListener('touchend', this.boundOnDragEnd, { passive: false });\n  }\n\n  onDragMove(e: TMouseOrTouchEvent) {\n    e.preventDefault();\n    const coords = getCoordsFromEvent(e);\n\n    this.throttledUpdatePointerOnDrag(coords.x, coords.y, this.draggablePointer);\n  }\n\n  onDragEnd(e: TMouseOrTouchEvent) {\n    e.preventDefault();\n\n    this.draggablePointer = null;\n    document.removeEventListener('mousemove', this.boundOnDragMove);\n    document.removeEventListener('mouseup', this.boundOnDragEnd);\n    document.removeEventListener('touchmove', this.boundOnDragMove);\n    document.removeEventListener('touchend', this.boundOnDragEnd);\n  }\n\n  /**\n   * Drag logic function to determine coordinates as a percentage.\n   * @param posX\n   * @param posY\n   * @param pointer\n   */\n  updatePointerOnDrag(posX: number, posY: number, pointer: HTMLElement) {\n    const elem = pointer.parentElement;\n    if (!elem) {\n      return;\n    }\n\n    const rect = elem.getBoundingClientRect();\n    const elemOffsetX = rect.left;\n    const elemOffsetY = rect.top;\n    const maxWidth = rect.width;\n    const maxHeight = rect.height;\n\n    // Set x and y as percentages of the gradient\n    let updatedX = (posX - elemOffsetX) / maxWidth;\n    let updatedY = (posY - elemOffsetY) / maxHeight;\n\n    // Ensure pointer does not leave gradient bounds\n    updatedX = Math.max(Math.min(updatedX, 1), 0);\n    updatedY = Math.max(Math.min(updatedY, 1), 0);\n\n    // utilize the %'s given for S & V (H decided by primary gradient)\n    // S = x increasing\n    // V = y decreasing\n    // H = color (0-360) by %\n    this.setPointerCoordinates({\n      pointer,\n      x: updatedX * 100,\n      y: updatedY * 100,\n    });\n  }\n\n  /**\n   * Function handling updating pointer location based on provided coordinates.\n   * The x and y values are percentages, from 0-100.\n   * It then also updates the colors of the pointers.\n   * @param {HTMLElement} options.pointer\n   * @param {number} options.x\n   * @param {number} options.y\n   * @param {boolean} options.emitEvent\n   * @param {string} options.colorType\n   */\n  setPointerCoordinates(options: {\n    pointer: HTMLElement;\n    x: number;\n    y?: number;\n    emitEvent?: boolean;\n    colorType?: string;\n  }) {\n    const { pointer, x, y = 50, emitEvent = true, colorType = '' } = options;\n\n    const pointerOffset = pointer.offsetWidth / 2;\n\n    pointer.style.left = `calc(${x}% - ${pointerOffset}px)`;\n\n    // Updates the selected color of the targeted gradient\n    if (pointer.id === PRIMARY_ID) {\n      this.setPrimaryGradientColor(x / 100, emitEvent);\n    } else if (pointer.id === SECONDARY_ID) {\n      // only update this on secondary gradient\n      pointer.style.top = `calc(${y}% - ${pointerOffset}px)`;\n\n      this.setSecondaryGradientColor(x / 100, y / 100, emitEvent, colorType);\n    }\n  }\n\n  /**\n   * Sets primary pointer color.\n   * Secondary gradient is updated to reflect new primary color.\n   * @param x\n   * @param emitEvent\n   */\n  setPrimaryGradientColor(x: number, emitEvent: boolean = true) {\n    this.primaryHue = x * 360;\n    this.primaryPointer.style.background = `hsl(${this.primaryHue}, 100%, 50%)`;\n    this.updateSecondaryGradient(emitEvent);\n  }\n\n  /**\n   * Sets secondary pointer color. If rgba is used, show that, otherwise default to hex values.\n   * The value emitted from the gradient here, if emitEvent is true.\n   * @param x\n   * @param y\n   * @param emitEvent\n   * @param colorType\n   */\n  setSecondaryGradientColor(x: number, y: number, emitEvent: boolean = true, colorType: string = '') {\n    const saturation = x * 100;\n    const value = 100 - y * 100;\n\n    let colorValue;\n    let colorString;\n\n    if (colorType === 'rgba') {\n      colorValue = hsvToRgb(this.primaryHue, saturation, value);\n      colorString = `rgb(${colorValue[0]}, ${colorValue[1]}, ${colorValue[2]})`;\n    } else {\n      // Defaults to hex value shown\n      colorValue = hsvToHex(this.primaryHue, saturation, value);\n      colorString = `#${colorValue.join('')}`;\n    }\n\n    this.secondaryPointer.style.background = colorString;\n\n    this.secondaryPointerCoordinates = [x, y];\n\n    if (emitEvent) {\n      this.marketColorPickerGradientValueChange.emit({ value: colorString });\n    }\n  }\n\n  /**\n   * Updates the secondary gradient picker background, then updates secondary pointer.\n   * @param emitEvent\n   */\n  updateSecondaryGradient(emitEvent: boolean = true) {\n    const gradient = this.el.shadowRoot.querySelector('.secondary-gradient') as HTMLElement;\n    gradient.style.background = `\n      linear-gradient(to top, rgb(0, 0, 0), transparent),\n      linear-gradient(to left, hsl(${this.primaryHue}, 100%, 50%), rgb(255, 255, 255))\n    `;\n\n    this.setSecondaryGradientColor(...this.secondaryPointerCoordinates, emitEvent);\n  }\n\n  /**\n   * This value watcher attempts to convert the value into a valid color and updates the gradient pickers.\n   * It returns a boolean based on whether this succeeded or not.\n   * @returns boolean\n   */\n  @Watch('value')\n  updateGradientsByValue() {\n    // Determine if color formatted as: hex, rgb, hsl\n    // Convert it to hsv and update position based on hsv\n\n    // Attempt to convert value\n    const convertedColor = parseToHSVA(this.value);\n\n    // If it converts successfully, values will exist. We also need the pointers to be initialized for this to work.\n    if (convertedColor.values && this.primaryPointer && this.secondaryPointer) {\n      const h = convertedColor.values[0];\n      const s = convertedColor.values[1];\n      const v = convertedColor.values[2];\n\n      // Deconstruct to HSV values. h = primary, s = secondary x, v = secondary y (decreasing)\n      const primaryX = (100 * h) / 360;\n      const secondaryX = s;\n      const secondaryY = 100 - v;\n\n      const primaryOptions = {\n        pointer: this.primaryPointer,\n        x: primaryX,\n        emitEvent: false,\n      };\n\n      const secondaryOptions = {\n        pointer: this.secondaryPointer,\n        x: secondaryX,\n        y: secondaryY,\n        colorType: convertedColor.colorType,\n        emitEvent: false,\n      };\n\n      this.setPointerCoordinates(primaryOptions);\n      this.setPointerCoordinates(secondaryOptions);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Sets necessary values for pointers to work if no valid value has been preset on load\n   */\n  setInitialPointers() {\n    const pointers = [this.primaryPointer, this.secondaryPointer];\n    const pointerCoordinates = [PRIMARY_COORDINATES, SECONDARY_COORDINATES];\n\n    pointers.forEach((pointer, i) => {\n      const pointerOptions = {\n        pointer,\n        x: pointerCoordinates[i][0],\n        y: pointerCoordinates[i][1],\n        emitEvent: false,\n      };\n      this.setPointerCoordinates(pointerOptions);\n    });\n  }\n\n  componentDidLoad() {\n    this.primaryPointer = this.el.shadowRoot.querySelector(`#${PRIMARY_ID}`);\n    this.secondaryPointer = this.el.shadowRoot.querySelector(`#${SECONDARY_ID}`);\n    const success = this.updateGradientsByValue();\n    if (!success) {\n      this.setInitialPointers();\n    }\n  }\n\n  /* eslint-disable jsx-a11y/aria-role */\n  render() {\n    return (\n      <Host class=\"market-color-picker-gradient\">\n        <slot></slot>\n        <div\n          class=\"primary-gradient\"\n          role=\"input\"\n          onMouseDown={(e: MouseEvent) => this.onDragStart(e, this.primaryPointer)}\n          onTouchStart={(e: TouchEvent) => this.onDragStart(e, this.primaryPointer)}\n        >\n          <div id={PRIMARY_ID} class=\"pointer\"></div>\n        </div>\n        <div\n          class=\"secondary-gradient\"\n          role=\"input\"\n          onMouseDown={(e: MouseEvent) => this.onDragStart(e, this.secondaryPointer)}\n          onTouchStart={(e: TouchEvent) => this.onDragStart(e, this.secondaryPointer)}\n        >\n          <div id={SECONDARY_ID} class=\"pointer\"></div>\n        </div>\n      </Host>\n    );\n  }\n  /* eslint-enable jsx-a11y/aria-role */\n}\n"],"version":3}