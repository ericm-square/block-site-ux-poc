{"file":"market-textarea.entry.cjs.js","mappings":"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","names":["TEXTAREA_MAXIMUM_HEIGHT","getTextInputAriaLabel","observeAriaAttributes","h","Host"],"sources":["src/components/market-textarea/market-textarea.css?tag=market-textarea&encapsulation=shadow","src/components/market-textarea/market-textarea.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/field.css\";\n@import \"../../styles/mixins/field-states.css\";\n@import \"../../styles/mixins/floating-input.css\";\n\n:host {\n  --textarea-height: 120px;\n  --textarea-minimum-height: 120px;\n  --textarea-label-bottom-padding: 16px;\n\n  @extend %field;\n  @extend %field-states;\n  @extend %floating-input;\n\n  flex-direction: column;\n  overflow: hidden;\n  min-height: var(--textarea-minimum-height);\n  max-height: var(--textarea-maximum-height);\n  resize: vertical;\n\n  .label-input-container,\n  &([value='']:not([focused]):not([autofilled])) .label-input-container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    padding-bottom: var(--textarea-label-bottom-padding);\n    font-weight: var(--textarea-font-weight);\n    font-size: var(--textarea-font-size);\n    line-height: var(--textarea-font-leading);\n    letter-spacing: var(--textarea-font-tracking);\n  }\n\n  /* Override `:host([disabled]) *` style in component-base mixin */\n  &([disabled]) textarea,\n  &([disabled]) ::slotted(textarea) {\n    pointer-events: auto !important; /* stylelint-disable-line declaration-no-important */\n  }\n}\n\ntextarea,\n::slotted(textarea) {\n  flex-grow: 1;\n  resize: none;\n}\n","import { TEXTAREA_MAXIMUM_HEIGHT } from '@market/market-theme/js/cjs/index.js';\nimport { Component, Host, h, Element, Prop, Event, EventEmitter, Listen, State, Method } from '@stencil/core';\n\nimport { getTextInputAriaLabel, observeAriaAttributes, AriaAttributes } from '../../utils/aria';\n\n/**\n * @slot - The main label for the textarea.\n * @slot textarea - Can be used to slot your own custom textarea element.\n * @part container - The containing div for the textarea and label.\n */\n@Component({\n  tag: 'market-textarea',\n  styleUrl: 'market-textarea.css',\n  shadow: true,\n})\nexport class MarketTextarea {\n  private slottedTextarea?: HTMLTextAreaElement;\n\n  @Element() el: HTMLMarketTextareaElement;\n\n  /**\n   * A string specifying the placeholder of the textarea.\n   * This is shown before a user attempts to add a value, given no value is already provided.\n   */\n  @Prop() readonly placeholder: string;\n\n  /**\n   * A string specifying a name for the textarea.\n   */\n  @Prop() readonly name: string;\n\n  /**\n   * A string specifying a value for the textarea. This will be visually shown on the textarea and can be edited by the user.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /**\n   * A string specifying the maximum length of characters for the input value.\n   */\n  @Prop() readonly maxlength: string;\n\n  /**\n   * A boolean representing whether the textarea is readonly or not.\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean = false;\n\n  /**\n   * A boolean representing whether the textarea is disabled or not.\n   * This visually and functionally will disable the textarea.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * A boolean representing whether the textarea is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * A boolean representing whether the textarea is invalid or not.\n   * This represents error states.\n   */\n  @Prop({ reflect: true }) readonly invalid: boolean = false;\n\n  /**\n   * A string specifying the maximum height in pixels for the textarea. Vertical resizing will be limited to this height. Example value: '200px'.\n   *\n   * **DEPRECATED**: set `max-height` via CSS\n   *\n   * @default '320px'\n   */\n  @Prop() readonly maxHeight: string = `${TEXTAREA_MAXIMUM_HEIGHT}px`;\n\n  /**\n   * A boolean representing whether the input should focus on page load.\n   * If multiple elements with `autofocus` are present, it is not guaranteed which one\n   * will ultimately receive the focus. It is advised that only one at most is present.\n   */\n  @Prop() readonly autofocus: boolean = false;\n\n  /**\n   * Allows a browser to display an appropriate virtual keyboard.\n   * [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).\n   */\n  @Prop() readonly inputmode: string;\n\n  /**\n   * Fired whenever the value of the textarea changes.\n   */\n  @Event() marketTextareaValueChange: EventEmitter<{ value: string; originalEvent: KeyboardEvent }>;\n\n  @State() ariaAttributes: AriaAttributes;\n\n  mutationObserver: MutationObserver;\n\n  sharedProps: {};\n\n  @Listen('marketDialogLoaded', { target: 'window' })\n  handleMarketDialogLoaded() {\n    if (this.autofocus) {\n      this.setFocus();\n    }\n  }\n\n  /**\n   * Allows passing an alternative light DOM textarea.\n   * Sets the this.slottedTextarea value to undefined if there is no slotted element.\n   */\n  @Method()\n  registerSlottedTextarea(slottedTextarea?: HTMLTextAreaElement) {\n    this.slottedTextarea =\n      slottedTextarea ||\n      // textarea slotted into market-textarea\n      this.el.querySelector('textarea[slot=textarea]') ||\n      // textarea slotted into a higher-level component that uses market-textarea\n      (this.el.getRootNode() as ShadowRoot).host?.querySelector('textarea[slot=textarea]');\n    if (this.slottedTextarea) {\n      this.slottedTextarea.addEventListener('input', (e) => this.textareaValueDidChange(e));\n      this.slottedTextarea.addEventListener('focus', () => this.setFocus());\n      this.slottedTextarea.addEventListener('blur', () => (this.focused = false));\n    }\n\n    return Promise.resolve();\n  }\n\n  syncSharedPropsToSlottedTextarea(prevSharedProps) {\n    // sync component props to slotted input, if one exists\n    if (this.slottedTextarea) {\n      const modifiedPropKeys = [...new Set([...Object.keys(prevSharedProps), ...Object.keys(this.sharedProps)])];\n      modifiedPropKeys.forEach((key) => {\n        if (!(key in this.sharedProps)) {\n          // remove properties that have been unset\n          this.slottedTextarea.removeAttribute(key);\n        } else {\n          // boolean attributes can be set using empty strings\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute#javascript\n          const attributeValue = this.sharedProps[key] !== true ? this.sharedProps[key] : '';\n          this.slottedTextarea.setAttribute(key, attributeValue);\n        }\n      });\n    }\n  }\n\n  updateSharedPropsAndSyncSlottedTextarea() {\n    const prevSharedProps = { ...this.sharedProps };\n\n    // used by the default shadow DOM native input and to copy component properties to slotted inputs\n    // conditionally adding key/value pairs based on whether we want to set them on the <input>\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#individual_attributes\n    this.sharedProps = {\n      ...(this.name && { name: this.name }),\n      ...(this.placeholder && { placeholder: this.placeholder }),\n      ...(this.maxlength !== undefined && Number.parseInt(this.maxlength, 10) >= 0 && { maxlength: this.maxlength }),\n      ...(this.value !== undefined && { value: this.value }),\n      ...(this.readonly && { readonly: this.readonly }),\n      ...(this.disabled && { disabled: this.disabled }),\n      ...(this.autofocus && { autofocus: this.autofocus }),\n      ...(this.inputmode && { inputmode: this.inputmode }),\n      ...this.ariaAttributes,\n      'aria-label': getTextInputAriaLabel(this.el),\n    };\n\n    this.syncSharedPropsToSlottedTextarea(prevSharedProps);\n  }\n\n  onMutationObserved = (ariaAttributes: AriaAttributes) => {\n    this.ariaAttributes = ariaAttributes;\n  };\n\n  componentWillLoad() {\n    this.mutationObserver = observeAriaAttributes(this.el, this.onMutationObserved);\n    this.registerSlottedTextarea();\n    this.updateSharedPropsAndSyncSlottedTextarea();\n  }\n\n  componentDidLoad() {\n    if (this.maxHeight) {\n      // Set the passed max height on the input container, since that's where\n      // the drag handle will actually be visible.\n      // This will be removed until `maxHeight` prop is fully deprecated.\n      this.el.style.maxHeight = this.maxHeight;\n    }\n  }\n\n  componentWillUpdate() {\n    this.updateSharedPropsAndSyncSlottedTextarea();\n  }\n\n  textareaValueDidChange(e) {\n    // Need to update value for the label, which floats if this value exists.\n    this.value = e.target.value;\n\n    this.marketTextareaValueChange.emit({\n      value: e.target.value,\n      originalEvent: e,\n    });\n  }\n\n  setFocus(value: boolean = true) {\n    if (this.readonly || this.disabled) {\n      return;\n    }\n\n    const shouldSetElementFocus = value && !this.focused;\n\n    this.focused = value;\n\n    // Set focus on element if not already focused\n    if (shouldSetElementFocus) {\n      this.slottedTextarea ? this.slottedTextarea.focus() : this.el?.shadowRoot?.querySelector?.('textarea')?.focus?.();\n    }\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-textarea\"\n        onBlur={() => {\n          this.focused = false;\n        }}\n        onClick={() => {\n          this.setFocus();\n        }}\n        onFocus={() => {\n          this.setFocus();\n        }}\n      >\n        <div class=\"label-input-container\" part=\"container\">\n          <slot></slot>\n          <slot name=\"textarea\" onSlotchange={() => this.registerSlottedTextarea()}>\n            {!this.slottedTextarea && (\n              <textarea\n                {...this.ariaAttributes}\n                id={this.name}\n                onInput={(e) => this.textareaValueDidChange(e)}\n                {...this.sharedProps}\n              ></textarea>\n            )}\n          </slot>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.mutationObserver?.disconnect();\n  }\n}\n"],"version":3}