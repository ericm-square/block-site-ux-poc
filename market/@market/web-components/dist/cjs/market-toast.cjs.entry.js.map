{"file":"market-toast.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,cAAc,GAAG,g2MAAg2M,CAAC;AACx3M,0BAAe,cAAc;;MCWhB,WAAW;;;;;uBAM+E,MAAM;0BAKpE,KAAK;sCAMuB,SAAS;wBAKvB,CAAC,CAAC;sCAMb,IAAI;8BAEX,KAAK;;;;;IAgBxC,qBAAqB;QACnB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,UAAU,CAAC;gBACT,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;aACtC,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;SACjC;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IAED,mBAAmB;QACjB,IAAI,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC;KAC1C;IAED,iBAAiB;QACf,IAAI,CAAC,wBAAwB,EAAE,CAAC;KACjC;IAED,wBAAwB;QACtB,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;QACzD,IAAI,CAAC,cAAc,GAAG,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC;KAC9C;;IAGD,cAAc;QACZ,QAAQ,IAAI,CAAC,OAAO;YAClB,KAAK,SAAS;gBACZ,OAAO,SAAS,CAAC;YACnB,KAAK,MAAM;gBACT,OAAO,MAAM,CAAC;YAChB,KAAK,SAAS;gBACZ,OAAO,WAAW,CAAC;YACrB,KAAK,SAAS;gBACZ,OAAO,gBAAgB,CAAC;YAC1B;gBACE,OAAO,SAAS,CAAC;SACpB;KACF;IAED,MAAM;QACJ,MAAM,iBAAiB,GAAGA,2BAAmB,CAAC,aAAa,CAAC,CAAC;QAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC9C,MAAM,aAAa,GAAG;YACpB,KAAK,EAAE,GAAG,QAAQ,GAAG;SACtB,CAAC;QAEF,QACEC,QAACC,UAAI,qDAAC,KAAK,EAAC,cAAc,EAAC,IAAI,EAAC,OAAO,IACrCD,kEAAK,KAAK,EAAC,SAAS,IAClBA,mEAAM,KAAK,EAAC,gBAAgB,IAE1BA,QAAC,iBAAiB,qDAAC,IAAI,EAAE,IAAI,CAAC,cAAc,EAAE,GAAsB,CAC/D,EACPA,kEAAK,KAAK,EAAC,MAAM,IACfA,wEACEA,oEAAa,CACL,EACVA,gFAAgB,eAAe,EAAC,KAAK,EAAE,IAAI,CAAC,cAAc,GAAG,EAAE,GAAG,QAAQ,IACxEA,mEAAM,IAAI,EAAC,QAAQ,EAAC,YAAY,EAAE,MAAM,IAAI,CAAC,wBAAwB,EAAE,GAAS,CAC5E,CACF,EACNA,gFAAgB,mBAAmB,EAAC,KAAK,EAAC,mBAAmB,IAC3DA,qEAAQ,IAAI,EAAC,QAAQ,gBAAa,IAAI,CAAC,sBAAsB,EAAE,OAAO,EAAE,MAAM,IAAI,CAAC,mBAAmB,EAAE,IACtGA,QAAC,iBAAiB,qDAAC,IAAI,EAAC,OAAO,GAAqB,CAC7C,CACL,CACF,EACL,IAAI,CAAC,QAAQ,IAAI,CAAC,KACjBA,2EACE,IAAI,EAAC,aAAa,mBACH,QAAQ,mBACT,GAAG,mBACH,KAAK,EACnB,KAAK,EAAE,aAAa,GACN,CACjB,CACI,EACP;KACH;;;;;;;","names":["getNamespacedTagFor","h","Host"],"sources":["src/components/market-toast/market-toast.css?tag=market-toast&encapsulation=shadow","src/components/market-toast/market-toast.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/typography.css\";\n\n:host {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  overflow: hidden;\n  width: 100%;\n  max-width: var(--toast-maximum-width);\n  border-radius: var(--toast-radius);\n  box-shadow: var(--elevation-30-shadow);\n  font-weight: var(--toast-text-weight);\n  font-size: var(--toast-text-size);\n  line-height: var(--toast-text-leading);\n  letter-spacing: var(--toast-text-tracking);\n  text-transform: var(--toast-text-case);\n}\n\n.icon-container,\n.dismiss-container {\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n}\n\n.dismiss-container {\n  button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 0;\n    padding: 0;\n    border: none;\n    background-color: transparent;\n    color: inherit;\n    cursor: pointer;\n    transition: opacity 0.2s;\n    appearance: none;\n  }\n}\n\n.content {\n  display: flex;\n  align-items: flex-start;\n  width: 100%;\n  padding: var(--toast-vertical-padding-size) var(--toast-horizontal-padding-size);\n  column-gap: var(--toast-icon-spacing);\n}\n\n.main {\n  display: flex;\n  flex-grow: 1;\n  flex-wrap: wrap;\n  row-gap: var(--toast-text-multiline-spacing);\n  column-gap: var(--toast-content-spacing);\n}\n\nsection {\n  flex-grow: 1;\n}\n\nnav {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-end;\n\n  &.hidden {\n    display: none;\n  }\n}\n\n/* style slotted buttons and links the same */\n::slotted(button),\n::slotted(a) {\n  margin: 0;\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  color: inherit;\n  font-weight: var(--toast-button-text-weight);\n  font-size: var(--toast-button-text-size);\n  font-family: inherit;\n  line-height: var(--toast-button-text-leading);\n  letter-spacing: var(--toast-button-text-tracking);\n  text-decoration: none;\n  text-transform: var(--toast-button-text-case);\n  cursor: pointer;\n  transition: opacity 0.2s;\n}\n\n::slotted(button:hover),\n::slotted(a:hover) {\n  opacity: var(--text-link-hover-state-opacity);\n}\n\n::slotted(button:active),\n::slotted(a:active) {\n  opacity: var(--text-link-pressed-state-opacity);\n}\n\n::slotted([slot=\"action\"]) {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* implement nav separator line */\n::slotted([slot=\"action\"]:not(:last-child)) {\n  /* add extra right margin to place separator */\n  margin-right: calc(var(--toast-button-spacing) * 2 + var(--toast-separator-width));\n\n  &::after {\n    /* left and right margins will position separator between\n      this and the next action, and outside of clickable hit area */\n    content: \"\";\n    display: inline-block;\n    width: var(--toast-separator-width);\n    height: var(--toast-separator-height);\n    margin-right: calc(-1 * var(--toast-button-spacing) - var(--toast-separator-width));\n    margin-left: var(--toast-button-spacing);\n    opacity: var(--toast-separator-opacity);\n    pointer-events: none;\n  }\n}\n\nprogress-bar {\n  height: var(--toast-progress-bar-height);\n}\n\n:host([variant=\"info\"]) {\n  background-color: var(--toast-info-variant-background-color);\n  color: var(--toast-info-variant-text-color);\n\n  .icon-container {\n    color: var(--toast-info-variant-icon-color);\n  }\n\n  .dismiss-container {\n    color: var(--toast-info-variant-dismiss-button-color);\n  }\n\n  progress-bar {\n    background-color: var(--toast-info-variant-progress-bar-color);\n  }\n\n  ::slotted(a) {\n    color: var(--toast-info-variant-text-link-text-color);\n  }\n\n  ::slotted(button) {\n    color: var(--toast-info-variant-button-text-color);\n  }\n\n  ::slotted([slot=\"action\"]:not(:last-child))::after {\n    background-color: var(--toast-info-variant-separator-color);\n  }\n}\n\n:host([variant=\"success\"]) {\n  background-color: var(--toast-success-variant-background-color);\n  color: var(--toast-success-variant-text-color);\n\n  .icon-container {\n    color: var(--toast-success-variant-icon-color);\n  }\n\n  .dismiss-container {\n    color: var(--toast-success-variant-dismiss-button-color);\n  }\n\n  progress-bar {\n    background-color: var(--toast-success-variant-progress-bar-color);\n  }\n\n  ::slotted(a) {\n    color: var(--toast-success-variant-text-link-text-color);\n  }\n\n  ::slotted(button) {\n    color: var(--toast-success-variant-button-text-color);\n  }\n\n  ::slotted([slot=\"action\"]:not(:last-child))::after {\n    background-color: var(--toast-success-variant-separator-color);\n  }\n}\n\n:host([variant=\"warning\"]) {\n  background-color: var(--toast-warning-variant-background-color);\n  color: var(--toast-warning-variant-text-color);\n\n  .icon-container {\n    color: var(--toast-warning-variant-icon-color);\n  }\n\n  .dismiss-container {\n    color: var(--toast-warning-variant-dismiss-button-color);\n  }\n\n  progress-bar {\n    background-color: var(--toast-warning-variant-progress-bar-color);\n  }\n\n  ::slotted(a) {\n    color: var(--toast-warning-variant-text-link-text-color);\n  }\n\n  ::slotted(button) {\n    color: var(--toast-warning-variant-button-text-color);\n  }\n\n  ::slotted([slot=\"action\"]:not(:last-child))::after {\n    background-color: var(--toast-warning-variant-separator-color);\n  }\n}\n\n:host([variant=\"critical\"]) {\n  background-color: var(--toast-critical-variant-background-color);\n  color: var(--toast-critical-variant-text-color);\n\n  .icon-container {\n    color: var(--toast-critical-variant-icon-color);\n  }\n\n  .dismiss-container {\n    color: var(--toast-critical-variant-dismiss-button-color);\n  }\n\n  progress-bar {\n    background-color: var(--toast-critical-variant-progress-bar-color);\n  }\n\n  ::slotted(a) {\n    color: var(--toast-critical-variant-text-link-text-color);\n  }\n\n  ::slotted(button) {\n    color: var(--toast-critical-variant-button-text-color);\n  }\n\n  ::slotted([slot=\"action\"]:not(:last-child))::after {\n    background-color: var(--toast-critical-variant-separator-color);\n  }\n}\n\n:host([variant=\"insight\"]) {\n  background-color: var(--toast-insight-variant-background-color);\n  color: var(--toast-insight-variant-text-color);\n\n  .icon-container {\n    color: var(--toast-insight-variant-icon-color);\n  }\n\n  .dismiss-container {\n    color: var(--toast-insight-variant-dismiss-button-color);\n  }\n\n  progress-bar {\n    background-color: var(--toast-insight-variant-progress-bar-color);\n  }\n\n  ::slotted(a) {\n    color: var(--toast-insight-variant-text-link-text-color);\n  }\n\n  ::slotted(button) {\n    color: var(--toast-insight-variant-button-text-color);\n  }\n\n  ::slotted([slot=\"action\"]:not(:last-child))::after {\n    background-color: var(--toast-insight-variant-separator-color);\n  }\n}\n","import { Component, Host, h, Prop, Event, EventEmitter, Element, State, Method } from '@stencil/core';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n/**\n * @slot - The text for the toast\n * @slot action - for `<a href>` or `<button>` (not a `<market-button>`)\n */\n@Component({\n  tag: 'market-toast',\n  styleUrl: 'market-toast.css',\n  shadow: true,\n})\nexport class MarketToast {\n  @Element() el: HTMLMarketToastElement;\n\n  /**\n   * toast variant that corresponds to the type of info it is conveying\n   */\n  @Prop({ reflect: true }) readonly variant: 'info' | 'success' | 'warning' | 'critical' | 'insight' = 'info';\n\n  /**\n   * Whether or not the toast persists, ie does not autodismiss after 5s\n   */\n  @Prop() readonly persistent: boolean = false;\n\n  /**\n   * Optional property to pass a string to the dismiss \"x\"\n   * that will function as its aria-label. Defaults to \"Dismiss\".\n   */\n  @Prop({ reflect: true }) readonly dismissButtonAriaLabel: string = 'Dismiss';\n\n  /**\n   * The progress of the action, progress bar will be rendered for values between 0-100 inclusive\n   */\n  @Prop({ reflect: true }) readonly progress: number = -1;\n\n  /**\n   * The amount of time (ms) until the toast autodismisses\n   * TODO(UI-1153): should be a design token\n   */\n  @State() durationTilAutoDismiss: number = 5000;\n\n  @State() showActionsNav: boolean = false;\n\n  /**\n   * Emitted when the toast automatically dismisses.\n   */\n  @Event() marketToastAutoDismissed: EventEmitter;\n\n  /**\n   * Emitted when the toast's dismissed button is clicked.\n   */\n  @Event() marketToastManuallyDismissed: EventEmitter;\n\n  /**\n   * Set toast to disappear after the autodismiss timeout has passed\n   */\n  @Method()\n  startAutoDismissTimer() {\n    if (!this.persistent) {\n      setTimeout(() => {\n        this.marketToastAutoDismissed.emit();\n      }, this.durationTilAutoDismiss);\n    }\n    return Promise.resolve();\n  }\n\n  handleManualDismiss() {\n    this.marketToastManuallyDismissed.emit();\n  }\n\n  componentWillLoad() {\n    this.checkIfActionsArePresent();\n  }\n\n  checkIfActionsArePresent() {\n    const actions = this.el.querySelector('[slot=\"action\"]');\n    this.showActionsNav = actions ? true : false;\n  }\n\n  // TODO: replace with design token references after they are added (UI-6241)\n  getVariantIcon() {\n    switch (this.variant) {\n      case 'success':\n        return 'success';\n      case 'info':\n        return 'info';\n      case 'warning':\n        return 'attention';\n      case 'insight':\n        return 'recommendation';\n      default:\n        return 'warning';\n    }\n  }\n\n  render() {\n    const MarketIconTagName = getNamespacedTagFor('market-icon');\n    const progress = Math.min(this.progress, 100);\n    const progressStyle = {\n      width: `${progress}%`,\n    };\n\n    return (\n      <Host class=\"market-toast\" role=\"alert\">\n        <div class=\"content\">\n          <span class=\"icon-container\">\n            {/* this span is the flexbox container to vertically align the icon */}\n            <MarketIconTagName name={this.getVariantIcon()}></MarketIconTagName>\n          </span>\n          <div class=\"main\">\n            <section>\n              <slot></slot>\n            </section>\n            <nav aria-label=\"toast-actions\" class={this.showActionsNav ? '' : 'hidden'}>\n              <slot name=\"action\" onSlotchange={() => this.checkIfActionsArePresent()}></slot>\n            </nav>\n          </div>\n          <nav aria-label=\"dismiss-container\" class=\"dismiss-container\">\n            <button type=\"button\" aria-label={this.dismissButtonAriaLabel} onClick={() => this.handleManualDismiss()}>\n              <MarketIconTagName name=\"close\"></MarketIconTagName>\n            </button>\n          </nav>\n        </div>\n        {this.progress >= 0 && (\n          <progress-bar\n            role=\"progressbar\"\n            aria-valuenow={progress}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            style={progressStyle}\n          ></progress-bar>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}