{"file":"market-color-picker.entry.cjs.js","mappings":"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","names":["parseToHSVA","hsvToHex","getNamespacedTagFor","h","Host"],"sources":["src/components/market-color-picker/market-color-picker.css?tag=market-color-picker&encapsulation=shadow","src/components/market-color-picker/market-color-picker.tsx"],"sourcesContent":[":host {\n  display: flex;\n  flex-direction: column;\n  gap: var(--color-picker-vertical-spacing);\n}\n","import { Component, Element, Host, h, Prop, Listen, State, Event, EventEmitter } from '@stencil/core';\n\nimport { hsvToHex, parseToHSVA } from '../../utils/color';\nimport { getNamespacedTagFor } from '../../utils/namespace';\n\n@Component({\n  tag: 'market-color-picker',\n  styleUrl: 'market-color-picker.css',\n  shadow: true,\n})\nexport class MarketColorPicker {\n  @Element() el: HTMLMarketColorPickerElement;\n\n  /**\n   * Value representing the color shown on the color picker.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string;\n\n  /**\n   * State holding the value to pass into the input. This allows us to handle converting the input value into hexadecimal.\n   */\n  @State() inputValue: string;\n\n  /**\n   * Fired whenever the color picker selection state changes.\n   */\n  @Event({ cancelable: true }) marketColorPickerValueChange: EventEmitter<{ value: string; prevValue: string }>;\n\n  gradientPicker: HTMLMarketColorPickerGradientElement;\n  swatchList: HTMLMarketColorSwatchListElement;\n  colorInput: HTMLMarketColorPickerInputElement;\n\n  /**\n   * Listener for gradient value change. This only fires when the gradient is dragged manually, which currently will only pass a hex value.\n   * Since it's a hex value, we know the value will be formatted for inputs.\n   * @param event\n   */\n  @Listen('marketColorPickerGradientValueChange')\n  gradientValueChange(event: CustomEvent) {\n    const { detail } = event;\n    const { defaultPrevented } = this.marketColorPickerValueChange.emit({\n      value: detail.value,\n      prevValue: this.value,\n    });\n\n    if (!defaultPrevented) {\n      this.value = detail.value;\n      this.inputValue = detail.value;\n\n      if (this.swatchList) {\n        this.swatchList.value = this.value;\n      }\n\n      if (this.colorInput) {\n        this.colorInput.value = this.inputValue;\n      }\n    }\n  }\n\n  @Listen('marketColorSwatchListValueChange')\n  swatchValueChange(event: CustomEvent) {\n    const { detail } = event;\n    const { defaultPrevented } = this.marketColorPickerValueChange.emit({\n      value: detail.value,\n      prevValue: this.value,\n    });\n    if (!defaultPrevented) {\n      this.inputValue = this.formatInputValue(detail.value);\n      this.value = detail.value;\n\n      if (this.gradientPicker) {\n        this.gradientPicker.value = this.value;\n      }\n\n      if (this.colorInput) {\n        this.colorInput.value = this.inputValue;\n      }\n    }\n  }\n\n  @Listen('marketColorPickerInputValueChange')\n  inputValueChange(event: CustomEvent) {\n    const { detail } = event;\n    const { defaultPrevented } = this.marketColorPickerValueChange.emit({\n      value: detail.value,\n      prevValue: this.value,\n    });\n    if (!defaultPrevented) {\n      this.value = detail.value;\n\n      if (this.gradientPicker) {\n        this.gradientPicker.value = this.value;\n      }\n\n      if (this.swatchList) {\n        this.swatchList.value = this.value;\n      }\n    }\n  }\n\n  /**\n   * Helper function taking a color string and converting it to Hex if it's in rgba format.\n   * @param colorString\n   * @returns { string } Hex color string\n   */\n  formatInputValue(colorString: string) {\n    const parsedValue = parseToHSVA(colorString);\n\n    // If it is a valid color format, convert to hex\n    if (parsedValue.colorType && parsedValue.colorType !== 'hexa') {\n      return `#${hsvToHex(parsedValue.values[0], parsedValue.values[1], parsedValue.values[2]).join('')}`;\n    }\n\n    return colorString;\n  }\n\n  setSubcomponentValues() {\n    this.gradientPicker = this.el.querySelector(getNamespacedTagFor('market-color-picker-gradient'));\n    this.swatchList = this.el.querySelector(getNamespacedTagFor('market-color-swatch-list'));\n    this.colorInput = this.el.querySelector(getNamespacedTagFor('market-color-picker-input'));\n\n    if (this.gradientPicker) {\n      this.gradientPicker.value = this.value;\n    }\n\n    if (this.swatchList) {\n      this.swatchList.value = this.value;\n    }\n\n    if (this.colorInput) {\n      this.colorInput.value = this.inputValue;\n    }\n  }\n\n  handleSlotChange() {\n    this.setSubcomponentValues();\n  }\n\n  componentWillLoad() {\n    this.inputValue = this.formatInputValue(this.value);\n  }\n\n  componentDidLoad() {\n    this.setSubcomponentValues();\n  }\n\n  render() {\n    return (\n      <Host class=\"market-color-picker\">\n        <slot onSlotchange={() => this.handleSlotChange()}></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}