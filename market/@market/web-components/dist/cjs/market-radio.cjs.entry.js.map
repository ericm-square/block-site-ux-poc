{"file":"market-radio.entry.cjs.js","mappings":"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","names":["h","Host","getControlInputAriaLabel"],"sources":["src/components/market-radio/market-radio.css?tag=market-radio&encapsulation=shadow","src/components/market-radio/market-radio.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n\n:host {\n  --transition-duration: 0.2s;\n  --radio-offset: calc(-1 * var(--radio-border-size));\n  --focus-ring-color: color-mix(in srgb, var(--radio-focus-ring-color) 100%, transparent);\n\n  position: relative;\n  display: inline-block;\n  width: var(--radio-width);\n  height: var(--radio-height);\n  border: var(--radio-border-size) solid var(--radio-normal-state-normal-validity-unselected-value-border-color);\n  border-radius: var(--radio-border-radius);\n  background-color: var(--radio-normal-state-normal-validity-unselected-value-background-color);\n}\n\ninput {\n  position: absolute;\n\n  /* The top and left offset are to account for the border size */\n  top: var(--radio-offset);\n  left: var(--radio-offset);\n  width: var(--radio-width);\n  height: var(--radio-height);\n  margin: 0;\n  border-radius: var(--radio-border-radius);\n  background: transparent;\n  outline: none;\n  appearance: none;\n}\n\ninput:focus-visible {\n  outline: var(--radio-focus-ring-border-size, var(--core-focus-ring-border-size)) solid var(--focus-ring-color);\n  outline-offset: var(--radio-focus-ring-buffer-size);\n}\n\nsvg {\n  position: absolute;\n  top: calc(50% - var(--radio-svg-radius));\n  left: calc(50% - var(--radio-svg-radius));\n  align-items: center;\n  pointer-events: none;\n}\n\n/* UNSELECTED - default state */\n\n@media (hover: hover) {\n  /* state:hover.validity:normal.value:unselected */\n  :host(:hover),\n  :host([hovered]) {\n    border-color: var(--radio-hover-state-normal-validity-unselected-value-border-color);\n    background-color: var(--radio-hover-state-normal-validity-unselected-value-background-color);\n  }\n}\n\n/* state:focus.validity:normal.value:unselected */\n:host(:focus),\n:host([focused]) {\n  border-color: var(--radio-focus-state-normal-validity-unselected-value-border-color);\n  background-color: var(--radio-focus-state-normal-validity-unselected-value-background-color);\n}\n\n/* state:active.validity:normal.value:unselected */\n:host(:active),\n:host([active]) {\n  border-color: var(--radio-pressed-state-normal-validity-unselected-value-border-color);\n  background-color: var(--radio-pressed-state-normal-validity-unselected-value-background-color);\n}\n\n/* UNSELECTED + INVALID */\n\n/* state:normal.validity:invalid.value:unselected */\n:host([invalid]) {\n  border-color: var(--radio-normal-state-invalid-validity-unselected-value-border-color);\n  background-color: var(--radio-normal-state-invalid-validity-unselected-value-background-color);\n}\n\n@media (hover: hover) {\n  /* state:hover.validity:invalid.value:unselected */\n  :host([invalid]:hover),\n  :host([invalid][hovered]) {\n    border-color: var(--radio-hover-state-invalid-validity-unselected-value-border-color);\n    background-color: var(--radio-hover-state-invalid-validity-unselected-value-background-color);\n  }\n}\n\n/* state:focus.validity:invalid.value:unselected */\n:host([invalid]:focus),\n:host([invalid][focused]) {\n  border-color: var(--radio-focus-state-invalid-validity-unselected-value-border-color);\n  background-color: var(--radio-focus-state-invalid-validity-unselected-value-background-color);\n}\n\n/* state:active.validity:invalid.value:unselected */\n:host([invalid]:active),\n:host([invalid][active]) {\n  border-color: var(--radio-pressed-state-invalid-validity-unselected-value-border-color);\n  background-color: var(--radio-pressed-state-invalid-validity-unselected-value-background-color);\n}\n\n/* state:disabled.validity:normal.value:unselected */\n:host([disabled]),\n:host([invalid][disabled]) {\n  border-color: var(--radio-disabled-state-normal-validity-unselected-value-border-color);\n  background-color: var(--radio-disabled-state-normal-validity-unselected-value-background-color);\n}\n\n/* SELECTED */\n\n/* state:normal.validity:normal.value:selected */\n:host([selected]) {\n  border-color: var(--radio-normal-state-normal-validity-selected-value-border-color);\n  background-color: var(--radio-normal-state-normal-validity-selected-value-background-color);\n\n  svg {\n    fill: var(--radio-normal-state-normal-validity-selected-value-icon-color);\n  }\n}\n\n@media (hover: hover) {\n  /* state:hover.validity:normal.value:selected */\n  :host([selected]:hover),\n  :host([selected][hovered]) {\n    border-color: var(--radio-hover-state-normal-validity-selected-value-border-color);\n    background-color: var(--radio-hover-state-normal-validity-selected-value-background-color);\n\n    svg {\n      fill: var(--radio-normal-state-normal-validity-selected-value-icon-color);\n    }\n  }\n}\n\n/* state:focus.validity:normal.value:selected */\n:host([selected]:focus),\n:host([selected][focused]) {\n  border-color: var(--radio-focus-state-normal-validity-selected-value-border-color);\n  background-color: var(--radio-focus-state-normal-validity-selected-value-background-color);\n\n  svg {\n    fill: var(--radio-focus-state-normal-validity-selected-value-icon-color);\n  }\n}\n\n/* state:active.validity:normal.value:selected */\n:host([selected]:active),\n:host([selected][active]) {\n  border-color: var(--radio-pressed-state-normal-validity-selected-value-border-color);\n  background-color: var(--radio-pressed-state-normal-validity-selected-value-background-color);\n\n  svg {\n    fill: var(--radio-pressed-state-normal-validity-selected-value-icon-color);\n  }\n}\n\n/* SELECTED + INVALID */\n\n/* state:normal.validity:invalid.value:selected */\n:host([invalid][selected]) {\n  border-color: var(--radio-normal-state-invalid-validity-selected-value-border-color);\n  background-color: var(--radio-normal-state-invalid-validity-selected-value-background-color);\n\n  svg {\n    fill: var(--radio-normal-state-invalid-validity-selected-value-icon-color);\n  }\n}\n\n@media (hover: hover) {\n  /* state:hover.validity:invalid.value:selected */\n  :host([invalid][selected]:hover),\n  :host([invalid][selected][hovered]) {\n    border-color: var(--radio-hover-state-invalid-validity-selected-value-border-color);\n    background-color: var(--radio-hover-state-invalid-validity-selected-value-background-color);\n\n    svg {\n      fill: var(--radio-hover-state-invalid-validity-selected-value-icon-color);\n    }\n  }\n}\n\n/* state:focus.validity:invalid.value:selected */\n:host([invalid][selected]:focus),\n:host([invalid][selected][focused]) {\n  border-color: var(--radio-focus-state-invalid-validity-selected-value-border-color);\n  background-color: var(--radio-focus-state-invalid-validity-selected-value-background-color);\n\n  svg {\n    fill: var(--radio-focus-state-invalid-validity-selected-value-icon-color);\n  }\n}\n\n/* state:active.validity:invalid.value:selected */\n:host([invalid][selected]:active),\n:host([invalid][selected][active]) {\n  border-color: var(--radio-pressed-state-invalid-validity-selected-value-border-color);\n  background-color: var(--radio-pressed-state-invalid-validity-selected-value-background-color);\n\n  svg {\n    fill: var(--radio-pressed-state-invalid-validity-selected-value-icon-color);\n  }\n}\n\n/* state:disabled.validity:normal.value:unchecked */\n:host([selected][disabled]),\n:host([selected][disabled][invalid]) {\n  border-color: var(--radio-disabled-state-normal-validity-selected-value-border-color);\n  background-color: var(--radio-disabled-state-normal-validity-selected-value-background-color);\n\n  svg {\n    fill: var(--radio-disabled-state-normal-validity-selected-value-icon-color);\n  }\n}\n","import { Component, Event, EventEmitter, Host, h, Method, Prop, Element } from '@stencil/core';\nimport { getControlInputAriaLabel } from '../../utils/aria';\n\n@Component({\n  tag: 'market-radio',\n  styleUrl: 'market-radio.css',\n  shadow: true,\n})\nexport class MarketRadio {\n  @Element() el: HTMLMarketRadioElement;\n\n  /**\n   * Whether the radio button is selected (analogous to the HTML input attribute `checked`).\n   * If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n  /**\n   * Whether the radio button is disabled.\n   */\n  @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n  /**\n   * Whether the radio button is invalid.\n   */\n  @Prop({ reflect: true }) readonly invalid: boolean = false;\n\n  /**\n   * Whether the radio is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * Whether the radio is hovered or not.\n   */\n  @Prop({ mutable: true, reflect: true }) hovered: boolean = false;\n\n  /**\n   * Whether the radio is active or not.\n   */\n  @Prop({ mutable: true, reflect: true }) active: boolean = false;\n\n  /**\n   * Fired whenever \"selected\" prop value changes.\n   */\n  @Event() marketRadioValueChange: EventEmitter<{ current: boolean; previous: boolean }>;\n\n  innerInput: HTMLInputElement;\n\n  /**\n   * Toggles `selected` prop, and emits a change event accordingly.\n   * Used by `market-row` to sync its selected state w/ slotted radio buttons.\n   */\n  @Method()\n  setSelection(newValue: boolean, { silent = false } = {}) {\n    const { marketRadioValueChange, selected: prevValue, innerInput } = this;\n\n    if (typeof newValue !== 'boolean') return Promise.resolve();\n    if (prevValue === newValue) return Promise.resolve();\n\n    if (!silent) {\n      const { defaultPrevented } = marketRadioValueChange.emit({\n        current: newValue,\n        previous: prevValue,\n      });\n      if (defaultPrevented) {\n        return Promise.resolve();\n      }\n    }\n\n    this.selected = newValue;\n    // When using the non-lazy output target, this method sometimes gets called from\n    // market-row's watcher before/after innerInput is removed, hence this check.\n    if (innerInput) {\n      innerInput.checked = newValue;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).\n   */\n  @Method()\n  setValue(newValue: boolean) {\n    /* eslint-disable-next-line no-console */\n    console.warn(\"market-radio's setValue() method has been deprecated. Use setSelection() instead.\", this.el);\n    this.setSelection(newValue);\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `active` state. Allows external elements to programmatically\n   * trigger active styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setActive(value: boolean) {\n    this.active = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `hovered` state. Allows external elements to programmatically\n   * trigger hover styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setHover(value: boolean) {\n    this.hovered = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `disabled` state. Allows external elements to programmatically\n   * trigger disabled styling, ex. when slotted as a control into `market-row`.\n   */\n  @Method()\n  setDisabled(value: boolean) {\n    this.disabled = value;\n    return Promise.resolve();\n  }\n\n  /**\n   * Sets `focused` state, except when disabled.\n   * Allows external consumers to programmatically\n   * trigger focused styling.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    if (this.disabled) {\n      return Promise.resolve();\n    }\n    this.focused = value;\n    return Promise.resolve();\n  }\n\n  onFocus() {\n    if (this.disabled) {\n      return;\n    }\n\n    this.focused = true;\n    this.el.shadowRoot.querySelector('input').focus();\n  }\n\n  handleClick(event: MouseEvent) {\n    // Always prevent default so we can manually control the selection\n    event.preventDefault();\n\n    if (this.disabled) {\n      return;\n    }\n\n    // once a radio is selected, it shouldn't be togglable/deselectable on click\n    if (!this.selected) {\n      this.setFocus();\n      this.setSelection(true);\n    }\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-radio\"\n        onBlur={() => {\n          this.setFocus(false);\n        }}\n        onClick={this.handleClick}\n        onFocus={() => {\n          this.setFocus();\n        }}\n      >\n        <input\n          ref={(el) => (this.innerInput = el)}\n          type=\"radio\"\n          aria-label={getControlInputAriaLabel(this.el)}\n          checked={this.selected}\n          disabled={this.disabled}\n        />\n        {this.selected && (\n          <svg width=\"6\" height=\"6\" viewBox=\"0 0 6 6\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" />\n          </svg>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}