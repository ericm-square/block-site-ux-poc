{"file":"market-input-text.entry.cjs.js","mappings":";;;;;;;;;;AAAA,MAAM,kBAAkB,GAAG,o9WAAo9W,CAAC;AACh/W,8BAAe,kBAAkB;;MCkCpB,SAAS;;;;;;;;;;;;QA+LpB,wBAAmB,GAAY,KAAK,CAAC;QAErC,yBAAoB,GAAY,KAAK,CAAC;oBAlLW,MAAM;;;qBAcC,EAAE;;;;oBAyBa,OAAO;;;;;;wBAoCxB,KAAK;wBAML,KAAK;uBAKA,KAAK;uBAML,KAAK;;yBAa1B,KAAK;4BAOO,IAAI;4BAQb,KAAK;0BAMgB,KAAK;;;IAkBnE,oBAAoB,CAAC,QAAiB;QACpC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACR;QAED,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC1B;KACF;IAGD,mBAAmB,CAAC,QAA0B;QAC5C,IAAI,CAAC,aAAa,GAAGA,gCAAmB,CAAC,QAAQ,CAAC,CAAC;KACpD;IAGD,wBAAwB;QACtB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;KACF;IAgBD,cAAc,CAAC,CAAC;QACd,MAAM,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC;YAC9C,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK;YACrB,aAAa,EAAE,CAAC;SACjB,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,gBAAgB,EAAE;YAC3B,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAC5B,CAAC,CAAC,cAAc,EAAE,CAAC;SACpB;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;YAC5B,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAE9B,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,2BAA2B,EAAE;gBACzD,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;aAClD;SACF;;;QAID,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;IAED,cAAc,CAAC,CAAC;;;QAGd,IAAI,CAAC,CAAC,aAAa,KAAK,6BAA6B,EAAE;YACrD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACxB;aAAM,IAAI,CAAC,CAAC,aAAa,KAAK,8BAA8B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YAC5E,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SACzB;KACF;IAED,aAAa,CAAC,CAAgB;QAC5B,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE;;;;YAIrB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC9B,CAAC,CAAC,cAAc,EAAE,CAAC;aACpB;iBAAM;gBACLC,0BAAoB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAC/B;SACF;KACF;;;;;;IAOD,uBAAuB,CAAC,KAAY;QAClC,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QACxC,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;KAClD;;;;IAMD,QAAQ,CAAC,QAAiB,IAAI;QAC5B,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE;YAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SACzB;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;;;;IAMD,eAAe;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAY,CAAC,CAAC;KAC3C;;;;IAMD,oBAAoB,CAAC,YAA+B;;QAClD,IAAI,CAAC,YAAY;YACf,YAAY;;gBAEZ,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC;;;;gBAG1C,MAAC,IAAI,CAAC,EAAE,CAAC,WAAW,EAAiB,CAAC,IAAI,0CAAE,aAAa,CAAC,mBAAmB,CAAC,CAAA,CAAC;QACjF,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3E,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YACpF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;SACtC;QAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IAED,sBAAsB;QACpB,MAAM,eAAe,qBAAQ,IAAI,CAAC,WAAW,CAAE,CAAC;;;;QAKhD,IAAI,CAAC,WAAW,kRACV,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,KACpC,IAAI,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAChC,IAAI,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAChC,IAAI,CAAC,WAAW,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,KACrD,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,KACpD,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,KACpD,IAAI,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAChC,IAAI,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,KAC7B,IAAI,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,KAC7B,IAAI,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,KACzC,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KACjD,IAAI,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAC5C,IAAI,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAC5C,IAAI,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAC5C,IAAI,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,KAC/C,IAAI,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,KAC/C,IAAI,CAAC,aAAa,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,EAAE,IAC3D,IAAI,CAAC,cAAc,KACtB,YAAY,EAAEC,0BAAqB,CAAC,IAAI,CAAC,EAAE,CAAC,GAC7C,CAAC;;QAGF,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,MAAM,gBAAgB,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3G,gBAAgB,CAAC,OAAO,CAAC,CAAC,GAAG;gBAC3B,IAAI,EAAE,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE;;oBAE9B,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;iBACxC;qBAAM;;;oBAGL,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;oBACnF,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;iBACrD;aACF,CAAC,CAAC;SACJ;KACF;;;;IAKD,sBAAsB;;QACpB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,OAAO;SACR;QAED,MAAA,MAAA,IAAI,CAAC,SAAS,EAAC,YAAY,mDAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QAE1C,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAA,MAAA,IAAI,CAAC,SAAS,EAAC,WAAW,mDAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;SAC7F;KACF;IAED,iBAAiB;QACf,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,KAAK,mBAAmB,CAAC,CAAC,CAAC;QACxG,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,KAAK,oBAAoB,CAAC,CAAC,CAAC;;;;QAK1G,IAAI,CAAC,gBAAgB,GAAGC,0BAAqB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,cAA8B;YACpF,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;SACtC,CAAC,CAAC;QACH,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,sBAAsB,EAAE,CAAC;KAC/B;IAED,gBAAgB;QACd,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC3D;IAED,mBAAmB;QACjB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,sBAAsB,EAAE,CAAC;KAC/B;IAED,oBAAoB;;QAClB,MAAA,IAAI,CAAC,gBAAgB,0CAAE,UAAU,EAAE,CAAC;KACrC;IAED,MAAM;QACJ,QACEC,QAACC,UAAI,qDACH,KAAK,EAAC,mBAAmB,EACzB,MAAM,EAAE;gBACN,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACtB,EACD,OAAO,EAAE;gBACP,IAAI,CAAC,QAAQ,EAAE,CAAC;aACjB,EACD,OAAO,EAAE;gBACP,IAAI,CAAC,QAAQ,EAAE,CAAC;aACjB,EACD,SAAS,EAAE,CAAC,CAAC;gBACX,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;aACvB,EACD,SAAS,EAAE,CAAC,CAAC;gBACX,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;aACjC,IAEDD,mEAAM,IAAI,EAAC,mBAAmB,GAAQ,EACtCA,kEACE,KAAK,EAAEE,qBAAU,CAAC,uBAAuB,EAAE;gBACzC,uBAAuB,EAAE,IAAI,CAAC,mBAAmB;gBACjD,wBAAwB,EAAE,IAAI,CAAC,oBAAoB;aACpD,CAAC,IAEFF,oEAAa,EACbA,mEAAM,IAAI,EAAC,OAAO,EAAC,YAAY,EAAE,MAAM,IAAI,CAAC,oBAAoB,EAAE,IAC/D,CAAC,IAAI,CAAC,YAAY,KACjBA,kFACE,IAAI,EAAC,cAAc,EACnB,GAAG,EAAE,CAAC,KAAK,MAAM,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,EAC1C,OAAO,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EACtC,gBAAgB,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAC3C,IAAI,CAAC,WAAW,EACpB,CACH,CACI,CACH,EACNA,mEAAM,IAAI,EAAC,oBAAoB,GAAQ,CAClC,EACP;KACH;;;;;;;;;;;;","names":["autocompleteWatcher","submitFormImplicitly","getTextInputAriaLabel","observeAriaAttributes","h","Host","classNames"],"sources":["src/components/market-input-text/market-input-text.css?tag=market-input-text&encapsulation=shadow","src/components/market-input-text/market-input-text.tsx"],"sourcesContent":["@import \"../../styles/mixins/component-base.css\";\n@import \"../../styles/mixins/field.css\";\n@import \"../../styles/mixins/field-states.css\";\n@import \"../../styles/mixins/field-accessories.css\";\n@import \"../../styles/mixins/floating-input.css\";\n@import \"../../styles/mixins/number-input.css\";\n@import \"../../styles/mixins/time-input.css\";\n@import \"../../styles/mixins/date-input.css\";\n\n:host {\n  @extend %field;\n  @extend %field-states;\n  @extend %field-accessories;\n  @extend %floating-input;\n  @extend %number-input;\n}\n\n/* Visually displays a placeholder when no value is set but a placeholder is set elsewhere,\n   such as with Safari using their own placeholders for date and time inputs */\n:host([value=\"\"]) input,\n:host([value=\"\"]) ::slotted(input) {\n  color: var(--field-placeholder-text-color);\n}\n\n/*\n  These animations are part of a hack that allows us to detect browser autofill:\n  https://stackoverflow.com/a/41530164\n*/\n\n:host input:-webkit-autofill,\n:host ::slotted(input:-webkit-autofill) {\n  animation-name: market-input-autofill-start;\n  animation-duration: 0.1ms;\n}\n\n:host input:not(:-webkit-autofill),\n:host ::slotted(input:not(:-webkit-autofill)) {\n  animation-name: market-input-autofill-cancel;\n  animation-duration: 0.1ms;\n}\n\n:host input::-webkit-date-and-time-value {\n  text-align: left;\n}\n\n:host ::slotted(input::-webkit-date-and-time-value) {\n  text-align: left;\n}\n","import {\n  Component,\n  Prop,\n  Element,\n  Listen,\n  Event,\n  EventEmitter,\n  Host,\n  h,\n  Method,\n  State,\n  Watch,\n  AttachInternals,\n} from '@stencil/core';\n\nimport { observeAriaAttributes, getTextInputAriaLabel, AriaAttributes } from '../../utils/aria';\nimport { autocompleteWatcher } from '../../utils/autocomplete';\nimport { classNames } from '../../utils/classnames';\nimport { submitFormImplicitly } from '../../utils/forms';\n\n/**\n * @slot - The main label for the input.\n * @slot leading-accessory - An icon set on the left side of the input.\n * @slot trailing-accessory - An icon set on the right side of the input.\n *\n * @slot input - Can be used to slot your own HTML input, if needed (ex. if supporting browser\n * autofill)\n * @part native-input - The default inner HTML input.\n */\n@Component({\n  tag: 'market-input-text',\n  shadow: true,\n  styleUrl: 'market-input-text.css',\n  formAssociated: true,\n})\nexport class InputText {\n  private nativeInput?: HTMLInputElement;\n  private slottedInput?: HTMLInputElement;\n\n  @Element() el: HTMLMarketInputTextElement;\n\n  /**\n   * Bind an ElementInternals object to a property which you can then use to interact with the surrounding form.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/attachInternals\n   */\n  @AttachInternals() internals: ElementInternals | undefined;\n\n  /**\n   * A string specifying the type of control to render. Any native HTML input type would work here.\n   */\n  @Prop({ reflect: true }) readonly type: string = 'text'; // Any HTML input type\n  /**\n   * A string specifying an ID for the input.\n   */\n  @Prop() readonly inputId: string;\n\n  /**\n   * A string specifying a name for the input.\n   */\n  @Prop() readonly name: string;\n\n  /**\n   * A string specifying a value for the input. This will be visually shown on the input and can be edited by the user.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /**\n   * A string specifying the placeholder of the input.\n   * This is shown before a user attempts to add a value, given no value is already provided.\n   */\n  @Prop() readonly placeholder: string;\n\n  /**\n   * A number specifying the maximum length of characters for the input value.\n   * See MDN on the [maxlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)\n   */\n  @Prop() readonly maxlength: number;\n\n  /**\n   * A number specifying the minimum length of characters for the input value.\n   * See MDN on the [minlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)\n   */\n  @Prop() readonly minlength: number;\n\n  /**\n   * String for setting input size.\n   * Sizes `small` and `medium` visually hide the label,\n   * but you should still provide one for accessibility purposes.\n   */\n  @Prop({ reflect: true }) readonly size: 'small' | 'medium' | 'large' = 'large';\n\n  /**\n   * Specifies the increment step for number and time inputs.\n   * See MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)\n   */\n  @Prop() readonly step: string;\n\n  /**\n   * Specifies the minimum value for number and time inputs.\n   * See MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min)\n   */\n  @Prop() readonly min: string;\n\n  /**\n   * Specifies the maximum value for number and time inputs.\n   * See MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max)\n   */\n  @Prop() readonly max: string;\n\n  /**\n   * Specifies a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\n   * to validate the input's value against.\n   * See MDN on the [pattern attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)\n   */\n  @Prop() readonly pattern: string;\n\n  /**\n   * Whether or not the input is required; used to validate the input's value.\n   * See MDN on the [required attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required)\n   */\n  @Prop() readonly required: boolean;\n\n  /**\n   * A boolean representing whether the input is readonly or not.\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean = false;\n\n  /**\n   * A boolean representing whether the input is disabled or not.\n   * This visually and functionally will disable the input.\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * A boolean representing whether the input is focused or not.\n   */\n  @Prop({ mutable: true, reflect: true }) focused: boolean = false;\n\n  /**\n   * A boolean representing whether the input is invalid or not.\n   * This represents error states.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid: boolean = false;\n\n  /**\n   * Allows a browser to display an appropriate virtual keyboard.\n   * [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).\n   */\n  @Prop() readonly inputmode: string;\n\n  /**\n   * A boolean representing whether the input should focus on page load.\n   * If multiple elements with `autofocus` are present, it is not guaranteed which one\n   * will ultimately receive the focus. It is advised that only one at most is present.\n   */\n  @Prop() readonly autofocus: boolean = false;\n\n  /**\n   * Whether or not this input should allow autocompletion by the browser\n   * Accepts a boolean, or \"true\", \"false\", \"on\", \"off\" or an\n   * [accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n   */\n  @Prop() readonly autocomplete: string | boolean = true;\n\n  /**\n   * Whether or not to automatically style this input as invalid based on\n   * native input validation attributes: `min`, `max`, `pattern`, `required`, `maxlength`, `minlength`.\n   * See MDN articles on [form validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation)\n   * and [constraint validation](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation)\n   */\n  @Prop() readonly autovalidate: boolean = false;\n\n  /**\n   * Whether the input is displaying an initial autofill value. Used for\n   * styling to ensure the label floats up correctly.\n   */\n  @Prop({ mutable: true, reflect: true }) autofilled: boolean = false;\n\n  @State() ariaAttributes: AriaAttributes;\n\n  mutationObserver: MutationObserver;\n\n  sharedProps: {}; // properties to set on inner default or slotted <input> elements\n\n  _autocomplete: string; // what will actually get bound to the <input> element\n\n  /**\n   * Set when the component has been checked for validity through external APIs such as form submission\n   * or the checkValidity function and doesn't satisfy its constraints.\n   * See https://developer.mozilla.org/en-US/docs/web/api/htmlinputelement/invalid_event\n   */\n  validatingThroughSubmission: boolean;\n\n  @Watch('focused')\n  focusedChangeHandler(newValue: boolean) {\n    if (!this.nativeInput) {\n      return;\n    }\n\n    if (newValue) {\n      this.nativeInput.focus();\n    }\n  }\n\n  @Watch('autocomplete')\n  autocompleteWatcher(newValue: string | boolean) {\n    this._autocomplete = autocompleteWatcher(newValue);\n  }\n\n  @Listen('marketDialogLoaded', { target: 'window' })\n  handleMarketDialogLoaded() {\n    if (this.autofocus) {\n      this.setFocus();\n    }\n  }\n\n  /**\n   * Emitted whenever the input value changes.\n   */\n  @Event() marketInputValueChange: EventEmitter<{ value: string; originalEvent: KeyboardEvent }>;\n\n  /**\n   * Emitted when `market-input` is first fully rendered.\n   */\n  @Event() marketInputDidLoad: EventEmitter<{ input: HTMLInputElement }>;\n\n  hasLeadingAccessory: boolean = false;\n\n  hasTrailingAccessory: boolean = false;\n\n  valueDidChange(e) {\n    const result = this.marketInputValueChange.emit({\n      value: e.target.value,\n      originalEvent: e,\n    });\n\n    if (result.defaultPrevented) {\n      e.target.value = this.value;\n      e.preventDefault();\n    } else {\n      this.value = e.target.value;\n      this.updateElementInternals();\n\n      if (this.autovalidate || this.validatingThroughSubmission) {\n        this.invalid = !this.nativeInput.checkValidity();\n      }\n    }\n\n    // Once the merchant has entered text, the content is no longer populated\n    // via autofill, and should be styled as usual.\n    this.autofilled = false;\n  }\n\n  handleAutofill(e) {\n    // This a hack to detect browser autofill, since there's no event emitted for it.\n    // See here for details: https://stackoverflow.com/a/41530164\n    if (e.animationName === 'market-input-autofill-start') {\n      this.autofilled = true;\n    } else if (e.animationName === 'market-input-autofill-cancel' && !this.value) {\n      this.autofilled = false;\n    }\n  }\n\n  handleKeyDown(e: KeyboardEvent) {\n    if (e.key === 'Enter') {\n      // There are cases where the input acts as a trigger for a dropdown for example a dropdown that renders\n      // the market-date-picker. In those cases, we want to prevent the form from submitting when the user clicks\n      // enter\n      if (this.el.slot === 'trigger') {\n        e.preventDefault();\n      } else {\n        submitFormImplicitly(this.el);\n      }\n    }\n  }\n\n  /**\n   * Handles the invalid submission event of this component.\n   * This can happen when the component has been externally\n   * checked for validity and does not satisfy the constraints.\n   */\n  handleSubmissionInvalid(event: Event) {\n    event.preventDefault(); // Prevent the default auto focus behavior as this will error out.\n\n    this.validatingThroughSubmission = true;\n    this.invalid = !this.nativeInput.checkValidity();\n  }\n\n  /**\n   * Sets focus styling on `<market-input-text>`. Toggles focus on the inner `<input>` if true, and blurs focus if false.\n   */\n  @Method()\n  setFocus(value: boolean = true) {\n    if (this.readonly || this.disabled) {\n      return Promise.resolve();\n    }\n    this.focused = value; // this will cause the `focusedChangeHandler` to be triggered\n    if (!value && this.nativeInput) {\n      this.nativeInput.blur();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns the native `<input>` element used under the hood.\n   */\n  @Method()\n  getInputElement(): Promise<HTMLInputElement> {\n    return Promise.resolve(this.nativeInput!);\n  }\n\n  /**\n   * Allows passing an alternative light DOM input.\n   */\n  @Method()\n  registerSlottedInput(slottedInput?: HTMLInputElement) {\n    this.slottedInput =\n      slottedInput ||\n      // input slotted into market-input-text\n      this.el.querySelector('input[slot=input]') ||\n      // input slotted into a higher-level component that uses market-input-text\n      // (e.g. market-input-password)\n      (this.el.getRootNode() as ShadowRoot).host?.querySelector('input[slot=input]');\n    if (this.slottedInput) {\n      this.slottedInput.addEventListener('input', (e) => this.valueDidChange(e));\n      this.slottedInput.addEventListener('focus', () => this.setFocus());\n      this.slottedInput.addEventListener('blur', () => (this.focused = false));\n      this.slottedInput.addEventListener('animationstart', (e) => this.handleAutofill(e));\n      this.nativeInput = this.slottedInput;\n    }\n\n    return Promise.resolve();\n  }\n\n  updateSharedInputProps() {\n    const prevSharedProps = { ...this.sharedProps };\n\n    // used by the default shadow DOM native input and to copy component properties to slotted inputs\n    // conditionally adding key/value pairs based on whether we want to set them on the <input>\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#individual_attributes\n    this.sharedProps = {\n      ...(this.inputId && { id: this.inputId }),\n      ...(this.name && { name: this.name }),\n      ...(this.type && { type: this.type }),\n      ...(this.placeholder && { placeholder: this.placeholder }),\n      ...(this.maxlength >= 0 && { maxlength: this.maxlength }),\n      ...(this.minlength >= 0 && { minlength: this.minlength }),\n      ...(this.step && { step: this.step }),\n      ...(this.min && { min: this.min }),\n      ...(this.max && { max: this.max }),\n      ...(this.pattern && { pattern: this.pattern }),\n      ...(this.value !== undefined && { value: this.value }),\n      ...(this.readonly && { readonly: this.readonly }),\n      ...(this.required && { required: this.required }),\n      ...(this.disabled && { disabled: this.disabled }),\n      ...(this.autofocus && { autofocus: this.autofocus }),\n      ...(this.inputmode && { inputmode: this.inputmode }),\n      ...(this._autocomplete && { autocomplete: this._autocomplete }),\n      ...this.ariaAttributes,\n      'aria-label': getTextInputAriaLabel(this.el),\n    };\n\n    // sync component props to slotted input, if one exists\n    if (this.slottedInput) {\n      const modifiedPropKeys = [...new Set([...Object.keys(prevSharedProps), ...Object.keys(this.sharedProps)])];\n      modifiedPropKeys.forEach((key) => {\n        if (!(key in this.sharedProps)) {\n          // remove properties that have been unset\n          this.slottedInput.removeAttribute(key);\n        } else {\n          // boolean attributes can be set using empty strings\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute#javascript\n          const attributeValue = this.sharedProps[key] !== true ? this.sharedProps[key] : '';\n          this.slottedInput.setAttribute(key, attributeValue);\n        }\n      });\n    }\n  }\n\n  /**\n   * Updates the internal state of this element bound to the surrounding form.\n   */\n  updateElementInternals(): void {\n    if (!this.internals) {\n      return;\n    }\n\n    this.internals.setFormValue?.(this.value);\n\n    if (this.nativeInput) {\n      this.internals.setValidity?.(this.nativeInput.validity, this.nativeInput.validationMessage);\n    }\n  }\n\n  componentWillLoad() {\n    this.hasLeadingAccessory = Boolean([...this.el.children].some((el) => el.slot === 'leading-accessory'));\n    this.hasTrailingAccessory = Boolean([...this.el.children].some((el) => el.slot === 'trailing-accessory'));\n\n    // In testing environments like vitest, formAssociated stencil classes aren't fully supported at the moment.\n    // This leads to issues like missing functions on the this context of the class. In order to address this\n    // we've defined the onMutationObserved callback inline.\n    this.mutationObserver = observeAriaAttributes(this.el, (ariaAttributes: AriaAttributes) => {\n      this.ariaAttributes = ariaAttributes;\n    });\n    this.registerSlottedInput();\n    this.autocompleteWatcher(this.autocomplete);\n    this.updateSharedInputProps();\n    this.updateElementInternals();\n  }\n\n  componentDidLoad() {\n    this.marketInputDidLoad.emit({ input: this.nativeInput });\n  }\n\n  componentWillUpdate() {\n    this.updateSharedInputProps();\n    this.updateElementInternals();\n  }\n\n  disconnectedCallback() {\n    this.mutationObserver?.disconnect();\n  }\n\n  render() {\n    return (\n      <Host\n        class=\"market-input-text\"\n        onBlur={() => {\n          this.focused = false;\n        }}\n        onClick={() => {\n          this.setFocus();\n        }}\n        onFocus={() => {\n          this.setFocus();\n        }}\n        onKeyDown={(e) => {\n          this.handleKeyDown(e);\n        }}\n        onInvalid={(e) => {\n          this.handleSubmissionInvalid(e);\n        }}\n      >\n        <slot name=\"leading-accessory\"></slot>\n        <div\n          class={classNames('label-input-container', {\n            'has-leading-accessory': this.hasLeadingAccessory,\n            'has-trailing-accessory': this.hasTrailingAccessory,\n          })}\n        >\n          <slot></slot>\n          <slot name=\"input\" onSlotchange={() => this.registerSlottedInput()}>\n            {!this.slottedInput && (\n              <input\n                part=\"native-input\"\n                ref={(input) => (this.nativeInput = input)}\n                onInput={(e) => this.valueDidChange(e)}\n                onAnimationStart={(e) => this.handleAutofill(e)}\n                {...this.sharedProps}\n              />\n            )}\n          </slot>\n        </div>\n        <slot name=\"trailing-accessory\"></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}