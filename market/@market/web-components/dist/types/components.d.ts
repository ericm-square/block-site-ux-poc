/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { TMarketActionCardDeselectedEventDetail, TMarketActionCardSelectedEventDetail } from "./components/market-action-card/events";
import { Dialog, DialogDismissedEvent, DialogElement, DialogLoadedEvent } from "./utils/dialog";
import { FocusTrapActivateOptions, FocusTrapDeactivateOptions, FocusTrapOptions } from "./utils/focus-trap";
import { Placement, PositioningStrategy } from "@popperjs/core";
import { MENU_SLOT_NAMES } from "./components/market-date-picker/enums/menu";
import { TMarketDatePickerMenuSelectionChangedEventDetail, TMarketDateRangeChangedEventDetail } from "./components/market-date-picker/events";
import { TMarketDragCoords } from "./utils/gesture/types";
import { TMarketFileUploadFileConfig } from "./components/market-file-upload/types";
import { TMarketFilterDateRangeValues, TMarketFilterExpandedChangeEventDetail, TMarketFilterValueDidChangeEventDetail } from "./components/market-filter/events";
import { TMarketFilterType } from "./components/market-filter/types";
import { TMarketHeaderNavigateEventDetail } from "./components/market-header/events";
import { TMarketInputSearchFocusEventDetail, TMarketInputSearchValueChangeEventDetail, TMarketInternalInputSearchCompactAnimationEventDetail } from "./components/market-input-search/events";
import { TMarketListFilterStrategyPropTypes } from "./components/market-list/types";
import { TMarketReorderableOptions, TMarketReorderEventDetail } from "./utils/reorderable";
import { TMarketListItemsFilteredEventDetail, TMarketListSelectionsDidChangeEventDetail } from "./components/market-list/events";
import { TMarketInternalPaginationNavigationEventDetail, TMarketPaginationPageSizeChangeEventDetail } from "./components/market-pagination/events";
import { MarketPillVariant } from "./utils/pill-variant";
import { TMarketProgressTrackerStepClickEventDetail } from "./components/market-progress-tracker/subcomponents/market-progress-tracker-step/events";
import { TMarketRowDeselectedEventDetail, TMarketRowSelectedEventDetail } from "./components/market-row/events";
import { Strategy } from "@floating-ui/dom";
import { TMarketTabListSelectedTabChangedEventDetail, TMarketTabSelectedChangedEventDetail } from "./components/market-tabs/events";
import { TCell } from "./components/market-table-row/market-table-row";
import { MarketTableV2SelectionChangeEventDetail, MarketTableV2SortOrderChangeDetail, TMarketTableV2Selection, TMarketTableV2SortOrder, TMarketTableV2SortStrategy } from "./components/tables-v2/market-table-v2/types";
import { TMarketTileSelectedChanged } from "./components/market-tile/events";
export { TMarketActionCardDeselectedEventDetail, TMarketActionCardSelectedEventDetail } from "./components/market-action-card/events";
export { Dialog, DialogDismissedEvent, DialogElement, DialogLoadedEvent } from "./utils/dialog";
export { FocusTrapActivateOptions, FocusTrapDeactivateOptions, FocusTrapOptions } from "./utils/focus-trap";
export { Placement, PositioningStrategy } from "@popperjs/core";
export { MENU_SLOT_NAMES } from "./components/market-date-picker/enums/menu";
export { TMarketDatePickerMenuSelectionChangedEventDetail, TMarketDateRangeChangedEventDetail } from "./components/market-date-picker/events";
export { TMarketDragCoords } from "./utils/gesture/types";
export { TMarketFileUploadFileConfig } from "./components/market-file-upload/types";
export { TMarketFilterDateRangeValues, TMarketFilterExpandedChangeEventDetail, TMarketFilterValueDidChangeEventDetail } from "./components/market-filter/events";
export { TMarketFilterType } from "./components/market-filter/types";
export { TMarketHeaderNavigateEventDetail } from "./components/market-header/events";
export { TMarketInputSearchFocusEventDetail, TMarketInputSearchValueChangeEventDetail, TMarketInternalInputSearchCompactAnimationEventDetail } from "./components/market-input-search/events";
export { TMarketListFilterStrategyPropTypes } from "./components/market-list/types";
export { TMarketReorderableOptions, TMarketReorderEventDetail } from "./utils/reorderable";
export { TMarketListItemsFilteredEventDetail, TMarketListSelectionsDidChangeEventDetail } from "./components/market-list/events";
export { TMarketInternalPaginationNavigationEventDetail, TMarketPaginationPageSizeChangeEventDetail } from "./components/market-pagination/events";
export { MarketPillVariant } from "./utils/pill-variant";
export { TMarketProgressTrackerStepClickEventDetail } from "./components/market-progress-tracker/subcomponents/market-progress-tracker-step/events";
export { TMarketRowDeselectedEventDetail, TMarketRowSelectedEventDetail } from "./components/market-row/events";
export { Strategy } from "@floating-ui/dom";
export { TMarketTabListSelectedTabChangedEventDetail, TMarketTabSelectedChangedEventDetail } from "./components/market-tabs/events";
export { TCell } from "./components/market-table-row/market-table-row";
export { MarketTableV2SelectionChangeEventDetail, MarketTableV2SortOrderChangeDetail, TMarketTableV2Selection, TMarketTableV2SortOrder, TMarketTableV2SortStrategy } from "./components/tables-v2/market-table-v2/types";
export { TMarketTileSelectedChanged } from "./components/market-tile/events";
export namespace Components {
    interface MarketAccessory {
        /**
          * The desired size for the leading or trailing accessory, which we expect to be either an image or a <market-icon> component. The available sizes are "icon" (24x24) and "image" (40x40).
         */
        "size": 'icon' | 'image';
    }
    interface MarketAccordionItem {
        /**
          * Whether the accordion should appear in a disabled state.
         */
        "disabled": boolean;
        /**
          * Determines whether the accordion is shown as expanded or collapsed.
         */
        "expanded": boolean;
        /**
          * The unique name of the accordion.
         */
        "name": string;
        /**
          * Sets `disabled` state. Allows external elements to programmatically trigger disabled styling.
         */
        "setDisabled": (value: boolean) => Promise<void>;
        /**
          * Used to set the "open" state of the accordion.
         */
        "setExpanded": (newExpanded: boolean) => Promise<void>;
        /**
          * The size of the heading text of the accordion.
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface MarketActionCard {
        /**
          * Set `selected` to `false` and emit `marketCardDeselected`. Generally speaking, it is preferable to avoid using this method from outside this component and allow `market-action-card` to manage its own selection state based on user interaction. It should only be used for parent components that need to manage a group of rows, such as `market-list`.
         */
        "deselect": () => Promise<void>;
        /**
          * Visually and functionally disables the action card.
         */
        "disabled": boolean;
        /**
          * Set `selected` to `true` and emit `marketCardSelected`. Generally speaking, it is preferable to avoid using this method from outside this component and allow `market-action-card` to manage its own selection state based on user interaction. It should only be used for parent components that need to manage a group of rows, such as `market-list`.
         */
        "select": () => Promise<void>;
        /**
          * Whether the action card is selected or not.
         */
        "selected": boolean;
        /**
          * Set `selected` to `false`. Generally speaking, it is preferable to avoid using this method from outside this component and allow `market-action-card` to manage its own selection state based on user interaction. It should only be used for parent components that need to manage a group of rows, such as `market-list`.
         */
        "silentlyDeselect": () => Promise<void>;
        /**
          * Used for setting the selection state to true without emitting events. Useful for scenarios where another component (ex. `<market-list>`) needs to sync state with slotted `<market-action-card>`s.
         */
        "silentlySelect": () => Promise<void>;
        /**
          * When set to `true`, card will not persist selected state on click.
         */
        "transient": boolean;
        /**
          * A string specifying a value for the action card.
         */
        "value": string;
    }
    interface MarketActivityIndicator {
        /**
          * String for setting activity indicator size
         */
        "size": 'large' | 'small';
    }
    interface MarketActivityIndicatorBar {
        /**
          * The maximum value of the activity bar
         */
        "max": number;
        /**
          * The value the activity bar should report
         */
        "value": number;
    }
    interface MarketBanner {
        /**
          * Optional property to pass a string to the dismiss "x" that will function as its aria-label. Defaults to "Dismiss".
         */
        "dismissButtonAriaLabel": string;
        /**
          * whether to show the dismiss "x" or not
         */
        "dismissable": boolean;
        /**
          * Title for the icon image, used as the accessible name for the icon. If a custom icon is provided, this prop is ignored.
         */
        "iconImageTitle": string;
        /**
          * banner variant that corresponds to the type of info it is conveying
         */
        "variant": 'info' | 'success' | 'warning' | 'critical' | 'insight';
    }
    interface MarketBlade {
        /**
          * Activates the focus trap  See [`focus-trap.ts`](../../utils/focus-trap.ts) for default options
          * @param options [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)
          * @param activateOptions set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)
         */
        "activateFocusTrap": (options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>;
        /**
          * DEPRECATED: The duration for the blade enter/exit animations, set from design tokens
         */
        "animationDuration": number;
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration": number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration": number;
        /**
          * Deactivates the focus trap
          * @param deactivateOptions set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)
         */
        "deactivateFocusTrap": (deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal
         */
        "dialogID": string;
        /**
          * Emits the dismiss event The parent context will handle actually removing elements from the DOM, All the blade needs to do it emit an event so actually closing it can be some other elements problem
         */
        "dismiss": (dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>;
        /**
          * INTERNAL ONLY: Used in CSS to trigger start and stop animations
         */
        "hidden": boolean;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place in the stack
         */
        "index": number;
        /**
          * Enforces focus trapping on the modal
         */
        "trapFocus": boolean;
    }
    interface MarketButton {
        /**
          * String for setting (optional) button caret direction
         */
        "caret": 'up' | 'down' | 'none';
        /**
          * Functionally and visually disables the button
         */
        "disabled": boolean;
        /**
          * Causes the browser to treat the linked URL as a download. Only works for same-origin URLs. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download) for details on accepted values.
         */
        "download": string | undefined;
        /**
          * Whether or not the button is in a focused state
         */
        "focused": boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * Whether the button only contains an icon.
         */
        "iconOnly": boolean;
        /**
          * Optionally set a custom tabindex on the inner HTML `<button>`.
         */
        "innerTabindex": number;
        /**
          * Whether or not the button is in a loading state
         */
        "isLoading": boolean;
        /**
          * String for setting button rank
         */
        "rank": 'primary' | 'secondary' | 'tertiary';
        /**
          * Defines the relationship between a linked resource and the current document. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel) for details on accepted values.
         */
        "rel": string | undefined;
        /**
          * Sets `focused` state, except when disabled. Allows external consumers to programmatically trigger focused styling.
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * String for setting button size
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.
         */
        "target": '_blank' | '_self' | '_parent' | '_top' | undefined;
        /**
          * String for setting button type
         */
        "type": 'button' | 'reset' | 'submit';
        /**
          * String for setting button variant
         */
        "variant": 'regular' | 'destructive';
    }
    interface MarketButtonDropdown {
        /**
          * Functionally and visually disables the button dropdown.
         */
        "disabled": boolean;
        /**
          * Defines what types of interaction the button dropdown should have (see `market-dropdown` docs for more granular explanation)
         */
        "interaction": 'click' | 'hover' | 'persistent';
        /**
          * Disabling the up/down caret.
         */
        "noCaret": boolean;
        /**
          * Disables the default behavior of *not* persisting selections in slotted `market-list`s.
         */
        "persistListSelections": boolean;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the preferred placement of the popper. https://popper.js.org/docs/v2/constructors//#placement
         */
        "popoverPlacement": Placement;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy": PositioningStrategy;
    }
    interface MarketButtonGroup {
        /**
          * A string specifying the alignment for the button group. This will change button size and distribution across the group.
         */
        "alignment": 'left' | 'right' | 'split' | 'fill' | 'stack';
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy": PositioningStrategy;
    }
    interface MarketCheckbox {
        /**
          * Whether the checkbox is active or not.
         */
        "active": boolean;
        /**
          * Whether the checkbox is checked or unchecked. Operates independently of the indeterminate property. If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.
         */
        "checked": boolean;
        /**
          * Whether the checkbox is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the checkbox is focused or not.
         */
        "focused": boolean;
        /**
          * Whether the checkbox is hovered or not.
         */
        "hovered": boolean;
        /**
          * Whether the checkbox is indeterminate. If true, indeterminate visual state takes precedence over checked/unchecked.
         */
        "indeterminate": boolean;
        /**
          * Whether the checkbox is invalid.
         */
        "invalid": boolean;
        /**
          * Sets `active` state. Allows external elements to programmatically trigger active styling, ex. when slotted as a control into `market-row`.
         */
        "setActive": (value: boolean) => Promise<void>;
        /**
          * Sets `disabled` state. Allows external elements to programmatically trigger disabled styling, ex. when slotted as a control into `market-row`.
         */
        "setDisabled": (value: boolean) => Promise<void>;
        /**
          * Sets `focused` state, except when disabled. Allows external consumers to programmatically trigger focused styling.
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * Sets `hovered` state. Allows external elements to programmatically trigger hover styling, ex. when slotted as a control into `market-row`.
         */
        "setHover": (value: boolean) => Promise<void>;
        /**
          * Toggles `indeterminate` prop. Operates independently of the `checked` property but if `true`, indeterminate visual appearance takes precedence over checked/unchecked.
         */
        "setIndeterminate": (newValue: boolean) => Promise<void>;
        /**
          * Toggles `checked` prop, and emits a change event accordingly. Used by `market-row` to sync its selected state w/ slotted checkboxes.
         */
        "setSelection": (newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>;
        /**
          * DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).
         */
        "setValue": (newValue: boolean) => Promise<void>;
    }
    interface MarketChoiceButton {
        /**
          * Functionally and visually disables the choice button
         */
        "disabled": boolean;
        /**
          * Whether or not the choice button is in a selected state
         */
        "selected": boolean;
        /**
          * String for setting choice button size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface MarketCodeDisplay {
        /**
          * Whether the component should appear in a disabled state.
         */
        "disabled": boolean;
        /**
          * A boolean representing whether the code input is focused or not.
         */
        "focused": boolean;
    }
    interface MarketCodeInput {
        /**
          * A boolean representing whether the input is disabled or not. This visually and functionally will disable the input.
         */
        "disabled": boolean;
        /**
          * A boolean representing whether the code input is focused or not.
         */
        "focused": boolean;
        /**
          * A boolean representing whether the input is invalid or not. This represents error states.
         */
        "invalid": boolean;
        /**
          * A number specifying the length of the code
         */
        "length": number;
        /**
          * A string specifying a name for the code input.
         */
        "name": string;
        /**
          * A boolean representing whether the input is readonly or not.
         */
        "readonly": boolean;
        /**
          * Trigger focus styling on `<market-input-text>` and focus the cursor on the first empty `<input />`.
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * A string specifying the type of input to render (text or numeric)
         */
        "type": 'text' | 'number' | 'password';
        /**
          * A string representing a default value (code) that can be passed in to be rendered
         */
        "value": string;
    }
    interface MarketColorPicker {
        /**
          * Value representing the color shown on the color picker.
         */
        "value": string;
    }
    interface MarketColorPickerGradient {
        /**
          * Value representing the selected color of the secondary gradient picker. This is a string that can represent a [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color). This is the value the color picker will use. Supported color types are rgb/a, hsl/a, and hex colors.
         */
        "value": string;
    }
    interface MarketColorPickerInput {
        /**
          * Value representing the color shown on the input. This should be in a hexadecimal format (i.e. #ABC123), similarly to native HTML color inputs.
         */
        "value": string;
    }
    interface MarketColorSwatch {
        "disabled": boolean;
        "name": string;
        /**
          * Whether the swatch is selected or not.
         */
        "selected": boolean;
        /**
          * Value representing the color of the swatch. This is a string that can represent any [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color).
         */
        "value": string;
    }
    interface MarketColorSwatchList {
        /**
          * A string specifying a value for the list. For a color swatch to be selected, this value should match the swatch's value. Note: all color swatch values slotted in must be **unique**! An empty string, or '', will clear the selection.
         */
        "value": string;
    }
    interface MarketContentCard {
    }
    interface MarketContext {
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration": number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration": number;
        /**
          * **Recommended for internal use only** Removes the topmost dialog from the stack or the dialog matching the passed `dialogID` Note that using this will not trigger the dialog to emit a marketDialogDismissed event.  The recommended path for closing a dialog is to call its dismiss() method.
         */
        "close": (dialogID?: string) => Promise<void>;
        /**
          * **Recommended for internal use only** Removes the topmost dialog from the stack (just an alias for default .close() behavior) Note that using this will not trigger the dialog to emit a marketDialogDismissed event.  The recommended path for closing a dialog is to call its dismiss() method.
         */
        "closeCurrent": () => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Exposes the context's currentDialog for use by market-context-manager
         */
        "currentDialog": Dialog;
        /**
          * Whether the context is hidden or visible.
         */
        "hidden": boolean;
        /**
          * **INTERNAL [do not use directly]** Disabling the context's default veil (including scroll blocking behavior) when visible. By default, this is set by market-context according to what dialog type is being opened. In the future, we want to expose this as an optional config option for market-context-manager's open() method.
         */
        "noVeil": Boolean;
        /**
          * Adds the passed dialogTemplate to the stack and inserts it into the DOM
         */
        "open": (dialogTemplate: any) => Promise<void>;
    }
    interface MarketContextManager {
        /**
          * Shows the context manager
         */
        "activate": () => Promise<void>;
        /**
          * Whether or not the context manager is UI blocking
         */
        "active": boolean;
        /**
          * Closes the dialog with matching ID
         */
        "close": (dialogID?: string) => Promise<void>;
        /**
          * Adds a new market-context to the stack in the DOM and activates it
         */
        "createNewContext": () => Promise<void>;
        /**
          * Hides the entire context manager
         */
        "deactivate": () => Promise<void>;
        /**
          * Adds the passed dialogEl to the DOM and creates a new context if necessary or according to `shouldCreateNewContext` if it is passed
         */
        "open": (dialogEl: DialogElement, shouldCreateNewContext?: boolean) => Promise<void>;
    }
    interface MarketDatePicker {
        /**
          * Whether or not the side market-date-picker-menu is shown. To pass in translation supported text, use slots available for each option.
         */
        "displayMenu": boolean;
        /**
          * The ISO formatted string that determines the displayed month on the calendar. Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format Example: `YYYY-MM-DDT08:00`. Note: Omitting the time portion defaults to UTC, so this may display as a day behind on your calendar! If you add hours it will default to your timezone, like the above example. Invalid date strings default to today's date.
         */
        "displayedDate": string;
        /**
          * A list of market-date-picker-menu items that will be excluded from appearing on the menu list. i.e. `this-year,last-year` or `today,this-week,last-week,custom` The menu names are lowercase and hyphenated strings, found here: https://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx  This works in conjunction with timeframe, i.e. "timeframe=past", excludes dates in the future in addition to the ones here. This is written as items separated by ','.
         */
        "excludeMenuItems": string;
        /**
          * Whether the selected dates are invalid. It should not be possible to click on invalid dates, so this occurs through date inputs.
         */
        "invalid": boolean;
        /**
          * A function that takes a datestring and returns a boolean determining if it should be disabled. This does not override disabled dates based on the timeframe prop. See https://ionicframework.com/docs/api/datetime#advanced-date-constraints for examples of passing in a function as a Stencil component prop.
         */
        "isDateDisabled": (day: Date) => boolean;
        /**
          * Date picker locale. Defaults to browser locale. If that cannot be determined, defaults to 'en-US'.
         */
        "locale": string;
        /**
          * Position of menu on a mobile screen, if market-date-picker-menu is shown.
         */
        "mobileMenuPosition": 'top' | 'bottom';
        /**
          * Preset menu option to populate date picker range. Presetting `custom` should be used with `selectedStartDate` and `selectedEndDate` props. Otherwise if both `selectedStartDate/selectedEndDate` and `presetMenuOption` are given, `presetMenuOption` takes precedence.
         */
        "presetMenuOption": MENU_SLOT_NAMES;
        /**
          * User selected end date for a range saved as an ISO formatted string. Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format Example: `YYYY-MM-DDT08:00`.
         */
        "selectedEndDate": string;
        /**
          * User selected single date or start date for a range saved as an ISO formatted string. Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format Example: `YYYY-MM-DDT08:00`.
         */
        "selectedStartDate": string;
        /**
          * Whether the date picker allows selection of a single date or a date range
         */
        "selectionType": 'single' | 'range';
        /**
          * String for setting timeframe type to select which market-date-picker-menu items to show. Past means only past dates available, future is only current and future dates, and present is the default for all shown.
         */
        "timeframe": 'past' | 'present' | 'future';
        /**
          * This enables the input field for the date picker.
         */
        "withInputs": '' | 'date' | 'date-and-time';
        /**
          * Displays a clickable caret in the month/year header. If it is up, we show the month/year selection view instead of dates.
         */
        "yearViewActive": boolean;
    }
    interface MarketDatePickerDate {
        /**
          * String for user to pass in value of the date
         */
        "day": string | null;
        /**
          * Functionally and visually disables the date picker date
         */
        "disabled": boolean;
        /**
          * Handles whether or not date picker date is selected
         */
        "selected": boolean;
        /**
          * String for setting date picker date selection type
         */
        "selection": 'none' | 'single' | 'range-first' | 'range-middle' | 'range-last';
        /**
          * Handles whether or not date picker date is for today's date
         */
        "today": boolean;
        /**
          * String type to determine type of date selected for parent component
         */
        "type": 'day' | 'month' | 'year';
    }
    interface MarketDatePickerInputDate {
        /**
          * A function that returns true if the date should be disabled
          * @type {(day: Date) => boolean}
          * @memberof MarketDateInputDate
          * @default undefined
         */
        "isDateDisabled": (day: Date) => boolean;
        /**
          * Whether the date picker is a range
          * @type {boolean}
          * @memberof MarketDateInputDate
          * @default false
         */
        "range": boolean;
        /**
          * The selected end date
          * @type {string}
          * @memberof MarketDateInputDate
          * @default ''
         */
        "selectedEndDate": string;
        /**
          * The selected start date
          * @type {string}
          * @memberof MarketDateInputDate
          * @default ''
         */
        "selectedStartDate": string;
        /**
          * The timeframe to restrict the date picker to
          * @type {'past' | 'future' | 'present'}
          * @memberof MarketDateInputDate
          * @default 'present'
         */
        "timeframe": 'past' | 'future' | 'present';
        /**
          * Whether to use date-time input instead of date-only
          * @type {boolean}
          * @memberof MarketDateInputDate
          * @default false
         */
        "withTime": boolean;
    }
    interface MarketDatePickerMenu {
        /**
          * Method to visually select Custom row for use by the date picker component (internal use only)
         */
        "_selectCustomRow": () => Promise<void>;
        /**
          * A list of menu items that will be excluded from appearing on the menu list. i.e. `this-year,last-year` or `today,this-week,last-week,custom` The menu names are lowercase and hyphenated strings, found here: https://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx  This works in conjunction with timeframe, i.e. "timeframe=past", excludes dates in the future in addition to the ones here. This is written as items separated by ','.
         */
        "excludeMenuItems": string;
        /**
          * Preset menu option passed from the parent. For the menu, this handles visually selecting the menu row.
         */
        "presetMenuOption": MENU_SLOT_NAMES;
        /**
          * String for setting timeframe type to select which menu items to show
         */
        "timeframe": 'past' | 'present' | 'future';
    }
    interface MarketDialog {
        /**
          * Activates the focus trap  See [`focus-trap.ts`](../../utils/focus-trap.ts) for default options
          * @param options [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)
          * @param activateOptions set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)
         */
        "activateFocusTrap": (options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>;
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration": number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration": number;
        /**
          * Deactivates the focus trap
          * @param deactivateOptions set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)
         */
        "deactivateFocusTrap": (deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal
         */
        "dialogID": string;
        /**
          * Emits the dismiss event The parent context will handle actually removing elements from the DOM, All the dialog needs to do it emit an event so actually closing it can be some other elements problem
         */
        "dismiss": (dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>;
        /**
          * INTERNAL ONLY: Used in CSS to trigger start and stop animations
         */
        "hidden": boolean;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place in the stack
         */
        "index": number;
        /**
          * Whether the activity indicator is rendered or not
         */
        "isLoading": boolean;
        /**
          * Whether the dialog is persistent or dismissable
         */
        "persistent": boolean;
        /**
          * Enforces focus trapping on the dialog
         */
        "trapFocus": boolean;
    }
    interface MarketDivider {
        /**
          * Sets the vertical margin for the divider.
         */
        "margin": 'small' | 'medium' | 'large';
        /**
          * Sets the vertical margin for the divider.
         */
        "size": 'thick' | 'thin';
    }
    interface MarketDragHandle {
    }
    interface MarketDropdown {
        /**
          * Closes the dropdown
         */
        "closeDropdown": () => Promise<void>;
        /**
          * Functionally disables the component, as well as relevant Market components in the "trigger" slot (`<market-button>`, `<market-link>`).
         */
        "disabled": boolean;
        /**
          * Determines whether the dropdown is expanded or collapsed
         */
        "expanded": boolean;
        /**
          * Defining how the popover should be triggered to open/close. Note that clicks outside the dropdown will always close it.  `click`: popover toggles open/closed on clicks to the trigger or popover  `hover`: popover opens on trigger mouseover, closes on trigger or popover  mouseout  `persistent`: popover toggles open/closed on clicks to the trigger, popover stays open if users click on it or its content  `none`: popover does not toggle open/closed on any user interaction; it is expected to be controlled by the parent component
         */
        "interaction": 'click' | 'hover' | 'persistent' | 'none';
        /**
          * Opens the dropdown
         */
        "openDropdown": () => Promise<void>;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Displaces the popper away from, or toward, the reference element in the direction of its placement. https://popper.js.org/docs/v2/modifiers/offset/#distance-1
         */
        "popoverDistance": number;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the preferred placement of the popper. https://popper.js.org/docs/v2/constructors//#placement
         */
        "popoverPlacement": Placement;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Displaces the popover along the reference element. https://popper.js.org/docs/v2/modifiers/offset/#skidding-1
         */
        "popoverSkidding": number;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy": PositioningStrategy;
        /**
          * Toggles the dropdown opened or closed
         */
        "toggleDropdown": () => Promise<void>;
        /**
          * Updates the popper's tooltip location https://popper.js.org/docs/v2/lifecycle/#manual-update
         */
        "updateDropdownPosition": () => Promise<void>;
    }
    interface MarketEmptyState {
    }
    interface MarketField {
        /**
          * A boolean representing whether the field is disabled or not. This visually and functionally will disable the field.
         */
        "disabled": boolean;
        /**
          * A boolean representing whether the field is invalid or not. This represents error states.
         */
        "invalid": boolean;
        /**
          * A string specifying a name for the field.
         */
        "name": string;
        /**
          * A boolean representing whether the field is readonly or not.
         */
        "readonly": boolean;
    }
    interface MarketFileUpload {
        /**
          * String that is a list of file types the uploader should accept. This is passed to the internal `<input type="file"/>` tag. For more info, see the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept).
         */
        "accept": string;
        /**
          * Used to toggle "compact mode" (for use on mobile devices and when space is limited)
         */
        "compact": boolean;
        /**
          * Optional property passed to the delete icons on selected file rows that will function as its aria-label. Defaults to "Delete".
         */
        "deleteButtonAriaLabel": string;
        /**
          * Functionally and visually disables the file picker.
         */
        "disabled": boolean;
        /**
          * What type of custom information, if any, to display on specified file rows. Expects an array of TMarketFileUploadFileConfig objects (must be set using JS and not in the HTML markup), which must include `filename` and can include an optional `status`, `message`, or `leadingIconName`. Note that `message` is only shown when `status` is `'error'`, and `leadingIconName` expects the semantic or descriptive name of an existing `market-icon`.
         */
        "fileMetadata"?: Array<TMarketFileUploadFileConfig>;
        /**
          * What type of secondary information, if any, to display on all file rows
         */
        "fileSubtext"?: 'size' | 'type';
        /**
          * DEPRECATED: Represents whether the input is invalid or not. This represents input-level error states. We recommend using the fileMetadata prop to set error status and messages on the file level instead.
         */
        "invalid": boolean;
        /**
          * Represents whether the selector allows multiple files to be selected.
         */
        "multiple": boolean;
        /**
          * An array of File objects that can be passed in. (If using vanilla JS, this must be set using JS and not in the HTML markup.)
         */
        "value": Array<File>;
    }
    interface MarketFilter {
        /**
          * @private *INTERNAL*: Used by `market-filter-dropdown-menu` to reemit events from the cloned datepicker inside the dropdown.  Sets the value of the date picker emits `marketFilterValueDidChange`.
          * @param value - The new value for the date picker.
          * @returns A promise that resolves when the value is set.
         */
        "__setAndEmitDatePickerValue": (value: TMarketFilterDateRangeValues) => Promise<void>;
        /**
          * @private *INTERNAL*: Used by `market-filter-dropdown-menu` to reemit events from the cloned datepicker inside the dropdown.  Sets the value of the list and emits `marketFilterValueDidChange`.
          * @param value - The value to set for the market filter.
          * @returns A promise that resolves when the value is set.
         */
        "__setAndEmitListValue": (value: string | string[]) => Promise<void>;
        /**
          * Functionally and visually disables the filter button
         */
        "disabled"?: boolean;
        /**
          * Defines what types of interaction the dropdown should have (see `market-dropdown` docs for more granular explanation).  If not defined and the list is multiselect, the dropdown interaction will be set to `persistent` so that the dropdown won't automatically close after selecting a row.
         */
        "dropdownInteraction"?: HTMLMarketDropdownElement['interaction'];
        /**
          * Determines whether the filter is expanded or collapsed
         */
        "expanded": boolean;
        /**
          * Whether or not the button is focused
         */
        "focused": boolean;
        /**
          * **INTERNAL [do not use directly]**  Get the filter type
         */
        "getFilterType": () => Promise<TMarketFilterType>;
        /**
          * Filter name
         */
        "name": string;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is `bottom-start`. https://popper.js.org/docs/v2/constructors/#strategy
         */
        "popoverPlacement"?: Placement;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy": PositioningStrategy;
        /**
          * Toggle focus on the filter button
          * @param value whether or not focus will be applied or removed
          * @returns whether or not the filter was focused or blurred
         */
        "setFocus": (value?: boolean) => Promise<boolean>;
        /**
          * String for setting filter button size
         */
        "size": 'medium' | 'small';
    }
    interface MarketFilterButton {
        /**
          * Whether or not the button is in an active state, e.g. filter is selected and dropdown is opened
         */
        "active": boolean;
        /**
          * Functionally and visually disables the button
         */
        "disabled": boolean;
        /**
          * Whether or not the button is focused
         */
        "focused": boolean;
        /**
          * Whether to display icon in place of label
         */
        "iconOnly": boolean;
        /**
          * The ID of the popover element that the button controls
         */
        "popoverId": string;
        /**
          * Toggle focus on the filter button
          * @param value whether or not focus will be applied or removed
          * @returns whether or not the button was focused or blurred
         */
        "setFocus": (value?: boolean) => Promise<boolean>;
        /**
          * String for setting filter button size
         */
        "size": 'medium' | 'small';
    }
    interface MarketFilterDropdownMenu {
        /**
          * String for setting filter button size
         */
        "size": 'medium' | 'small';
    }
    interface MarketFilterGroup {
        /**
          * Maximum number of visible filters before they are truncated and moved into the overflow menu. However, filters may be truncated anyway if there is not enough space.
          * @default 3
         */
        "maxVisibleFilters": number;
    }
    interface MarketFooter {
    }
    interface MarketHeader {
        /**
          * String to use for the aria-label accessibility attribute of the default close "x" button.
         */
        "closeButtonAriaLabel": string;
        /**
          * Whether or not the header is in compact mode when navigation is present.
         */
        "compact": boolean;
        /**
          * Disables the default close "x" button.
         */
        "disableCloseButton": boolean;
        /**
          * Whether or not the navigation slot is shown
         */
        "showNavigation": boolean | null;
    }
    interface MarketIcon {
        /**
          * Optional: A number representing the fidelity of the icon to display.
         */
        "fidelity": number;
        /**
          * A string identifier for the icon. This can be either the semantic name which maps to a token or the descriptive name, which maps to a SVG id in the sprite, though using the semantic name is preferred because it gives you access to additional features like fidelity. You can also pass any string and it will display a symbol or group within any SVG sprite on the page, whether it is the Market sprite or not.
         */
        "name": string;
    }
    interface MarketInlineSectionHeader {
    }
    interface MarketInlineStatus {
        "variant": 'info' | 'success' | 'warning' | 'critical';
    }
    interface MarketInputPassword {
        /**
          * Whether or not this input should allow autocompletion by the browser Accepts a boolean, or "true", "false", "on", "off" or an [accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete": string | boolean;
        /**
          * A boolean representing whether the input is disabled or not. This visually and functionally will disable the input.
         */
        "disabled": boolean;
        /**
          * A boolean representing whether the input is focused or not.
         */
        "focused": boolean;
        /**
          * A string specifying an ID for the input.
         */
        "inputId": string;
        /**
          * Allows a browser to display an appropriate virtual keyboard. [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).
         */
        "inputmode": string;
        /**
          * A boolean representing whether the input is invalid or not. This represents error states.
         */
        "invalid": boolean;
        /**
          * A number specifying the maximum length of characters for the input value.
         */
        "maxlength": number;
        /**
          * A number specifying the minimum length of characters for the input value.
         */
        "minlength": number;
        /**
          * A string specifying a name for the input.
         */
        "name": string;
        /**
          * A string specifying the placeholder of the input. This is shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder": string;
        /**
          * A boolean representing whether the input is readonly or not.
         */
        "readonly": boolean;
        /**
          * Whether or not the input is required; used to validate the input's value. See MDN on the [required attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required)
         */
        "required": boolean;
        /**
          * Sets focus styling on `<market-input-password>`. Toggles focus on the inner `<input>` if true, and blurs focus if false.
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * String for setting input size. Sizes `small` and `medium` visually hide the label, but you should still provide one for accessibility purposes.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * A string specifying a value for the input. This will be visually shown on the input and can be edited by the user.
         */
        "value": string;
    }
    interface MarketInputSearch {
        /**
          * Whether or not this input should allow autocompletion by the browser; accepts a boolean, or `"true"`, `"false"`, `"on"`, `"off"` or an [accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).  Note (source: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)): In order to provide autocompletion, user-agents might require an input to have a: 1. Have a `name` and/or `id` attribute; 2. Be descendants of a `<form>` element; 3. The form to have a submit button
         */
        "autocomplete": string | boolean;
        /**
          * A boolean representing whether the input should focus on page load
         */
        "autofocus": boolean;
        /**
          * A string representing the clear button's aria-label; localize as needed
         */
        "clearButtonAriaLabel": string;
        /**
          * Clears the current input value.
         */
        "clearInput": () => Promise<void>;
        /**
          * **INTERNAL [do not use directly]**  Used by `market-filter-group` when setting this component to compact mode
         */
        "compact": boolean;
        /**
          * A boolean representing whether the input is disabled or not; this visually and functionally will disable the input.
         */
        "disabled": boolean;
        /**
          * A boolean representing whether the input is focused or not
         */
        "focused": boolean;
        /**
          * A string representing the input's aria-label; localize as needed
         */
        "inputAriaLabel": string;
        /**
          * A number specifying the maximum length of characters for the input value
         */
        "maxlength": number;
        /**
          * A string specifying a name for the search input
         */
        "name": string;
        /**
          * A string specifying the placeholder of the input; this is shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder": string;
        /**
          * A string representing the search icon button's aria-label; localize as needed
         */
        "searchIconButtonAriaLabel": string;
        /**
          * Sets focus styling on `<market-input-search>`; toggles focus on the native `<input>` depending on the value passed
          * @param value new `focused` value
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * A string specifying the size of the input
         */
        "size": 'small' | 'medium';
        /**
          * A string specifying a value for the input; this will be visually shown on the input and can be edited by the user.
         */
        "value": string;
        /**
          * @deprecated **DEPRECATED (v4.5.0)** Use `size` instead.  A string specifying the size of the input
         */
        "variant": 'small' | 'medium';
    }
    interface MarketInputText {
        /**
          * Whether or not this input should allow autocompletion by the browser Accepts a boolean, or "true", "false", "on", "off" or an [accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete": string | boolean;
        /**
          * Whether the input is displaying an initial autofill value. Used for styling to ensure the label floats up correctly.
         */
        "autofilled": boolean;
        /**
          * A boolean representing whether the input should focus on page load. If multiple elements with `autofocus` are present, it is not guaranteed which one will ultimately receive the focus. It is advised that only one at most is present.
         */
        "autofocus": boolean;
        /**
          * Whether or not to automatically style this input as invalid based on native input validation attributes: `min`, `max`, `pattern`, `required`, `maxlength`, `minlength`. See MDN articles on [form validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation) and [constraint validation](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation)
         */
        "autovalidate": boolean;
        /**
          * A boolean representing whether the input is disabled or not. This visually and functionally will disable the input.
         */
        "disabled": boolean;
        /**
          * A boolean representing whether the input is focused or not.
         */
        "focused": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A string specifying an ID for the input.
         */
        "inputId": string;
        /**
          * Allows a browser to display an appropriate virtual keyboard. [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).
         */
        "inputmode": string;
        /**
          * A boolean representing whether the input is invalid or not. This represents error states.
         */
        "invalid": boolean;
        /**
          * Specifies the maximum value for number and time inputs. See MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max)
         */
        "max": string;
        /**
          * A number specifying the maximum length of characters for the input value. See MDN on the [maxlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)
         */
        "maxlength": number;
        /**
          * Specifies the minimum value for number and time inputs. See MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min)
         */
        "min": string;
        /**
          * A number specifying the minimum length of characters for the input value. See MDN on the [minlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)
         */
        "minlength": number;
        /**
          * A string specifying a name for the input.
         */
        "name": string;
        /**
          * Specifies a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions) to validate the input's value against. See MDN on the [pattern attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern": string;
        /**
          * A string specifying the placeholder of the input. This is shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder": string;
        /**
          * A boolean representing whether the input is readonly or not.
         */
        "readonly": boolean;
        /**
          * Allows passing an alternative light DOM input.
         */
        "registerSlottedInput": (slottedInput?: HTMLInputElement) => Promise<void>;
        /**
          * Whether or not the input is required; used to validate the input's value. See MDN on the [required attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required)
         */
        "required": boolean;
        /**
          * Sets focus styling on `<market-input-text>`. Toggles focus on the inner `<input>` if true, and blurs focus if false.
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * String for setting input size. Sizes `small` and `medium` visually hide the label, but you should still provide one for accessibility purposes.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Specifies the increment step for number and time inputs. See MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step": string;
        /**
          * A string specifying the type of control to render. Any native HTML input type would work here.
         */
        "type": string;
        /**
          * A string specifying a value for the input. This will be visually shown on the input and can be edited by the user.
         */
        "value": string;
    }
    interface MarketLink {
        /**
          * Gives the link destructive styling.
         */
        "destructive": boolean;
        /**
          * Visually disables the link and prevents navigating to the link on click.
         */
        "disabled": boolean;
        /**
          * Causes the browser to treat the linked URL as a download. Only works for same-origin URLs. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download) for details on accepted values.
         */
        "download": string | undefined;
        /**
          * Links that exist within a larger block of text need to rely on more than color to meet accessibility standards.
         */
        "highlight": null | false | 'underline';
        /**
          * String that represents the URL the link goes to. If not present, the internal tag will be a `<button>` rather than `<a>` in order to align with a11y best practices.
         */
        "href": string;
        /**
          * Defines the relationship between a linked resource and the current document. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel) for details on accepted values.
         */
        "rel": string | undefined;
        /**
          * Specifies where to open the linked URL. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.
         */
        "target": '_blank' | '_self' | '_parent' | '_top' | undefined;
    }
    interface MarketList {
        /**
          * Filter strategy  - `"textcontent"` (default, case-insensitive): This strategy searches through each of the row’s `.textContent`. This means it would also search through a row’s subtext, accessories, and other slots. - `"label"` (case-insensitive): This strategy searches through the slotted `<label>` elements of rows. Note that if a `<label>` is not slotted in a row, this default filter strategy will not work. - `"value"` (case-sensitive): This strategy searches through the rows’ `value` attribute. Values are usually case-sensitive so they are treated the same way when searching for them. - `Function`: This strategy works similarly to `Array.prototype.filter()` where the function’s `boolean` output determines if the item will be kept or filtered out. For your convenience, you are provided with 5 parameters:   - `item`: `TMarketListItem`   - `label`: the `<label>`’s `.textContent`   - `query`: `value` of `<market-input-search>`   - `textContent`: the item’s `.textContent`   - `value`: `value` of the item
         */
        "filterStrategy": TMarketListFilterStrategyPropTypes;
        /**
          * Focuses the row at the given index.
          * @param index - The index of the row to focus.
          * @returns A promise that resolves when the row is focused.
         */
        "focusRowAtIndex": (index: number) => Promise<void>;
        /**
          * Whether a count of selectable items rendered within the control row will be hidden
         */
        "hideSelectableCount": boolean;
        /**
          * Whether or not the list is interactive. Results in list items receiving hover and active styling when hovered/clicked.<br>  _NOTE:_ Lists slotted into `market-popover`, or any of the components that use it internally such as `market-select`, `market-dropdown`, and `market-button-dropdown`, will automatically have their `interactive` property set to `true`.
         */
        "interactive": boolean;
        /**
          * Whether or not the list can allow for multiple selections (currently not reflected in the `value` prop)
         */
        "multiselect": boolean;
        /**
          * String value used for the `aria-labelledby` attribute.
         */
        "name": string;
        /**
          * When set to `framework`, the list will move the reordered row back to its original position before the `marketListItemsReordered` event is fired. This is useful when the list is rendered within a framework like Ember or React.
         */
        "reorderMode": 'default' | 'framework';
        /**
          * Whether the list is reorderable or not. Setting to `internal` enables reordering rows internally while `external` also allows dragging to & from other lists.
         */
        "reorderable": TMarketReorderableOptions;
        /**
          * When set to `true`, rows/cards will not persist selected state on click. Only takes effect when `interactive` is true.
         */
        "transient": boolean;
        /**
          * A string specifying a value for the list. To select multiple values, separate **unique** values with a comma (e.g. `'orange,pear'`). Setting to empty string (`''`) will clear all current selections.
         */
        "value": string | Array<any>;
    }
    interface MarketModalFull {
        /**
          * Activates the focus trap  See [`focus-trap.ts`](../../utils/focus-trap.ts) for default options
          * @param options [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)
          * @param activateOptions set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)
         */
        "activateFocusTrap": (options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>;
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration": number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration": number;
        /**
          * Deactivates the focus trap
          * @param deactivateOptions set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)
         */
        "deactivateFocusTrap": (deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal
         */
        "dialogID": string;
        /**
          * Emits the dismiss event The parent context will handle actually removing elements from the DOM, All the modal needs to do it emit an event so actually closing it can be some other elements problem
         */
        "dismiss": (dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>;
        /**
          * INTERNAL ONLY: Used in CSS to trigger start and stop animations
         */
        "hidden": boolean;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place in the stack
         */
        "index": number;
        /**
          * Sets the layout width for the main content area. Defaults to `regular`, which sets a a maximum content width of 600px. You can also use `wide` for a max 1248px content area, or `fluid` to have content fill the whole viewport.
         */
        "layout": 'regular' | 'wide' | 'fluid';
        /**
          * Enforces focus trapping on the modal
         */
        "trapFocus": boolean;
    }
    interface MarketModalPartial {
        /**
          * Activates the focus trap  See [`focus-trap.ts`](../../utils/focus-trap.ts) for default options
          * @param options [focus-trap create options](https://github.com/focus-trap/focus-trap#createoptions)
          * @param activateOptions set options for [onActivate, onPostActivate, and checkCanFocusTrap](https://github.com/focus-trap/focus-trap#trapactivate)
         */
        "activateFocusTrap": (options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>;
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration": number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration": number;
        /**
          * Deactivates the focus trap
          * @param deactivateOptions set options for [onDeactivate, onPostDeactivate, and checkCanReturnFocus](https://github.com/focus-trap/focus-trap#trapdeactivate)
         */
        "deactivateFocusTrap": (deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal
         */
        "dialogID": string;
        /**
          * Emits the dismiss event The parent context will handle actually removing elements from the DOM, All the modal needs to do it emit an event so actually closing it can be some other elements problem
         */
        "dismiss": (dismissOptions?: Partial<DialogDismissedEvent>) => Promise<void>;
        /**
          * INTERNAL ONLY: Used in CSS to trigger start and stop animations
         */
        "hidden": boolean;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place in the stack
         */
        "index": number;
        /**
          * Enforces focus trapping on the modal
         */
        "trapFocus": boolean;
    }
    interface MarketPagination {
        /**
          * The current page being viewed.
         */
        "currentPage": number;
        /**
          * Functionally and visually disables all navigation buttons
         */
        "disabled": boolean;
        /**
          * Allow the user to navigate to the next page
         */
        "hasNextPage": boolean;
        /**
          * Allow the user to navigate to the previous page
         */
        "hasPreviousPage": boolean;
        /**
          * The number of results displayed per page.
         */
        "pageSize": string;
        /**
          * Options for page sizes (comma separated list of numbers). If omitted, will not display the page size subcomponent.
         */
        "pageSizeOptions": string;
        /**
          * The total number of pages.
         */
        "totalPages": number;
    }
    interface MarketPaginationNav {
        /**
          * The current page being viewed.
         */
        "currentPage": number;
        /**
          * Functionally and visually disables the navigation buttons
         */
        "disabled": boolean;
        /**
          * Allow the user to navigate to the next page
         */
        "hasNextPage": boolean;
        /**
          * Allow the user to navigate to the previous page
         */
        "hasPreviousPage": boolean;
        /**
          * The number of results displayed per page. Required to emit this value as part of the navigation event.
         */
        "pageSize": string;
        /**
          * The total number of pages.
         */
        "totalPages": number;
    }
    interface MarketPaginationPageSize {
        /**
          * Functionally and visually disables dropdown
         */
        "disabled": boolean;
        /**
          * Options for page sizes (comma separated list).
         */
        "pageSizeOptions": string;
        /**
          * The number of results displayed per page.
         */
        "value": string;
    }
    interface MarketPill {
        /**
          * Controls whether the pill should display an indicator icon.
         */
        "indicator": boolean;
        /**
          * Controls whether the pill should react to hovers/clicks. It is recommended to only set this to true if you have also slotted an icon into the pill.
         */
        "interactive": boolean;
        /**
          * String for setting pill size
         */
        "size": 'medium' | 'small';
        /**
          * Sets the visual variant style for the pill.
         */
        "variant": MarketPillVariant;
    }
    interface MarketPopover {
    }
    interface MarketProgressTracker {
        /**
          * Whether the progress tracker is in compact mode  Only functional when `orientation` is set to `"horizontal"`
          * @default false
         */
        "compact": boolean;
        /**
          * Whether there are connectors displayed between steps
          * @default false
         */
        "connectorless": boolean;
        /**
          * Index of the current step of the tracker  When defined, the child `market-progress-tracker-step` components’ `active` and `completed` attributes will be automatically set.  Otherwise, it is expected that the steps’ `active` and `completed` properties are manually set.
          * @default undefined
         */
        "currentStepIndex": number;
        /**
          * Type of icon used to indicate the step’s progress
          * @default undefined
         */
        "indicator": 'circle' | 'check';
        /**
          * Whether this step tracker is interactive  Only functional when `orientation` is set to `"horizontal"`
          * @default false
         */
        "interactive": boolean;
        /**
          * Progress tracker orientation
          * @default 'vertical'
         */
        "orientation": 'horizontal' | 'vertical';
        /**
          * Whether the direction of the progress indicators is reversed
          * @default false
         */
        "reversed": boolean;
        /**
          * Steps’ size
          * @default 'medium'
         */
        "size": 'large' | 'medium' | 'small';
    }
    interface MarketProgressTrackerStep {
        /**
          * Whether the step is active
          * @default false
         */
        "active": boolean;
        /**
          * @default false
         */
        "compact": boolean;
        /**
          * Whether the step is completed
          * @default false
         */
        "completed": boolean;
        /**
          * @default undefined
         */
        "connector": 'active' | 'hidden' | 'inactive';
        /**
          * @default 'circle'
         */
        "indicator": 'circle' | 'check';
        /**
          * @default false
         */
        "interactive": boolean;
        /**
          * Unique name of the step  When this step is interactive and clicked, it is included in the detail of the emitted event.
          * @default undefined
         */
        "name": string;
        /**
          * @default 'vertical'
         */
        "orientation": 'vertical' | 'horizontal';
        /**
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface MarketQrcode {
        /**
          * Include a six data-pixel border around the QR code. When this attribute is present, the QR code will have a background color (default is transparent background).
         */
        "border": boolean;
        /**
          * The URL or other content of the QR code. The QR code is generated using [@square/qrcode-encoder](https://github.com/squareup/qrcode/blob/master/packages/square-qrcode-encoder/README.md).
         */
        "content": string;
        /**
          * When true, QR code will render all elements in black & white.
         */
        "monochrome": boolean;
        /**
          * By default, QR code size is dependent on the information being encoded. Use this property to set the QR code's height and width in pixels.
         */
        "size": number;
    }
    interface MarketRadio {
        /**
          * Whether the radio is active or not.
         */
        "active": boolean;
        /**
          * Whether the radio button is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the radio is focused or not.
         */
        "focused": boolean;
        /**
          * Whether the radio is hovered or not.
         */
        "hovered": boolean;
        /**
          * Whether the radio button is invalid.
         */
        "invalid": boolean;
        /**
          * Whether the radio button is selected (analogous to the HTML input attribute `checked`). If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.
         */
        "selected": boolean;
        /**
          * Sets `active` state. Allows external elements to programmatically trigger active styling, ex. when slotted as a control into `market-row`.
         */
        "setActive": (value: boolean) => Promise<void>;
        /**
          * Sets `disabled` state. Allows external elements to programmatically trigger disabled styling, ex. when slotted as a control into `market-row`.
         */
        "setDisabled": (value: boolean) => Promise<void>;
        /**
          * Sets `focused` state, except when disabled. Allows external consumers to programmatically trigger focused styling.
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * Sets `hovered` state. Allows external elements to programmatically trigger hover styling, ex. when slotted as a control into `market-row`.
         */
        "setHover": (value: boolean) => Promise<void>;
        /**
          * Toggles `selected` prop, and emits a change event accordingly. Used by `market-row` to sync its selected state w/ slotted radio buttons.
         */
        "setSelection": (newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>;
        /**
          * DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).
         */
        "setValue": (newValue: boolean) => Promise<void>;
    }
    interface MarketRow {
        /**
          * Whether the slotted control appears to the left or right of the main content.
         */
        "controlPosition": 'trailing' | 'leading';
        /**
          * @private Used for manually setting `selected` to false. Generally speaking, it is preferable to avoid using this method and allow `market-row` to manage its own selection state based on user interaction. It should only be used for parent components that need to manage a group of rows, such as `market-list`.
         */
        "deselect": () => Promise<void>;
        /**
          * Gives the row destructive styling.
         */
        "destructive": boolean;
        /**
          * Whether the row is disabled. Also disables slotted controls (`<market-checkbox>`, `<market-radio>`, or `<market-toggle>`), if present.
         */
        "disabled": boolean;
        /**
          * Whether the row is drag & drop enabled
         */
        "dragEnabled": boolean;
        /**
          * Whether the drag handle appears to the left or right.
         */
        "dragHandlePosition": 'leading' | 'trailing';
        /**
          * A link that this row should navigate to on click. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * Whether or not the row is interactive. Results in rows receiving hover and active styling when hovered/clicked.  Automatically set to `true` when using the drill variant or passing in a slotted control (checkbox/radio/toggle).<br>  Automatically be set to reflect the list's `interactive` value if used inside of `<market-list>`.
         */
        "interactive": boolean;
        /**
          * @private Used for manually setting `selected` to true. Generally speaking, it is preferable to avoid using this method and allow `market-row` to manage its own selection state based on user interaction. It should only be used for parent components that need to manage a group of rows, such as `market-list`.
         */
        "select": () => Promise<void>;
        /**
          * Whether the row is currently selected. Used by `<market-list>` and `<market-select>`. Also sets the selection state for slotted controls (`<market-checkbox>`, `<market-radio>`, or `<market-toggle>`), if present.
         */
        "selected": boolean;
        /**
          * @private Used for setting the selection state to false without emiting the `marketRowDeselected` event.
         */
        "silentlyDeselect": () => Promise<void>;
        /**
          * @private Used for setting the selection state to true without emiting the `marketRowSelected` event.
         */
        "silentlySelect": () => Promise<void>;
        /**
          * Determines the form factor of the row.
         */
        "size": 'small' | 'medium';
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.
         */
        "target": '_blank' | '_self' | '_parent' | '_top' | undefined;
        /**
          * By default, row selection is toggled on click. There are some cases, such as selects, where we instead want the row to stay active on subsequent clicks. Setting `togglable` to `false` enables this behavior. Can be set by `<market-list>` and `<market-select>`.
         */
        "togglable": boolean;
        /**
          * @private Used for toggling the row's selected state.
         */
        "toggle": () => Promise<void>;
        /**
          * When set to `true`, rows will not persist selected state on click. Only takes effect when `interactive` is true.
         */
        "transient": boolean;
        /**
          * The value for the row.
         */
        "value": string;
        /**
          * The style of row you want to use. The default is "regular", which allows you to optionally slot a checkbox, radio, or (in the future) toggle control. The other option is "drill", which functions more like a link that you can use to drill through a series of action card sets.
         */
        "variant": 'regular' | 'drill';
    }
    interface MarketSegment {
        /**
          * Whether the market segment should appear in a disabled state.
         */
        "disabled": boolean;
        "selectSegment": () => Promise<void>;
        "setSelectedState": (state: any) => Promise<void>;
        /**
          * A string specifying a value for the segment.
         */
        "value": string;
    }
    interface MarketSegmentedControl {
        /**
          * A boolean representing whether the market-segmented-control is disabled or not. This visually and functionally will disable the control area.
         */
        "disabled": boolean;
        /**
          * A string specifying a value for the segmented-control. This value determines which segment is selected based on the segment value.
         */
        "value": string;
    }
    interface MarketSelect {
        /**
          * Closes the select.
         */
        "closeList": () => Promise<void>;
        /**
          * Functionally and visually disables the select.
         */
        "disabled": boolean;
        /**
          * Whether or not the select is focused.
         */
        "focused": boolean;
        /**
          * Whether or not the select is invalid (w/ corresponding visual state)
         */
        "invalid": boolean;
        /**
          * Whether or not multiselect is enabled
         */
        "multiselect": boolean;
        /**
          * String for the "name" attribute. Used when slotted into `market-field`.
         */
        "name": string;
        /**
          * Opens the select.
         */
        "openList": () => Promise<void>;
        /**
          * A string specifying the placeholder for the select. This is shown when the select is open with no selection.
         */
        "placeholder": string;
        /**
          * Ancestor selector to contain the popover menu. Use this if you need the popover to be appended to an ancestor element other than the `body` element.
         */
        "popoverContainer": string;
        /**
          * Configuration option for Floating UI (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://floating-ui.com/docs/computePosition#strategy
         */
        "popoverStrategy": Strategy;
        /**
          * Whether or not the select is readonly.
         */
        "readonly": boolean;
        /**
          * Whether or not the select is required. This property relays important contextual information when using a screen reader
         */
        "required": boolean;
        /**
          * String for setting select size. Sizes `small` and `medium` visually hide the label, but you should still provide one for accessibility purposes.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Toggles the select open and closed.
         */
        "toggleList": () => Promise<void>;
        /**
          * A string specifying a value for the select Must correspond to a `value` attribute on a slotted `market-row` For multiselect, separate values with a comma (e.g. 'orange,pear').
         */
        "value": string | Array<any>;
    }
    interface MarketSheet {
        /**
          * Activates the focus trap
          * @param options [focus-trap `.createFocusTrap` options](https://github.com/focus-trap/focus-trap#createoptions)
          * @param activateOptions [focus-trap `.activate` options](https://github.com/focus-trap/focus-trap#trapactivate)
         */
        "activateFocusTrap": (options?: FocusTrapOptions, activateOptions?: FocusTrapActivateOptions) => Promise<void>;
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration": number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration": number;
        /**
          * Translated string to label Close handle
         */
        "closeHandleAriaLabel": string;
        /**
          * Deactivates the focus trap
          * @param deactivateOptions [focus-trap `.deactivate` options](https://github.com/focus-trap/focus-trap#trapdeactivate)
         */
        "deactivateFocusTrap": (deactivateOptions?: FocusTrapDeactivateOptions) => Promise<void>;
        "dialogID": string;
        /**
          * Disable focus trapping on the modal
         */
        "disableFocus": boolean;
        /**
          * Emits the dismiss event The parent context will handle actually removing elements from the DOM, All the sheet needs to do it emit an event so actually closing it can be some other elements problem
         */
        "dismiss": (options?: any) => Promise<void>;
        "hidden": boolean;
        /**
          * Default state sheet opens to when opened from close
         */
        "openMode": 'full' | 'dynamic' | 'partial';
    }
    interface MarketStepper {
        /**
          * The decrement button's aria-label. Localize as needed.
         */
        "decrementAriaLabel": string;
        /**
          * Whether the input is disabled or not. This visually and functionally disables the input.
         */
        "disabled": boolean;
        /**
          * Whether the input is focused or not.
         */
        "focused": boolean;
        /**
          * The increment button's aria-label. Localize as needed.
         */
        "incrementAriaLabel": string;
        /**
          * The inner input's aria-label. Localize as needed.
         */
        "inputAriaLabel": string;
        /**
          * The ID for the inner input.
         */
        "inputId": string;
        /**
          * Whether the input is invalid or not. This represents error states.
         */
        "invalid": boolean;
        /**
          * A number specifying the greatest value in the range of permitted values. (See MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max))
         */
        "max": number;
        /**
          * A number specifying the most negative value in the range of permitted values. (See MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min))
         */
        "min": number;
        /**
          * The name for the inner input.
         */
        "name": string;
        /**
          * The placeholder of the input. Shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder": string;
        /**
          * Whether the input is readonly or not.
         */
        "readonly": boolean;
        /**
          * Toggle focus styling on `<market-stepper>` and focus/blur the inner `<input />`.
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * A positive number specifying the increment step. (See MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step))
         */
        "step": number;
        /**
          * The value for the input. This is visually shown on the input and can be edited by the user.
         */
        "value": number;
    }
    interface MarketTab {
        /**
          * Deselects the tab and emits a `marketTabSelectedChanged` event
         */
        "deselect": () => Promise<void>;
        /**
          * Whether or not the tab is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Select the tab and emits a `marketTabSelectedChanged` event
         */
        "select": () => Promise<void>;
        /**
          * Whether or not the tab is selected
          * @default false
         */
        "selected": boolean;
        /**
          * Tab's size
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface MarketTabList {
        /**
          * String for the default selected tab (i.e. `market-tab`'s `id` attribute)  Only used when the component initially loads
          * @default undefined
         */
        "defaultTab"?: string;
        /**
          * String for the selected tab (i.e. `market-tab`'s `id` attribute)  Omitting or setting to empty string will default to the first non-disabled tab
          * @default undefined
         */
        "selectedTab"?: string;
        /**
          * Tabs' size
          * @default undefined
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface MarketTabPanel {
        /**
          * Whether or not the panel is hidden
         */
        "hidden": boolean;
    }
    interface MarketTable {
    }
    interface MarketTableArea {
        /**
          * Whether or not this table area is currently visible/has any rows or cells within
         */
        "active": boolean;
        /**
          * Set by the parent market-table or market-row component to determine CSS grid template
         */
        "gridTemplate": Array<string>;
        /**
          * Whether or not this area is grouping columns (vertical) or rows (horizontal)
         */
        "orientation": 'horizontal' | 'vertical';
        /**
          * Sets the element's grid-column CSS property to determine where this particular element falls on the parent grid. Used in vertical orientation table areas
         */
        "placement": Array<number>;
        /**
          * Sticks this area to an edge of the table
         */
        "stickTo": 'top' | 'bottom' | 'left' | 'right';
    }
    interface MarketTableCell {
        /**
          * **INTERNAL [do not use directly]** Moves this column into a slot inside the market-table-area which is fixed to the provided edge (position), allowing for fixed columns
         */
        "_stickSelf": (position: 'left' | 'right') => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Moves this column back into it's original slot from a slot within a fixed market-table-area
         */
        "_unstickSelf": () => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Forwards appropriate properties from matching header market-table-column element to this cell.
         */
        "_updateColumnRelatedProperties": (column: HTMLMarketTableColumnElement) => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Sets properties specified in the row element. Leading and trailing accessories are best set on the first or last cell to not mess with the grid structure
          * @param rowEl
         */
        "_updateFirstCellProperties": (rowEl: HTMLMarketTableRowElement) => Promise<void>;
        /**
          * Whether the cell is currently active.
         */
        "active": boolean;
        /**
          * Content/text alignment for this cell, default is set based on the alignment of the market-table-column with matching column/name prop  **NOTE:** this is set automatically when used in a `market-table` with a corresponding `market-table-column`.
         */
        "align": false | 'left' | 'right';
        /**
          * A key that matches the 'name' prop on the appropriate market-table-column  **NOTE:** this is set automatically when used in a `market-table` with a corresponding `market-table-column`.
         */
        "column": string;
        /**
          * Whether the cell is disabled.
         */
        "disabled": boolean;
        /**
          * Whether or not the cell is interactive. Results in cell receiving hover and active styling when hovered/clicked.
         */
        "interactive": boolean;
        /**
          * Determines how much to indent the cell by. This will be multiplied by the default indentation size (40px) for uniform indentation levels  **NOTE:** this is inherited automatically if set on the parent `market-table-row`.
         */
        "leadingIndentation": number;
    }
    interface MarketTableColumn {
        /**
          * **INTERNAL [do not use directly]** Moves this column into a slot inside the market-table-area which is fixed to the provided edge (position), allowing for fixed columns
         */
        "_stickSelf": (position: 'left' | 'right') => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Moves this column back into it's original slot from a slot within a fixed market-table-area
         */
        "_unstickSelf": () => Promise<void>;
        /**
          * Will set the `align` property on all related cells to this value
         */
        "align": false | 'left' | 'right';
        /**
          * Hides the column and all related cells.
         */
        "hidden": boolean;
        /**
          * **INTERNAL [do not use directly]** The order of this market-table-column in the DOM
         */
        "index": number;
        /**
          * **REQUIRED:** A unique key for this column, used to map all related cells together
         */
        "name": string;
        /**
          * What order the column is sorting in; ascending points up and descending points down If the column is sortable and this prop is not present, the sort icon points up but is grayed out.
         */
        "sortOrder": 'ascending' | 'descending';
        /**
          * Whether or not this column is sortable
         */
        "sortable": boolean;
        /**
          * Fixes this column to the provided table edge (position)
         */
        "stick": (position?: 'left' | 'right') => Promise<void>;
        /**
          * Makes this column stick to an edge of the table
         */
        "stickTo": 'left' | 'right';
        /**
          * Un-fixes this column from any table edge
         */
        "unstick": (position?: 'left' | 'right') => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Set by the parent table element, based on it's grid-template-columns CSS value
         */
        "width": string;
    }
    interface MarketTableRow {
        /**
          * **INTERNAL [do not use directly]** Sets properties computed or specified on the row on the first cell to keep the table rows from shifting
         */
        "_setFirstCellProperties": () => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Used by the parent table to support fixing columns to either side of the table
         */
        "_stickColumn": (column: string, position: 'left' | 'right') => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Sets the hidden prop on market-table-cell. Used by market-table to allow market-table-column to control the hidden/visible state of its associated table cells.
         */
        "_syncColumnVisibilityWithCells": (columnName: any, hidden: any) => Promise<void>;
        /**
          * **INTERNAL [do not use directly]** Used by the parent table to support fixing columns to either side of the table
         */
        "_unstickColumn": (column: string) => Promise<void>;
        /**
          * Whether the row is currently active.
         */
        "active": boolean;
        /**
          * **INTERNAL [do not use directly]** This row's slotted market-table-cell elements
         */
        "cells": NodeListOf<TCell>;
        /**
          * Whether the row is disabled.
         */
        "disabled": boolean;
        /**
          * **INTERNAL [do not use directly]** Used to set aria-expanded on the nested button for animation
         */
        "expanded": boolean;
        /**
          * Gives this row footer styling
         */
        "footer": boolean;
        /**
          * **INTERNAL [do not use directly]** Used to set the CSS grid template for the fixed left column group (market-table-area) in the row. Set by the parent table element
         */
        "gridTemplateLeft": Array<string>;
        /**
          * **INTERNAL [do not use directly]** Used to set the CSS grid template for the main column group (market-table-area) in the row. Set by the parent table element
         */
        "gridTemplateMain": Array<string>;
        /**
          * **INTERNAL [do not use directly]** Used to set the CSS grid template for the fixed right column group (market-table-area) in the row. Set by the parent table element
         */
        "gridTemplateRight": Array<string>;
        /**
          * Gives this row header styling
         */
        "header": boolean;
        /**
          * **INTERNAL [do not use directly]** The order of this row in the DOM
         */
        "index": number;
        /**
          * Whether or not the row is interactive. Results in row receiving hover and active styling when hovered/clicked.
         */
        "interactive": boolean;
        /**
          * Optional: Level of leading indentation This will be multiplied by the default indentation size (40px) for uniform indentation levels
         */
        "leadingIndentation": number;
        /**
          * Used to determine if the table has accordion rows. When true, it will add extra spacing at the beginning of the row. This will keep the row's contents aligned with the accordion rows. This is set from the market-table component.  This property can be overriden when the content does not need the extra accordion spacing.
         */
        "nested": boolean;
        /**
          * The slot this row was originally placed in
         */
        "originalSlot": string;
        /**
          * Whether the row is selected. Used by control element.
         */
        "selected": boolean;
        /**
          * Sets the leadingIndentation
          * @param leadingIndentation
         */
        "setLeadingIndentation": (leadingIndentation: number) => Promise<void>;
        /**
          * Sticks this row to the provided edge (position) of the table
         */
        "stick": (position?: 'top' | 'bottom') => Promise<void>;
        /**
          * Optional: The edge of the table to fix this row to.
         */
        "stickTo": false | 'top' | 'bottom';
        /**
          * Optional: When present, can be used instead of `stickTo` in combination with `header` or `footer` to determine the edge of the table to stick this row to. (`header` elements with `[sticky]` will be attached to the top, and `footer` elements to the bottom)
         */
        "sticky": boolean;
        /**
          * **INTERNAL [do not use directly]** A list of the market-table-column elements, set from the parent table so we can assign this row's cells some properties based on the columns
         */
        "tableColumns": Array<HTMLMarketTableColumnElement>;
        /**
          * Sets expanded property and emits nested row toggle event
         */
        "toggleNestedRow": () => Promise<void>;
        /**
          * Unsticks this row from any edge of the table
         */
        "unstick": () => Promise<void>;
    }
    interface MarketTableV2 {
        /**
          * Sets the horizontal alignment. Table alignment will be inherited by descendant rows & cells.
         */
        "align": 'left' | 'center' | 'right';
        /**
          * Whether the slotted table groups are collapsible.
         */
        "collapsible": boolean;
        /**
          * Sets the `table-layout` algorithm. By default, the column widths are adjusted to fit the content. If column widths are explicitly sized, use `fixed` to speed up render time. See [table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) for more information.
         */
        "layout": 'auto' | 'fixed';
        /**
          * When set to `framework`, the table will move the reordered item back to its original position before the `marketTableV2RowsReordered` event is fired. This is useful when the table is rendered within a framework like Ember or React.
         */
        "reorderMode": 'default' | 'framework';
        /**
          * Whether the table is reorderable or not. Setting to `internal` enables reordering table rows internally while `external` also allows dragging to & from other tables.
         */
        "reorderable": TMarketReorderableOptions;
        /**
          * Whether the table is selected. Relevant if the table has rows with a slotted controls.
         */
        "selected": TMarketTableV2Selection;
        "setSelected": (selected: TMarketTableV2Selection, { silent }?: { silent?: boolean; }) => Promise<void>;
        /**
          * Sets the vertical alignment. Table alignment will be inherited by descendant rows & cells.
         */
        "valign": 'bottom' | 'middle' | 'top';
    }
    interface MarketTableV2Cell {
        /**
          * Whether the cell is currently active.
         */
        "active": boolean;
        /**
          * Sets the horizontal alignment. When not set, alignment is inherited from an ancestor row or table.
         */
        "align": 'left' | 'center' | 'right';
        /**
          * Displays a leading clickable caret; intended to be used in conjunction with `<market-table-v2-group>` to support nested rows.
         */
        "caret": 'up' | 'down';
        /**
          * Translated label for the expand action when group is currently collapsed (for screen reader users)
         */
        "caretAriaLabelCollapsed": string;
        /**
          * Translated label for the collapse action when group is currently expanded (for screen reader users)
         */
        "caretAriaLabelExpanded": string;
        /**
          * Whether the cell is currently disabled.
         */
        "disabled": boolean;
        /**
          * Indentation level
         */
        "indent": number;
        /**
          * Whether the cell is interactive, which results in hover, focus, & pressed styles.
         */
        "interactive": boolean;
        /**
          * Set this to `true` to force cell text onto one line. May cause horizontal scrolling in the ancestor table.
         */
        "nowrap": boolean;
        /**
          * Whether the cell is selected. Relevant if the cell has a slotted control.
         */
        "selected": TMarketTableV2Selection;
        "setSelected": (selected: TMarketTableV2Selection, { silent }?: { silent?: boolean; }) => Promise<void>;
        /**
          * Translated label for the icon indicating an ascending sort (for screen reader users)
         */
        "sortAriaLabelAscending": string;
        /**
          * Translated label for the icon indicating a descending sort (for screen reader users)
         */
        "sortAriaLabelDescending": string;
        /**
          * Translated label for the icon indicating no sort applied (for screen reader users)
         */
        "sortAriaLabelNone": string;
        /**
          * When `sortable` is `true`, this prop sets the `aria-sort` attribute and displays an arrow in the correct sort direction.
         */
        "sortOrder": TMarketTableV2SortOrder;
        /**
          * When `sortable` is `true`, this prop specifies the sorting strategy. - `'string'`: sorts rows alphabetically (case-insensitive) by the text content of the cell (default) - `'number'`: sorts rows numerically using [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) to parse the cell content - `'datetime'`: sorts rows chronologically using [date-fns `parse()`](https://date-fns.org/v3.3.1/docs/parse) method to parse the cell content. This strategy requires specifying a format in the cell's `sortStrategyFormat` prop; see accepted formats [here](https://date-fns.org/v3.3.1/docs/parse) - `Function`: a custom callback function to compare rows, similar to the `compareFn` in [`Array.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort). The following arguments are provided to the function:   - `rowA`: the first row for comparison   - `rowB`: the second row for comparison   - `order`: the direction of the sort, either `ascending` or `descending`   - `index`: the index of the column being sorted on    The callback function should return a number whose sign indicates the relative order of the two elements:   - negative if `rowA` is less than `rowB`   - positive if `rowA` is greater than `rowB`   - zero if `rowA` & `rowB` are equal
         */
        "sortStrategy": TMarketTableV2SortStrategy;
        /**
          * When setting `sortStrategy` to `"datetime"`, this prop is required to specify the format. See accepted formats [here](https://date-fns.org/v3.3.1/docs/parse)
         */
        "sortStrategyFormat": string;
        /**
          * When the cell is in a table header row, this prop enables sorting by this cell's column.
         */
        "sortable": boolean;
        /**
          * Makes a cell "stick" to the left or right of its parent row. Requires the row to be sized wider than the table to enable horizontal scrolling.
         */
        "sticky": 'left' | 'right';
        /**
          * Sets the vertical alignment. When not set, alignment is inherited from an ancestor row or table.
         */
        "valign": 'bottom' | 'middle' | 'top';
    }
    interface MarketTableV2Group {
        /**
          * Whether the group is expanded or collapsed, when `collapsible` is `true`.
         */
        "collapsed": boolean;
        /**
          * Whether the group is collapsible.
         */
        "collapsible": boolean;
        /**
          * Whether the group is drag & drop enabled.
         */
        "dragEnabled": boolean;
        /**
          * Indentation level
         */
        "indent": number;
        /**
          * When set to `framework`, the group will move the reordered item back to its original position before the `marketTableV2RowsReordered` event is fired. This is useful when the table is rendered within a framework like Ember or React.
         */
        "reorderMode": 'default' | 'framework';
        /**
          * Whether the group is reorderable or not. Setting to `internal` enables reordering table rows internally while `external` also allows dragging to & from other tables.
         */
        "reorderable": TMarketReorderableOptions;
        /**
          * Whether the group is selected. Relevant if the group has rows with slotted controls.
         */
        "selected": TMarketTableV2Selection;
        "setCollapsed": (collapsed: boolean, { silent }?: { silent?: boolean; }) => Promise<void>;
        "setSelected": (selected: TMarketTableV2Selection, { silent }?: { silent?: boolean; }) => Promise<void>;
        "sort": ({ order, column, strategy, format, }: { order: TMarketTableV2SortOrder; column: number; strategy: TMarketTableV2SortStrategy; format: string; }) => Promise<void>;
    }
    interface MarketTableV2Row {
        /**
          * Whether the row is currently active.
         */
        "active": boolean;
        /**
          * Sets the horizontal alignment. When not set, alignment is inherited from an ancestor table. Likewise, row alignment will be inherited by descendant cells.
         */
        "align": 'left' | 'center' | 'right';
        /**
          * Displays a leading clickable caret in the first cell; intended to be used in conjunction with `<market-table-v2-group>` to support nested rows.
         */
        "caret": 'up' | 'down';
        /**
          * Whether the row is currently disabled.
         */
        "disabled": boolean;
        /**
          * Whether the row is drag & drop enabled.
         */
        "dragEnabled": boolean;
        /**
          * Whether the drag handle appears to the left or right.
         */
        "dragHandlePosition": 'leading' | 'trailing';
        /**
          * Whether the drag handle appears always or only on hover
         */
        "dragHandleVisibility": 'always' | 'hover';
        /**
          * Styles a row with footer styles.
         */
        "footer": boolean;
        /**
          * Styles a row with header styles.
         */
        "header": boolean;
        /**
          * Indentation level of the first cell in the row.
         */
        "indent": number;
        /**
          * Whether the row is interactive, which results in hover, focus, & pressed styles.
         */
        "interactive": boolean;
        /**
          * Whether the row is selected. Relevant if the row's first cell has a slotted control.
         */
        "selected": TMarketTableV2Selection;
        /**
          * Sets selection on the row and propagates the value downwards to the slotted control in its first cell and upwards to any parent groups or tables.
         */
        "setSelected": (selected: TMarketTableV2Selection, { silent }?: { silent?: boolean; }) => Promise<void>;
        /**
          * Makes a row "stick" to the top or bottom of its parent table. Requires an explict height on the table to enable vertical scrolling.
         */
        "sticky": 'top' | 'bottom';
        /**
          * Sets the vertical alignment. When not set, alignment is inherited from an ancestor table. Likewise, row alignment will be inherited by descendant cells.
         */
        "valign": 'bottom' | 'middle' | 'top';
    }
    interface MarketTabs {
        /**
          * String for the default selected tab (i.e. `market-tab`'s `id` attribute)  Only used when the component initially loads
          * @default undefined
         */
        "defaultTab"?: string;
        /**
          * String for the selected tab (i.e. `market-tab`'s `id` attribute)  Omitting or setting to empty string will default to the first non-disabled tab
          * @default undefined
         */
        "selectedTab"?: string;
    }
    interface MarketTag {
        /**
          * Functionally and visually disables the tag
         */
        "disabled": boolean;
        /**
          * Whether or not the tag is in a focused state
         */
        "focused": boolean;
        /**
          * String for setting tag size
         */
        "size": 'medium' | 'small';
    }
    interface MarketTextarea {
        /**
          * A boolean representing whether the input should focus on page load. If multiple elements with `autofocus` are present, it is not guaranteed which one will ultimately receive the focus. It is advised that only one at most is present.
         */
        "autofocus": boolean;
        /**
          * A boolean representing whether the textarea is disabled or not. This visually and functionally will disable the textarea.
         */
        "disabled": boolean;
        /**
          * A boolean representing whether the textarea is focused or not.
         */
        "focused": boolean;
        /**
          * Allows a browser to display an appropriate virtual keyboard. [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).
         */
        "inputmode": string;
        /**
          * A boolean representing whether the textarea is invalid or not. This represents error states.
         */
        "invalid": boolean;
        /**
          * A string specifying the maximum height in pixels for the textarea. Vertical resizing will be limited to this height. Example value: '200px'.  **DEPRECATED**: set `max-height` via CSS
          * @default '320px'
         */
        "maxHeight": string;
        /**
          * A string specifying the maximum length of characters for the input value.
         */
        "maxlength": string;
        /**
          * A string specifying a name for the textarea.
         */
        "name": string;
        /**
          * A string specifying the placeholder of the textarea. This is shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder": string;
        /**
          * A boolean representing whether the textarea is readonly or not.
         */
        "readonly": boolean;
        /**
          * Allows passing an alternative light DOM textarea. Sets the this.slottedTextarea value to undefined if there is no slotted element.
         */
        "registerSlottedTextarea": (slottedTextarea?: HTMLTextAreaElement) => Promise<void>;
        /**
          * A string specifying a value for the textarea. This will be visually shown on the textarea and can be edited by the user.
         */
        "value": string;
    }
    interface MarketTile {
        /**
          * Whether to disable the tile.
         */
        "disabled": boolean;
        /**
          * Enables interactivity.
         */
        "interactive": boolean;
        /**
          * Whether the tile is currently selected
         */
        "selected": boolean;
        /**
          * Allows external elements to set selected value.
         */
        "setSelected": (newValue: boolean) => Promise<void>;
        /**
          * Whether to render the markup in the action slot.
         */
        "showActions": boolean;
        /**
          * What size tile to render.
         */
        "size": 'small' | 'medium';
        /**
          * Value for the tile.
         */
        "value": string;
    }
    interface MarketToast {
        /**
          * Optional property to pass a string to the dismiss "x" that will function as its aria-label. Defaults to "Dismiss".
         */
        "dismissButtonAriaLabel": string;
        /**
          * Whether or not the toast persists, ie does not autodismiss after 5s
         */
        "persistent": boolean;
        /**
          * The progress of the action, progress bar will be rendered for values between 0-100 inclusive
         */
        "progress": number;
        /**
          * Set toast to disappear after the autodismiss timeout has passed
         */
        "startAutoDismissTimer": () => Promise<void>;
        /**
          * toast variant that corresponds to the type of info it is conveying
         */
        "variant": 'info' | 'success' | 'warning' | 'critical' | 'insight';
    }
    interface MarketToaster {
        /**
          * Remove the passed toastEl from market-toaster
         */
        "hide": (toastEl: any) => Promise<void>;
        /**
          * Remove all market-toasts from market-toaster
         */
        "removeAll": () => Promise<void[]>;
        /**
          * Add the passed toastEl to market-toaster and make it visible
         */
        "show": (toastEl: any) => Promise<void>;
    }
    interface MarketToggle {
        /**
          * Whether the toggle is active or not.
         */
        "active": boolean;
        /**
          * Whether the toggle is checked or not. If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.
         */
        "checked": boolean;
        /**
          * Whether the toggle is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the toggle is focused or not.
         */
        "focused": boolean;
        /**
          * Whether the toggle is hovered or not.
         */
        "hovered": boolean;
        /**
          * Sets `active` state. Allows external elements to programmatically trigger active styling, ex. when slotted as a control into `market-row`.
         */
        "setActive": (value: boolean) => Promise<void>;
        /**
          * Sets `disabled` state. Allows external elements to programmatically trigger disabled styling, ex. when slotted as a control into `market-row`.
         */
        "setDisabled": (value: boolean) => Promise<void>;
        /**
          * Sets `focused` state, except when disabled. Allows external consumers to programmatically trigger focused styling.
         */
        "setFocus": (value?: boolean) => Promise<void>;
        /**
          * Sets `hovered` state. Allows external elements to programmatically trigger hover styling, ex. when slotted as a control into `market-row`.
         */
        "setHover": (value: boolean) => Promise<void>;
        /**
          * Toggles `checked` prop, and emits a change event accordingly. Used by `market-row` to sync its selected state w/ slotted toggles.
         */
        "setSelection": (newValue: boolean, { silent }?: { silent?: boolean; }) => Promise<void>;
        /**
          * DEPRECATED (3.x): Toggles `selected` state (unrelated to the HTML attribute `value`).
         */
        "setValue": (newValue: boolean) => Promise<void>;
    }
    interface MarketTooltip {
        /**
          * Closes the tooltip
         */
        "closeTooltip": () => Promise<void>;
        /**
          * Functionally and visually disables the tooltip trigger.
         */
        "disabled": boolean;
        /**
          * Whether or not the tooltip is open. Setting it to true means it will be open by default
         */
        "expanded": boolean;
        /**
          * Defines what types of interaction the tooltip should have (see `market-dropdown` docs for more granular explanation)
         */
        "interaction": 'click' | 'hover' | 'persistent' | 'none';
        /**
          * Opens the tooltip
         */
        "openTooltip": () => Promise<void>;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Displaces the popper away from, or toward, the reference element in the direction of its placement. https://popper.js.org/docs/v2/modifiers/offset/#distance-1
         */
        "popoverDistance": number;
        /**
          * Configuration option for Popper.js (used to position the tooltip overlay). Describes the preferred placement of the popper. https://popper.js.org/docs/v2/constructors//#placement
         */
        "popoverPlacement": Placement;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Displaces the popover along the reference element. https://popper.js.org/docs/v2/modifiers/offset/#skidding-1
         */
        "popoverSkidding": number;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy": PositioningStrategy;
    }
}
export interface MarketAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketAccordionItemElement;
}
export interface MarketActionCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketActionCardElement;
}
export interface MarketBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketBannerElement;
}
export interface MarketBladeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketBladeElement;
}
export interface MarketButtonDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketButtonDropdownElement;
}
export interface MarketCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketCheckboxElement;
}
export interface MarketChoiceButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketChoiceButtonElement;
}
export interface MarketCodeDisplayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketCodeDisplayElement;
}
export interface MarketCodeInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketCodeInputElement;
}
export interface MarketColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketColorPickerElement;
}
export interface MarketColorPickerGradientCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketColorPickerGradientElement;
}
export interface MarketColorPickerInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketColorPickerInputElement;
}
export interface MarketColorSwatchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketColorSwatchElement;
}
export interface MarketColorSwatchListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketColorSwatchListElement;
}
export interface MarketContextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketContextElement;
}
export interface MarketContextManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketContextManagerElement;
}
export interface MarketDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketDatePickerElement;
}
export interface MarketDatePickerDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketDatePickerDateElement;
}
export interface MarketDatePickerInputDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketDatePickerInputDateElement;
}
export interface MarketDatePickerMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketDatePickerMenuElement;
}
export interface MarketDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketDialogElement;
}
export interface MarketDragHandleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketDragHandleElement;
}
export interface MarketDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketDropdownElement;
}
export interface MarketFileUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketFileUploadElement;
}
export interface MarketFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketFilterElement;
}
export interface MarketHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketHeaderElement;
}
export interface MarketInputSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketInputSearchElement;
}
export interface MarketInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketInputTextElement;
}
export interface MarketListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketListElement;
}
export interface MarketModalFullCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketModalFullElement;
}
export interface MarketModalPartialCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketModalPartialElement;
}
export interface MarketPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketPaginationElement;
}
export interface MarketPaginationNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketPaginationNavElement;
}
export interface MarketPaginationPageSizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketPaginationPageSizeElement;
}
export interface MarketProgressTrackerStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketProgressTrackerStepElement;
}
export interface MarketRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketRadioElement;
}
export interface MarketRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketRowElement;
}
export interface MarketSegmentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketSegmentElement;
}
export interface MarketSegmentedControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketSegmentedControlElement;
}
export interface MarketSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketSelectElement;
}
export interface MarketSheetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketSheetElement;
}
export interface MarketStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketStepperElement;
}
export interface MarketTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTabElement;
}
export interface MarketTabListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTabListElement;
}
export interface MarketTableCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTableCellElement;
}
export interface MarketTableColumnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTableColumnElement;
}
export interface MarketTableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTableRowElement;
}
export interface MarketTableV2CustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTableV2Element;
}
export interface MarketTableV2CellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTableV2CellElement;
}
export interface MarketTableV2GroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTableV2GroupElement;
}
export interface MarketTableV2RowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTableV2RowElement;
}
export interface MarketTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTagElement;
}
export interface MarketTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTextareaElement;
}
export interface MarketTileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTileElement;
}
export interface MarketToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketToastElement;
}
export interface MarketToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketToggleElement;
}
export interface MarketTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMarketTooltipElement;
}
declare global {
    interface HTMLMarketAccessoryElement extends Components.MarketAccessory, HTMLStencilElement {
    }
    var HTMLMarketAccessoryElement: {
        prototype: HTMLMarketAccessoryElement;
        new (): HTMLMarketAccessoryElement;
    };
    interface HTMLMarketAccordionItemElementEventMap {
        "marketAccordionItemExpandedChange": { expanded: boolean };
    }
    interface HTMLMarketAccordionItemElement extends Components.MarketAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketAccordionItemElementEventMap>(type: K, listener: (this: HTMLMarketAccordionItemElement, ev: MarketAccordionItemCustomEvent<HTMLMarketAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketAccordionItemElementEventMap>(type: K, listener: (this: HTMLMarketAccordionItemElement, ev: MarketAccordionItemCustomEvent<HTMLMarketAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketAccordionItemElement: {
        prototype: HTMLMarketAccordionItemElement;
        new (): HTMLMarketAccordionItemElement;
    };
    interface HTMLMarketActionCardElementEventMap {
        "marketCardSelected": TMarketActionCardSelectedEventDetail;
        "marketCardDeselected": TMarketActionCardDeselectedEventDetail;
    }
    interface HTMLMarketActionCardElement extends Components.MarketActionCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketActionCardElementEventMap>(type: K, listener: (this: HTMLMarketActionCardElement, ev: MarketActionCardCustomEvent<HTMLMarketActionCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketActionCardElementEventMap>(type: K, listener: (this: HTMLMarketActionCardElement, ev: MarketActionCardCustomEvent<HTMLMarketActionCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketActionCardElement: {
        prototype: HTMLMarketActionCardElement;
        new (): HTMLMarketActionCardElement;
    };
    interface HTMLMarketActivityIndicatorElement extends Components.MarketActivityIndicator, HTMLStencilElement {
    }
    var HTMLMarketActivityIndicatorElement: {
        prototype: HTMLMarketActivityIndicatorElement;
        new (): HTMLMarketActivityIndicatorElement;
    };
    interface HTMLMarketActivityIndicatorBarElement extends Components.MarketActivityIndicatorBar, HTMLStencilElement {
    }
    var HTMLMarketActivityIndicatorBarElement: {
        prototype: HTMLMarketActivityIndicatorBarElement;
        new (): HTMLMarketActivityIndicatorBarElement;
    };
    interface HTMLMarketBannerElementEventMap {
        "marketBannerDismissed": any;
    }
    interface HTMLMarketBannerElement extends Components.MarketBanner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketBannerElementEventMap>(type: K, listener: (this: HTMLMarketBannerElement, ev: MarketBannerCustomEvent<HTMLMarketBannerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketBannerElementEventMap>(type: K, listener: (this: HTMLMarketBannerElement, ev: MarketBannerCustomEvent<HTMLMarketBannerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketBannerElement: {
        prototype: HTMLMarketBannerElement;
        new (): HTMLMarketBannerElement;
    };
    interface HTMLMarketBladeElementEventMap {
        "marketDialogLoaded": DialogLoadedEvent;
        "marketDialogDismissed": DialogDismissedEvent;
        "marketDialogDidDismiss": DialogDismissedEvent;
    }
    interface HTMLMarketBladeElement extends Components.MarketBlade, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketBladeElementEventMap>(type: K, listener: (this: HTMLMarketBladeElement, ev: MarketBladeCustomEvent<HTMLMarketBladeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketBladeElementEventMap>(type: K, listener: (this: HTMLMarketBladeElement, ev: MarketBladeCustomEvent<HTMLMarketBladeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketBladeElement: {
        prototype: HTMLMarketBladeElement;
        new (): HTMLMarketBladeElement;
    };
    interface HTMLMarketButtonElement extends Components.MarketButton, HTMLStencilElement {
    }
    var HTMLMarketButtonElement: {
        prototype: HTMLMarketButtonElement;
        new (): HTMLMarketButtonElement;
    };
    interface HTMLMarketButtonDropdownElementEventMap {
        "marketButtonDropdownOpened": any;
        "marketButtonDropdownClosed": any;
    }
    interface HTMLMarketButtonDropdownElement extends Components.MarketButtonDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketButtonDropdownElementEventMap>(type: K, listener: (this: HTMLMarketButtonDropdownElement, ev: MarketButtonDropdownCustomEvent<HTMLMarketButtonDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketButtonDropdownElementEventMap>(type: K, listener: (this: HTMLMarketButtonDropdownElement, ev: MarketButtonDropdownCustomEvent<HTMLMarketButtonDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketButtonDropdownElement: {
        prototype: HTMLMarketButtonDropdownElement;
        new (): HTMLMarketButtonDropdownElement;
    };
    interface HTMLMarketButtonGroupElement extends Components.MarketButtonGroup, HTMLStencilElement {
    }
    var HTMLMarketButtonGroupElement: {
        prototype: HTMLMarketButtonGroupElement;
        new (): HTMLMarketButtonGroupElement;
    };
    interface HTMLMarketCheckboxElementEventMap {
        "marketCheckboxValueChange": { current: boolean; previous: boolean };
    }
    interface HTMLMarketCheckboxElement extends Components.MarketCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketCheckboxElementEventMap>(type: K, listener: (this: HTMLMarketCheckboxElement, ev: MarketCheckboxCustomEvent<HTMLMarketCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketCheckboxElementEventMap>(type: K, listener: (this: HTMLMarketCheckboxElement, ev: MarketCheckboxCustomEvent<HTMLMarketCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketCheckboxElement: {
        prototype: HTMLMarketCheckboxElement;
        new (): HTMLMarketCheckboxElement;
    };
    interface HTMLMarketChoiceButtonElementEventMap {
        "marketChoiceButtonSelected": any;
        "marketChoiceButtonDeselected": any;
    }
    interface HTMLMarketChoiceButtonElement extends Components.MarketChoiceButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketChoiceButtonElementEventMap>(type: K, listener: (this: HTMLMarketChoiceButtonElement, ev: MarketChoiceButtonCustomEvent<HTMLMarketChoiceButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketChoiceButtonElementEventMap>(type: K, listener: (this: HTMLMarketChoiceButtonElement, ev: MarketChoiceButtonCustomEvent<HTMLMarketChoiceButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketChoiceButtonElement: {
        prototype: HTMLMarketChoiceButtonElement;
        new (): HTMLMarketChoiceButtonElement;
    };
    interface HTMLMarketCodeDisplayElementEventMap {
        "marketCodeCopied": any;
    }
    interface HTMLMarketCodeDisplayElement extends Components.MarketCodeDisplay, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketCodeDisplayElementEventMap>(type: K, listener: (this: HTMLMarketCodeDisplayElement, ev: MarketCodeDisplayCustomEvent<HTMLMarketCodeDisplayElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketCodeDisplayElementEventMap>(type: K, listener: (this: HTMLMarketCodeDisplayElement, ev: MarketCodeDisplayCustomEvent<HTMLMarketCodeDisplayElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketCodeDisplayElement: {
        prototype: HTMLMarketCodeDisplayElement;
        new (): HTMLMarketCodeDisplayElement;
    };
    interface HTMLMarketCodeInputElementEventMap {
        "marketCodeInputValueChange": { code: string };
    }
    interface HTMLMarketCodeInputElement extends Components.MarketCodeInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketCodeInputElementEventMap>(type: K, listener: (this: HTMLMarketCodeInputElement, ev: MarketCodeInputCustomEvent<HTMLMarketCodeInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketCodeInputElementEventMap>(type: K, listener: (this: HTMLMarketCodeInputElement, ev: MarketCodeInputCustomEvent<HTMLMarketCodeInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketCodeInputElement: {
        prototype: HTMLMarketCodeInputElement;
        new (): HTMLMarketCodeInputElement;
    };
    interface HTMLMarketColorPickerElementEventMap {
        "marketColorPickerValueChange": { value: string; prevValue: string };
    }
    interface HTMLMarketColorPickerElement extends Components.MarketColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketColorPickerElementEventMap>(type: K, listener: (this: HTMLMarketColorPickerElement, ev: MarketColorPickerCustomEvent<HTMLMarketColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketColorPickerElementEventMap>(type: K, listener: (this: HTMLMarketColorPickerElement, ev: MarketColorPickerCustomEvent<HTMLMarketColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketColorPickerElement: {
        prototype: HTMLMarketColorPickerElement;
        new (): HTMLMarketColorPickerElement;
    };
    interface HTMLMarketColorPickerGradientElementEventMap {
        "marketColorPickerGradientValueChange": { value: string };
    }
    interface HTMLMarketColorPickerGradientElement extends Components.MarketColorPickerGradient, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketColorPickerGradientElementEventMap>(type: K, listener: (this: HTMLMarketColorPickerGradientElement, ev: MarketColorPickerGradientCustomEvent<HTMLMarketColorPickerGradientElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketColorPickerGradientElementEventMap>(type: K, listener: (this: HTMLMarketColorPickerGradientElement, ev: MarketColorPickerGradientCustomEvent<HTMLMarketColorPickerGradientElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketColorPickerGradientElement: {
        prototype: HTMLMarketColorPickerGradientElement;
        new (): HTMLMarketColorPickerGradientElement;
    };
    interface HTMLMarketColorPickerInputElementEventMap {
        "marketColorPickerInputValueChange": { prevValue: string; value: string };
    }
    interface HTMLMarketColorPickerInputElement extends Components.MarketColorPickerInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketColorPickerInputElementEventMap>(type: K, listener: (this: HTMLMarketColorPickerInputElement, ev: MarketColorPickerInputCustomEvent<HTMLMarketColorPickerInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketColorPickerInputElementEventMap>(type: K, listener: (this: HTMLMarketColorPickerInputElement, ev: MarketColorPickerInputCustomEvent<HTMLMarketColorPickerInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketColorPickerInputElement: {
        prototype: HTMLMarketColorPickerInputElement;
        new (): HTMLMarketColorPickerInputElement;
    };
    interface HTMLMarketColorSwatchElementEventMap {
        "marketColorSwatchSelectedChange": { value: string; selected: boolean };
    }
    interface HTMLMarketColorSwatchElement extends Components.MarketColorSwatch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketColorSwatchElementEventMap>(type: K, listener: (this: HTMLMarketColorSwatchElement, ev: MarketColorSwatchCustomEvent<HTMLMarketColorSwatchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketColorSwatchElementEventMap>(type: K, listener: (this: HTMLMarketColorSwatchElement, ev: MarketColorSwatchCustomEvent<HTMLMarketColorSwatchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketColorSwatchElement: {
        prototype: HTMLMarketColorSwatchElement;
        new (): HTMLMarketColorSwatchElement;
    };
    interface HTMLMarketColorSwatchListElementEventMap {
        "marketColorSwatchListValueChange": { value: string; prevValue: string };
    }
    interface HTMLMarketColorSwatchListElement extends Components.MarketColorSwatchList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketColorSwatchListElementEventMap>(type: K, listener: (this: HTMLMarketColorSwatchListElement, ev: MarketColorSwatchListCustomEvent<HTMLMarketColorSwatchListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketColorSwatchListElementEventMap>(type: K, listener: (this: HTMLMarketColorSwatchListElement, ev: MarketColorSwatchListCustomEvent<HTMLMarketColorSwatchListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketColorSwatchListElement: {
        prototype: HTMLMarketColorSwatchListElement;
        new (): HTMLMarketColorSwatchListElement;
    };
    interface HTMLMarketContentCardElement extends Components.MarketContentCard, HTMLStencilElement {
    }
    var HTMLMarketContentCardElement: {
        prototype: HTMLMarketContentCardElement;
        new (): HTMLMarketContentCardElement;
    };
    interface HTMLMarketContextElementEventMap {
        "marketContextContentsChanged": {
    action: 'marketNewDialogOpened' | 'marketDialogClosed';
    currentDialog: Dialog;
    stack: Array<Dialog>;
  };
        "marketContextEmptied": any;
    }
    interface HTMLMarketContextElement extends Components.MarketContext, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketContextElementEventMap>(type: K, listener: (this: HTMLMarketContextElement, ev: MarketContextCustomEvent<HTMLMarketContextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketContextElementEventMap>(type: K, listener: (this: HTMLMarketContextElement, ev: MarketContextCustomEvent<HTMLMarketContextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketContextElement: {
        prototype: HTMLMarketContextElement;
        new (): HTMLMarketContextElement;
    };
    interface HTMLMarketContextManagerElementEventMap {
        "marketContextManagerActivated": any;
        "marketContextManagerDeactivated": any;
    }
    interface HTMLMarketContextManagerElement extends Components.MarketContextManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketContextManagerElementEventMap>(type: K, listener: (this: HTMLMarketContextManagerElement, ev: MarketContextManagerCustomEvent<HTMLMarketContextManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketContextManagerElementEventMap>(type: K, listener: (this: HTMLMarketContextManagerElement, ev: MarketContextManagerCustomEvent<HTMLMarketContextManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketContextManagerElement: {
        prototype: HTMLMarketContextManagerElement;
        new (): HTMLMarketContextManagerElement;
    };
    interface HTMLMarketDatePickerElementEventMap {
        "marketDateRangeChanged": TMarketDateRangeChangedEventDetail;
        "marketMenuSelectionChanged": TMarketDatePickerMenuSelectionChangedEventDetail;
    }
    interface HTMLMarketDatePickerElement extends Components.MarketDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketDatePickerElementEventMap>(type: K, listener: (this: HTMLMarketDatePickerElement, ev: MarketDatePickerCustomEvent<HTMLMarketDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketDatePickerElementEventMap>(type: K, listener: (this: HTMLMarketDatePickerElement, ev: MarketDatePickerCustomEvent<HTMLMarketDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketDatePickerElement: {
        prototype: HTMLMarketDatePickerElement;
        new (): HTMLMarketDatePickerElement;
    };
    interface HTMLMarketDatePickerDateElementEventMap {
        "marketDatePickerDateSelected": { date: HTMLMarketDatePickerDateElement };
        "marketDatePickerDateMousedOver": { date: HTMLMarketDatePickerDateElement };
        "marketDatePickerDateMousedOut": any;
    }
    interface HTMLMarketDatePickerDateElement extends Components.MarketDatePickerDate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketDatePickerDateElementEventMap>(type: K, listener: (this: HTMLMarketDatePickerDateElement, ev: MarketDatePickerDateCustomEvent<HTMLMarketDatePickerDateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketDatePickerDateElementEventMap>(type: K, listener: (this: HTMLMarketDatePickerDateElement, ev: MarketDatePickerDateCustomEvent<HTMLMarketDatePickerDateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketDatePickerDateElement: {
        prototype: HTMLMarketDatePickerDateElement;
        new (): HTMLMarketDatePickerDateElement;
    };
    interface HTMLMarketDatePickerInputDateElementEventMap {
        "marketDatePickerInputDateSet": { date: string; input: string };
        "marketDatePickerInputDateInvalidStateChanged": { invalid: boolean };
    }
    interface HTMLMarketDatePickerInputDateElement extends Components.MarketDatePickerInputDate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketDatePickerInputDateElementEventMap>(type: K, listener: (this: HTMLMarketDatePickerInputDateElement, ev: MarketDatePickerInputDateCustomEvent<HTMLMarketDatePickerInputDateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketDatePickerInputDateElementEventMap>(type: K, listener: (this: HTMLMarketDatePickerInputDateElement, ev: MarketDatePickerInputDateCustomEvent<HTMLMarketDatePickerInputDateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketDatePickerInputDateElement: {
        prototype: HTMLMarketDatePickerInputDateElement;
        new (): HTMLMarketDatePickerInputDateElement;
    };
    interface HTMLMarketDatePickerMenuElementEventMap {
        "marketDatePickerMenuSelectionChanged": TMarketDatePickerMenuSelectionChangedEventDetail;
    }
    interface HTMLMarketDatePickerMenuElement extends Components.MarketDatePickerMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketDatePickerMenuElementEventMap>(type: K, listener: (this: HTMLMarketDatePickerMenuElement, ev: MarketDatePickerMenuCustomEvent<HTMLMarketDatePickerMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketDatePickerMenuElementEventMap>(type: K, listener: (this: HTMLMarketDatePickerMenuElement, ev: MarketDatePickerMenuCustomEvent<HTMLMarketDatePickerMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketDatePickerMenuElement: {
        prototype: HTMLMarketDatePickerMenuElement;
        new (): HTMLMarketDatePickerMenuElement;
    };
    interface HTMLMarketDialogElementEventMap {
        "marketDialogLoaded": DialogLoadedEvent;
        "marketDialogDismissed": DialogDismissedEvent;
        "marketDialogDidDismiss": DialogDismissedEvent;
    }
    interface HTMLMarketDialogElement extends Components.MarketDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketDialogElementEventMap>(type: K, listener: (this: HTMLMarketDialogElement, ev: MarketDialogCustomEvent<HTMLMarketDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketDialogElementEventMap>(type: K, listener: (this: HTMLMarketDialogElement, ev: MarketDialogCustomEvent<HTMLMarketDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketDialogElement: {
        prototype: HTMLMarketDialogElement;
        new (): HTMLMarketDialogElement;
    };
    interface HTMLMarketDividerElement extends Components.MarketDivider, HTMLStencilElement {
    }
    var HTMLMarketDividerElement: {
        prototype: HTMLMarketDividerElement;
        new (): HTMLMarketDividerElement;
    };
    interface HTMLMarketDragHandleElementEventMap {
        "marketDragHandleDragStart": TMarketDragCoords;
        "marketDragHandleDragMove": TMarketDragCoords;
        "marketDragHandleDragEnd": TMarketDragCoords;
    }
    interface HTMLMarketDragHandleElement extends Components.MarketDragHandle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketDragHandleElementEventMap>(type: K, listener: (this: HTMLMarketDragHandleElement, ev: MarketDragHandleCustomEvent<HTMLMarketDragHandleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketDragHandleElementEventMap>(type: K, listener: (this: HTMLMarketDragHandleElement, ev: MarketDragHandleCustomEvent<HTMLMarketDragHandleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketDragHandleElement: {
        prototype: HTMLMarketDragHandleElement;
        new (): HTMLMarketDragHandleElement;
    };
    interface HTMLMarketDropdownElementEventMap {
        "marketDropdownOpened": any;
        "marketDropdownClosed": any;
    }
    interface HTMLMarketDropdownElement extends Components.MarketDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketDropdownElementEventMap>(type: K, listener: (this: HTMLMarketDropdownElement, ev: MarketDropdownCustomEvent<HTMLMarketDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketDropdownElementEventMap>(type: K, listener: (this: HTMLMarketDropdownElement, ev: MarketDropdownCustomEvent<HTMLMarketDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketDropdownElement: {
        prototype: HTMLMarketDropdownElement;
        new (): HTMLMarketDropdownElement;
    };
    interface HTMLMarketEmptyStateElement extends Components.MarketEmptyState, HTMLStencilElement {
    }
    var HTMLMarketEmptyStateElement: {
        prototype: HTMLMarketEmptyStateElement;
        new (): HTMLMarketEmptyStateElement;
    };
    interface HTMLMarketFieldElement extends Components.MarketField, HTMLStencilElement {
    }
    var HTMLMarketFieldElement: {
        prototype: HTMLMarketFieldElement;
        new (): HTMLMarketFieldElement;
    };
    interface HTMLMarketFileUploadElementEventMap {
        "marketFileUploadValueChange": { value: Array<File> };
    }
    interface HTMLMarketFileUploadElement extends Components.MarketFileUpload, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketFileUploadElementEventMap>(type: K, listener: (this: HTMLMarketFileUploadElement, ev: MarketFileUploadCustomEvent<HTMLMarketFileUploadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketFileUploadElementEventMap>(type: K, listener: (this: HTMLMarketFileUploadElement, ev: MarketFileUploadCustomEvent<HTMLMarketFileUploadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketFileUploadElement: {
        prototype: HTMLMarketFileUploadElement;
        new (): HTMLMarketFileUploadElement;
    };
    interface HTMLMarketFilterElementEventMap {
        "marketFilterClosed": void;
        "marketFilterOpened": void;
        "marketFilterExpandedChanged": TMarketFilterExpandedChangeEventDetail;
        "marketFilterValueDidChange": TMarketFilterValueDidChangeEventDetail;
    }
    interface HTMLMarketFilterElement extends Components.MarketFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketFilterElementEventMap>(type: K, listener: (this: HTMLMarketFilterElement, ev: MarketFilterCustomEvent<HTMLMarketFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketFilterElementEventMap>(type: K, listener: (this: HTMLMarketFilterElement, ev: MarketFilterCustomEvent<HTMLMarketFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketFilterElement: {
        prototype: HTMLMarketFilterElement;
        new (): HTMLMarketFilterElement;
    };
    interface HTMLMarketFilterButtonElement extends Components.MarketFilterButton, HTMLStencilElement {
    }
    var HTMLMarketFilterButtonElement: {
        prototype: HTMLMarketFilterButtonElement;
        new (): HTMLMarketFilterButtonElement;
    };
    interface HTMLMarketFilterDropdownMenuElement extends Components.MarketFilterDropdownMenu, HTMLStencilElement {
    }
    var HTMLMarketFilterDropdownMenuElement: {
        prototype: HTMLMarketFilterDropdownMenuElement;
        new (): HTMLMarketFilterDropdownMenuElement;
    };
    interface HTMLMarketFilterGroupElement extends Components.MarketFilterGroup, HTMLStencilElement {
    }
    var HTMLMarketFilterGroupElement: {
        prototype: HTMLMarketFilterGroupElement;
        new (): HTMLMarketFilterGroupElement;
    };
    interface HTMLMarketFooterElement extends Components.MarketFooter, HTMLStencilElement {
    }
    var HTMLMarketFooterElement: {
        prototype: HTMLMarketFooterElement;
        new (): HTMLMarketFooterElement;
    };
    interface HTMLMarketHeaderElementEventMap {
        "marketHeaderNavigate": TMarketHeaderNavigateEventDetail;
    }
    interface HTMLMarketHeaderElement extends Components.MarketHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketHeaderElementEventMap>(type: K, listener: (this: HTMLMarketHeaderElement, ev: MarketHeaderCustomEvent<HTMLMarketHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketHeaderElementEventMap>(type: K, listener: (this: HTMLMarketHeaderElement, ev: MarketHeaderCustomEvent<HTMLMarketHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketHeaderElement: {
        prototype: HTMLMarketHeaderElement;
        new (): HTMLMarketHeaderElement;
    };
    interface HTMLMarketIconElement extends Components.MarketIcon, HTMLStencilElement {
    }
    var HTMLMarketIconElement: {
        prototype: HTMLMarketIconElement;
        new (): HTMLMarketIconElement;
    };
    interface HTMLMarketInlineSectionHeaderElement extends Components.MarketInlineSectionHeader, HTMLStencilElement {
    }
    var HTMLMarketInlineSectionHeaderElement: {
        prototype: HTMLMarketInlineSectionHeaderElement;
        new (): HTMLMarketInlineSectionHeaderElement;
    };
    interface HTMLMarketInlineStatusElement extends Components.MarketInlineStatus, HTMLStencilElement {
    }
    var HTMLMarketInlineStatusElement: {
        prototype: HTMLMarketInlineStatusElement;
        new (): HTMLMarketInlineStatusElement;
    };
    interface HTMLMarketInputPasswordElement extends Components.MarketInputPassword, HTMLStencilElement {
    }
    var HTMLMarketInputPasswordElement: {
        prototype: HTMLMarketInputPasswordElement;
        new (): HTMLMarketInputPasswordElement;
    };
    interface HTMLMarketInputSearchElementEventMap {
        "marketInputSearchCleared": any;
        "marketInputSearchValueChange": TMarketInputSearchValueChangeEventDetail;
        "marketInputSearchFocus": TMarketInputSearchFocusEventDetail;
        "marketInternalInputSearchCompactAnimation": TMarketInternalInputSearchCompactAnimationEventDetail;
        "marketInputSearchDidLoad": any;
    }
    interface HTMLMarketInputSearchElement extends Components.MarketInputSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketInputSearchElementEventMap>(type: K, listener: (this: HTMLMarketInputSearchElement, ev: MarketInputSearchCustomEvent<HTMLMarketInputSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketInputSearchElementEventMap>(type: K, listener: (this: HTMLMarketInputSearchElement, ev: MarketInputSearchCustomEvent<HTMLMarketInputSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketInputSearchElement: {
        prototype: HTMLMarketInputSearchElement;
        new (): HTMLMarketInputSearchElement;
    };
    interface HTMLMarketInputTextElementEventMap {
        "marketInputValueChange": { value: string; originalEvent: KeyboardEvent };
        "marketInputDidLoad": { input: HTMLInputElement };
    }
    interface HTMLMarketInputTextElement extends Components.MarketInputText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketInputTextElementEventMap>(type: K, listener: (this: HTMLMarketInputTextElement, ev: MarketInputTextCustomEvent<HTMLMarketInputTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketInputTextElementEventMap>(type: K, listener: (this: HTMLMarketInputTextElement, ev: MarketInputTextCustomEvent<HTMLMarketInputTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketInputTextElement: {
        prototype: HTMLMarketInputTextElement;
        new (): HTMLMarketInputTextElement;
    };
    interface HTMLMarketLinkElement extends Components.MarketLink, HTMLStencilElement {
    }
    var HTMLMarketLinkElement: {
        prototype: HTMLMarketLinkElement;
        new (): HTMLMarketLinkElement;
    };
    interface HTMLMarketListElementEventMap {
        "marketListSelectionsDidChange": TMarketListSelectionsDidChangeEventDetail;
        "marketListSlotChange": any;
        "marketListItemsReordered": TMarketReorderEventDetail;
        "marketListItemsFiltered": TMarketListItemsFilteredEventDetail;
    }
    interface HTMLMarketListElement extends Components.MarketList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketListElementEventMap>(type: K, listener: (this: HTMLMarketListElement, ev: MarketListCustomEvent<HTMLMarketListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketListElementEventMap>(type: K, listener: (this: HTMLMarketListElement, ev: MarketListCustomEvent<HTMLMarketListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketListElement: {
        prototype: HTMLMarketListElement;
        new (): HTMLMarketListElement;
    };
    interface HTMLMarketModalFullElementEventMap {
        "marketDialogLoaded": DialogLoadedEvent;
        "marketDialogDismissed": DialogDismissedEvent;
        "marketDialogDidDismiss": DialogDismissedEvent;
    }
    interface HTMLMarketModalFullElement extends Components.MarketModalFull, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketModalFullElementEventMap>(type: K, listener: (this: HTMLMarketModalFullElement, ev: MarketModalFullCustomEvent<HTMLMarketModalFullElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketModalFullElementEventMap>(type: K, listener: (this: HTMLMarketModalFullElement, ev: MarketModalFullCustomEvent<HTMLMarketModalFullElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketModalFullElement: {
        prototype: HTMLMarketModalFullElement;
        new (): HTMLMarketModalFullElement;
    };
    interface HTMLMarketModalPartialElementEventMap {
        "marketDialogLoaded": DialogLoadedEvent;
        "marketDialogDismissed": DialogDismissedEvent;
        "marketDialogDidDismiss": DialogDismissedEvent;
    }
    interface HTMLMarketModalPartialElement extends Components.MarketModalPartial, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketModalPartialElementEventMap>(type: K, listener: (this: HTMLMarketModalPartialElement, ev: MarketModalPartialCustomEvent<HTMLMarketModalPartialElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketModalPartialElementEventMap>(type: K, listener: (this: HTMLMarketModalPartialElement, ev: MarketModalPartialCustomEvent<HTMLMarketModalPartialElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketModalPartialElement: {
        prototype: HTMLMarketModalPartialElement;
        new (): HTMLMarketModalPartialElement;
    };
    interface HTMLMarketPaginationElementEventMap {
        "marketPaginationPageSizeChange": TMarketPaginationPageSizeChangeEventDetail;
        "marketPaginationNavigation": TMarketInternalPaginationNavigationEventDetail;
    }
    interface HTMLMarketPaginationElement extends Components.MarketPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketPaginationElementEventMap>(type: K, listener: (this: HTMLMarketPaginationElement, ev: MarketPaginationCustomEvent<HTMLMarketPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketPaginationElementEventMap>(type: K, listener: (this: HTMLMarketPaginationElement, ev: MarketPaginationCustomEvent<HTMLMarketPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketPaginationElement: {
        prototype: HTMLMarketPaginationElement;
        new (): HTMLMarketPaginationElement;
    };
    interface HTMLMarketPaginationNavElementEventMap {
        "marketInternalPaginationNavigation": TMarketInternalPaginationNavigationEventDetail;
    }
    interface HTMLMarketPaginationNavElement extends Components.MarketPaginationNav, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketPaginationNavElementEventMap>(type: K, listener: (this: HTMLMarketPaginationNavElement, ev: MarketPaginationNavCustomEvent<HTMLMarketPaginationNavElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketPaginationNavElementEventMap>(type: K, listener: (this: HTMLMarketPaginationNavElement, ev: MarketPaginationNavCustomEvent<HTMLMarketPaginationNavElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketPaginationNavElement: {
        prototype: HTMLMarketPaginationNavElement;
        new (): HTMLMarketPaginationNavElement;
    };
    interface HTMLMarketPaginationPageSizeElementEventMap {
        "marketInternalPaginationPageSizeChange": TMarketPaginationPageSizeChangeEventDetail;
    }
    interface HTMLMarketPaginationPageSizeElement extends Components.MarketPaginationPageSize, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketPaginationPageSizeElementEventMap>(type: K, listener: (this: HTMLMarketPaginationPageSizeElement, ev: MarketPaginationPageSizeCustomEvent<HTMLMarketPaginationPageSizeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketPaginationPageSizeElementEventMap>(type: K, listener: (this: HTMLMarketPaginationPageSizeElement, ev: MarketPaginationPageSizeCustomEvent<HTMLMarketPaginationPageSizeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketPaginationPageSizeElement: {
        prototype: HTMLMarketPaginationPageSizeElement;
        new (): HTMLMarketPaginationPageSizeElement;
    };
    interface HTMLMarketPillElement extends Components.MarketPill, HTMLStencilElement {
    }
    var HTMLMarketPillElement: {
        prototype: HTMLMarketPillElement;
        new (): HTMLMarketPillElement;
    };
    interface HTMLMarketPopoverElement extends Components.MarketPopover, HTMLStencilElement {
    }
    var HTMLMarketPopoverElement: {
        prototype: HTMLMarketPopoverElement;
        new (): HTMLMarketPopoverElement;
    };
    interface HTMLMarketProgressTrackerElement extends Components.MarketProgressTracker, HTMLStencilElement {
    }
    var HTMLMarketProgressTrackerElement: {
        prototype: HTMLMarketProgressTrackerElement;
        new (): HTMLMarketProgressTrackerElement;
    };
    interface HTMLMarketProgressTrackerStepElementEventMap {
        "marketProgressTrackerStepClick": TMarketProgressTrackerStepClickEventDetail;
    }
    interface HTMLMarketProgressTrackerStepElement extends Components.MarketProgressTrackerStep, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketProgressTrackerStepElementEventMap>(type: K, listener: (this: HTMLMarketProgressTrackerStepElement, ev: MarketProgressTrackerStepCustomEvent<HTMLMarketProgressTrackerStepElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketProgressTrackerStepElementEventMap>(type: K, listener: (this: HTMLMarketProgressTrackerStepElement, ev: MarketProgressTrackerStepCustomEvent<HTMLMarketProgressTrackerStepElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketProgressTrackerStepElement: {
        prototype: HTMLMarketProgressTrackerStepElement;
        new (): HTMLMarketProgressTrackerStepElement;
    };
    interface HTMLMarketQrcodeElement extends Components.MarketQrcode, HTMLStencilElement {
    }
    var HTMLMarketQrcodeElement: {
        prototype: HTMLMarketQrcodeElement;
        new (): HTMLMarketQrcodeElement;
    };
    interface HTMLMarketRadioElementEventMap {
        "marketRadioValueChange": { current: boolean; previous: boolean };
    }
    interface HTMLMarketRadioElement extends Components.MarketRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketRadioElementEventMap>(type: K, listener: (this: HTMLMarketRadioElement, ev: MarketRadioCustomEvent<HTMLMarketRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketRadioElementEventMap>(type: K, listener: (this: HTMLMarketRadioElement, ev: MarketRadioCustomEvent<HTMLMarketRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketRadioElement: {
        prototype: HTMLMarketRadioElement;
        new (): HTMLMarketRadioElement;
    };
    interface HTMLMarketRowElementEventMap {
        "marketRowSelected": TMarketRowSelectedEventDetail;
        "marketRowDeselected": TMarketRowDeselectedEventDetail;
    }
    interface HTMLMarketRowElement extends Components.MarketRow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketRowElementEventMap>(type: K, listener: (this: HTMLMarketRowElement, ev: MarketRowCustomEvent<HTMLMarketRowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketRowElementEventMap>(type: K, listener: (this: HTMLMarketRowElement, ev: MarketRowCustomEvent<HTMLMarketRowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketRowElement: {
        prototype: HTMLMarketRowElement;
        new (): HTMLMarketRowElement;
    };
    interface HTMLMarketSegmentElementEventMap {
        "marketSegmentSelectedChanged": {
    value: boolean;
    prevValue: boolean;
  };
    }
    interface HTMLMarketSegmentElement extends Components.MarketSegment, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketSegmentElementEventMap>(type: K, listener: (this: HTMLMarketSegmentElement, ev: MarketSegmentCustomEvent<HTMLMarketSegmentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketSegmentElementEventMap>(type: K, listener: (this: HTMLMarketSegmentElement, ev: MarketSegmentCustomEvent<HTMLMarketSegmentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketSegmentElement: {
        prototype: HTMLMarketSegmentElement;
        new (): HTMLMarketSegmentElement;
    };
    interface HTMLMarketSegmentedControlElementEventMap {
        "marketSegmentedSelectionDidChange": {
    selectedSegment: HTMLMarketSegmentElement;
    selectedSegmentValue: string;
    deselectedSegment: HTMLMarketSegmentElement;
    deselectedSegmentValue: string;
  };
    }
    interface HTMLMarketSegmentedControlElement extends Components.MarketSegmentedControl, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketSegmentedControlElementEventMap>(type: K, listener: (this: HTMLMarketSegmentedControlElement, ev: MarketSegmentedControlCustomEvent<HTMLMarketSegmentedControlElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketSegmentedControlElementEventMap>(type: K, listener: (this: HTMLMarketSegmentedControlElement, ev: MarketSegmentedControlCustomEvent<HTMLMarketSegmentedControlElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketSegmentedControlElement: {
        prototype: HTMLMarketSegmentedControlElement;
        new (): HTMLMarketSegmentedControlElement;
    };
    interface HTMLMarketSelectElementEventMap {
        "marketSelectValueDidChange": {
    value: string | Array<any>;
    newSelectedOption: HTMLMarketRowElement;
    newDeselectedOption: HTMLMarketRowElement;
    currentSelectedOptions: Array<HTMLMarketRowElement>;
  };
        "marketSelectOpened": any;
        "marketSelectClosed": any;
    }
    interface HTMLMarketSelectElement extends Components.MarketSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketSelectElementEventMap>(type: K, listener: (this: HTMLMarketSelectElement, ev: MarketSelectCustomEvent<HTMLMarketSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketSelectElementEventMap>(type: K, listener: (this: HTMLMarketSelectElement, ev: MarketSelectCustomEvent<HTMLMarketSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketSelectElement: {
        prototype: HTMLMarketSelectElement;
        new (): HTMLMarketSelectElement;
    };
    interface HTMLMarketSheetElementEventMap {
        "marketDialogLoaded": DialogLoadedEvent;
        "marketDialogDismissed": DialogDismissedEvent;
        "marketDialogDidDismiss": DialogDismissedEvent;
    }
    interface HTMLMarketSheetElement extends Components.MarketSheet, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketSheetElementEventMap>(type: K, listener: (this: HTMLMarketSheetElement, ev: MarketSheetCustomEvent<HTMLMarketSheetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketSheetElementEventMap>(type: K, listener: (this: HTMLMarketSheetElement, ev: MarketSheetCustomEvent<HTMLMarketSheetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketSheetElement: {
        prototype: HTMLMarketSheetElement;
        new (): HTMLMarketSheetElement;
    };
    interface HTMLMarketStepperElementEventMap {
        "marketStepperValueChange": any;
        "marketStepperInputFocus": any;
    }
    interface HTMLMarketStepperElement extends Components.MarketStepper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketStepperElementEventMap>(type: K, listener: (this: HTMLMarketStepperElement, ev: MarketStepperCustomEvent<HTMLMarketStepperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketStepperElementEventMap>(type: K, listener: (this: HTMLMarketStepperElement, ev: MarketStepperCustomEvent<HTMLMarketStepperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketStepperElement: {
        prototype: HTMLMarketStepperElement;
        new (): HTMLMarketStepperElement;
    };
    interface HTMLMarketTabElementEventMap {
        "marketTabSelectedChanged": TMarketTabSelectedChangedEventDetail;
    }
    interface HTMLMarketTabElement extends Components.MarketTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTabElementEventMap>(type: K, listener: (this: HTMLMarketTabElement, ev: MarketTabCustomEvent<HTMLMarketTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTabElementEventMap>(type: K, listener: (this: HTMLMarketTabElement, ev: MarketTabCustomEvent<HTMLMarketTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTabElement: {
        prototype: HTMLMarketTabElement;
        new (): HTMLMarketTabElement;
    };
    interface HTMLMarketTabListElementEventMap {
        "marketTabListSelectedTabChanged": TMarketTabListSelectedTabChangedEventDetail;
    }
    interface HTMLMarketTabListElement extends Components.MarketTabList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTabListElementEventMap>(type: K, listener: (this: HTMLMarketTabListElement, ev: MarketTabListCustomEvent<HTMLMarketTabListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTabListElementEventMap>(type: K, listener: (this: HTMLMarketTabListElement, ev: MarketTabListCustomEvent<HTMLMarketTabListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTabListElement: {
        prototype: HTMLMarketTabListElement;
        new (): HTMLMarketTabListElement;
    };
    interface HTMLMarketTabPanelElement extends Components.MarketTabPanel, HTMLStencilElement {
    }
    var HTMLMarketTabPanelElement: {
        prototype: HTMLMarketTabPanelElement;
        new (): HTMLMarketTabPanelElement;
    };
    interface HTMLMarketTableElement extends Components.MarketTable, HTMLStencilElement {
    }
    var HTMLMarketTableElement: {
        prototype: HTMLMarketTableElement;
        new (): HTMLMarketTableElement;
    };
    interface HTMLMarketTableAreaElement extends Components.MarketTableArea, HTMLStencilElement {
    }
    var HTMLMarketTableAreaElement: {
        prototype: HTMLMarketTableAreaElement;
        new (): HTMLMarketTableAreaElement;
    };
    interface HTMLMarketTableCellElementEventMap {
        "marketTableCellClicked": any;
    }
    interface HTMLMarketTableCellElement extends Components.MarketTableCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTableCellElementEventMap>(type: K, listener: (this: HTMLMarketTableCellElement, ev: MarketTableCellCustomEvent<HTMLMarketTableCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTableCellElementEventMap>(type: K, listener: (this: HTMLMarketTableCellElement, ev: MarketTableCellCustomEvent<HTMLMarketTableCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTableCellElement: {
        prototype: HTMLMarketTableCellElement;
        new (): HTMLMarketTableCellElement;
    };
    interface HTMLMarketTableColumnElementEventMap {
        "marketTableColumnStick": {
    position: 'left' | 'right';
    index: number;
  };
        "marketTableColumnUnstick": {
    position: 'left' | 'right';
    index: number;
  };
        "marketTableColumnSort": {
    column: string;
    previousSortOrder: 'ascending' | 'descending';
  };
        "marketTableColumnVisibilityChange": {
    columnName: string;
    hidden: boolean;
  };
    }
    interface HTMLMarketTableColumnElement extends Components.MarketTableColumn, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTableColumnElementEventMap>(type: K, listener: (this: HTMLMarketTableColumnElement, ev: MarketTableColumnCustomEvent<HTMLMarketTableColumnElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTableColumnElementEventMap>(type: K, listener: (this: HTMLMarketTableColumnElement, ev: MarketTableColumnCustomEvent<HTMLMarketTableColumnElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTableColumnElement: {
        prototype: HTMLMarketTableColumnElement;
        new (): HTMLMarketTableColumnElement;
    };
    interface HTMLMarketTableRowElementEventMap {
        "marketTableHeaderLoaded": { columns: NodeListOf<HTMLMarketTableColumnElement> };
        "marketTableRowClicked": any;
        "marketTableRowStick": {
    position: 'left' | 'right';
    index: number;
  };
        "marketTableRowUnstick": {
    position: 'left' | 'right';
    index: number;
  };
        "marketAccordionToggled": { expanded: boolean };
        "marketNestedRowToggled": { expanded: boolean };
    }
    interface HTMLMarketTableRowElement extends Components.MarketTableRow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTableRowElementEventMap>(type: K, listener: (this: HTMLMarketTableRowElement, ev: MarketTableRowCustomEvent<HTMLMarketTableRowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTableRowElementEventMap>(type: K, listener: (this: HTMLMarketTableRowElement, ev: MarketTableRowCustomEvent<HTMLMarketTableRowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTableRowElement: {
        prototype: HTMLMarketTableRowElement;
        new (): HTMLMarketTableRowElement;
    };
    interface HTMLMarketTableV2ElementEventMap {
        "marketTableV2RowsReordered": TMarketReorderEventDetail;
    }
    interface HTMLMarketTableV2Element extends Components.MarketTableV2, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTableV2ElementEventMap>(type: K, listener: (this: HTMLMarketTableV2Element, ev: MarketTableV2CustomEvent<HTMLMarketTableV2ElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTableV2ElementEventMap>(type: K, listener: (this: HTMLMarketTableV2Element, ev: MarketTableV2CustomEvent<HTMLMarketTableV2ElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTableV2Element: {
        prototype: HTMLMarketTableV2Element;
        new (): HTMLMarketTableV2Element;
    };
    interface HTMLMarketTableV2CellElementEventMap {
        "marketTableV2CellCaretClicked": void;
        "marketTableV2CellSortClicked": MarketTableV2SortOrderChangeDetail;
        "marketInternalTableV2CellSelectionChange": MarketTableV2SelectionChangeEventDetail;
    }
    interface HTMLMarketTableV2CellElement extends Components.MarketTableV2Cell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTableV2CellElementEventMap>(type: K, listener: (this: HTMLMarketTableV2CellElement, ev: MarketTableV2CellCustomEvent<HTMLMarketTableV2CellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTableV2CellElementEventMap>(type: K, listener: (this: HTMLMarketTableV2CellElement, ev: MarketTableV2CellCustomEvent<HTMLMarketTableV2CellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTableV2CellElement: {
        prototype: HTMLMarketTableV2CellElement;
        new (): HTMLMarketTableV2CellElement;
    };
    interface HTMLMarketTableV2GroupElementEventMap {
        "marketInternalTableV2GroupSelectionChange": MarketTableV2SelectionChangeEventDetail;
        "marketTableV2RowsReordered": TMarketReorderEventDetail;
        "marketTableV2GroupCollapsedChange": { previous: boolean; current: boolean };
    }
    interface HTMLMarketTableV2GroupElement extends Components.MarketTableV2Group, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTableV2GroupElementEventMap>(type: K, listener: (this: HTMLMarketTableV2GroupElement, ev: MarketTableV2GroupCustomEvent<HTMLMarketTableV2GroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTableV2GroupElementEventMap>(type: K, listener: (this: HTMLMarketTableV2GroupElement, ev: MarketTableV2GroupCustomEvent<HTMLMarketTableV2GroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTableV2GroupElement: {
        prototype: HTMLMarketTableV2GroupElement;
        new (): HTMLMarketTableV2GroupElement;
    };
    interface HTMLMarketTableV2RowElementEventMap {
        "marketInternalTableV2RowSelectionChange": MarketTableV2SelectionChangeEventDetail;
        "marketTableV2RowSelectionChange": MarketTableV2SelectionChangeEventDetail;
    }
    interface HTMLMarketTableV2RowElement extends Components.MarketTableV2Row, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTableV2RowElementEventMap>(type: K, listener: (this: HTMLMarketTableV2RowElement, ev: MarketTableV2RowCustomEvent<HTMLMarketTableV2RowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTableV2RowElementEventMap>(type: K, listener: (this: HTMLMarketTableV2RowElement, ev: MarketTableV2RowCustomEvent<HTMLMarketTableV2RowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTableV2RowElement: {
        prototype: HTMLMarketTableV2RowElement;
        new (): HTMLMarketTableV2RowElement;
    };
    interface HTMLMarketTabsElement extends Components.MarketTabs, HTMLStencilElement {
    }
    var HTMLMarketTabsElement: {
        prototype: HTMLMarketTabsElement;
        new (): HTMLMarketTabsElement;
    };
    interface HTMLMarketTagElementEventMap {
        "marketTagDismissed": any;
    }
    interface HTMLMarketTagElement extends Components.MarketTag, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTagElementEventMap>(type: K, listener: (this: HTMLMarketTagElement, ev: MarketTagCustomEvent<HTMLMarketTagElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTagElementEventMap>(type: K, listener: (this: HTMLMarketTagElement, ev: MarketTagCustomEvent<HTMLMarketTagElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTagElement: {
        prototype: HTMLMarketTagElement;
        new (): HTMLMarketTagElement;
    };
    interface HTMLMarketTextareaElementEventMap {
        "marketTextareaValueChange": { value: string; originalEvent: KeyboardEvent };
    }
    interface HTMLMarketTextareaElement extends Components.MarketTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTextareaElementEventMap>(type: K, listener: (this: HTMLMarketTextareaElement, ev: MarketTextareaCustomEvent<HTMLMarketTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTextareaElementEventMap>(type: K, listener: (this: HTMLMarketTextareaElement, ev: MarketTextareaCustomEvent<HTMLMarketTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTextareaElement: {
        prototype: HTMLMarketTextareaElement;
        new (): HTMLMarketTextareaElement;
    };
    interface HTMLMarketTileElementEventMap {
        "marketTileSelectedChanged": TMarketTileSelectedChanged;
        "marketTileRemoveClicked": any;
    }
    interface HTMLMarketTileElement extends Components.MarketTile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTileElementEventMap>(type: K, listener: (this: HTMLMarketTileElement, ev: MarketTileCustomEvent<HTMLMarketTileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTileElementEventMap>(type: K, listener: (this: HTMLMarketTileElement, ev: MarketTileCustomEvent<HTMLMarketTileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTileElement: {
        prototype: HTMLMarketTileElement;
        new (): HTMLMarketTileElement;
    };
    interface HTMLMarketToastElementEventMap {
        "marketToastAutoDismissed": any;
        "marketToastManuallyDismissed": any;
    }
    interface HTMLMarketToastElement extends Components.MarketToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketToastElementEventMap>(type: K, listener: (this: HTMLMarketToastElement, ev: MarketToastCustomEvent<HTMLMarketToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketToastElementEventMap>(type: K, listener: (this: HTMLMarketToastElement, ev: MarketToastCustomEvent<HTMLMarketToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketToastElement: {
        prototype: HTMLMarketToastElement;
        new (): HTMLMarketToastElement;
    };
    interface HTMLMarketToasterElement extends Components.MarketToaster, HTMLStencilElement {
    }
    var HTMLMarketToasterElement: {
        prototype: HTMLMarketToasterElement;
        new (): HTMLMarketToasterElement;
    };
    interface HTMLMarketToggleElementEventMap {
        "marketToggleChange": { current: boolean; previous: boolean };
    }
    interface HTMLMarketToggleElement extends Components.MarketToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketToggleElementEventMap>(type: K, listener: (this: HTMLMarketToggleElement, ev: MarketToggleCustomEvent<HTMLMarketToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketToggleElementEventMap>(type: K, listener: (this: HTMLMarketToggleElement, ev: MarketToggleCustomEvent<HTMLMarketToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketToggleElement: {
        prototype: HTMLMarketToggleElement;
        new (): HTMLMarketToggleElement;
    };
    interface HTMLMarketTooltipElementEventMap {
        "marketTooltipOpened": any;
        "marketTooltipClosed": any;
    }
    interface HTMLMarketTooltipElement extends Components.MarketTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMarketTooltipElementEventMap>(type: K, listener: (this: HTMLMarketTooltipElement, ev: MarketTooltipCustomEvent<HTMLMarketTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMarketTooltipElementEventMap>(type: K, listener: (this: HTMLMarketTooltipElement, ev: MarketTooltipCustomEvent<HTMLMarketTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMarketTooltipElement: {
        prototype: HTMLMarketTooltipElement;
        new (): HTMLMarketTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "market-accessory": HTMLMarketAccessoryElement;
        "market-accordion-item": HTMLMarketAccordionItemElement;
        "market-action-card": HTMLMarketActionCardElement;
        "market-activity-indicator": HTMLMarketActivityIndicatorElement;
        "market-activity-indicator-bar": HTMLMarketActivityIndicatorBarElement;
        "market-banner": HTMLMarketBannerElement;
        "market-blade": HTMLMarketBladeElement;
        "market-button": HTMLMarketButtonElement;
        "market-button-dropdown": HTMLMarketButtonDropdownElement;
        "market-button-group": HTMLMarketButtonGroupElement;
        "market-checkbox": HTMLMarketCheckboxElement;
        "market-choice-button": HTMLMarketChoiceButtonElement;
        "market-code-display": HTMLMarketCodeDisplayElement;
        "market-code-input": HTMLMarketCodeInputElement;
        "market-color-picker": HTMLMarketColorPickerElement;
        "market-color-picker-gradient": HTMLMarketColorPickerGradientElement;
        "market-color-picker-input": HTMLMarketColorPickerInputElement;
        "market-color-swatch": HTMLMarketColorSwatchElement;
        "market-color-swatch-list": HTMLMarketColorSwatchListElement;
        "market-content-card": HTMLMarketContentCardElement;
        "market-context": HTMLMarketContextElement;
        "market-context-manager": HTMLMarketContextManagerElement;
        "market-date-picker": HTMLMarketDatePickerElement;
        "market-date-picker-date": HTMLMarketDatePickerDateElement;
        "market-date-picker-input-date": HTMLMarketDatePickerInputDateElement;
        "market-date-picker-menu": HTMLMarketDatePickerMenuElement;
        "market-dialog": HTMLMarketDialogElement;
        "market-divider": HTMLMarketDividerElement;
        "market-drag-handle": HTMLMarketDragHandleElement;
        "market-dropdown": HTMLMarketDropdownElement;
        "market-empty-state": HTMLMarketEmptyStateElement;
        "market-field": HTMLMarketFieldElement;
        "market-file-upload": HTMLMarketFileUploadElement;
        "market-filter": HTMLMarketFilterElement;
        "market-filter-button": HTMLMarketFilterButtonElement;
        "market-filter-dropdown-menu": HTMLMarketFilterDropdownMenuElement;
        "market-filter-group": HTMLMarketFilterGroupElement;
        "market-footer": HTMLMarketFooterElement;
        "market-header": HTMLMarketHeaderElement;
        "market-icon": HTMLMarketIconElement;
        "market-inline-section-header": HTMLMarketInlineSectionHeaderElement;
        "market-inline-status": HTMLMarketInlineStatusElement;
        "market-input-password": HTMLMarketInputPasswordElement;
        "market-input-search": HTMLMarketInputSearchElement;
        "market-input-text": HTMLMarketInputTextElement;
        "market-link": HTMLMarketLinkElement;
        "market-list": HTMLMarketListElement;
        "market-modal-full": HTMLMarketModalFullElement;
        "market-modal-partial": HTMLMarketModalPartialElement;
        "market-pagination": HTMLMarketPaginationElement;
        "market-pagination-nav": HTMLMarketPaginationNavElement;
        "market-pagination-page-size": HTMLMarketPaginationPageSizeElement;
        "market-pill": HTMLMarketPillElement;
        "market-popover": HTMLMarketPopoverElement;
        "market-progress-tracker": HTMLMarketProgressTrackerElement;
        "market-progress-tracker-step": HTMLMarketProgressTrackerStepElement;
        "market-qrcode": HTMLMarketQrcodeElement;
        "market-radio": HTMLMarketRadioElement;
        "market-row": HTMLMarketRowElement;
        "market-segment": HTMLMarketSegmentElement;
        "market-segmented-control": HTMLMarketSegmentedControlElement;
        "market-select": HTMLMarketSelectElement;
        "market-sheet": HTMLMarketSheetElement;
        "market-stepper": HTMLMarketStepperElement;
        "market-tab": HTMLMarketTabElement;
        "market-tab-list": HTMLMarketTabListElement;
        "market-tab-panel": HTMLMarketTabPanelElement;
        "market-table": HTMLMarketTableElement;
        "market-table-area": HTMLMarketTableAreaElement;
        "market-table-cell": HTMLMarketTableCellElement;
        "market-table-column": HTMLMarketTableColumnElement;
        "market-table-row": HTMLMarketTableRowElement;
        "market-table-v2": HTMLMarketTableV2Element;
        "market-table-v2-cell": HTMLMarketTableV2CellElement;
        "market-table-v2-group": HTMLMarketTableV2GroupElement;
        "market-table-v2-row": HTMLMarketTableV2RowElement;
        "market-tabs": HTMLMarketTabsElement;
        "market-tag": HTMLMarketTagElement;
        "market-textarea": HTMLMarketTextareaElement;
        "market-tile": HTMLMarketTileElement;
        "market-toast": HTMLMarketToastElement;
        "market-toaster": HTMLMarketToasterElement;
        "market-toggle": HTMLMarketToggleElement;
        "market-tooltip": HTMLMarketTooltipElement;
    }
}
declare namespace LocalJSX {
    interface MarketAccessory {
        /**
          * The desired size for the leading or trailing accessory, which we expect to be either an image or a <market-icon> component. The available sizes are "icon" (24x24) and "image" (40x40).
         */
        "size"?: 'icon' | 'image';
    }
    interface MarketAccordionItem {
        /**
          * Whether the accordion should appear in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * Determines whether the accordion is shown as expanded or collapsed.
         */
        "expanded"?: boolean;
        /**
          * The unique name of the accordion.
         */
        "name": string;
        /**
          * Fired whenever the "expanded" prop value changes.
         */
        "onMarketAccordionItemExpandedChange"?: (event: MarketAccordionItemCustomEvent<{ expanded: boolean }>) => void;
        /**
          * The size of the heading text of the accordion.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface MarketActionCard {
        /**
          * Visually and functionally disables the action card.
         */
        "disabled"?: boolean;
        /**
          * Fired whenever the action card is deselected.
         */
        "onMarketCardDeselected"?: (event: MarketActionCardCustomEvent<TMarketActionCardDeselectedEventDetail>) => void;
        /**
          * Fired whenever the action card is selected.
         */
        "onMarketCardSelected"?: (event: MarketActionCardCustomEvent<TMarketActionCardSelectedEventDetail>) => void;
        /**
          * Whether the action card is selected or not.
         */
        "selected"?: boolean;
        /**
          * When set to `true`, card will not persist selected state on click.
         */
        "transient"?: boolean;
        /**
          * A string specifying a value for the action card.
         */
        "value"?: string;
    }
    interface MarketActivityIndicator {
        /**
          * String for setting activity indicator size
         */
        "size"?: 'large' | 'small';
    }
    interface MarketActivityIndicatorBar {
        /**
          * The maximum value of the activity bar
         */
        "max"?: number;
        /**
          * The value the activity bar should report
         */
        "value"?: number;
    }
    interface MarketBanner {
        /**
          * Optional property to pass a string to the dismiss "x" that will function as its aria-label. Defaults to "Dismiss".
         */
        "dismissButtonAriaLabel"?: string;
        /**
          * whether to show the dismiss "x" or not
         */
        "dismissable"?: boolean;
        /**
          * Title for the icon image, used as the accessible name for the icon. If a custom icon is provided, this prop is ignored.
         */
        "iconImageTitle"?: string;
        /**
          * Emitted when the banner's dismiss button is clicked.
         */
        "onMarketBannerDismissed"?: (event: MarketBannerCustomEvent<any>) => void;
        /**
          * banner variant that corresponds to the type of info it is conveying
         */
        "variant"?: 'info' | 'success' | 'warning' | 'critical' | 'insight';
    }
    interface MarketBlade {
        /**
          * DEPRECATED: The duration for the blade enter/exit animations, set from design tokens
         */
        "animationDuration"?: number;
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration"?: number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration"?: number;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal
         */
        "dialogID"?: string;
        /**
          * INTERNAL ONLY: Used in CSS to trigger start and stop animations
         */
        "hidden"?: boolean;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place in the stack
         */
        "index"?: number;
        /**
          * Triggered when the dialog is fully dismissed
         */
        "onMarketDialogDidDismiss"?: (event: MarketBladeCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the blade is dismissed, handled by context manager
         */
        "onMarketDialogDismissed"?: (event: MarketBladeCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the blade finishes loading
         */
        "onMarketDialogLoaded"?: (event: MarketBladeCustomEvent<DialogLoadedEvent>) => void;
        /**
          * Enforces focus trapping on the modal
         */
        "trapFocus"?: boolean;
    }
    interface MarketButton {
        /**
          * String for setting (optional) button caret direction
         */
        "caret"?: 'up' | 'down' | 'none';
        /**
          * Functionally and visually disables the button
         */
        "disabled"?: boolean;
        /**
          * Causes the browser to treat the linked URL as a download. Only works for same-origin URLs. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download) for details on accepted values.
         */
        "download"?: string | undefined;
        /**
          * Whether or not the button is in a focused state
         */
        "focused"?: boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Whether the button only contains an icon.
         */
        "iconOnly"?: boolean;
        /**
          * Optionally set a custom tabindex on the inner HTML `<button>`.
         */
        "innerTabindex"?: number;
        /**
          * Whether or not the button is in a loading state
         */
        "isLoading"?: boolean;
        /**
          * String for setting button rank
         */
        "rank"?: 'primary' | 'secondary' | 'tertiary';
        /**
          * Defines the relationship between a linked resource and the current document. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel) for details on accepted values.
         */
        "rel"?: string | undefined;
        /**
          * String for setting button size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top' | undefined;
        /**
          * String for setting button type
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * String for setting button variant
         */
        "variant"?: 'regular' | 'destructive';
    }
    interface MarketButtonDropdown {
        /**
          * Functionally and visually disables the button dropdown.
         */
        "disabled"?: boolean;
        /**
          * Defines what types of interaction the button dropdown should have (see `market-dropdown` docs for more granular explanation)
         */
        "interaction"?: 'click' | 'hover' | 'persistent';
        /**
          * Disabling the up/down caret.
         */
        "noCaret"?: boolean;
        /**
          * Fired whenever the button dropdown is closed.
         */
        "onMarketButtonDropdownClosed"?: (event: MarketButtonDropdownCustomEvent<any>) => void;
        /**
          * Fired whenever the button dropdown is opened.
         */
        "onMarketButtonDropdownOpened"?: (event: MarketButtonDropdownCustomEvent<any>) => void;
        /**
          * Disables the default behavior of *not* persisting selections in slotted `market-list`s.
         */
        "persistListSelections"?: boolean;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the preferred placement of the popper. https://popper.js.org/docs/v2/constructors//#placement
         */
        "popoverPlacement"?: Placement;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy"?: PositioningStrategy;
    }
    interface MarketButtonGroup {
        /**
          * A string specifying the alignment for the button group. This will change button size and distribution across the group.
         */
        "alignment"?: 'left' | 'right' | 'split' | 'fill' | 'stack';
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy"?: PositioningStrategy;
    }
    interface MarketCheckbox {
        /**
          * Whether the checkbox is active or not.
         */
        "active"?: boolean;
        /**
          * Whether the checkbox is checked or unchecked. Operates independently of the indeterminate property. If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.
         */
        "checked"?: boolean;
        /**
          * Whether the checkbox is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the checkbox is focused or not.
         */
        "focused"?: boolean;
        /**
          * Whether the checkbox is hovered or not.
         */
        "hovered"?: boolean;
        /**
          * Whether the checkbox is indeterminate. If true, indeterminate visual state takes precedence over checked/unchecked.
         */
        "indeterminate"?: boolean;
        /**
          * Whether the checkbox is invalid.
         */
        "invalid"?: boolean;
        /**
          * Fired whenever "checked" prop value changes.
         */
        "onMarketCheckboxValueChange"?: (event: MarketCheckboxCustomEvent<{ current: boolean; previous: boolean }>) => void;
    }
    interface MarketChoiceButton {
        /**
          * Functionally and visually disables the choice button
         */
        "disabled"?: boolean;
        /**
          * Emitted when the choice button is deselected
         */
        "onMarketChoiceButtonDeselected"?: (event: MarketChoiceButtonCustomEvent<any>) => void;
        /**
          * Emitted when the choice button is selected
         */
        "onMarketChoiceButtonSelected"?: (event: MarketChoiceButtonCustomEvent<any>) => void;
        /**
          * Whether or not the choice button is in a selected state
         */
        "selected"?: boolean;
        /**
          * String for setting choice button size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface MarketCodeDisplay {
        /**
          * Whether the component should appear in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * A boolean representing whether the code input is focused or not.
         */
        "focused"?: boolean;
        /**
          * Emitted when the 'Copy' button is pressed. Can be used by consumer to create toast.
         */
        "onMarketCodeCopied"?: (event: MarketCodeDisplayCustomEvent<any>) => void;
    }
    interface MarketCodeInput {
        /**
          * A boolean representing whether the input is disabled or not. This visually and functionally will disable the input.
         */
        "disabled"?: boolean;
        /**
          * A boolean representing whether the code input is focused or not.
         */
        "focused"?: boolean;
        /**
          * A boolean representing whether the input is invalid or not. This represents error states.
         */
        "invalid"?: boolean;
        /**
          * A number specifying the length of the code
         */
        "length"?: number;
        /**
          * A string specifying a name for the code input.
         */
        "name"?: string;
        /**
          * Emitted whenever any of the input values change.
         */
        "onMarketCodeInputValueChange"?: (event: MarketCodeInputCustomEvent<{ code: string }>) => void;
        /**
          * A boolean representing whether the input is readonly or not.
         */
        "readonly"?: boolean;
        /**
          * A string specifying the type of input to render (text or numeric)
         */
        "type"?: 'text' | 'number' | 'password';
        /**
          * A string representing a default value (code) that can be passed in to be rendered
         */
        "value"?: string;
    }
    interface MarketColorPicker {
        /**
          * Fired whenever the color picker selection state changes.
         */
        "onMarketColorPickerValueChange"?: (event: MarketColorPickerCustomEvent<{ value: string; prevValue: string }>) => void;
        /**
          * Value representing the color shown on the color picker.
         */
        "value"?: string;
    }
    interface MarketColorPickerGradient {
        /**
          * Fired whenever the picker selection state changes.
         */
        "onMarketColorPickerGradientValueChange"?: (event: MarketColorPickerGradientCustomEvent<{ value: string }>) => void;
        /**
          * Value representing the selected color of the secondary gradient picker. This is a string that can represent a [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color). This is the value the color picker will use. Supported color types are rgb/a, hsl/a, and hex colors.
         */
        "value"?: string;
    }
    interface MarketColorPickerInput {
        /**
          * Fired whenever the color picker input value changes.
         */
        "onMarketColorPickerInputValueChange"?: (event: MarketColorPickerInputCustomEvent<{ prevValue: string; value: string }>) => void;
        /**
          * Value representing the color shown on the input. This should be in a hexadecimal format (i.e. #ABC123), similarly to native HTML color inputs.
         */
        "value"?: string;
    }
    interface MarketColorSwatch {
        "disabled"?: boolean;
        "name"?: string;
        /**
          * Fired whenever the swatch selection state changes.
         */
        "onMarketColorSwatchSelectedChange"?: (event: MarketColorSwatchCustomEvent<{ value: string; selected: boolean }>) => void;
        /**
          * Whether the swatch is selected or not.
         */
        "selected"?: boolean;
        /**
          * Value representing the color of the swatch. This is a string that can represent any [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color).
         */
        "value"?: string;
    }
    interface MarketColorSwatchList {
        /**
          * Fired whenever an item is selected or deselected.
         */
        "onMarketColorSwatchListValueChange"?: (event: MarketColorSwatchListCustomEvent<{ value: string; prevValue: string }>) => void;
        /**
          * A string specifying a value for the list. For a color swatch to be selected, this value should match the swatch's value. Note: all color swatch values slotted in must be **unique**! An empty string, or '', will clear the selection.
         */
        "value"?: string;
    }
    interface MarketContentCard {
    }
    interface MarketContext {
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration"?: number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration"?: number;
        /**
          * **INTERNAL [do not use directly]** Exposes the context's currentDialog for use by market-context-manager
         */
        "currentDialog"?: Dialog;
        /**
          * Whether the context is hidden or visible.
         */
        "hidden"?: boolean;
        /**
          * **INTERNAL [do not use directly]** Disabling the context's default veil (including scroll blocking behavior) when visible. By default, this is set by market-context according to what dialog type is being opened. In the future, we want to expose this as an optional config option for market-context-manager's open() method.
         */
        "noVeil"?: Boolean;
        /**
          * Emitted whenever the contents of the context have changed: - Dialog added to the stack - Dialog removed from the stack
         */
        "onMarketContextContentsChanged"?: (event: MarketContextCustomEvent<{
    action: 'marketNewDialogOpened' | 'marketDialogClosed';
    currentDialog: Dialog;
    stack: Array<Dialog>;
  }>) => void;
        /**
          * Emitted whenever the context's stack is empty (no more open dialogs)
         */
        "onMarketContextEmptied"?: (event: MarketContextCustomEvent<any>) => void;
    }
    interface MarketContextManager {
        /**
          * Whether or not the context manager is UI blocking
         */
        "active"?: boolean;
        /**
          * Emitted when the context manager is activated/blocking is turned on
         */
        "onMarketContextManagerActivated"?: (event: MarketContextManagerCustomEvent<any>) => void;
        /**
          * Emitted when the context manager is deactivated/blocking is turned off
         */
        "onMarketContextManagerDeactivated"?: (event: MarketContextManagerCustomEvent<any>) => void;
    }
    interface MarketDatePicker {
        /**
          * Whether or not the side market-date-picker-menu is shown. To pass in translation supported text, use slots available for each option.
         */
        "displayMenu"?: boolean;
        /**
          * The ISO formatted string that determines the displayed month on the calendar. Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format Example: `YYYY-MM-DDT08:00`. Note: Omitting the time portion defaults to UTC, so this may display as a day behind on your calendar! If you add hours it will default to your timezone, like the above example. Invalid date strings default to today's date.
         */
        "displayedDate"?: string;
        /**
          * A list of market-date-picker-menu items that will be excluded from appearing on the menu list. i.e. `this-year,last-year` or `today,this-week,last-week,custom` The menu names are lowercase and hyphenated strings, found here: https://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx  This works in conjunction with timeframe, i.e. "timeframe=past", excludes dates in the future in addition to the ones here. This is written as items separated by ','.
         */
        "excludeMenuItems"?: string;
        /**
          * Whether the selected dates are invalid. It should not be possible to click on invalid dates, so this occurs through date inputs.
         */
        "invalid"?: boolean;
        /**
          * A function that takes a datestring and returns a boolean determining if it should be disabled. This does not override disabled dates based on the timeframe prop. See https://ionicframework.com/docs/api/datetime#advanced-date-constraints for examples of passing in a function as a Stencil component prop.
         */
        "isDateDisabled"?: (day: Date) => boolean;
        /**
          * Date picker locale. Defaults to browser locale. If that cannot be determined, defaults to 'en-US'.
         */
        "locale"?: string;
        /**
          * Position of menu on a mobile screen, if market-date-picker-menu is shown.
         */
        "mobileMenuPosition"?: 'top' | 'bottom';
        /**
          * Fired whenever the selected date range is changed.
         */
        "onMarketDateRangeChanged"?: (event: MarketDatePickerCustomEvent<TMarketDateRangeChangedEventDetail>) => void;
        /**
          * @deprecated **DEPRECATED (v4.5.0)** Use `marketDatePickerMenuSelectionChanged` instead.  Fired whenever the menu selection is changed. Indicates which menu option is currently selected. Possible values are found here: https://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx
         */
        "onMarketMenuSelectionChanged"?: (event: MarketDatePickerCustomEvent<TMarketDatePickerMenuSelectionChangedEventDetail>) => void;
        /**
          * Preset menu option to populate date picker range. Presetting `custom` should be used with `selectedStartDate` and `selectedEndDate` props. Otherwise if both `selectedStartDate/selectedEndDate` and `presetMenuOption` are given, `presetMenuOption` takes precedence.
         */
        "presetMenuOption"?: MENU_SLOT_NAMES;
        /**
          * User selected end date for a range saved as an ISO formatted string. Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format Example: `YYYY-MM-DDT08:00`.
         */
        "selectedEndDate"?: string;
        /**
          * User selected single date or start date for a range saved as an ISO formatted string. Use DateTime string format as seen here: https://tc39.es/ecma262/#sec-date-time-string-format Example: `YYYY-MM-DDT08:00`.
         */
        "selectedStartDate"?: string;
        /**
          * Whether the date picker allows selection of a single date or a date range
         */
        "selectionType"?: 'single' | 'range';
        /**
          * String for setting timeframe type to select which market-date-picker-menu items to show. Past means only past dates available, future is only current and future dates, and present is the default for all shown.
         */
        "timeframe"?: 'past' | 'present' | 'future';
        /**
          * This enables the input field for the date picker.
         */
        "withInputs"?: '' | 'date' | 'date-and-time';
        /**
          * Displays a clickable caret in the month/year header. If it is up, we show the month/year selection view instead of dates.
         */
        "yearViewActive"?: boolean;
    }
    interface MarketDatePickerDate {
        /**
          * String for user to pass in value of the date
         */
        "day"?: string | null;
        /**
          * Functionally and visually disables the date picker date
         */
        "disabled"?: boolean;
        /**
          * Emitted when the date picker date is unhovered or moused out
         */
        "onMarketDatePickerDateMousedOut"?: (event: MarketDatePickerDateCustomEvent<any>) => void;
        /**
          * Emitted when the date picker date is hovered or moused over
         */
        "onMarketDatePickerDateMousedOver"?: (event: MarketDatePickerDateCustomEvent<{ date: HTMLMarketDatePickerDateElement }>) => void;
        /**
          * Emitted when the date picker date is selected
         */
        "onMarketDatePickerDateSelected"?: (event: MarketDatePickerDateCustomEvent<{ date: HTMLMarketDatePickerDateElement }>) => void;
        /**
          * Handles whether or not date picker date is selected
         */
        "selected"?: boolean;
        /**
          * String for setting date picker date selection type
         */
        "selection"?: 'none' | 'single' | 'range-first' | 'range-middle' | 'range-last';
        /**
          * Handles whether or not date picker date is for today's date
         */
        "today"?: boolean;
        /**
          * String type to determine type of date selected for parent component
         */
        "type"?: 'day' | 'month' | 'year';
    }
    interface MarketDatePickerInputDate {
        /**
          * A function that returns true if the date should be disabled
          * @type {(day: Date) => boolean}
          * @memberof MarketDateInputDate
          * @default undefined
         */
        "isDateDisabled"?: (day: Date) => boolean;
        /**
          * Emitted when the date selection changes validity
         */
        "onMarketDatePickerInputDateInvalidStateChanged"?: (event: MarketDatePickerInputDateCustomEvent<{ invalid: boolean }>) => void;
        /**
          * Emitted when the date picker date is selected
         */
        "onMarketDatePickerInputDateSet"?: (event: MarketDatePickerInputDateCustomEvent<{ date: string; input: string }>) => void;
        /**
          * Whether the date picker is a range
          * @type {boolean}
          * @memberof MarketDateInputDate
          * @default false
         */
        "range"?: boolean;
        /**
          * The selected end date
          * @type {string}
          * @memberof MarketDateInputDate
          * @default ''
         */
        "selectedEndDate"?: string;
        /**
          * The selected start date
          * @type {string}
          * @memberof MarketDateInputDate
          * @default ''
         */
        "selectedStartDate"?: string;
        /**
          * The timeframe to restrict the date picker to
          * @type {'past' | 'future' | 'present'}
          * @memberof MarketDateInputDate
          * @default 'present'
         */
        "timeframe"?: 'past' | 'future' | 'present';
        /**
          * Whether to use date-time input instead of date-only
          * @type {boolean}
          * @memberof MarketDateInputDate
          * @default false
         */
        "withTime"?: boolean;
    }
    interface MarketDatePickerMenu {
        /**
          * A list of menu items that will be excluded from appearing on the menu list. i.e. `this-year,last-year` or `today,this-week,last-week,custom` The menu names are lowercase and hyphenated strings, found here: https://github.com/squareup/market/blob/main/web/web-components/src/components/market-date-picker/enums/menu.tsx  This works in conjunction with timeframe, i.e. "timeframe=past", excludes dates in the future in addition to the ones here. This is written as items separated by ','.
         */
        "excludeMenuItems"?: string;
        /**
          * Fired whenever a menu item is selected
         */
        "onMarketDatePickerMenuSelectionChanged"?: (event: MarketDatePickerMenuCustomEvent<TMarketDatePickerMenuSelectionChangedEventDetail>) => void;
        /**
          * Preset menu option passed from the parent. For the menu, this handles visually selecting the menu row.
         */
        "presetMenuOption"?: MENU_SLOT_NAMES;
        /**
          * String for setting timeframe type to select which menu items to show
         */
        "timeframe"?: 'past' | 'present' | 'future';
    }
    interface MarketDialog {
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration"?: number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration"?: number;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal
         */
        "dialogID"?: string;
        /**
          * INTERNAL ONLY: Used in CSS to trigger start and stop animations
         */
        "hidden"?: boolean;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place in the stack
         */
        "index"?: number;
        /**
          * Whether the activity indicator is rendered or not
         */
        "isLoading"?: boolean;
        /**
          * Triggered when the dialog is fully dismissed
         */
        "onMarketDialogDidDismiss"?: (event: MarketDialogCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the dialog is dismissed, handled by context manager
         */
        "onMarketDialogDismissed"?: (event: MarketDialogCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the dialog finishes loading
         */
        "onMarketDialogLoaded"?: (event: MarketDialogCustomEvent<DialogLoadedEvent>) => void;
        /**
          * Whether the dialog is persistent or dismissable
         */
        "persistent"?: boolean;
        /**
          * Enforces focus trapping on the dialog
         */
        "trapFocus"?: boolean;
    }
    interface MarketDivider {
        /**
          * Sets the vertical margin for the divider.
         */
        "margin"?: 'small' | 'medium' | 'large';
        /**
          * Sets the vertical margin for the divider.
         */
        "size"?: 'thick' | 'thin';
    }
    interface MarketDragHandle {
        /**
          * Fired whenever a drag is ended.
         */
        "onMarketDragHandleDragEnd"?: (event: MarketDragHandleCustomEvent<TMarketDragCoords>) => void;
        /**
          * Fired whenever a drag is moved.
         */
        "onMarketDragHandleDragMove"?: (event: MarketDragHandleCustomEvent<TMarketDragCoords>) => void;
        /**
          * Fired whenever a drag is started.
         */
        "onMarketDragHandleDragStart"?: (event: MarketDragHandleCustomEvent<TMarketDragCoords>) => void;
    }
    interface MarketDropdown {
        /**
          * Functionally disables the component, as well as relevant Market components in the "trigger" slot (`<market-button>`, `<market-link>`).
         */
        "disabled"?: boolean;
        /**
          * Determines whether the dropdown is expanded or collapsed
         */
        "expanded"?: boolean;
        /**
          * Defining how the popover should be triggered to open/close. Note that clicks outside the dropdown will always close it.  `click`: popover toggles open/closed on clicks to the trigger or popover  `hover`: popover opens on trigger mouseover, closes on trigger or popover  mouseout  `persistent`: popover toggles open/closed on clicks to the trigger, popover stays open if users click on it or its content  `none`: popover does not toggle open/closed on any user interaction; it is expected to be controlled by the parent component
         */
        "interaction"?: 'click' | 'hover' | 'persistent' | 'none';
        /**
          * Fired whenever the dropdown is closed.
         */
        "onMarketDropdownClosed"?: (event: MarketDropdownCustomEvent<any>) => void;
        /**
          * Fired whenever the dropdown is opened.
         */
        "onMarketDropdownOpened"?: (event: MarketDropdownCustomEvent<any>) => void;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Displaces the popper away from, or toward, the reference element in the direction of its placement. https://popper.js.org/docs/v2/modifiers/offset/#distance-1
         */
        "popoverDistance"?: number;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the preferred placement of the popper. https://popper.js.org/docs/v2/constructors//#placement
         */
        "popoverPlacement"?: Placement;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Displaces the popover along the reference element. https://popper.js.org/docs/v2/modifiers/offset/#skidding-1
         */
        "popoverSkidding"?: number;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy"?: PositioningStrategy;
    }
    interface MarketEmptyState {
    }
    interface MarketField {
        /**
          * A boolean representing whether the field is disabled or not. This visually and functionally will disable the field.
         */
        "disabled"?: boolean;
        /**
          * A boolean representing whether the field is invalid or not. This represents error states.
         */
        "invalid"?: boolean;
        /**
          * A string specifying a name for the field.
         */
        "name"?: string;
        /**
          * A boolean representing whether the field is readonly or not.
         */
        "readonly"?: boolean;
    }
    interface MarketFileUpload {
        /**
          * String that is a list of file types the uploader should accept. This is passed to the internal `<input type="file"/>` tag. For more info, see the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept).
         */
        "accept"?: string;
        /**
          * Used to toggle "compact mode" (for use on mobile devices and when space is limited)
         */
        "compact"?: boolean;
        /**
          * Optional property passed to the delete icons on selected file rows that will function as its aria-label. Defaults to "Delete".
         */
        "deleteButtonAriaLabel"?: string;
        /**
          * Functionally and visually disables the file picker.
         */
        "disabled"?: boolean;
        /**
          * What type of custom information, if any, to display on specified file rows. Expects an array of TMarketFileUploadFileConfig objects (must be set using JS and not in the HTML markup), which must include `filename` and can include an optional `status`, `message`, or `leadingIconName`. Note that `message` is only shown when `status` is `'error'`, and `leadingIconName` expects the semantic or descriptive name of an existing `market-icon`.
         */
        "fileMetadata"?: Array<TMarketFileUploadFileConfig>;
        /**
          * What type of secondary information, if any, to display on all file rows
         */
        "fileSubtext"?: 'size' | 'type';
        /**
          * DEPRECATED: Represents whether the input is invalid or not. This represents input-level error states. We recommend using the fileMetadata prop to set error status and messages on the file level instead.
         */
        "invalid"?: boolean;
        /**
          * Represents whether the selector allows multiple files to be selected.
         */
        "multiple"?: boolean;
        /**
          * Triggered when the selected files array changes.
         */
        "onMarketFileUploadValueChange"?: (event: MarketFileUploadCustomEvent<{ value: Array<File> }>) => void;
        /**
          * An array of File objects that can be passed in. (If using vanilla JS, this must be set using JS and not in the HTML markup.)
         */
        "value"?: Array<File>;
    }
    interface MarketFilter {
        /**
          * Functionally and visually disables the filter button
         */
        "disabled"?: boolean;
        /**
          * Defines what types of interaction the dropdown should have (see `market-dropdown` docs for more granular explanation).  If not defined and the list is multiselect, the dropdown interaction will be set to `persistent` so that the dropdown won't automatically close after selecting a row.
         */
        "dropdownInteraction"?: HTMLMarketDropdownElement['interaction'];
        /**
          * Determines whether the filter is expanded or collapsed
         */
        "expanded"?: boolean;
        /**
          * Whether or not the button is focused
         */
        "focused"?: boolean;
        /**
          * Filter name
         */
        "name": string;
        /**
          * @deprecated **DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.  Fired whenever the filter is closed
         */
        "onMarketFilterClosed"?: (event: MarketFilterCustomEvent<void>) => void;
        /**
          * Fired whenever the dropdown is expanded/collapsed
         */
        "onMarketFilterExpandedChanged"?: (event: MarketFilterCustomEvent<TMarketFilterExpandedChangeEventDetail>) => void;
        /**
          * @deprecated **DEPRECATED (v4.5.0)** Use `marketFilterExpandedChanged` instead.  Fired whenever the filter is opened
         */
        "onMarketFilterOpened"?: (event: MarketFilterCustomEvent<void>) => void;
        /**
          * Fired by the `marketListSelectionsDidChange` listener.
          * @property {string} name - filter name, from `name` prop
          * @property {string | string[] | TMarketFilterDateRangeValues } prevValue - list: selected value(s); date: `[<startDate>, <endDate>]`
          * @property {string | string[] | TMarketFilterDateRangeValues } value - list: selected value(s); date: `[<startDate>, <endDate>]`
         */
        "onMarketFilterValueDidChange"?: (event: MarketFilterCustomEvent<TMarketFilterValueDidChangeEventDetail>) => void;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is `bottom-start`. https://popper.js.org/docs/v2/constructors/#strategy
         */
        "popoverPlacement"?: Placement;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy"?: PositioningStrategy;
        /**
          * String for setting filter button size
         */
        "size"?: 'medium' | 'small';
    }
    interface MarketFilterButton {
        /**
          * Whether or not the button is in an active state, e.g. filter is selected and dropdown is opened
         */
        "active"?: boolean;
        /**
          * Functionally and visually disables the button
         */
        "disabled"?: boolean;
        /**
          * Whether or not the button is focused
         */
        "focused"?: boolean;
        /**
          * Whether to display icon in place of label
         */
        "iconOnly"?: boolean;
        /**
          * The ID of the popover element that the button controls
         */
        "popoverId"?: string;
        /**
          * String for setting filter button size
         */
        "size"?: 'medium' | 'small';
    }
    interface MarketFilterDropdownMenu {
        /**
          * String for setting filter button size
         */
        "size"?: 'medium' | 'small';
    }
    interface MarketFilterGroup {
        /**
          * Maximum number of visible filters before they are truncated and moved into the overflow menu. However, filters may be truncated anyway if there is not enough space.
          * @default 3
         */
        "maxVisibleFilters"?: number;
    }
    interface MarketFooter {
    }
    interface MarketHeader {
        /**
          * String to use for the aria-label accessibility attribute of the default close "x" button.
         */
        "closeButtonAriaLabel"?: string;
        /**
          * Whether or not the header is in compact mode when navigation is present.
         */
        "compact"?: boolean;
        /**
          * Disables the default close "x" button.
         */
        "disableCloseButton"?: boolean;
        /**
          * Emitted when the close icon in the navigation slot is clicked.
         */
        "onMarketHeaderNavigate"?: (event: MarketHeaderCustomEvent<TMarketHeaderNavigateEventDetail>) => void;
        /**
          * Whether or not the navigation slot is shown
         */
        "showNavigation"?: boolean | null;
    }
    interface MarketIcon {
        /**
          * Optional: A number representing the fidelity of the icon to display.
         */
        "fidelity"?: number;
        /**
          * A string identifier for the icon. This can be either the semantic name which maps to a token or the descriptive name, which maps to a SVG id in the sprite, though using the semantic name is preferred because it gives you access to additional features like fidelity. You can also pass any string and it will display a symbol or group within any SVG sprite on the page, whether it is the Market sprite or not.
         */
        "name"?: string;
    }
    interface MarketInlineSectionHeader {
    }
    interface MarketInlineStatus {
        "variant"?: 'info' | 'success' | 'warning' | 'critical';
    }
    interface MarketInputPassword {
        /**
          * Whether or not this input should allow autocompletion by the browser Accepts a boolean, or "true", "false", "on", "off" or an [accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete"?: string | boolean;
        /**
          * A boolean representing whether the input is disabled or not. This visually and functionally will disable the input.
         */
        "disabled"?: boolean;
        /**
          * A boolean representing whether the input is focused or not.
         */
        "focused"?: boolean;
        /**
          * A string specifying an ID for the input.
         */
        "inputId"?: string;
        /**
          * Allows a browser to display an appropriate virtual keyboard. [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).
         */
        "inputmode"?: string;
        /**
          * A boolean representing whether the input is invalid or not. This represents error states.
         */
        "invalid"?: boolean;
        /**
          * A number specifying the maximum length of characters for the input value.
         */
        "maxlength"?: number;
        /**
          * A number specifying the minimum length of characters for the input value.
         */
        "minlength"?: number;
        /**
          * A string specifying a name for the input.
         */
        "name"?: string;
        /**
          * A string specifying the placeholder of the input. This is shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder"?: string;
        /**
          * A boolean representing whether the input is readonly or not.
         */
        "readonly"?: boolean;
        /**
          * Whether or not the input is required; used to validate the input's value. See MDN on the [required attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required)
         */
        "required"?: boolean;
        /**
          * String for setting input size. Sizes `small` and `medium` visually hide the label, but you should still provide one for accessibility purposes.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * A string specifying a value for the input. This will be visually shown on the input and can be edited by the user.
         */
        "value"?: string;
    }
    interface MarketInputSearch {
        /**
          * Whether or not this input should allow autocompletion by the browser; accepts a boolean, or `"true"`, `"false"`, `"on"`, `"off"` or an [accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).  Note (source: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)): In order to provide autocompletion, user-agents might require an input to have a: 1. Have a `name` and/or `id` attribute; 2. Be descendants of a `<form>` element; 3. The form to have a submit button
         */
        "autocomplete"?: string | boolean;
        /**
          * A boolean representing whether the input should focus on page load
         */
        "autofocus"?: boolean;
        /**
          * A string representing the clear button's aria-label; localize as needed
         */
        "clearButtonAriaLabel"?: string;
        /**
          * **INTERNAL [do not use directly]**  Used by `market-filter-group` when setting this component to compact mode
         */
        "compact"?: boolean;
        /**
          * A boolean representing whether the input is disabled or not; this visually and functionally will disable the input.
         */
        "disabled"?: boolean;
        /**
          * A boolean representing whether the input is focused or not
         */
        "focused"?: boolean;
        /**
          * A string representing the input's aria-label; localize as needed
         */
        "inputAriaLabel"?: string;
        /**
          * A number specifying the maximum length of characters for the input value
         */
        "maxlength"?: number;
        /**
          * A string specifying a name for the search input
         */
        "name"?: string;
        /**
          * Emitted when input is cleared by clicking the clear button
         */
        "onMarketInputSearchCleared"?: (event: MarketInputSearchCustomEvent<any>) => void;
        /**
          * Emitted when the component has loaded
         */
        "onMarketInputSearchDidLoad"?: (event: MarketInputSearchCustomEvent<any>) => void;
        /**
          * Emitted when the inner `<input>` element is focused or blurred
         */
        "onMarketInputSearchFocus"?: (event: MarketInputSearchCustomEvent<TMarketInputSearchFocusEventDetail>) => void;
        /**
          * Emitted whenever the input value changes
         */
        "onMarketInputSearchValueChange"?: (event: MarketInputSearchCustomEvent<TMarketInputSearchValueChangeEventDetail>) => void;
        /**
          * **INTERNAL [do not use directly]**  Emitted when the compact animation has started or ended
         */
        "onMarketInternalInputSearchCompactAnimation"?: (event: MarketInputSearchCustomEvent<TMarketInternalInputSearchCompactAnimationEventDetail>) => void;
        /**
          * A string specifying the placeholder of the input; this is shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder"?: string;
        /**
          * A string representing the search icon button's aria-label; localize as needed
         */
        "searchIconButtonAriaLabel"?: string;
        /**
          * A string specifying the size of the input
         */
        "size"?: 'small' | 'medium';
        /**
          * A string specifying a value for the input; this will be visually shown on the input and can be edited by the user.
         */
        "value"?: string;
        /**
          * @deprecated **DEPRECATED (v4.5.0)** Use `size` instead.  A string specifying the size of the input
         */
        "variant"?: 'small' | 'medium';
    }
    interface MarketInputText {
        /**
          * Whether or not this input should allow autocompletion by the browser Accepts a boolean, or "true", "false", "on", "off" or an [accepted string value for the autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete"?: string | boolean;
        /**
          * Whether the input is displaying an initial autofill value. Used for styling to ensure the label floats up correctly.
         */
        "autofilled"?: boolean;
        /**
          * A boolean representing whether the input should focus on page load. If multiple elements with `autofocus` are present, it is not guaranteed which one will ultimately receive the focus. It is advised that only one at most is present.
         */
        "autofocus"?: boolean;
        /**
          * Whether or not to automatically style this input as invalid based on native input validation attributes: `min`, `max`, `pattern`, `required`, `maxlength`, `minlength`. See MDN articles on [form validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation) and [constraint validation](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation)
         */
        "autovalidate"?: boolean;
        /**
          * A boolean representing whether the input is disabled or not. This visually and functionally will disable the input.
         */
        "disabled"?: boolean;
        /**
          * A boolean representing whether the input is focused or not.
         */
        "focused"?: boolean;
        /**
          * A string specifying an ID for the input.
         */
        "inputId"?: string;
        /**
          * Allows a browser to display an appropriate virtual keyboard. [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).
         */
        "inputmode"?: string;
        /**
          * A boolean representing whether the input is invalid or not. This represents error states.
         */
        "invalid"?: boolean;
        /**
          * Specifies the maximum value for number and time inputs. See MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max)
         */
        "max"?: string;
        /**
          * A number specifying the maximum length of characters for the input value. See MDN on the [maxlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)
         */
        "maxlength"?: number;
        /**
          * Specifies the minimum value for number and time inputs. See MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min)
         */
        "min"?: string;
        /**
          * A number specifying the minimum length of characters for the input value. See MDN on the [minlength attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)
         */
        "minlength"?: number;
        /**
          * A string specifying a name for the input.
         */
        "name"?: string;
        /**
          * Emitted when `market-input` is first fully rendered.
         */
        "onMarketInputDidLoad"?: (event: MarketInputTextCustomEvent<{ input: HTMLInputElement }>) => void;
        /**
          * Emitted whenever the input value changes.
         */
        "onMarketInputValueChange"?: (event: MarketInputTextCustomEvent<{ value: string; originalEvent: KeyboardEvent }>) => void;
        /**
          * Specifies a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions) to validate the input's value against. See MDN on the [pattern attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern"?: string;
        /**
          * A string specifying the placeholder of the input. This is shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder"?: string;
        /**
          * A boolean representing whether the input is readonly or not.
         */
        "readonly"?: boolean;
        /**
          * Whether or not the input is required; used to validate the input's value. See MDN on the [required attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required)
         */
        "required"?: boolean;
        /**
          * String for setting input size. Sizes `small` and `medium` visually hide the label, but you should still provide one for accessibility purposes.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Specifies the increment step for number and time inputs. See MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: string;
        /**
          * A string specifying the type of control to render. Any native HTML input type would work here.
         */
        "type"?: string;
        /**
          * A string specifying a value for the input. This will be visually shown on the input and can be edited by the user.
         */
        "value"?: string;
    }
    interface MarketLink {
        /**
          * Gives the link destructive styling.
         */
        "destructive"?: boolean;
        /**
          * Visually disables the link and prevents navigating to the link on click.
         */
        "disabled"?: boolean;
        /**
          * Causes the browser to treat the linked URL as a download. Only works for same-origin URLs. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download) for details on accepted values.
         */
        "download"?: string | undefined;
        /**
          * Links that exist within a larger block of text need to rely on more than color to meet accessibility standards.
         */
        "highlight"?: null | false | 'underline';
        /**
          * String that represents the URL the link goes to. If not present, the internal tag will be a `<button>` rather than `<a>` in order to align with a11y best practices.
         */
        "href"?: string;
        /**
          * Defines the relationship between a linked resource and the current document. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel) for details on accepted values.
         */
        "rel"?: string | undefined;
        /**
          * Specifies where to open the linked URL. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top' | undefined;
    }
    interface MarketList {
        /**
          * Filter strategy  - `"textcontent"` (default, case-insensitive): This strategy searches through each of the row’s `.textContent`. This means it would also search through a row’s subtext, accessories, and other slots. - `"label"` (case-insensitive): This strategy searches through the slotted `<label>` elements of rows. Note that if a `<label>` is not slotted in a row, this default filter strategy will not work. - `"value"` (case-sensitive): This strategy searches through the rows’ `value` attribute. Values are usually case-sensitive so they are treated the same way when searching for them. - `Function`: This strategy works similarly to `Array.prototype.filter()` where the function’s `boolean` output determines if the item will be kept or filtered out. For your convenience, you are provided with 5 parameters:   - `item`: `TMarketListItem`   - `label`: the `<label>`’s `.textContent`   - `query`: `value` of `<market-input-search>`   - `textContent`: the item’s `.textContent`   - `value`: `value` of the item
         */
        "filterStrategy"?: TMarketListFilterStrategyPropTypes;
        /**
          * Whether a count of selectable items rendered within the control row will be hidden
         */
        "hideSelectableCount"?: boolean;
        /**
          * Whether or not the list is interactive. Results in list items receiving hover and active styling when hovered/clicked.<br>  _NOTE:_ Lists slotted into `market-popover`, or any of the components that use it internally such as `market-select`, `market-dropdown`, and `market-button-dropdown`, will automatically have their `interactive` property set to `true`.
         */
        "interactive"?: boolean;
        /**
          * Whether or not the list can allow for multiple selections (currently not reflected in the `value` prop)
         */
        "multiselect"?: boolean;
        /**
          * String value used for the `aria-labelledby` attribute.
         */
        "name"?: string;
        /**
          * Fired when items are filtered using `market-input-search`
         */
        "onMarketListItemsFiltered"?: (event: MarketListCustomEvent<TMarketListItemsFilteredEventDetail>) => void;
        /**
          * Fired when the list items are reordered. If an item was dropped into this list from an external list, `oldIndex` is `-1`. If an item was removed from this list and dropped into an external list, `newIndex` is `-1`.
         */
        "onMarketListItemsReordered"?: (event: MarketListCustomEvent<TMarketReorderEventDetail>) => void;
        /**
          * Fired whenever an item is selected or deselected.
          * @property {TMarketListItem} newSelection - the row or card that has been selected
          * @property {string} newSelectionValue - the value of the new selection
          * @property {TMarketListItem} newDeselection - the row or card that has been deselected
          * @property {string} newDeselectionValue - the value of the new deselection
          * @property {Array<TMarketListItem>} currentSelections - an array of the currently selected rows or cards (excludes slotted control row, if any)
          * @property {string[]} currentSelectionValues - an array of the currently selected values (excludes slotted control row, if any)
          * @property {string[]} prevSelectionValues - an array of the previously selected values (excludes slotted control row, if any)
         */
        "onMarketListSelectionsDidChange"?: (event: MarketListCustomEvent<TMarketListSelectionsDidChangeEventDetail>) => void;
        /**
          * Fired when the slotchange event happens on the list. Allows parent components (like `market-select`) to update when slotted list items change.
         */
        "onMarketListSlotChange"?: (event: MarketListCustomEvent<any>) => void;
        /**
          * When set to `framework`, the list will move the reordered row back to its original position before the `marketListItemsReordered` event is fired. This is useful when the list is rendered within a framework like Ember or React.
         */
        "reorderMode"?: 'default' | 'framework';
        /**
          * Whether the list is reorderable or not. Setting to `internal` enables reordering rows internally while `external` also allows dragging to & from other lists.
         */
        "reorderable"?: TMarketReorderableOptions;
        /**
          * When set to `true`, rows/cards will not persist selected state on click. Only takes effect when `interactive` is true.
         */
        "transient"?: boolean;
        /**
          * A string specifying a value for the list. To select multiple values, separate **unique** values with a comma (e.g. `'orange,pear'`). Setting to empty string (`''`) will clear all current selections.
         */
        "value"?: string | Array<any>;
    }
    interface MarketModalFull {
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration"?: number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration"?: number;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal
         */
        "dialogID"?: string;
        /**
          * INTERNAL ONLY: Used in CSS to trigger start and stop animations
         */
        "hidden"?: boolean;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place in the stack
         */
        "index"?: number;
        /**
          * Sets the layout width for the main content area. Defaults to `regular`, which sets a a maximum content width of 600px. You can also use `wide` for a max 1248px content area, or `fluid` to have content fill the whole viewport.
         */
        "layout"?: 'regular' | 'wide' | 'fluid';
        /**
          * Triggered when the dialog is fully dismissed
         */
        "onMarketDialogDidDismiss"?: (event: MarketModalFullCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the modal is dismissed, handled by context manager
         */
        "onMarketDialogDismissed"?: (event: MarketModalFullCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the modal finishes loading
         */
        "onMarketDialogLoaded"?: (event: MarketModalFullCustomEvent<DialogLoadedEvent>) => void;
        /**
          * Enforces focus trapping on the modal
         */
        "trapFocus"?: boolean;
    }
    interface MarketModalPartial {
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration"?: number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration"?: number;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal
         */
        "dialogID"?: string;
        /**
          * INTERNAL ONLY: Used in CSS to trigger start and stop animations
         */
        "hidden"?: boolean;
        /**
          * INTERNAL ONLY: Used by the context manager to identify a specific dialog/modal's place in the stack
         */
        "index"?: number;
        /**
          * Triggered when the dialog is fully dismissed
         */
        "onMarketDialogDidDismiss"?: (event: MarketModalPartialCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the dialog is dismissed, handled by context manager
         */
        "onMarketDialogDismissed"?: (event: MarketModalPartialCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the modal finishes loading
         */
        "onMarketDialogLoaded"?: (event: MarketModalPartialCustomEvent<DialogLoadedEvent>) => void;
        /**
          * Enforces focus trapping on the modal
         */
        "trapFocus"?: boolean;
    }
    interface MarketPagination {
        /**
          * The current page being viewed.
         */
        "currentPage": number;
        /**
          * Functionally and visually disables all navigation buttons
         */
        "disabled"?: boolean;
        /**
          * Allow the user to navigate to the next page
         */
        "hasNextPage": boolean;
        /**
          * Allow the user to navigate to the previous page
         */
        "hasPreviousPage": boolean;
        /**
          * Fired whenever the menu selection is changed.
         */
        "onMarketPaginationNavigation"?: (event: MarketPaginationCustomEvent<TMarketInternalPaginationNavigationEventDetail>) => void;
        /**
          * Fired whenever the page size is changed.
         */
        "onMarketPaginationPageSizeChange"?: (event: MarketPaginationCustomEvent<TMarketPaginationPageSizeChangeEventDetail>) => void;
        /**
          * The number of results displayed per page.
         */
        "pageSize"?: string;
        /**
          * Options for page sizes (comma separated list of numbers). If omitted, will not display the page size subcomponent.
         */
        "pageSizeOptions"?: string;
        /**
          * The total number of pages.
         */
        "totalPages": number;
    }
    interface MarketPaginationNav {
        /**
          * The current page being viewed.
         */
        "currentPage": number;
        /**
          * Functionally and visually disables the navigation buttons
         */
        "disabled"?: boolean;
        /**
          * Allow the user to navigate to the next page
         */
        "hasNextPage": boolean;
        /**
          * Allow the user to navigate to the previous page
         */
        "hasPreviousPage": boolean;
        /**
          * Fired when a new page is selected
          * @property {string} page - page number to navigate to
          * @property {string} prevPage - the current page _before_ navigation
          * @property {string} pageSize - the number of items per page
         */
        "onMarketInternalPaginationNavigation"?: (event: MarketPaginationNavCustomEvent<TMarketInternalPaginationNavigationEventDetail>) => void;
        /**
          * The number of results displayed per page. Required to emit this value as part of the navigation event.
         */
        "pageSize"?: string;
        /**
          * The total number of pages.
         */
        "totalPages": number;
    }
    interface MarketPaginationPageSize {
        /**
          * Functionally and visually disables dropdown
         */
        "disabled"?: boolean;
        /**
          * Fired when the selected page size value changes
          * @property {string} value - new selected option
         */
        "onMarketInternalPaginationPageSizeChange"?: (event: MarketPaginationPageSizeCustomEvent<TMarketPaginationPageSizeChangeEventDetail>) => void;
        /**
          * Options for page sizes (comma separated list).
         */
        "pageSizeOptions": string;
        /**
          * The number of results displayed per page.
         */
        "value": string;
    }
    interface MarketPill {
        /**
          * Controls whether the pill should display an indicator icon.
         */
        "indicator"?: boolean;
        /**
          * Controls whether the pill should react to hovers/clicks. It is recommended to only set this to true if you have also slotted an icon into the pill.
         */
        "interactive"?: boolean;
        /**
          * String for setting pill size
         */
        "size"?: 'medium' | 'small';
        /**
          * Sets the visual variant style for the pill.
         */
        "variant"?: MarketPillVariant;
    }
    interface MarketPopover {
    }
    interface MarketProgressTracker {
        /**
          * Whether the progress tracker is in compact mode  Only functional when `orientation` is set to `"horizontal"`
          * @default false
         */
        "compact"?: boolean;
        /**
          * Whether there are connectors displayed between steps
          * @default false
         */
        "connectorless"?: boolean;
        /**
          * Index of the current step of the tracker  When defined, the child `market-progress-tracker-step` components’ `active` and `completed` attributes will be automatically set.  Otherwise, it is expected that the steps’ `active` and `completed` properties are manually set.
          * @default undefined
         */
        "currentStepIndex"?: number;
        /**
          * Type of icon used to indicate the step’s progress
          * @default undefined
         */
        "indicator"?: 'circle' | 'check';
        /**
          * Whether this step tracker is interactive  Only functional when `orientation` is set to `"horizontal"`
          * @default false
         */
        "interactive"?: boolean;
        /**
          * Progress tracker orientation
          * @default 'vertical'
         */
        "orientation"?: 'horizontal' | 'vertical';
        /**
          * Whether the direction of the progress indicators is reversed
          * @default false
         */
        "reversed"?: boolean;
        /**
          * Steps’ size
          * @default 'medium'
         */
        "size"?: 'large' | 'medium' | 'small';
    }
    interface MarketProgressTrackerStep {
        /**
          * Whether the step is active
          * @default false
         */
        "active"?: boolean;
        /**
          * Whether the step is completed
          * @default false
         */
        "completed"?: boolean;
        /**
          * Unique name of the step  When this step is interactive and clicked, it is included in the detail of the emitted event.
          * @default undefined
         */
        "name"?: string;
        /**
          * Emitted when this step is clicked
         */
        "onMarketProgressTrackerStepClick"?: (event: MarketProgressTrackerStepCustomEvent<TMarketProgressTrackerStepClickEventDetail>) => void;
    }
    interface MarketQrcode {
        /**
          * Include a six data-pixel border around the QR code. When this attribute is present, the QR code will have a background color (default is transparent background).
         */
        "border"?: boolean;
        /**
          * The URL or other content of the QR code. The QR code is generated using [@square/qrcode-encoder](https://github.com/squareup/qrcode/blob/master/packages/square-qrcode-encoder/README.md).
         */
        "content"?: string;
        /**
          * When true, QR code will render all elements in black & white.
         */
        "monochrome"?: boolean;
        /**
          * By default, QR code size is dependent on the information being encoded. Use this property to set the QR code's height and width in pixels.
         */
        "size"?: number;
    }
    interface MarketRadio {
        /**
          * Whether the radio is active or not.
         */
        "active"?: boolean;
        /**
          * Whether the radio button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the radio is focused or not.
         */
        "focused"?: boolean;
        /**
          * Whether the radio is hovered or not.
         */
        "hovered"?: boolean;
        /**
          * Whether the radio button is invalid.
         */
        "invalid"?: boolean;
        /**
          * Fired whenever "selected" prop value changes.
         */
        "onMarketRadioValueChange"?: (event: MarketRadioCustomEvent<{ current: boolean; previous: boolean }>) => void;
        /**
          * Whether the radio button is selected (analogous to the HTML input attribute `checked`). If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.
         */
        "selected"?: boolean;
    }
    interface MarketRow {
        /**
          * Whether the slotted control appears to the left or right of the main content.
         */
        "controlPosition"?: 'trailing' | 'leading';
        /**
          * Gives the row destructive styling.
         */
        "destructive"?: boolean;
        /**
          * Whether the row is disabled. Also disables slotted controls (`<market-checkbox>`, `<market-radio>`, or `<market-toggle>`), if present.
         */
        "disabled"?: boolean;
        /**
          * Whether the row is drag & drop enabled
         */
        "dragEnabled"?: boolean;
        /**
          * Whether the drag handle appears to the left or right.
         */
        "dragHandlePosition"?: 'leading' | 'trailing';
        /**
          * A link that this row should navigate to on click. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Whether or not the row is interactive. Results in rows receiving hover and active styling when hovered/clicked.  Automatically set to `true` when using the drill variant or passing in a slotted control (checkbox/radio/toggle).<br>  Automatically be set to reflect the list's `interactive` value if used inside of `<market-list>`.
         */
        "interactive"?: boolean;
        /**
          * Fired whenever a row is deselected.
         */
        "onMarketRowDeselected"?: (event: MarketRowCustomEvent<TMarketRowDeselectedEventDetail>) => void;
        /**
          * Fired whenever a row is selected.
         */
        "onMarketRowSelected"?: (event: MarketRowCustomEvent<TMarketRowSelectedEventDetail>) => void;
        /**
          * Whether the row is currently selected. Used by `<market-list>` and `<market-select>`. Also sets the selection state for slotted controls (`<market-checkbox>`, `<market-radio>`, or `<market-toggle>`), if present.
         */
        "selected"?: boolean;
        /**
          * Determines the form factor of the row.
         */
        "size"?: 'small' | 'medium';
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. See [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for details on accepted values.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top' | undefined;
        /**
          * By default, row selection is toggled on click. There are some cases, such as selects, where we instead want the row to stay active on subsequent clicks. Setting `togglable` to `false` enables this behavior. Can be set by `<market-list>` and `<market-select>`.
         */
        "togglable"?: boolean;
        /**
          * When set to `true`, rows will not persist selected state on click. Only takes effect when `interactive` is true.
         */
        "transient"?: boolean;
        /**
          * The value for the row.
         */
        "value"?: string;
        /**
          * The style of row you want to use. The default is "regular", which allows you to optionally slot a checkbox, radio, or (in the future) toggle control. The other option is "drill", which functions more like a link that you can use to drill through a series of action card sets.
         */
        "variant"?: 'regular' | 'drill';
    }
    interface MarketSegment {
        /**
          * Whether the market segment should appear in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * Fired when the segment is clicked or otherwise selected
         */
        "onMarketSegmentSelectedChanged"?: (event: MarketSegmentCustomEvent<{
    value: boolean;
    prevValue: boolean;
  }>) => void;
        /**
          * A string specifying a value for the segment.
         */
        "value"?: string;
    }
    interface MarketSegmentedControl {
        /**
          * A boolean representing whether the market-segmented-control is disabled or not. This visually and functionally will disable the control area.
         */
        "disabled"?: boolean;
        /**
          * Fired when the a new segment is selected
         */
        "onMarketSegmentedSelectionDidChange"?: (event: MarketSegmentedControlCustomEvent<{
    selectedSegment: HTMLMarketSegmentElement;
    selectedSegmentValue: string;
    deselectedSegment: HTMLMarketSegmentElement;
    deselectedSegmentValue: string;
  }>) => void;
        /**
          * A string specifying a value for the segmented-control. This value determines which segment is selected based on the segment value.
         */
        "value"?: string;
    }
    interface MarketSelect {
        /**
          * Functionally and visually disables the select.
         */
        "disabled"?: boolean;
        /**
          * Whether or not the select is focused.
         */
        "focused"?: boolean;
        /**
          * Whether or not the select is invalid (w/ corresponding visual state)
         */
        "invalid"?: boolean;
        /**
          * Whether or not multiselect is enabled
         */
        "multiselect"?: boolean;
        /**
          * String for the "name" attribute. Used when slotted into `market-field`.
         */
        "name"?: string;
        /**
          * Fired whenever the select is closed.
         */
        "onMarketSelectClosed"?: (event: MarketSelectCustomEvent<any>) => void;
        /**
          * Fired whenever the select is opened.
         */
        "onMarketSelectOpened"?: (event: MarketSelectCustomEvent<any>) => void;
        /**
          * Fired by the `marketListSelectionsDidChange` listener.
          * @property {string} value - value attribute of the selected element
          * @property {HTMLMarketRowElement} newSelectedOption - the row that has just been selected
          * @property {HTMLMarketRowElement} newDeselectedOption - the row that has just been deselected
          * @property {HTMLMarketRowElement} currentSelectedOptions - the rows that are currently selected
         */
        "onMarketSelectValueDidChange"?: (event: MarketSelectCustomEvent<{
    value: string | Array<any>;
    newSelectedOption: HTMLMarketRowElement;
    newDeselectedOption: HTMLMarketRowElement;
    currentSelectedOptions: Array<HTMLMarketRowElement>;
  }>) => void;
        /**
          * A string specifying the placeholder for the select. This is shown when the select is open with no selection.
         */
        "placeholder"?: string;
        /**
          * Ancestor selector to contain the popover menu. Use this if you need the popover to be appended to an ancestor element other than the `body` element.
         */
        "popoverContainer"?: string;
        /**
          * Configuration option for Floating UI (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://floating-ui.com/docs/computePosition#strategy
         */
        "popoverStrategy"?: Strategy;
        /**
          * Whether or not the select is readonly.
         */
        "readonly"?: boolean;
        /**
          * Whether or not the select is required. This property relays important contextual information when using a screen reader
         */
        "required"?: boolean;
        /**
          * String for setting select size. Sizes `small` and `medium` visually hide the label, but you should still provide one for accessibility purposes.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * A string specifying a value for the select Must correspond to a `value` attribute on a slotted `market-row` For multiselect, separate values with a comma (e.g. 'orange,pear').
         */
        "value"?: string | Array<any>;
    }
    interface MarketSheet {
        /**
          * The duration for the modal enter animation, set from design tokens
         */
        "animationEnterDuration"?: number;
        /**
          * The duration for the modal exit animation, set from design tokens
         */
        "animationExitDuration"?: number;
        /**
          * Translated string to label Close handle
         */
        "closeHandleAriaLabel"?: string;
        /**
          * Disable focus trapping on the modal
         */
        "disableFocus"?: boolean;
        /**
          * Triggered when the dialog is fully dismissed
         */
        "onMarketDialogDidDismiss"?: (event: MarketSheetCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the sheet is dismissed, handled by context manager
         */
        "onMarketDialogDismissed"?: (event: MarketSheetCustomEvent<DialogDismissedEvent>) => void;
        /**
          * Triggered when the sheet finishes loading
         */
        "onMarketDialogLoaded"?: (event: MarketSheetCustomEvent<DialogLoadedEvent>) => void;
        /**
          * Default state sheet opens to when opened from close
         */
        "openMode"?: 'full' | 'dynamic' | 'partial';
    }
    interface MarketStepper {
        /**
          * The decrement button's aria-label. Localize as needed.
         */
        "decrementAriaLabel"?: string;
        /**
          * Whether the input is disabled or not. This visually and functionally disables the input.
         */
        "disabled"?: boolean;
        /**
          * Whether the input is focused or not.
         */
        "focused"?: boolean;
        /**
          * The increment button's aria-label. Localize as needed.
         */
        "incrementAriaLabel"?: string;
        /**
          * The inner input's aria-label. Localize as needed.
         */
        "inputAriaLabel"?: string;
        /**
          * The ID for the inner input.
         */
        "inputId"?: string;
        /**
          * Whether the input is invalid or not. This represents error states.
         */
        "invalid"?: boolean;
        /**
          * A number specifying the greatest value in the range of permitted values. (See MDN on the [max attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max))
         */
        "max"?: number;
        /**
          * A number specifying the most negative value in the range of permitted values. (See MDN on the [min attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min))
         */
        "min"?: number;
        /**
          * The name for the inner input.
         */
        "name"?: string;
        /**
          * Emitted when the inner `<input>` element is focused.
         */
        "onMarketStepperInputFocus"?: (event: MarketStepperCustomEvent<any>) => void;
        /**
          * Emitted when the value changes.
         */
        "onMarketStepperValueChange"?: (event: MarketStepperCustomEvent<any>) => void;
        /**
          * The placeholder of the input. Shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder"?: string;
        /**
          * Whether the input is readonly or not.
         */
        "readonly"?: boolean;
        /**
          * A positive number specifying the increment step. (See MDN on the [step attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step))
         */
        "step"?: number;
        /**
          * The value for the input. This is visually shown on the input and can be edited by the user.
         */
        "value"?: number;
    }
    interface MarketTab {
        /**
          * Whether or not the tab is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Fired when the tab selection has changed  `market-tab-list` listens to this event and stops further propagation
         */
        "onMarketTabSelectedChanged"?: (event: MarketTabCustomEvent<TMarketTabSelectedChangedEventDetail>) => void;
        /**
          * Whether or not the tab is selected
          * @default false
         */
        "selected"?: boolean;
        /**
          * Tab's size
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface MarketTabList {
        /**
          * String for the default selected tab (i.e. `market-tab`'s `id` attribute)  Only used when the component initially loads
          * @default undefined
         */
        "defaultTab"?: string;
        /**
          * Fired when a `market-tab` is selected
         */
        "onMarketTabListSelectedTabChanged"?: (event: MarketTabListCustomEvent<TMarketTabListSelectedTabChangedEventDetail>) => void;
        /**
          * String for the selected tab (i.e. `market-tab`'s `id` attribute)  Omitting or setting to empty string will default to the first non-disabled tab
          * @default undefined
         */
        "selectedTab"?: string;
        /**
          * Tabs' size
          * @default undefined
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface MarketTabPanel {
        /**
          * Whether or not the panel is hidden
         */
        "hidden"?: boolean;
    }
    interface MarketTable {
    }
    interface MarketTableArea {
        /**
          * Whether or not this table area is currently visible/has any rows or cells within
         */
        "active"?: boolean;
        /**
          * Set by the parent market-table or market-row component to determine CSS grid template
         */
        "gridTemplate"?: Array<string>;
        /**
          * Whether or not this area is grouping columns (vertical) or rows (horizontal)
         */
        "orientation"?: 'horizontal' | 'vertical';
        /**
          * Sets the element's grid-column CSS property to determine where this particular element falls on the parent grid. Used in vertical orientation table areas
         */
        "placement"?: Array<number>;
        /**
          * Sticks this area to an edge of the table
         */
        "stickTo"?: 'top' | 'bottom' | 'left' | 'right';
    }
    interface MarketTableCell {
        /**
          * Whether the cell is currently active.
         */
        "active"?: boolean;
        /**
          * Content/text alignment for this cell, default is set based on the alignment of the market-table-column with matching column/name prop  **NOTE:** this is set automatically when used in a `market-table` with a corresponding `market-table-column`.
         */
        "align"?: false | 'left' | 'right';
        /**
          * A key that matches the 'name' prop on the appropriate market-table-column  **NOTE:** this is set automatically when used in a `market-table` with a corresponding `market-table-column`.
         */
        "column"?: string;
        /**
          * Whether the cell is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether or not the cell is interactive. Results in cell receiving hover and active styling when hovered/clicked.
         */
        "interactive"?: boolean;
        /**
          * Determines how much to indent the cell by. This will be multiplied by the default indentation size (40px) for uniform indentation levels  **NOTE:** this is inherited automatically if set on the parent `market-table-row`.
         */
        "leadingIndentation"?: number;
        /**
          * Fired whenever an interactive cell is clicked.
         */
        "onMarketTableCellClicked"?: (event: MarketTableCellCustomEvent<any>) => void;
    }
    interface MarketTableColumn {
        /**
          * Will set the `align` property on all related cells to this value
         */
        "align"?: false | 'left' | 'right';
        /**
          * Hides the column and all related cells.
         */
        "hidden"?: boolean;
        /**
          * **INTERNAL [do not use directly]** The order of this market-table-column in the DOM
         */
        "index"?: number;
        /**
          * **REQUIRED:** A unique key for this column, used to map all related cells together
         */
        "name"?: string;
        /**
          * Emitted when a table column heading is clicked to sort
         */
        "onMarketTableColumnSort"?: (event: MarketTableColumnCustomEvent<{
    column: string;
    previousSortOrder: 'ascending' | 'descending';
  }>) => void;
        /**
          * Emitted when this column is stuck to a table edge. Can happen when the stick-to property is updated, .stick() method is called or when slotted content in the parent table changes
         */
        "onMarketTableColumnStick"?: (event: MarketTableColumnCustomEvent<{
    position: 'left' | 'right';
    index: number;
  }>) => void;
        /**
          * Emitted when a table column heading is clicked to sort
         */
        "onMarketTableColumnUnstick"?: (event: MarketTableColumnCustomEvent<{
    position: 'left' | 'right';
    index: number;
  }>) => void;
        /**
          * Emitted when a table column's hidden property changes. Used by market-table to toggle visibility of related table cells.
         */
        "onMarketTableColumnVisibilityChange"?: (event: MarketTableColumnCustomEvent<{
    columnName: string;
    hidden: boolean;
  }>) => void;
        /**
          * What order the column is sorting in; ascending points up and descending points down If the column is sortable and this prop is not present, the sort icon points up but is grayed out.
         */
        "sortOrder"?: 'ascending' | 'descending';
        /**
          * Whether or not this column is sortable
         */
        "sortable"?: boolean;
        /**
          * Makes this column stick to an edge of the table
         */
        "stickTo"?: 'left' | 'right';
        /**
          * **INTERNAL [do not use directly]** Set by the parent table element, based on it's grid-template-columns CSS value
         */
        "width"?: string;
    }
    interface MarketTableRow {
        /**
          * Whether the row is currently active.
         */
        "active"?: boolean;
        /**
          * **INTERNAL [do not use directly]** This row's slotted market-table-cell elements
         */
        "cells"?: NodeListOf<TCell>;
        /**
          * Whether the row is disabled.
         */
        "disabled"?: boolean;
        /**
          * **INTERNAL [do not use directly]** Used to set aria-expanded on the nested button for animation
         */
        "expanded"?: boolean;
        /**
          * Gives this row footer styling
         */
        "footer"?: boolean;
        /**
          * **INTERNAL [do not use directly]** Used to set the CSS grid template for the fixed left column group (market-table-area) in the row. Set by the parent table element
         */
        "gridTemplateLeft"?: Array<string>;
        /**
          * **INTERNAL [do not use directly]** Used to set the CSS grid template for the main column group (market-table-area) in the row. Set by the parent table element
         */
        "gridTemplateMain"?: Array<string>;
        /**
          * **INTERNAL [do not use directly]** Used to set the CSS grid template for the fixed right column group (market-table-area) in the row. Set by the parent table element
         */
        "gridTemplateRight"?: Array<string>;
        /**
          * Gives this row header styling
         */
        "header"?: boolean;
        /**
          * **INTERNAL [do not use directly]** The order of this row in the DOM
         */
        "index"?: number;
        /**
          * Whether or not the row is interactive. Results in row receiving hover and active styling when hovered/clicked.
         */
        "interactive"?: boolean;
        /**
          * Optional: Level of leading indentation This will be multiplied by the default indentation size (40px) for uniform indentation levels
         */
        "leadingIndentation"?: number;
        /**
          * Used to determine if the table has accordion rows. When true, it will add extra spacing at the beginning of the row. This will keep the row's contents aligned with the accordion rows. This is set from the market-table component.  This property can be overriden when the content does not need the extra accordion spacing.
         */
        "nested"?: boolean;
        /**
          * Emitted when the nested row button is toggled
         */
        "onMarketAccordionToggled"?: (event: MarketTableRowCustomEvent<{ expanded: boolean }>) => void;
        /**
          * Emitted when the nested row button is toggled
         */
        "onMarketNestedRowToggled"?: (event: MarketTableRowCustomEvent<{ expanded: boolean }>) => void;
        /**
          * **INTERNAL [do not use directly]** If this is a header row with column children, emit an event when this row loads so the parent table can read the column data
         */
        "onMarketTableHeaderLoaded"?: (event: MarketTableRowCustomEvent<{ columns: NodeListOf<HTMLMarketTableColumnElement> }>) => void;
        /**
          * Fired whenever an interactive row is clicked.
         */
        "onMarketTableRowClicked"?: (event: MarketTableRowCustomEvent<any>) => void;
        /**
          * Emitted when this row is stuck to a table edge Can be fired when stick-to or sticky changes, the .stick() method is called directly or when this row is first rendered or slotted
         */
        "onMarketTableRowStick"?: (event: MarketTableRowCustomEvent<{
    position: 'left' | 'right';
    index: number;
  }>) => void;
        /**
          * Emitted when this row is unstuck from a table edge Can be fired when stick-to or sticky changes, the .unstick() method is called directly or when this row is first rendered or slotted
         */
        "onMarketTableRowUnstick"?: (event: MarketTableRowCustomEvent<{
    position: 'left' | 'right';
    index: number;
  }>) => void;
        /**
          * The slot this row was originally placed in
         */
        "originalSlot"?: string;
        /**
          * Whether the row is selected. Used by control element.
         */
        "selected"?: boolean;
        /**
          * Optional: The edge of the table to fix this row to.
         */
        "stickTo"?: false | 'top' | 'bottom';
        /**
          * Optional: When present, can be used instead of `stickTo` in combination with `header` or `footer` to determine the edge of the table to stick this row to. (`header` elements with `[sticky]` will be attached to the top, and `footer` elements to the bottom)
         */
        "sticky"?: boolean;
        /**
          * **INTERNAL [do not use directly]** A list of the market-table-column elements, set from the parent table so we can assign this row's cells some properties based on the columns
         */
        "tableColumns"?: Array<HTMLMarketTableColumnElement>;
    }
    interface MarketTableV2 {
        /**
          * Sets the horizontal alignment. Table alignment will be inherited by descendant rows & cells.
         */
        "align"?: 'left' | 'center' | 'right';
        /**
          * Whether the slotted table groups are collapsible.
         */
        "collapsible"?: boolean;
        /**
          * Sets the `table-layout` algorithm. By default, the column widths are adjusted to fit the content. If column widths are explicitly sized, use `fixed` to speed up render time. See [table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) for more information.
         */
        "layout"?: 'auto' | 'fixed';
        /**
          * Fired when the table rows are reordered. If a row was dropped into this table from an external table, `oldIndex` is `-1`. If a row was removed from this table and dropped into an external table, `newIndex` is `-1`.
         */
        "onMarketTableV2RowsReordered"?: (event: MarketTableV2CustomEvent<TMarketReorderEventDetail>) => void;
        /**
          * When set to `framework`, the table will move the reordered item back to its original position before the `marketTableV2RowsReordered` event is fired. This is useful when the table is rendered within a framework like Ember or React.
         */
        "reorderMode"?: 'default' | 'framework';
        /**
          * Whether the table is reorderable or not. Setting to `internal` enables reordering table rows internally while `external` also allows dragging to & from other tables.
         */
        "reorderable"?: TMarketReorderableOptions;
        /**
          * Whether the table is selected. Relevant if the table has rows with a slotted controls.
         */
        "selected"?: TMarketTableV2Selection;
        /**
          * Sets the vertical alignment. Table alignment will be inherited by descendant rows & cells.
         */
        "valign"?: 'bottom' | 'middle' | 'top';
    }
    interface MarketTableV2Cell {
        /**
          * Whether the cell is currently active.
         */
        "active"?: boolean;
        /**
          * Sets the horizontal alignment. When not set, alignment is inherited from an ancestor row or table.
         */
        "align"?: 'left' | 'center' | 'right';
        /**
          * Displays a leading clickable caret; intended to be used in conjunction with `<market-table-v2-group>` to support nested rows.
         */
        "caret"?: 'up' | 'down';
        /**
          * Translated label for the expand action when group is currently collapsed (for screen reader users)
         */
        "caretAriaLabelCollapsed"?: string;
        /**
          * Translated label for the collapse action when group is currently expanded (for screen reader users)
         */
        "caretAriaLabelExpanded"?: string;
        /**
          * Whether the cell is currently disabled.
         */
        "disabled"?: boolean;
        /**
          * Indentation level
         */
        "indent"?: number;
        /**
          * Whether the cell is interactive, which results in hover, focus, & pressed styles.
         */
        "interactive"?: boolean;
        /**
          * Set this to `true` to force cell text onto one line. May cause horizontal scrolling in the ancestor table.
         */
        "nowrap"?: boolean;
        /**
          * Fired when the caret is clicked
         */
        "onMarketTableV2CellCaretClicked"?: (event: MarketTableV2CellCustomEvent<void>) => void;
        /**
          * Fired when clicked when sortable is `true`
         */
        "onMarketTableV2CellSortClicked"?: (event: MarketTableV2CellCustomEvent<MarketTableV2SortOrderChangeDetail>) => void;
        /**
          * Whether the cell is selected. Relevant if the cell has a slotted control.
         */
        "selected"?: TMarketTableV2Selection;
        /**
          * Translated label for the icon indicating an ascending sort (for screen reader users)
         */
        "sortAriaLabelAscending"?: string;
        /**
          * Translated label for the icon indicating a descending sort (for screen reader users)
         */
        "sortAriaLabelDescending"?: string;
        /**
          * Translated label for the icon indicating no sort applied (for screen reader users)
         */
        "sortAriaLabelNone"?: string;
        /**
          * When `sortable` is `true`, this prop sets the `aria-sort` attribute and displays an arrow in the correct sort direction.
         */
        "sortOrder"?: TMarketTableV2SortOrder;
        /**
          * When `sortable` is `true`, this prop specifies the sorting strategy. - `'string'`: sorts rows alphabetically (case-insensitive) by the text content of the cell (default) - `'number'`: sorts rows numerically using [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) to parse the cell content - `'datetime'`: sorts rows chronologically using [date-fns `parse()`](https://date-fns.org/v3.3.1/docs/parse) method to parse the cell content. This strategy requires specifying a format in the cell's `sortStrategyFormat` prop; see accepted formats [here](https://date-fns.org/v3.3.1/docs/parse) - `Function`: a custom callback function to compare rows, similar to the `compareFn` in [`Array.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort). The following arguments are provided to the function:   - `rowA`: the first row for comparison   - `rowB`: the second row for comparison   - `order`: the direction of the sort, either `ascending` or `descending`   - `index`: the index of the column being sorted on    The callback function should return a number whose sign indicates the relative order of the two elements:   - negative if `rowA` is less than `rowB`   - positive if `rowA` is greater than `rowB`   - zero if `rowA` & `rowB` are equal
         */
        "sortStrategy"?: TMarketTableV2SortStrategy;
        /**
          * When setting `sortStrategy` to `"datetime"`, this prop is required to specify the format. See accepted formats [here](https://date-fns.org/v3.3.1/docs/parse)
         */
        "sortStrategyFormat"?: string;
        /**
          * When the cell is in a table header row, this prop enables sorting by this cell's column.
         */
        "sortable"?: boolean;
        /**
          * Makes a cell "stick" to the left or right of its parent row. Requires the row to be sized wider than the table to enable horizontal scrolling.
         */
        "sticky"?: 'left' | 'right';
        /**
          * Sets the vertical alignment. When not set, alignment is inherited from an ancestor row or table.
         */
        "valign"?: 'bottom' | 'middle' | 'top';
    }
    interface MarketTableV2Group {
        /**
          * Whether the group is expanded or collapsed, when `collapsible` is `true`.
         */
        "collapsed"?: boolean;
        /**
          * Whether the group is collapsible.
         */
        "collapsible"?: boolean;
        /**
          * Whether the group is drag & drop enabled.
         */
        "dragEnabled"?: boolean;
        /**
          * Indentation level
         */
        "indent"?: number;
        /**
          * Fired when the group's collapsed state changes.
         */
        "onMarketTableV2GroupCollapsedChange"?: (event: MarketTableV2GroupCustomEvent<{ previous: boolean; current: boolean }>) => void;
        /**
          * Fired when the group's rows are reordered. If a row was dropped into this group from an external source, `oldIndex` is `-1`. If a row was removed from this group and dropped into an external source, `newIndex` is `-1`.
         */
        "onMarketTableV2RowsReordered"?: (event: MarketTableV2GroupCustomEvent<TMarketReorderEventDetail>) => void;
        /**
          * When set to `framework`, the group will move the reordered item back to its original position before the `marketTableV2RowsReordered` event is fired. This is useful when the table is rendered within a framework like Ember or React.
         */
        "reorderMode"?: 'default' | 'framework';
        /**
          * Whether the group is reorderable or not. Setting to `internal` enables reordering table rows internally while `external` also allows dragging to & from other tables.
         */
        "reorderable"?: TMarketReorderableOptions;
        /**
          * Whether the group is selected. Relevant if the group has rows with slotted controls.
         */
        "selected"?: TMarketTableV2Selection;
    }
    interface MarketTableV2Row {
        /**
          * Whether the row is currently active.
         */
        "active"?: boolean;
        /**
          * Sets the horizontal alignment. When not set, alignment is inherited from an ancestor table. Likewise, row alignment will be inherited by descendant cells.
         */
        "align"?: 'left' | 'center' | 'right';
        /**
          * Displays a leading clickable caret in the first cell; intended to be used in conjunction with `<market-table-v2-group>` to support nested rows.
         */
        "caret"?: 'up' | 'down';
        /**
          * Whether the row is currently disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the row is drag & drop enabled.
         */
        "dragEnabled"?: boolean;
        /**
          * Whether the drag handle appears to the left or right.
         */
        "dragHandlePosition"?: 'leading' | 'trailing';
        /**
          * Whether the drag handle appears always or only on hover
         */
        "dragHandleVisibility"?: 'always' | 'hover';
        /**
          * Styles a row with footer styles.
         */
        "footer"?: boolean;
        /**
          * Styles a row with header styles.
         */
        "header"?: boolean;
        /**
          * Indentation level of the first cell in the row.
         */
        "indent"?: number;
        /**
          * Whether the row is interactive, which results in hover, focus, & pressed styles.
         */
        "interactive"?: boolean;
        /**
          * Fired when the row selection state changes. Used to externally signal selection changes.
         */
        "onMarketTableV2RowSelectionChange"?: (event: MarketTableV2RowCustomEvent<MarketTableV2SelectionChangeEventDetail>) => void;
        /**
          * Whether the row is selected. Relevant if the row's first cell has a slotted control.
         */
        "selected"?: TMarketTableV2Selection;
        /**
          * Makes a row "stick" to the top or bottom of its parent table. Requires an explict height on the table to enable vertical scrolling.
         */
        "sticky"?: 'top' | 'bottom';
        /**
          * Sets the vertical alignment. When not set, alignment is inherited from an ancestor table. Likewise, row alignment will be inherited by descendant cells.
         */
        "valign"?: 'bottom' | 'middle' | 'top';
    }
    interface MarketTabs {
        /**
          * String for the default selected tab (i.e. `market-tab`'s `id` attribute)  Only used when the component initially loads
          * @default undefined
         */
        "defaultTab"?: string;
        /**
          * String for the selected tab (i.e. `market-tab`'s `id` attribute)  Omitting or setting to empty string will default to the first non-disabled tab
          * @default undefined
         */
        "selectedTab"?: string;
    }
    interface MarketTag {
        /**
          * Functionally and visually disables the tag
         */
        "disabled"?: boolean;
        /**
          * Whether or not the tag is in a focused state
         */
        "focused"?: boolean;
        /**
          * Emitted when the tag's remove indicator is clicked.
         */
        "onMarketTagDismissed"?: (event: MarketTagCustomEvent<any>) => void;
        /**
          * String for setting tag size
         */
        "size"?: 'medium' | 'small';
    }
    interface MarketTextarea {
        /**
          * A boolean representing whether the input should focus on page load. If multiple elements with `autofocus` are present, it is not guaranteed which one will ultimately receive the focus. It is advised that only one at most is present.
         */
        "autofocus"?: boolean;
        /**
          * A boolean representing whether the textarea is disabled or not. This visually and functionally will disable the textarea.
         */
        "disabled"?: boolean;
        /**
          * A boolean representing whether the textarea is focused or not.
         */
        "focused"?: boolean;
        /**
          * Allows a browser to display an appropriate virtual keyboard. [Accepted values](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).
         */
        "inputmode"?: string;
        /**
          * A boolean representing whether the textarea is invalid or not. This represents error states.
         */
        "invalid"?: boolean;
        /**
          * A string specifying the maximum height in pixels for the textarea. Vertical resizing will be limited to this height. Example value: '200px'.  **DEPRECATED**: set `max-height` via CSS
          * @default '320px'
         */
        "maxHeight"?: string;
        /**
          * A string specifying the maximum length of characters for the input value.
         */
        "maxlength"?: string;
        /**
          * A string specifying a name for the textarea.
         */
        "name"?: string;
        /**
          * Fired whenever the value of the textarea changes.
         */
        "onMarketTextareaValueChange"?: (event: MarketTextareaCustomEvent<{ value: string; originalEvent: KeyboardEvent }>) => void;
        /**
          * A string specifying the placeholder of the textarea. This is shown before a user attempts to add a value, given no value is already provided.
         */
        "placeholder"?: string;
        /**
          * A boolean representing whether the textarea is readonly or not.
         */
        "readonly"?: boolean;
        /**
          * A string specifying a value for the textarea. This will be visually shown on the textarea and can be edited by the user.
         */
        "value"?: string;
    }
    interface MarketTile {
        /**
          * Whether to disable the tile.
         */
        "disabled"?: boolean;
        /**
          * Enables interactivity.
         */
        "interactive"?: boolean;
        /**
          * Fired whenever the remove button is clicked
         */
        "onMarketTileRemoveClicked"?: (event: MarketTileCustomEvent<any>) => void;
        /**
          * Fired whenever the tile is selected.
         */
        "onMarketTileSelectedChanged"?: (event: MarketTileCustomEvent<TMarketTileSelectedChanged>) => void;
        /**
          * Whether the tile is currently selected
         */
        "selected"?: boolean;
        /**
          * Whether to render the markup in the action slot.
         */
        "showActions"?: boolean;
        /**
          * What size tile to render.
         */
        "size"?: 'small' | 'medium';
        /**
          * Value for the tile.
         */
        "value"?: string;
    }
    interface MarketToast {
        /**
          * Optional property to pass a string to the dismiss "x" that will function as its aria-label. Defaults to "Dismiss".
         */
        "dismissButtonAriaLabel"?: string;
        /**
          * Emitted when the toast automatically dismisses.
         */
        "onMarketToastAutoDismissed"?: (event: MarketToastCustomEvent<any>) => void;
        /**
          * Emitted when the toast's dismissed button is clicked.
         */
        "onMarketToastManuallyDismissed"?: (event: MarketToastCustomEvent<any>) => void;
        /**
          * Whether or not the toast persists, ie does not autodismiss after 5s
         */
        "persistent"?: boolean;
        /**
          * The progress of the action, progress bar will be rendered for values between 0-100 inclusive
         */
        "progress"?: number;
        /**
          * toast variant that corresponds to the type of info it is conveying
         */
        "variant"?: 'info' | 'success' | 'warning' | 'critical' | 'insight';
    }
    interface MarketToaster {
    }
    interface MarketToggle {
        /**
          * Whether the toggle is active or not.
         */
        "active"?: boolean;
        /**
          * Whether the toggle is checked or not. If used as a slotted control inside of `market-row`, this will be overridden by the row's `selected` property.
         */
        "checked"?: boolean;
        /**
          * Whether the toggle is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the toggle is focused or not.
         */
        "focused"?: boolean;
        /**
          * Whether the toggle is hovered or not.
         */
        "hovered"?: boolean;
        /**
          * Fired whenever "checked" prop value changes.
         */
        "onMarketToggleChange"?: (event: MarketToggleCustomEvent<{ current: boolean; previous: boolean }>) => void;
    }
    interface MarketTooltip {
        /**
          * Functionally and visually disables the tooltip trigger.
         */
        "disabled"?: boolean;
        /**
          * Whether or not the tooltip is open. Setting it to true means it will be open by default
         */
        "expanded"?: boolean;
        /**
          * Defines what types of interaction the tooltip should have (see `market-dropdown` docs for more granular explanation)
         */
        "interaction"?: 'click' | 'hover' | 'persistent' | 'none';
        /**
          * Fired whenever the tooltip is closed.
         */
        "onMarketTooltipClosed"?: (event: MarketTooltipCustomEvent<any>) => void;
        /**
          * Fired whenever the tooltip is opened.
         */
        "onMarketTooltipOpened"?: (event: MarketTooltipCustomEvent<any>) => void;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Displaces the popper away from, or toward, the reference element in the direction of its placement. https://popper.js.org/docs/v2/modifiers/offset/#distance-1
         */
        "popoverDistance"?: number;
        /**
          * Configuration option for Popper.js (used to position the tooltip overlay). Describes the preferred placement of the popper. https://popper.js.org/docs/v2/constructors//#placement
         */
        "popoverPlacement"?: Placement;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Displaces the popover along the reference element. https://popper.js.org/docs/v2/modifiers/offset/#skidding-1
         */
        "popoverSkidding"?: number;
        /**
          * Configuration option for Popper.js (used to position `<market-popover>`). Describes the positioning strategy to use. By default, it is absolute. If your reference element is in a fixed container, use the fixed strategy. https://popper.js.org/docs/v2/constructors//#strategy
         */
        "popoverStrategy"?: PositioningStrategy;
    }
    interface IntrinsicElements {
        "market-accessory": MarketAccessory;
        "market-accordion-item": MarketAccordionItem;
        "market-action-card": MarketActionCard;
        "market-activity-indicator": MarketActivityIndicator;
        "market-activity-indicator-bar": MarketActivityIndicatorBar;
        "market-banner": MarketBanner;
        "market-blade": MarketBlade;
        "market-button": MarketButton;
        "market-button-dropdown": MarketButtonDropdown;
        "market-button-group": MarketButtonGroup;
        "market-checkbox": MarketCheckbox;
        "market-choice-button": MarketChoiceButton;
        "market-code-display": MarketCodeDisplay;
        "market-code-input": MarketCodeInput;
        "market-color-picker": MarketColorPicker;
        "market-color-picker-gradient": MarketColorPickerGradient;
        "market-color-picker-input": MarketColorPickerInput;
        "market-color-swatch": MarketColorSwatch;
        "market-color-swatch-list": MarketColorSwatchList;
        "market-content-card": MarketContentCard;
        "market-context": MarketContext;
        "market-context-manager": MarketContextManager;
        "market-date-picker": MarketDatePicker;
        "market-date-picker-date": MarketDatePickerDate;
        "market-date-picker-input-date": MarketDatePickerInputDate;
        "market-date-picker-menu": MarketDatePickerMenu;
        "market-dialog": MarketDialog;
        "market-divider": MarketDivider;
        "market-drag-handle": MarketDragHandle;
        "market-dropdown": MarketDropdown;
        "market-empty-state": MarketEmptyState;
        "market-field": MarketField;
        "market-file-upload": MarketFileUpload;
        "market-filter": MarketFilter;
        "market-filter-button": MarketFilterButton;
        "market-filter-dropdown-menu": MarketFilterDropdownMenu;
        "market-filter-group": MarketFilterGroup;
        "market-footer": MarketFooter;
        "market-header": MarketHeader;
        "market-icon": MarketIcon;
        "market-inline-section-header": MarketInlineSectionHeader;
        "market-inline-status": MarketInlineStatus;
        "market-input-password": MarketInputPassword;
        "market-input-search": MarketInputSearch;
        "market-input-text": MarketInputText;
        "market-link": MarketLink;
        "market-list": MarketList;
        "market-modal-full": MarketModalFull;
        "market-modal-partial": MarketModalPartial;
        "market-pagination": MarketPagination;
        "market-pagination-nav": MarketPaginationNav;
        "market-pagination-page-size": MarketPaginationPageSize;
        "market-pill": MarketPill;
        "market-popover": MarketPopover;
        "market-progress-tracker": MarketProgressTracker;
        "market-progress-tracker-step": MarketProgressTrackerStep;
        "market-qrcode": MarketQrcode;
        "market-radio": MarketRadio;
        "market-row": MarketRow;
        "market-segment": MarketSegment;
        "market-segmented-control": MarketSegmentedControl;
        "market-select": MarketSelect;
        "market-sheet": MarketSheet;
        "market-stepper": MarketStepper;
        "market-tab": MarketTab;
        "market-tab-list": MarketTabList;
        "market-tab-panel": MarketTabPanel;
        "market-table": MarketTable;
        "market-table-area": MarketTableArea;
        "market-table-cell": MarketTableCell;
        "market-table-column": MarketTableColumn;
        "market-table-row": MarketTableRow;
        "market-table-v2": MarketTableV2;
        "market-table-v2-cell": MarketTableV2Cell;
        "market-table-v2-group": MarketTableV2Group;
        "market-table-v2-row": MarketTableV2Row;
        "market-tabs": MarketTabs;
        "market-tag": MarketTag;
        "market-textarea": MarketTextarea;
        "market-tile": MarketTile;
        "market-toast": MarketToast;
        "market-toaster": MarketToaster;
        "market-toggle": MarketToggle;
        "market-tooltip": MarketTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "market-accessory": LocalJSX.MarketAccessory & JSXBase.HTMLAttributes<HTMLMarketAccessoryElement>;
            "market-accordion-item": LocalJSX.MarketAccordionItem & JSXBase.HTMLAttributes<HTMLMarketAccordionItemElement>;
            "market-action-card": LocalJSX.MarketActionCard & JSXBase.HTMLAttributes<HTMLMarketActionCardElement>;
            "market-activity-indicator": LocalJSX.MarketActivityIndicator & JSXBase.HTMLAttributes<HTMLMarketActivityIndicatorElement>;
            "market-activity-indicator-bar": LocalJSX.MarketActivityIndicatorBar & JSXBase.HTMLAttributes<HTMLMarketActivityIndicatorBarElement>;
            "market-banner": LocalJSX.MarketBanner & JSXBase.HTMLAttributes<HTMLMarketBannerElement>;
            "market-blade": LocalJSX.MarketBlade & JSXBase.HTMLAttributes<HTMLMarketBladeElement>;
            "market-button": LocalJSX.MarketButton & JSXBase.HTMLAttributes<HTMLMarketButtonElement>;
            "market-button-dropdown": LocalJSX.MarketButtonDropdown & JSXBase.HTMLAttributes<HTMLMarketButtonDropdownElement>;
            "market-button-group": LocalJSX.MarketButtonGroup & JSXBase.HTMLAttributes<HTMLMarketButtonGroupElement>;
            "market-checkbox": LocalJSX.MarketCheckbox & JSXBase.HTMLAttributes<HTMLMarketCheckboxElement>;
            "market-choice-button": LocalJSX.MarketChoiceButton & JSXBase.HTMLAttributes<HTMLMarketChoiceButtonElement>;
            "market-code-display": LocalJSX.MarketCodeDisplay & JSXBase.HTMLAttributes<HTMLMarketCodeDisplayElement>;
            "market-code-input": LocalJSX.MarketCodeInput & JSXBase.HTMLAttributes<HTMLMarketCodeInputElement>;
            "market-color-picker": LocalJSX.MarketColorPicker & JSXBase.HTMLAttributes<HTMLMarketColorPickerElement>;
            "market-color-picker-gradient": LocalJSX.MarketColorPickerGradient & JSXBase.HTMLAttributes<HTMLMarketColorPickerGradientElement>;
            "market-color-picker-input": LocalJSX.MarketColorPickerInput & JSXBase.HTMLAttributes<HTMLMarketColorPickerInputElement>;
            "market-color-swatch": LocalJSX.MarketColorSwatch & JSXBase.HTMLAttributes<HTMLMarketColorSwatchElement>;
            "market-color-swatch-list": LocalJSX.MarketColorSwatchList & JSXBase.HTMLAttributes<HTMLMarketColorSwatchListElement>;
            "market-content-card": LocalJSX.MarketContentCard & JSXBase.HTMLAttributes<HTMLMarketContentCardElement>;
            "market-context": LocalJSX.MarketContext & JSXBase.HTMLAttributes<HTMLMarketContextElement>;
            "market-context-manager": LocalJSX.MarketContextManager & JSXBase.HTMLAttributes<HTMLMarketContextManagerElement>;
            "market-date-picker": LocalJSX.MarketDatePicker & JSXBase.HTMLAttributes<HTMLMarketDatePickerElement>;
            "market-date-picker-date": LocalJSX.MarketDatePickerDate & JSXBase.HTMLAttributes<HTMLMarketDatePickerDateElement>;
            "market-date-picker-input-date": LocalJSX.MarketDatePickerInputDate & JSXBase.HTMLAttributes<HTMLMarketDatePickerInputDateElement>;
            "market-date-picker-menu": LocalJSX.MarketDatePickerMenu & JSXBase.HTMLAttributes<HTMLMarketDatePickerMenuElement>;
            "market-dialog": LocalJSX.MarketDialog & JSXBase.HTMLAttributes<HTMLMarketDialogElement>;
            "market-divider": LocalJSX.MarketDivider & JSXBase.HTMLAttributes<HTMLMarketDividerElement>;
            "market-drag-handle": LocalJSX.MarketDragHandle & JSXBase.HTMLAttributes<HTMLMarketDragHandleElement>;
            "market-dropdown": LocalJSX.MarketDropdown & JSXBase.HTMLAttributes<HTMLMarketDropdownElement>;
            "market-empty-state": LocalJSX.MarketEmptyState & JSXBase.HTMLAttributes<HTMLMarketEmptyStateElement>;
            "market-field": LocalJSX.MarketField & JSXBase.HTMLAttributes<HTMLMarketFieldElement>;
            "market-file-upload": LocalJSX.MarketFileUpload & JSXBase.HTMLAttributes<HTMLMarketFileUploadElement>;
            "market-filter": LocalJSX.MarketFilter & JSXBase.HTMLAttributes<HTMLMarketFilterElement>;
            "market-filter-button": LocalJSX.MarketFilterButton & JSXBase.HTMLAttributes<HTMLMarketFilterButtonElement>;
            "market-filter-dropdown-menu": LocalJSX.MarketFilterDropdownMenu & JSXBase.HTMLAttributes<HTMLMarketFilterDropdownMenuElement>;
            "market-filter-group": LocalJSX.MarketFilterGroup & JSXBase.HTMLAttributes<HTMLMarketFilterGroupElement>;
            "market-footer": LocalJSX.MarketFooter & JSXBase.HTMLAttributes<HTMLMarketFooterElement>;
            "market-header": LocalJSX.MarketHeader & JSXBase.HTMLAttributes<HTMLMarketHeaderElement>;
            "market-icon": LocalJSX.MarketIcon & JSXBase.HTMLAttributes<HTMLMarketIconElement>;
            "market-inline-section-header": LocalJSX.MarketInlineSectionHeader & JSXBase.HTMLAttributes<HTMLMarketInlineSectionHeaderElement>;
            "market-inline-status": LocalJSX.MarketInlineStatus & JSXBase.HTMLAttributes<HTMLMarketInlineStatusElement>;
            "market-input-password": LocalJSX.MarketInputPassword & JSXBase.HTMLAttributes<HTMLMarketInputPasswordElement>;
            "market-input-search": LocalJSX.MarketInputSearch & JSXBase.HTMLAttributes<HTMLMarketInputSearchElement>;
            "market-input-text": LocalJSX.MarketInputText & JSXBase.HTMLAttributes<HTMLMarketInputTextElement>;
            "market-link": LocalJSX.MarketLink & JSXBase.HTMLAttributes<HTMLMarketLinkElement>;
            "market-list": LocalJSX.MarketList & JSXBase.HTMLAttributes<HTMLMarketListElement>;
            "market-modal-full": LocalJSX.MarketModalFull & JSXBase.HTMLAttributes<HTMLMarketModalFullElement>;
            "market-modal-partial": LocalJSX.MarketModalPartial & JSXBase.HTMLAttributes<HTMLMarketModalPartialElement>;
            "market-pagination": LocalJSX.MarketPagination & JSXBase.HTMLAttributes<HTMLMarketPaginationElement>;
            "market-pagination-nav": LocalJSX.MarketPaginationNav & JSXBase.HTMLAttributes<HTMLMarketPaginationNavElement>;
            "market-pagination-page-size": LocalJSX.MarketPaginationPageSize & JSXBase.HTMLAttributes<HTMLMarketPaginationPageSizeElement>;
            "market-pill": LocalJSX.MarketPill & JSXBase.HTMLAttributes<HTMLMarketPillElement>;
            "market-popover": LocalJSX.MarketPopover & JSXBase.HTMLAttributes<HTMLMarketPopoverElement>;
            "market-progress-tracker": LocalJSX.MarketProgressTracker & JSXBase.HTMLAttributes<HTMLMarketProgressTrackerElement>;
            "market-progress-tracker-step": LocalJSX.MarketProgressTrackerStep & JSXBase.HTMLAttributes<HTMLMarketProgressTrackerStepElement>;
            "market-qrcode": LocalJSX.MarketQrcode & JSXBase.HTMLAttributes<HTMLMarketQrcodeElement>;
            "market-radio": LocalJSX.MarketRadio & JSXBase.HTMLAttributes<HTMLMarketRadioElement>;
            "market-row": LocalJSX.MarketRow & JSXBase.HTMLAttributes<HTMLMarketRowElement>;
            "market-segment": LocalJSX.MarketSegment & JSXBase.HTMLAttributes<HTMLMarketSegmentElement>;
            "market-segmented-control": LocalJSX.MarketSegmentedControl & JSXBase.HTMLAttributes<HTMLMarketSegmentedControlElement>;
            "market-select": LocalJSX.MarketSelect & JSXBase.HTMLAttributes<HTMLMarketSelectElement>;
            "market-sheet": LocalJSX.MarketSheet & JSXBase.HTMLAttributes<HTMLMarketSheetElement>;
            "market-stepper": LocalJSX.MarketStepper & JSXBase.HTMLAttributes<HTMLMarketStepperElement>;
            "market-tab": LocalJSX.MarketTab & JSXBase.HTMLAttributes<HTMLMarketTabElement>;
            "market-tab-list": LocalJSX.MarketTabList & JSXBase.HTMLAttributes<HTMLMarketTabListElement>;
            "market-tab-panel": LocalJSX.MarketTabPanel & JSXBase.HTMLAttributes<HTMLMarketTabPanelElement>;
            "market-table": LocalJSX.MarketTable & JSXBase.HTMLAttributes<HTMLMarketTableElement>;
            "market-table-area": LocalJSX.MarketTableArea & JSXBase.HTMLAttributes<HTMLMarketTableAreaElement>;
            "market-table-cell": LocalJSX.MarketTableCell & JSXBase.HTMLAttributes<HTMLMarketTableCellElement>;
            "market-table-column": LocalJSX.MarketTableColumn & JSXBase.HTMLAttributes<HTMLMarketTableColumnElement>;
            "market-table-row": LocalJSX.MarketTableRow & JSXBase.HTMLAttributes<HTMLMarketTableRowElement>;
            "market-table-v2": LocalJSX.MarketTableV2 & JSXBase.HTMLAttributes<HTMLMarketTableV2Element>;
            "market-table-v2-cell": LocalJSX.MarketTableV2Cell & JSXBase.HTMLAttributes<HTMLMarketTableV2CellElement>;
            "market-table-v2-group": LocalJSX.MarketTableV2Group & JSXBase.HTMLAttributes<HTMLMarketTableV2GroupElement>;
            "market-table-v2-row": LocalJSX.MarketTableV2Row & JSXBase.HTMLAttributes<HTMLMarketTableV2RowElement>;
            "market-tabs": LocalJSX.MarketTabs & JSXBase.HTMLAttributes<HTMLMarketTabsElement>;
            "market-tag": LocalJSX.MarketTag & JSXBase.HTMLAttributes<HTMLMarketTagElement>;
            "market-textarea": LocalJSX.MarketTextarea & JSXBase.HTMLAttributes<HTMLMarketTextareaElement>;
            "market-tile": LocalJSX.MarketTile & JSXBase.HTMLAttributes<HTMLMarketTileElement>;
            "market-toast": LocalJSX.MarketToast & JSXBase.HTMLAttributes<HTMLMarketToastElement>;
            "market-toaster": LocalJSX.MarketToaster & JSXBase.HTMLAttributes<HTMLMarketToasterElement>;
            "market-toggle": LocalJSX.MarketToggle & JSXBase.HTMLAttributes<HTMLMarketToggleElement>;
            "market-tooltip": LocalJSX.MarketTooltip & JSXBase.HTMLAttributes<HTMLMarketTooltipElement>;
        }
    }
}
